[{"repo_name":"iMeiji/Daily","path":"com.meiji.daily.bean.ZhuanlanBean","copies":"1","size":3066,"content":"package com.meiji.daily.bean\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n\n/**\n * Created by Meiji on 2018/2/9.\n */\n@Entity(tableName = \"zhuanlans\")\ndata class ZhuanlanBean(\n        var followersCount: Int, //28569\n        var creator: Creator,\n        var topics: List<Topic>,\n        var activateState: String, //activated\n        var href: String, ///api/columns/design\n        var acceptSubmission: Boolean, //true\n        var firstTime: Boolean, //false\n//        var postTopics: List<PostTopic>,\n        var pendingName: String,\n        var avatar: Avatar,\n        var canManage: Boolean, //false\n        var description: String, //关于用户体验、产品 、技术 和创业的干货集中地 | 最美应用：zuimeia.com\n//        var pendingTopics: List<Any>,\n        var nameCanEditUntil: Int, //0\n        var reason: String,\n        var banUntil: Int, //0\n        @PrimaryKey var slug: String, //design\n        var name: String, //可能性 | 产品与大设计\n        var url: String, ///design\n        var intro: String, //马力的互联网产品设计与用户体验专栏\n        var topicsCanEditUntil: Int, //0\n        var activateAuthorRequested: String, //none\n        var commentPermission: String, //anyone\n        var following: Boolean, //false\n        var postsCount: Int, //200\n        var canPost: Boolean, //false\n        var type: Int = 0\n) {\n    data class Topic(\n            var url: String, //https://www.zhihu.com/topic/19550517\n            var id: String, //19550517\n            var name: String //互联网\n    )\n\n    data class PostTopic(\n            var postsCount: Int, //1\n            var id: Int, //2\n            var name: String //知乎\n    )\n\n    data class Creator(\n            var bio: String, //马力在招聘：zhuanlan.zhihu.com/p/31904197\n            var isFollowing: Boolean, //false\n            var hash: String, //c6e85ba5d5999df4c5ce2f2903b1ce0e\n            var uid: Long, //26680571723776\n            var isOrg: Boolean, //false\n            var slug: String, //mali\n            var isFollowed: Boolean, //false\n            var description: String, //最美应用创始人 产品经理 设计师，欢迎关注微博：@Ma_Li | 他在好奇的注视着这个饶有趣味的世界 ｜ 感谢在评选知乎年度荣誉会员时为我投票的各位，一起认真！| 马力的互联网学习圈：http://mali.brixd.com     |  文章索引： https://zhuanlan.zhihu.com/p/25493627\n            var name: String, //马力\n            var profileUrl: String, //https://www.zhihu.com/people/mali\n            var avatar: Avatar,\n            var isOrgWhiteList: Boolean, //false\n            var isBanned: Boolean //false\n    ) {\n        data class Avatar(\n                var id: String, //ba332a401\n                var template: String //https://pic2.zhimg.com/{id}_{size}.jpg\n        )\n    }\n\n    data class Avatar(\n            var id: String, //v2-5410cdcdc7fb1556a27d0ddc4734e64b\n            var template: String //https://pic2.zhimg.com/{id}_{size}.jpg\n    )\n}","license":"apache-2.0"},{"repo_name":"PtrTeixeira/cookbook","path":"User","copies":"2","size":166,"content":"package com.github.ptrteixeira.cookbook.core\n\nimport java.security.Principal\n\ndata class User(val id: String) : Principal {\n    override fun getName(): String = id\n}\n","license":"mit"},{"repo_name":"KcgPrj/HouseHoldAccountBook","path":"jp.ac.kcg.domain.User","copies":"1","size":920,"content":"package jp.ac.kcg.domain\n\nimport java.io.Serializable\nimport javax.persistence.*\n\n/**\n * ユーザーの主キー\n */\n@Embeddable\ndata class UserPK (\n        /**\n         * ユーザーがログインしたクライアントのID\n         */\n        @Column(updatable = false, nullable = false)\n        var clientId: String = \"\",\n        /**\n         * クライアントで使用されているユーザーのID\n         */\n        @Column(updatable = false, nullable = false)\n        var userName: String = \"\"\n): Serializable\n\n/**\n * ユーザーのテーブル\n */\n@Entity\n@Table(indexes = arrayOf(Index(columnList = \"screenName\")))\ndata class User(\n        @EmbeddedId\n        @Column(updatable = false, nullable = false)\n        var id: UserPK = UserPK(),\n        /**\n         * ユーザーの表示用の名前\n         */\n        @Column(updatable = true, nullable = false)\n        var screenName: String = \"\"\n)\n","license":"mit"},{"repo_name":"stoyicker/dinger","path":"android.content.Context","copies":"1","size":1206,"content":"package android.content\n\nimport android.net.ConnectivityManager\nimport android.net.NetworkCapabilities\nimport android.os.Build\nimport android.widget.Toast\nimport org.stoyicker.dinger.extensions.R\n\nfun Context.startIntent(intent: Intent, noHandlersFallback: (Intent) -> Unit = {\n  Toast.makeText(\n      this,\n      getString(R.string.no_intent_handlers, intent),\n      Toast.LENGTH_LONG)\n      .show()\n}) = if (packageManager.queryIntentActivities(intent, 0).size > 0) {\n  startActivity(intent)\n} else {\n  noHandlersFallback(intent)\n}\n\nfun Context.versionCode() = with(packageManager.getPackageInfo(packageName, 0)) {\n  if (Build.VERSION.SDK_INT >= 28) {\n    longVersionCode\n  } else {\n    @Suppress(\"DEPRECATION\") // Required on API < 28\n    versionCode.toLong()\n  }\n}\n\nfun Context.isOnNotMeteredInternet() = getSystemService(ConnectivityManager::class.java)?.let {\n  val activeNetworkCapabilities = it.getNetworkCapabilities(it.activeNetwork)\n  when (activeNetworkCapabilities) {\n    null -> false\n    else -> with(activeNetworkCapabilities) {\n      hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED) &&\n          hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)\n    }\n  }\n} ?: false\n","license":"mit"},{"repo_name":"SimpleMobileTools/Simple-Notes","path":"com.simplemobiletools.notes.pro.models.Note","copies":"1","size":1686,"content":"package com.simplemobiletools.notes.pro.models\n\nimport android.content.Context\nimport android.net.Uri\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.simplemobiletools.commons.extensions.isBiometricIdAvailable\nimport com.simplemobiletools.commons.helpers.PROTECTION_FINGERPRINT\nimport com.simplemobiletools.commons.helpers.PROTECTION_NONE\nimport java.io.File\n\n@Entity(tableName = \"notes\", indices = [(Index(value = [\"id\"], unique = true))])\ndata class Note(\n    @PrimaryKey(autoGenerate = true) var id: Long?,\n    @ColumnInfo(name = \"title\") var title: String,\n    @ColumnInfo(name = \"value\") var value: String,\n    @ColumnInfo(name = \"type\") var type: Int,\n    @ColumnInfo(name = \"path\") var path: String,\n    @ColumnInfo(name = \"protection_type\") var protectionType: Int,\n    @ColumnInfo(name = \"protection_hash\") var protectionHash: String\n) {\n\n    fun getNoteStoredValue(context: Context): String? {\n        return if (path.isNotEmpty()) {\n            try {\n                if (path.startsWith(\"content://\")) {\n                    val inputStream = context.contentResolver.openInputStream(Uri.parse(path))\n                    inputStream?.bufferedReader().use { it!!.readText() }\n                } else {\n                    File(path).readText()\n                }\n            } catch (e: Exception) {\n                null\n            }\n        } else {\n            value\n        }\n    }\n\n    fun isLocked() = protectionType != PROTECTION_NONE\n\n    fun shouldBeUnlocked(context: Context): Boolean {\n        return protectionType == PROTECTION_FINGERPRINT && !context.isBiometricIdAvailable()\n    }\n}\n","license":"gpl-3.0"},{"repo_name":"charlesng/SampleAppArch","path":"com.cn29.aac.repo.user.LoginBean","copies":"1","size":499,"content":"package com.cn29.aac.repo.user\n\nimport androidx.room.Entity\nimport com.google.gson.annotations.SerializedName\n\n/**\n * Created by Charles Ng on 13/10/2017.\n */\n@Entity(tableName = \"Auth\", primaryKeys = [\"email\"])\ndata class LoginBean(@JvmField @SerializedName(\"email\") var email: String,\n                     @SerializedName(\"authType\") var authType: String,\n                     @JvmField @SerializedName(\"isLogin\") var isLogin: Int = 0,\n                     @JvmField var password: String? = null\n)","license":"apache-2.0"},{"repo_name":"theScrabi/NewPipe","path":"org.schabi.newpipe.database.feed.model.FeedLastUpdatedEntity","copies":"4","size":1231,"content":"package org.schabi.newpipe.database.feed.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.PrimaryKey\nimport org.schabi.newpipe.database.feed.model.FeedLastUpdatedEntity.Companion.FEED_LAST_UPDATED_TABLE\nimport org.schabi.newpipe.database.feed.model.FeedLastUpdatedEntity.Companion.SUBSCRIPTION_ID\nimport org.schabi.newpipe.database.subscription.SubscriptionEntity\nimport java.time.OffsetDateTime\n\n@Entity(\n    tableName = FEED_LAST_UPDATED_TABLE,\n    foreignKeys = [\n        ForeignKey(\n            entity = SubscriptionEntity::class,\n            parentColumns = [SubscriptionEntity.SUBSCRIPTION_UID],\n            childColumns = [SUBSCRIPTION_ID],\n            onDelete = ForeignKey.CASCADE, onUpdate = ForeignKey.CASCADE, deferred = true\n        )\n    ]\n)\ndata class FeedLastUpdatedEntity(\n    @PrimaryKey\n    @ColumnInfo(name = SUBSCRIPTION_ID)\n    var subscriptionId: Long,\n\n    @ColumnInfo(name = LAST_UPDATED)\n    var lastUpdated: OffsetDateTime? = null\n) {\n    companion object {\n        const val FEED_LAST_UPDATED_TABLE = \"feed_last_updated\"\n\n        const val SUBSCRIPTION_ID = \"subscription_id\"\n        const val LAST_UPDATED = \"last_updated\"\n    }\n}\n","license":"gpl-3.0"},{"repo_name":"meik99/CoffeeList","path":"rynkbit.tk.coffeelist.contract.entity.InvoiceState","copies":"1","size":297,"content":"package rynkbit.tk.coffeelist.contract.entity\n\nimport androidx.annotation.StringRes\nimport rynkbit.tk.coffeelist.R\n\nenum class InvoiceState(@StringRes val nameId: Int) {\n    OPEN(R.string.invoice_state_open),\n    CLOSED(R.string.invoice_state_closed),\n    REVOKED(R.string.invoice_state_revoked)\n}","license":"mit"},{"repo_name":"tasks/tasks","path":"com.todoroo.astrid.data.Task","copies":"1","size":21393,"content":"package com.todoroo.astrid.data\n\nimport android.content.ContentValues\nimport android.os.Parcel\nimport android.os.Parcelable\nimport androidx.annotation.IntDef\nimport androidx.core.os.ParcelCompat\nimport androidx.room.*\nimport com.google.gson.annotations.SerializedName\nimport com.todoroo.andlib.data.Table\nimport com.todoroo.andlib.sql.Field\nimport com.todoroo.andlib.utility.DateUtilities\nimport net.fortuna.ical4j.model.Recur\nimport org.tasks.Strings\nimport org.tasks.data.Tag\nimport org.tasks.date.DateTimeUtils\nimport org.tasks.date.DateTimeUtils.toDateTime\nimport org.tasks.time.DateTimeUtils.startOfDay\nimport timber.log.Timber\n\n@Entity(\n        tableName = Task.TABLE_NAME,\n        indices = [\n            Index(name = \"t_rid\", value = [\"remoteId\"], unique = true),\n            Index(name = \"active_and_visible\", value = [\"completed\", \"deleted\", \"hideUntil\"])])\nclass Task : Parcelable {\n    /** ID  */\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = \"_id\")\n    @Transient\n    var id = NO_ID\n\n    /** Name of Task  */\n    @ColumnInfo(name = \"title\")\n    var title: String? = null\n\n    @ColumnInfo(name = \"importance\")\n    var priority = Priority.NONE\n\n    /** Unixtime Task is due, 0 if not set  */\n    @ColumnInfo(name = \"dueDate\")\n    var dueDate = 0L\n\n    /** Unixtime Task should be hidden until, 0 if not set  */\n    @ColumnInfo(name = \"hideUntil\")\n    var hideUntil = 0L\n\n    /** Unixtime Task was created  */\n    @ColumnInfo(name = \"created\")\n    var creationDate = 0L\n\n    /** Unixtime Task was last touched  */\n    @ColumnInfo(name = \"modified\")\n    var modificationDate = 0L\n\n    /** Unixtime Task was completed. 0 means active  */\n    @ColumnInfo(name = \"completed\")\n    var completionDate = 0L\n\n    /** Unixtime Task was deleted. 0 means not deleted  */\n    @ColumnInfo(name = \"deleted\")\n    var deletionDate = 0L\n\n    // --- data access boilerplate\n    @ColumnInfo(name = \"notes\")\n    var notes: String? = null\n\n    @ColumnInfo(name = \"estimatedSeconds\")\n    var estimatedSeconds = 0\n\n    @ColumnInfo(name = \"elapsedSeconds\")\n    var elapsedSeconds = 0\n\n    @ColumnInfo(name = \"timerStart\")\n    var timerStart = 0L\n\n    /** Flags for when to send reminders  */\n    @ColumnInfo(name = \"notificationFlags\")\n    @SerializedName(\"ringFlags\", alternate = [\"reminderFlags\"])\n    var ringFlags = 0\n\n    /** Unixtime the last reminder was triggered  */\n    @ColumnInfo(name = \"lastNotified\")\n    var reminderLast = 0L\n\n    @ColumnInfo(name = \"recurrence\")\n    var recurrence: String? = null\n\n    @ColumnInfo(name = \"repeat_from\", defaultValue = RepeatFrom.DUE_DATE.toString())\n    var repeatFrom: Int = RepeatFrom.DUE_DATE\n\n    @ColumnInfo(name = \"calendarUri\")\n    var calendarURI: String? = null\n\n    /** Remote id  */\n    @ColumnInfo(name = \"remoteId\")\n    var remoteId: String? = NO_UUID\n\n    @ColumnInfo(name = \"collapsed\")\n    var isCollapsed = false\n\n    @ColumnInfo(name = \"parent\")\n    @Transient\n    var parent = 0L\n\n    @Ignore\n    @Transient\n    private var transitoryData: HashMap<String, Any>? = null\n\n    constructor()\n\n    @Ignore\n    constructor(parcel: Parcel) {\n        calendarURI = parcel.readString()\n        completionDate = parcel.readLong()\n        creationDate = parcel.readLong()\n        deletionDate = parcel.readLong()\n        dueDate = parcel.readLong()\n        elapsedSeconds = parcel.readInt()\n        estimatedSeconds = parcel.readInt()\n        hideUntil = parcel.readLong()\n        id = parcel.readLong()\n        priority = parcel.readInt()\n        modificationDate = parcel.readLong()\n        notes = parcel.readString()\n        recurrence = parcel.readString()\n        ringFlags = parcel.readInt()\n        reminderLast = parcel.readLong()\n        timerStart = parcel.readLong()\n        title = parcel.readString()\n        remoteId = parcel.readString() ?: NO_UUID\n        transitoryData = parcel.readHashMap(ContentValues::class.java.classLoader) as HashMap<String, Any>?\n        isCollapsed = ParcelCompat.readBoolean(parcel)\n        parent = parcel.readLong()\n    }\n\n    var uuid: String\n        get() = if (Strings.isNullOrEmpty(remoteId)) NO_UUID else remoteId!!\n        set(uuid) {\n            remoteId = uuid\n        }\n\n    /** Checks whether task is done. Requires COMPLETION_DATE  */\n    val isCompleted\n        get() = completionDate > 0\n\n    /** Checks whether task is deleted. Will return false if DELETION_DATE not read  */\n    val isDeleted\n        get() = deletionDate > 0\n\n    /** Checks whether task is hidden. Requires HIDDEN_UNTIL  */\n    val isHidden\n        get() = hideUntil > DateUtilities.now()\n\n    fun hasStartTime() = hasDueTime(hideUntil)\n\n    fun hasStartDate() = hideUntil > 0\n\n    /** Checks whether task is done. Requires DUE_DATE  */\n    fun hasDueDate() = dueDate > 0\n\n    /**\n     * Create hide until for this task.\n     *\n     * @param setting one of the HIDE_UNTIL_* constants\n     * @param customDate if specific day is set, this value\n     */\n    fun createHideUntil(setting: Int, customDate: Long): Long {\n        val date: Long = when (setting) {\n            HIDE_UNTIL_NONE -> return 0\n            HIDE_UNTIL_DUE, HIDE_UNTIL_DUE_TIME -> dueDate\n            HIDE_UNTIL_DAY_BEFORE -> dueDate - DateUtilities.ONE_DAY\n            HIDE_UNTIL_WEEK_BEFORE -> dueDate - DateUtilities.ONE_WEEK\n            HIDE_UNTIL_SPECIFIC_DAY, HIDE_UNTIL_SPECIFIC_DAY_TIME -> customDate\n            else -> throw IllegalArgumentException(\"Unknown setting $setting\")\n        }\n        if (date <= 0) {\n            return date\n        }\n        return if (setting == HIDE_UNTIL_SPECIFIC_DAY_TIME ||\n                setting == HIDE_UNTIL_DUE_TIME && hasDueTime(dueDate)) {\n            date.toDateTime().withSecondOfMinute(1).withMillisOfSecond(0).millis\n        } else {\n            date.startOfDay()\n        }\n    }\n\n    /** Checks whether this due date has a due time or only a date  */\n    fun hasDueTime(): Boolean = hasDueTime(dueDate)\n\n    val isOverdue: Boolean\n        get() {\n            val dueDate = dueDate\n            val compareTo = if (hasDueTime()) DateUtilities.now() else DateTimeUtils.newDateTime().startOfDay().millis\n            return dueDate < compareTo && !isCompleted\n        }\n\n    fun repeatAfterCompletion(): Boolean = repeatFrom == RepeatFrom.COMPLETION_DATE\n\n    fun setDueDateAdjustingHideUntil(newDueDate: Long) {\n        if (dueDate > 0) {\n            if (hideUntil > 0) {\n                hideUntil = if (newDueDate > 0) hideUntil + newDueDate - dueDate else 0\n            }\n        }\n        dueDate = newDueDate\n    }\n\n    val isRecurring: Boolean\n        get() = !Strings.isNullOrEmpty(recurrence)\n\n    fun setRecurrence(rrule: Recur?) {\n        recurrence = rrule?.toString()\n    }\n\n    fun hasNotes(): Boolean {\n        return !Strings.isNullOrEmpty(notes)\n    }\n\n    val isNotifyModeNonstop: Boolean\n        get() = ringFlags == NOTIFY_MODE_NONSTOP\n\n    val isNotifyModeFive: Boolean\n        get() = ringFlags == NOTIFY_MODE_FIVE\n\n    val isNotifyAfterDeadline: Boolean\n        get() = isReminderSet(NOTIFY_AFTER_DEADLINE)\n\n    val isNotifyAtStart: Boolean\n        get() = isReminderSet(NOTIFY_AT_START)\n\n    val isNotifyAtDeadline: Boolean\n        get() = isReminderSet(NOTIFY_AT_DEADLINE)\n\n    private fun isReminderSet(flag: Int): Boolean {\n        return ((transitoryData?.get(TRANS_REMINDERS) as? Int) ?: 0) and flag > 0\n    }\n\n    val isNew: Boolean\n        get() = id == NO_ID\n\n    /** {@inheritDoc}  */\n    override fun describeContents() = 0\n\n    /** {@inheritDoc}  */\n    override fun writeToParcel(dest: Parcel, flags: Int) {\n        dest.writeString(calendarURI)\n        dest.writeLong(completionDate)\n        dest.writeLong(creationDate)\n        dest.writeLong(deletionDate)\n        dest.writeLong(dueDate)\n        dest.writeInt(elapsedSeconds)\n        dest.writeInt(estimatedSeconds)\n        dest.writeLong(hideUntil)\n        dest.writeLong(id)\n        dest.writeInt(priority)\n        dest.writeLong(modificationDate)\n        dest.writeString(notes)\n        dest.writeString(recurrence)\n        dest.writeInt(ringFlags)\n        dest.writeLong(reminderLast)\n        dest.writeLong(timerStart)\n        dest.writeString(title)\n        dest.writeString(remoteId)\n        dest.writeMap(transitoryData as Map<*, *>?)\n        ParcelCompat.writeBoolean(dest, isCollapsed)\n        dest.writeLong(parent)\n    }\n\n    fun insignificantChange(task: Task?): Boolean {\n        if (this === task) {\n            return true\n        }\n        return if (task == null) {\n            false\n        } else id == task.id\n                && title == task.title\n                && priority == task.priority\n                && dueDate == task.dueDate\n                && hideUntil == task.hideUntil\n                && creationDate == task.creationDate\n                && modificationDate == task.modificationDate\n                && completionDate == task.completionDate\n                && deletionDate == task.deletionDate\n                && notes == task.notes\n                && estimatedSeconds == task.estimatedSeconds\n                && elapsedSeconds == task.elapsedSeconds\n                && ringFlags == task.ringFlags\n                && recurrence == task.recurrence\n                && calendarURI == task.calendarURI\n                && parent == task.parent\n                && remoteId == task.remoteId\n    }\n\n    fun googleTaskUpToDate(original: Task?): Boolean {\n        if (this === original) {\n            return true\n        }\n        return if (original == null) {\n            false\n        } else title == original.title\n                && dueDate == original.dueDate\n                && completionDate == original.completionDate\n                && deletionDate == original.deletionDate\n                && parent == original.parent\n                && notes == original.notes\n    }\n\n    fun caldavUpToDate(original: Task?): Boolean {\n        if (this === original) {\n            return true\n        }\n        return if (original == null) {\n            false\n        } else title == original.title\n                && priority == original.priority\n                && hideUntil == original.hideUntil\n                && dueDate == original.dueDate\n                && completionDate == original.completionDate\n                && deletionDate == original.deletionDate\n                && notes == original.notes\n                && recurrence == original.recurrence\n                && parent == original.parent\n                && isCollapsed == original.isCollapsed\n    }\n\n    val isSaved: Boolean\n        get() = id != NO_ID\n\n    @Synchronized\n    fun suppressSync() {\n        putTransitory(SyncFlags.SUPPRESS_SYNC, true)\n    }\n\n    @Synchronized\n    fun suppressRefresh() {\n        putTransitory(TRANS_SUPPRESS_REFRESH, true)\n    }\n\n    fun isSuppressRefresh() = checkTransitory(TRANS_SUPPRESS_REFRESH)\n\n    fun defaultReminders(flags: Int) {\n        putTransitory(TRANS_REMINDERS, flags)\n    }\n\n    var randomReminder: Long\n        get() = getTransitory(TRANS_RANDOM) ?: 0L\n        set(value) = putTransitory(TRANS_RANDOM, value)\n\n    @Synchronized\n    fun putTransitory(key: String, value: Any) {\n        if (transitoryData == null) {\n            transitoryData = HashMap()\n        }\n        transitoryData!![key] = value\n    }\n\n    val tags: ArrayList<String>\n        get() {\n            return getTransitory(Tag.KEY) ?: ArrayList()\n        }\n\n    fun setTags(tags: ArrayList<String>) {\n        if (transitoryData == null) {\n            transitoryData = HashMap()\n        }\n        transitoryData!![Tag.KEY] = tags\n    }\n\n    fun hasTransitory(key: String?): Boolean {\n        return transitoryData != null && transitoryData!!.containsKey(key)\n    }\n\n    fun <T> getTransitory(key: String?): T? {\n        return if (transitoryData == null) {\n            null\n        } else transitoryData!![key] as T?\n    }\n\n    // --- Convenience wrappers for using transitories as flags\n    fun checkTransitory(flag: String?): Boolean {\n        val trans = getTransitory<Any>(flag)\n        return trans != null\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Task) return false\n\n        if (id != other.id) return false\n        if (title != other.title) return false\n        if (priority != other.priority) return false\n        if (dueDate != other.dueDate) return false\n        if (hideUntil != other.hideUntil) return false\n        if (creationDate != other.creationDate) return false\n        if (modificationDate != other.modificationDate) return false\n        if (completionDate != other.completionDate) return false\n        if (deletionDate != other.deletionDate) return false\n        if (notes != other.notes) return false\n        if (estimatedSeconds != other.estimatedSeconds) return false\n        if (elapsedSeconds != other.elapsedSeconds) return false\n        if (timerStart != other.timerStart) return false\n        if (ringFlags != other.ringFlags) return false\n        if (reminderLast != other.reminderLast) return false\n        if (recurrence != other.recurrence) return false\n        if (calendarURI != other.calendarURI) return false\n        if (remoteId != other.remoteId) return false\n        if (isCollapsed != other.isCollapsed) return false\n        if (parent != other.parent) return false\n        if (transitoryData != other.transitoryData) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        var result = id.hashCode()\n        result = 31 * result + (title?.hashCode() ?: 0)\n        result = 31 * result + priority\n        result = 31 * result + dueDate.hashCode()\n        result = 31 * result + hideUntil.hashCode()\n        result = 31 * result + creationDate.hashCode()\n        result = 31 * result + modificationDate.hashCode()\n        result = 31 * result + completionDate.hashCode()\n        result = 31 * result + deletionDate.hashCode()\n        result = 31 * result + (notes?.hashCode() ?: 0)\n        result = 31 * result + estimatedSeconds\n        result = 31 * result + elapsedSeconds\n        result = 31 * result + timerStart.hashCode()\n        result = 31 * result + ringFlags\n        result = 31 * result + reminderLast.hashCode()\n        result = 31 * result + (recurrence?.hashCode() ?: 0)\n        result = 31 * result + (calendarURI?.hashCode() ?: 0)\n        result = 31 * result + remoteId.hashCode()\n        result = 31 * result + isCollapsed.hashCode()\n        result = 31 * result + parent.hashCode()\n        result = 31 * result + (transitoryData?.hashCode() ?: 0)\n        return result\n    }\n\n    override fun toString(): String {\n        return \"Task(id=$id, title=$title, priority=$priority, dueDate=$dueDate, hideUntil=$hideUntil, creationDate=$creationDate, modificationDate=$modificationDate, completionDate=$completionDate, deletionDate=$deletionDate, notes=$notes, estimatedSeconds=$estimatedSeconds, elapsedSeconds=$elapsedSeconds, timerStart=$timerStart, ringFlags=$ringFlags, reminderLast=$reminderLast, recurrence=$recurrence, calendarURI=$calendarURI, remoteId='$remoteId', isCollapsed=$isCollapsed, parent=$parent, transitoryData=$transitoryData)\"\n    }\n\n    @Retention(AnnotationRetention.SOURCE)\n    @IntDef(Priority.HIGH, Priority.MEDIUM, Priority.LOW, Priority.NONE)\n    annotation class Priority {\n        companion object {\n            const val HIGH = 0\n            const val MEDIUM = 1\n            const val LOW = 2\n            const val NONE = 3\n        }\n    }\n\n    @Retention(AnnotationRetention.SOURCE)\n    @IntDef(RepeatFrom.DUE_DATE, RepeatFrom.COMPLETION_DATE)\n    annotation class RepeatFrom {\n        companion object {\n            const val DUE_DATE = 0\n            const val COMPLETION_DATE = 1\n        }\n    }\n\n    fun clone(): Task {\n        val parcel = Parcel.obtain()\n        writeToParcel(parcel, 0)\n        parcel.setDataPosition(0)\n        val task = Task(parcel)\n        parcel.recycle()\n        return task\n    }\n\n    companion object {\n        const val TABLE_NAME = \"tasks\"\n        // --- table and uri\n        /** table for this model  */\n        @JvmField val TABLE = Table(TABLE_NAME)\n        @JvmField val FIELDS = Field.field(\"$TABLE_NAME.*\")\n        const val NO_ID: Long = 0\n\n        // --- properties\n        @JvmField val ID = TABLE.column(\"_id\")\n        @JvmField val TITLE = TABLE.column(\"title\")\n        @JvmField val IMPORTANCE = TABLE.column(\"importance\")\n        @JvmField val DUE_DATE = TABLE.column(\"dueDate\")\n        @JvmField val HIDE_UNTIL = TABLE.column(\"hideUntil\")\n        @JvmField val MODIFICATION_DATE = TABLE.column(\"modified\")\n        @JvmField val CREATION_DATE = TABLE.column(\"created\")\n        @JvmField val COMPLETION_DATE = TABLE.column(\"completed\")\n        @JvmField val DELETION_DATE = TABLE.column(\"deleted\")\n        @JvmField val NOTES = TABLE.column(\"notes\")\n        @JvmField val TIMER_START = TABLE.column(\"timerStart\")\n        @JvmField val PARENT = TABLE.column(\"parent\")\n        @JvmField val RECURRENCE = TABLE.column(\"recurrence\")\n\n        /** constant value for no uuid  */\n        const val NO_UUID = \"0\" // $NON-NLS-1$\n        @JvmField val UUID = TABLE.column(\"remoteId\")\n\n        /** whether to send a reminder at deadline  */\n        const val NOTIFY_AT_DEADLINE = 1 shl 1\n\n        /** whether to send reminders while task is overdue  */\n        const val NOTIFY_AFTER_DEADLINE = 1 shl 2\n\n        /** reminder mode non-stop  */\n        const val NOTIFY_MODE_NONSTOP = 1 shl 3\n\n        /** reminder mode five times (exclusive with non-stop)  */\n        const val NOTIFY_MODE_FIVE = 1 shl 4\n\n        const val NOTIFY_AT_START = 1 shl 5\n\n        @JvmField val CREATOR: Parcelable.Creator<Task> = object : Parcelable.Creator<Task> {\n            override fun createFromParcel(source: Parcel): Task? {\n                return Task(source)\n            }\n\n            override fun newArray(size: Int): Array<Task?> {\n                return arrayOfNulls(size)\n            }\n        }\n\n        /** urgency array index -> significance  */\n        const val URGENCY_NONE = 0\n        const val URGENCY_SPECIFIC_DAY = 7\n        const val URGENCY_SPECIFIC_DAY_TIME = 8\n\n        /** hide until array index -> significance  */\n        const val HIDE_UNTIL_NONE = 0\n        const val HIDE_UNTIL_DUE = 1\n        const val HIDE_UNTIL_DAY_BEFORE = 2\n        const val HIDE_UNTIL_WEEK_BEFORE = 3\n        const val HIDE_UNTIL_SPECIFIC_DAY = 4\n\n        // --- for astrid.com\n        const val HIDE_UNTIL_SPECIFIC_DAY_TIME = 5\n        const val HIDE_UNTIL_DUE_TIME = 6\n        const val URGENCY_TODAY = 1\n        const val URGENCY_TOMORROW = 2\n\n        // --- notification flags\n        const val URGENCY_DAY_AFTER = 3\n        const val URGENCY_NEXT_WEEK = 4\n        const val URGENCY_IN_TWO_WEEKS = 5\n\n        private const val TRANS_SUPPRESS_REFRESH = \"suppress-refresh\"\n        const val TRANS_REMINDERS = \"reminders\"\n        const val TRANS_RANDOM = \"random\"\n\n        private val INVALID_COUNT = \";?COUNT=-1\".toRegex()\n\n        /**\n         * Creates due date for this task. If this due date has no time associated, we move it to the last\n         * millisecond of the day.\n         *\n         * @param setting one of the URGENCY_* constants\n         * @param customDate if specific day or day & time is set, this value\n         */\n        @JvmStatic fun createDueDate(setting: Int, customDate: Long): Long {\n            val date: Long = when (setting) {\n                URGENCY_NONE -> 0\n                URGENCY_TODAY -> DateUtilities.now()\n                URGENCY_TOMORROW -> DateUtilities.now() + DateUtilities.ONE_DAY\n                URGENCY_DAY_AFTER -> DateUtilities.now() + 2 * DateUtilities.ONE_DAY\n                URGENCY_NEXT_WEEK -> DateUtilities.now() + DateUtilities.ONE_WEEK\n                URGENCY_IN_TWO_WEEKS -> DateUtilities.now() + 2 * DateUtilities.ONE_WEEK\n                URGENCY_SPECIFIC_DAY, URGENCY_SPECIFIC_DAY_TIME -> customDate\n                else -> throw IllegalArgumentException(\"Unknown setting $setting\")\n            }\n            if (date <= 0) {\n                return date\n            }\n            var dueDate = DateTimeUtils.newDateTime(date).withMillisOfSecond(0)\n            dueDate = if (setting != URGENCY_SPECIFIC_DAY_TIME) {\n                dueDate\n                        .withHourOfDay(12)\n                        .withMinuteOfHour(0)\n                        .withSecondOfMinute(0) // Seconds == 0 means no due time\n            } else {\n                dueDate.withSecondOfMinute(1) // Seconds > 0 means due time exists\n            }\n            return dueDate.millis\n        }\n\n        /** Checks whether provided due date has a due time or only a date  */\n        @JvmStatic fun hasDueTime(dueDate: Long): Boolean {\n            return dueDate > 0 && dueDate % 60000 > 0\n        }\n\n        @JvmStatic fun isValidUuid(uuid: String): Boolean {\n            return try {\n                val value = uuid.toLong()\n                value > 0\n            } catch (e: NumberFormatException) {\n                Timber.e(e)\n                isUuidEmpty(uuid)\n            }\n        }\n\n        @JvmStatic\n        fun String?.sanitizeRecur(): String? = this\n                ?.replace(\"BYDAY=;\", \"\")\n                ?.replace(INVALID_COUNT, \"\") // ical4j adds COUNT=-1 if there is an UNTIL value\n\n        @JvmStatic fun isUuidEmpty(uuid: String?): Boolean {\n            return NO_UUID == uuid || Strings.isNullOrEmpty(uuid)\n        }\n\n    }\n}\n","license":"gpl-3.0"},{"repo_name":"androidx/androidx","path":"androidx.lifecycle.LiveData","copies":"3","size":2113,"content":"/*\n * Copyright 2018 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage androidx.lifecycle\n\nimport androidx.annotation.MainThread\n\n/**\n * Adds the given [onChanged] lambda as an observer within the lifespan of the given\n * [owner] and returns a reference to observer.\n * The events are dispatched on the main thread. If LiveData already has data\n * set, it will be delivered to the onChanged.\n *\n * The observer will only receive events if the owner is in [Lifecycle.State.STARTED]\n * or [Lifecycle.State.RESUMED] state (active).\n *\n * If the owner moves to the [Lifecycle.State.DESTROYED] state, the observer will\n * automatically be removed.\n *\n * When data changes while the [owner] is not active, it will not receive any updates.\n * If it becomes active again, it will receive the last available data automatically.\n *\n * LiveData keeps a strong reference to the observer and the owner as long as the\n * given LifecycleOwner is not destroyed. When it is destroyed, LiveData removes references to\n * the observer and the owner.\n *\n * If the given owner is already in [Lifecycle.State.DESTROYED] state, LiveData\n * ignores the call.\n */\n@Deprecated(\n    \"This extension method is not required when using Kotlin 1.4. \" +\n        \"You should remove \\\"import androidx.lifecycle.observe\\\"\"\n)\n@MainThread public inline fun <T> LiveData<T>.observe(\n    owner: LifecycleOwner,\n    crossinline onChanged: (T) -> Unit\n): Observer<T> {\n    val wrappedObserver = Observer<T> { t -> onChanged.invoke(t) }\n    observe(owner, wrappedObserver)\n    return wrappedObserver\n}\n","license":"apache-2.0"},{"repo_name":"StepicOrg/stepic-android","path":"org.stepik.android.domain.review_instruction.model.ReviewInstruction","copies":"1","size":848,"content":"package org.stepik.android.domain.review_instruction.model\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport kotlinx.android.parcel.Parcelize\nimport org.stepik.android.model.ReviewStrategyType\nimport ru.nobird.android.core.model.Identifiable\n\n@Entity\n@Parcelize\ndata class ReviewInstruction(\n    @PrimaryKey\n    @SerializedName(\"id\")\n    override val id: Long,\n    @SerializedName(\"step\")\n    val step: Long,\n    @SerializedName(\"min_reviews\")\n    val minReviews: Int,\n    @SerializedName(\"strategy_type\")\n    val strategyType: ReviewStrategyType,\n    @SerializedName(\"rubrics\")\n    val rubrics: List<Long>,\n    @SerializedName(\"is_frozen\")\n    val isFrozen: Boolean,\n    @SerializedName(\"text\")\n    val text: String\n) : Identifiable<Long>, Parcelable","license":"apache-2.0"},{"repo_name":"Heiner1/AndroidAPS","path":"info.nightscout.androidaps.database.entities.ExtendedBolus","copies":"1","size":2254,"content":"package info.nightscout.androidaps.database.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport info.nightscout.androidaps.database.TABLE_EXTENDED_BOLUSES\nimport info.nightscout.androidaps.database.embedments.InterfaceIDs\nimport info.nightscout.androidaps.database.interfaces.DBEntryWithTimeAndDuration\nimport info.nightscout.androidaps.database.interfaces.TraceableDBEntry\nimport java.util.*\n\n@Entity(\n    tableName = TABLE_EXTENDED_BOLUSES,\n    foreignKeys = [ForeignKey(\n        entity = ExtendedBolus::class,\n        parentColumns = [\"id\"],\n        childColumns = [\"referenceId\"]\n    )],\n    indices = [\n        Index(\"id\"),\n        Index(\"isValid\"),\n        Index(\"endId\"),\n        Index(\"pumpSerial\"),\n        Index(\"pumpId\"),\n        Index(\"pumpType\"),\n        Index(\"referenceId\"),\n        Index(\"timestamp\")\n    ]\n)\ndata class ExtendedBolus(\n    @PrimaryKey(autoGenerate = true)\n    override var id: Long = 0,\n    override var version: Int = 0,\n    override var dateCreated: Long = -1,\n    override var isValid: Boolean = true,\n    override var referenceId: Long? = null,\n    @Embedded\n    override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(),\n    override var timestamp: Long,\n    override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(),\n    override var duration: Long,\n    var amount: Double,\n    var isEmulatingTempBasal: Boolean = false\n) : TraceableDBEntry, DBEntryWithTimeAndDuration {\n\n    init {\n        require(duration > 0)\n    }\n\n    private fun contentEqualsTo(other: ExtendedBolus): Boolean =\n        isValid == other.isValid &&\n            timestamp == other.timestamp &&\n            utcOffset == other.utcOffset &&\n            isEmulatingTempBasal == other.isEmulatingTempBasal &&\n            duration == other.duration &&\n            rate == other.rate\n\n    fun onlyNsIdAdded(previous: ExtendedBolus): Boolean =\n        previous.id != id &&\n            contentEqualsTo(previous) &&\n            previous.interfaceIDs.nightscoutId == null &&\n            interfaceIDs.nightscoutId != null\n\n    val rate: Double // in U/h\n        get() = amount * (60 * 60 * 1000.0) / duration\n}","license":"agpl-3.0"},{"repo_name":"androidx/androidx","path":"androidx.paging.DataSource","copies":"3","size":22072,"content":"/*\n * Copyright 2019 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage androidx.paging\n\nimport androidx.annotation.AnyThread\nimport androidx.annotation.VisibleForTesting\nimport androidx.annotation.WorkerThread\nimport androidx.arch.core.util.Function\nimport androidx.paging.PagingSource.LoadResult.Page.Companion.COUNT_UNDEFINED\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.Dispatchers\n\n/**\n * Base class for loading pages of snapshot data into a [PagedList].\n *\n * DataSource is queried to load pages of content into a [PagedList]. A PagedList can grow as\n * it loads more data, but the data loaded cannot be updated. If the underlying data set is\n * modified, a new PagedList / DataSource pair must be created to represent the new data.\n *\n * ### Loading Pages\n *\n * PagedList queries data from its DataSource in response to loading hints. PagedListAdapter\n * calls [PagedList.loadAround] to load content as the user scrolls in a RecyclerView.\n *\n * To control how and when a PagedList queries data from its DataSource, see\n * [PagedList.Config]. The Config object defines things like load sizes and prefetch distance.\n *\n * ### Updating Paged Data\n *\n * A PagedList / DataSource pair are a snapshot of the data set. A new pair of\n * PagedList / DataSource must be created if an update occurs, such as a reorder, insert, delete, or\n * content update occurs. A DataSource must detect that it cannot continue loading its\n * snapshot (for instance, when Database query notices a table being invalidated), and call\n * [invalidate]. Then a new PagedList / DataSource pair would be created to load data from the new\n * state of the Database query.\n *\n * To page in data that doesn't update, you can create a single DataSource, and pass it to a single\n * PagedList. For example, loading from network when the network's paging API doesn't provide\n * updates.\n *\n * To page in data from a source that does provide updates, you can create a [DataSource.Factory],\n * where each DataSource created is invalidated when an update to the data set occurs that makes the\n * current snapshot invalid. For example, when paging a query from the Database, and the table being\n * queried inserts or removes items. You can also use a DataSource.Factory to provide multiple\n * versions of network-paged lists. If reloading all content (e.g. in response to an action like\n * swipe-to-refresh) is required to get a new version of data, you can connect an explicit refresh\n * signal to call [invalidate] on the current [DataSource].\n *\n * If you have more granular update signals, such as a network API signaling an update to a single\n * item in the list, it's recommended to load data from network into memory. Then present that\n * data to the PagedList via a DataSource that wraps an in-memory snapshot. Each time the in-memory\n * copy changes, invalidate the previous DataSource, and a new one wrapping the new state of the\n * snapshot can be created.\n *\n * ### Implementing a DataSource\n *\n * To implement, extend one of the subclasses: [PageKeyedDataSource], [ItemKeyedDataSource], or\n * [PositionalDataSource].\n *\n * Use [PageKeyedDataSource] if pages you load embed keys for loading adjacent pages. For example a\n * network response that returns some items, and a next/previous page links.\n *\n * Use [ItemKeyedDataSource] if you need to use data from item `N-1` to load item\n * `N`. For example, if requesting the backend for the next comments in the list\n * requires the ID or timestamp of the most recent loaded comment, or if querying the next users\n * from a name-sorted database query requires the name and unique ID of the previous.\n *\n * Use [PositionalDataSource] if you can load pages of a requested size at arbitrary\n * positions, and provide a fixed item count. PositionalDataSource supports querying pages at\n * arbitrary positions, so can provide data to PagedLists in arbitrary order. Note that\n * PositionalDataSource is required to respect page size for efficient tiling. If you want to\n * override page size (e.g. when network page size constraints are only known at runtime), use one\n * of the other DataSource classes.\n *\n * Because a `null` item indicates a placeholder in [PagedList], DataSource may not\n * return `null` items in lists that it loads. This is so that users of the PagedList\n * can differentiate unloaded placeholder items from content that has been paged in.\n *\n * @param Key Unique identifier for item loaded from DataSource. Often an integer to represent\n * position in data set. Note - this is distinct from e.g. Room's `<Value>` Value type\n * loaded by the DataSource.\n */\npublic abstract class DataSource<Key : Any, Value : Any>\n// Since we currently rely on implementation details of two implementations, prevent external\n// subclassing, except through exposed subclasses.\ninternal constructor(internal val type: KeyType) {\n\n    private val invalidateCallbackTracker = InvalidateCallbackTracker<InvalidatedCallback>(\n        callbackInvoker = { it.onInvalidated() },\n        invalidGetter = { isInvalid },\n    )\n\n    internal val invalidateCallbackCount: Int\n        @VisibleForTesting\n        get() = invalidateCallbackTracker.callbackCount()\n\n    /**\n     * @return `true` if the data source is invalid, and can no longer be queried for data.\n     */\n    public open val isInvalid: Boolean\n        @WorkerThread\n        get() = invalidateCallbackTracker.invalid\n\n    /**\n     * Factory for DataSources.\n     *\n     * Data-loading systems of an application or library can implement this interface to allow\n     * `LiveData<PagedList>`s to be created. For example, Room can provide a\n     * [DataSource.Factory] for a given SQL query:\n     *\n     * ```\n     * @Dao\n     * interface UserDao {\n     *     @Query(\"SELECT * FROM user ORDER BY lastName ASC\")\n     *     public abstract DataSource.Factory<Integer, User> usersByLastName();\n     * }\n     * ```\n     *\n     * In the above sample, `Integer` is used because it is the `Key` type of\n     * PositionalDataSource. Currently, Room uses the `LIMIT`/`OFFSET` SQL keywords to\n     * page a large query with a PositionalDataSource.\n     *\n     * @param Key Key identifying items in DataSource.\n     * @param Value Type of items in the list loaded by the DataSources.\n     */\n    public abstract class Factory<Key : Any, Value : Any> {\n        /**\n         * Create a [DataSource].\n         *\n         * The [DataSource] should invalidate itself if the snapshot is no longer valid. If a\n         * [DataSource] becomes invalid, the only way to query more data is to create a new\n         * [DataSource] from the Factory.\n         *\n         * [androidx.paging.LivePagedListBuilder] for example will construct a new PagedList and\n         * DataSource when the current DataSource is invalidated, and pass the new PagedList through\n         * the `LiveData<PagedList>` to observers.\n         *\n         * @return the new DataSource.\n         */\n        public abstract fun create(): DataSource<Key, Value>\n\n        /**\n         * Applies the given function to each value emitted by DataSources produced by this Factory.\n         *\n         * Same as [mapByPage], but operates on individual items.\n         *\n         * @param function Function that runs on each loaded item, returning items of a potentially\n         * new type.\n         * @param ToValue Type of items produced by the new [DataSource], from the passed function.\n         * @return A new [DataSource.Factory], which transforms items using the given function.\n         *\n         * @see mapByPage\n         * @see DataSource.map\n         * @see DataSource.mapByPage\n         */\n        public open fun <ToValue : Any> map(\n            function: Function<Value, ToValue>\n        ): Factory<Key, ToValue> {\n            return mapByPage(Function { list -> list.map { function.apply(it) } })\n        }\n\n        /**\n         * Applies the given function to each value emitted by DataSources produced by this Factory.\n         *\n         * An overload of [map] that accepts a kotlin function type.\n         *\n         * Same as [mapByPage], but operates on individual items.\n         *\n         * @param function Function that runs on each loaded item, returning items of a potentially\n         * new type.\n         * @param ToValue Type of items produced by the new [DataSource], from the passed function.\n         * @return A new [DataSource.Factory], which transforms items using the given function.\n         *\n         * @see mapByPage\n         * @see DataSource.map\n         * @see DataSource.mapByPage\n         */\n        @JvmSynthetic // hidden to preserve Java source compat with arch.core.util.Function variant\n        public open fun <ToValue : Any> map(function: (Value) -> ToValue): Factory<Key, ToValue> {\n            return mapByPage(Function { list -> list.map(function) })\n        }\n\n        /**\n         * Applies the given function to each value emitted by DataSources produced by this Factory.\n         *\n         * Same as [map], but allows for batch conversions.\n         *\n         * @param function Function that runs on each loaded page, returning items of a potentially\n         * new type.\n         * @param ToValue Type of items produced by the new [DataSource], from the passed function.\n         * @return A new [DataSource.Factory], which transforms items using the given function.\n         *\n         * @see map\n         * @see DataSource.map\n         * @see DataSource.mapByPage\n         */\n        public open fun <ToValue : Any> mapByPage(\n            function: Function<List<Value>, List<ToValue>>\n        ): Factory<Key, ToValue> = object : Factory<Key, ToValue>() {\n            override fun create(): DataSource<Key, ToValue> =\n                this@Factory.create().mapByPage(function)\n        }\n\n        /**\n         * Applies the given function to each value emitted by DataSources produced by this Factory.\n         *\n         * An overload of [mapByPage] that accepts a kotlin function type.\n         *\n         * Same as [map], but allows for batch conversions.\n         *\n         * @param function Function that runs on each loaded page, returning items of a potentially\n         * new type.\n         * @param ToValue Type of items produced by the new [DataSource], from the passed function.\n         * @return A new [DataSource.Factory], which transforms items using the given function.\n         *\n         * @see map\n         * @see DataSource.map\n         * @see DataSource.mapByPage\n         */\n        @JvmSynthetic // hidden to preserve Java source compat with arch.core.util.Function variant\n        public open fun <ToValue : Any> mapByPage(\n            function: (List<Value>) -> List<ToValue>\n        ): Factory<Key, ToValue> = mapByPage(Function { function(it) })\n\n        @JvmOverloads\n        public fun asPagingSourceFactory(\n            fetchDispatcher: CoroutineDispatcher = Dispatchers.IO\n        ): () -> PagingSource<Key, Value> = SuspendingPagingSourceFactory(\n            delegate = {\n                LegacyPagingSource(fetchDispatcher, create())\n            },\n            dispatcher = fetchDispatcher\n        )\n    }\n\n    /**\n     * Applies the given function to each value emitted by the DataSource.\n     *\n     * Same as [map], but allows for batch conversions.\n     *\n     * @param function Function that runs on each loaded page, returning items of a potentially\n     * new type.\n     * @param ToValue Type of items produced by the new DataSource, from the passed function.\n     * @return A new DataSource, which transforms items using the given function.\n     *\n     * @see map\n     * @see DataSource.Factory.map\n     * @see DataSource.Factory.mapByPage\n     */\n    public open fun <ToValue : Any> mapByPage(\n        function: Function<List<Value>, List<ToValue>>\n    ): DataSource<Key, ToValue> = WrapperDataSource(this, function)\n\n    /**\n     * Applies the given function to each value emitted by the DataSource.\n     *\n     * An overload of [mapByPage] that accepts a kotlin function type.\n     *\n     * Same as [map], but allows for batch conversions.\n     *\n     * @param function Function that runs on each loaded page, returning items of a potentially\n     * new type.\n     * @param ToValue Type of items produced by the new DataSource, from the passed function.\n     * @return A new [DataSource], which transforms items using the given function.\n     *\n     * @see map\n     * @see DataSource.Factory.map\n     * @see DataSource.Factory.mapByPage\n     */\n    @JvmSynthetic // hidden to preserve Java source compat with arch.core.util.Function variant\n    public open fun <ToValue : Any> mapByPage(\n        function: (List<Value>) -> List<ToValue>\n    ): DataSource<Key, ToValue> = mapByPage(Function { function(it) })\n\n    /**\n     * Applies the given function to each value emitted by the DataSource.\n     *\n     * Same as [mapByPage], but operates on individual items.\n     *\n     * @param function Function that runs on each loaded item, returning items of a potentially\n     * new type.\n     * @param ToValue Type of items produced by the new DataSource, from the passed function.\n     * @return A new DataSource, which transforms items using the given function.\n     *\n     * @see mapByPage\n     * @see DataSource.Factory.map\n     * @see DataSource.Factory.mapByPage\n     */\n    public open fun <ToValue : Any> map(\n        function: Function<Value, ToValue>\n    ): DataSource<Key, ToValue> {\n        return mapByPage { list -> list.map { function.apply(it) } }\n    }\n\n    /**\n     * Applies the given function to each value emitted by the DataSource.\n     *\n     * An overload of [map] that accepts a kotlin function type.\n     *\n     * Same as [mapByPage], but operates on individual items.\n     *\n     * @param function Function that runs on each loaded item, returning items of a potentially\n     * new type.\n     * @param ToValue Type of items produced by the new DataSource, from the passed function.\n     * @return A new DataSource, which transforms items using the given function.\n     *\n     * @see mapByPage\n     * @see DataSource.Factory.map\n     *\n     */\n    @JvmSynthetic // hidden to preserve Java source compat with arch.core.util.Function variant\n    public open fun <ToValue : Any> map(\n        function: (Value) -> ToValue\n    ): DataSource<Key, ToValue> = map(Function { function(it) })\n\n    /**\n     * Returns true if the data source guaranteed to produce a contiguous set of items, never\n     * producing gaps.\n     */\n    internal open val isContiguous = true\n\n    internal open val supportsPageDropping = true\n\n    /**\n     * Invalidation callback for [DataSource].\n     *\n     * Used to signal when a [DataSource] a data source has become invalid, and that a new data\n     * source is needed to continue loading data.\n     */\n    public fun interface InvalidatedCallback {\n        /**\n         * Called when the data backing the list has become invalid. This callback is typically used\n         * to signal that a new data source is needed.\n         *\n         * This callback will be invoked on the thread that calls [invalidate]. It is valid for the\n         * data source to invalidate itself during its load methods, or for an outside source to\n         * invalidate it.\n         */\n        @AnyThread\n        public fun onInvalidated()\n    }\n\n    /**\n     * Add a callback to invoke when the DataSource is first invalidated.\n     *\n     * Once invalidated, a data source will not become valid again.\n     *\n     * A data source will only invoke its callbacks once - the first time [invalidate] is called, on\n     * that thread.\n     *\n     * If this [DataSource] is already invalid, the provided [onInvalidatedCallback] will be\n     * triggered immediately.\n     *\n     * @param onInvalidatedCallback The callback, will be invoked on thread that invalidates the\n     * [DataSource].\n     */\n    @AnyThread\n    @Suppress(\"RegistrationName\")\n    public open fun addInvalidatedCallback(onInvalidatedCallback: InvalidatedCallback) {\n        invalidateCallbackTracker.registerInvalidatedCallback(onInvalidatedCallback)\n    }\n\n    /**\n     * Remove a previously added invalidate callback.\n     *\n     * @param onInvalidatedCallback The previously added callback.\n     */\n    @AnyThread\n    @Suppress(\"RegistrationName\")\n    public open fun removeInvalidatedCallback(onInvalidatedCallback: InvalidatedCallback) {\n        invalidateCallbackTracker.unregisterInvalidatedCallback(onInvalidatedCallback)\n    }\n\n    /**\n     * Signal the data source to stop loading, and notify its callback.\n     *\n     * If invalidate has already been called, this method does nothing.\n     */\n    @AnyThread\n    public open fun invalidate() {\n        invalidateCallbackTracker.invalidate()\n    }\n\n    /**\n     * @param K Type of the key used to query the [DataSource].\n     * @property key Can be `null` for init, otherwise non-null\n     */\n    internal class Params<K : Any> internal constructor(\n        internal val type: LoadType,\n        val key: K?,\n        val initialLoadSize: Int,\n        val placeholdersEnabled: Boolean,\n        val pageSize: Int\n    ) {\n        init {\n            if (type != LoadType.REFRESH && key == null) {\n                throw IllegalArgumentException(\"Key must be non-null for prepend/append\")\n            }\n        }\n    }\n\n    /**\n     * @param Value Type of the data produced by a [DataSource].\n     */\n    internal class BaseResult<Value : Any> internal constructor(\n        @JvmField\n        val data: List<Value>,\n        val prevKey: Any?,\n        val nextKey: Any?,\n        val itemsBefore: Int = COUNT_UNDEFINED,\n        val itemsAfter: Int = COUNT_UNDEFINED\n    ) {\n        init {\n            if (itemsBefore < 0 && itemsBefore != COUNT_UNDEFINED) {\n                throw IllegalArgumentException(\"Position must be non-negative\")\n            }\n            if (data.isEmpty() && (itemsBefore > 0 || itemsAfter > 0)) {\n                // If non-initial, itemsBefore, itemsAfter are COUNT_UNDEFINED\n                throw IllegalArgumentException(\n                    \"Initial result cannot be empty if items are present in data set.\"\n                )\n            }\n            if (itemsAfter < 0 && itemsAfter != COUNT_UNDEFINED) {\n                throw IllegalArgumentException(\n                    \"List size + position too large, last item in list beyond totalCount.\"\n                )\n            }\n        }\n\n        /**\n         * While it may seem unnecessary to do this validation now that tiling is gone, we do\n         * this to ensure consistency with 2.1, and to ensure all loadRanges have the same page\n         * size.\n         */\n        internal fun validateForInitialTiling(pageSize: Int) {\n            if (itemsBefore == COUNT_UNDEFINED || itemsAfter == COUNT_UNDEFINED) {\n                throw IllegalStateException(\n                    \"Placeholders requested, but totalCount not provided. Please call the\" +\n                        \" three-parameter onResult method, or disable placeholders in the\" +\n                        \" PagedList.Config\"\n                )\n            }\n\n            if (itemsAfter > 0 && data.size % pageSize != 0) {\n                val totalCount = itemsBefore + data.size + itemsAfter\n                throw IllegalArgumentException(\n                    \"PositionalDataSource requires initial load size to be a multiple of page\" +\n                        \" size to support internal tiling. loadSize ${data.size}, position\" +\n                        \" $itemsBefore, totalCount $totalCount, pageSize $pageSize\"\n                )\n            }\n            if (itemsBefore % pageSize != 0) {\n                throw IllegalArgumentException(\n                    \"Initial load must be pageSize aligned.Position = $itemsBefore, pageSize =\" +\n                        \" $pageSize\"\n                )\n            }\n        }\n\n        override fun equals(other: Any?) = when (other) {\n            is BaseResult<*> ->\n                data == other.data &&\n                    prevKey == other.prevKey &&\n                    nextKey == other.nextKey &&\n                    itemsBefore == other.itemsBefore &&\n                    itemsAfter == other.itemsAfter\n            else -> false\n        }\n\n        internal companion object {\n            internal fun <T : Any> empty() = BaseResult(emptyList<T>(), null, null, 0, 0)\n\n            internal fun <ToValue : Any, Value : Any> convert(\n                result: BaseResult<ToValue>,\n                function: Function<List<ToValue>, List<Value>>\n            ) = BaseResult(\n                data = convert(function, result.data),\n                prevKey = result.prevKey,\n                nextKey = result.nextKey,\n                itemsBefore = result.itemsBefore,\n                itemsAfter = result.itemsAfter\n            )\n        }\n    }\n\n    internal enum class KeyType {\n        POSITIONAL,\n        PAGE_KEYED,\n        ITEM_KEYED\n    }\n\n    internal abstract suspend fun load(params: Params<Key>): BaseResult<Value>\n\n    internal abstract fun getKeyInternal(item: Value): Key\n\n    internal companion object {\n        internal fun <A, B> convert(\n            function: Function<List<A>, List<B>>,\n            source: List<A>\n        ): List<B> {\n            val dest = function.apply(source)\n            if (dest.size != source.size) {\n                throw IllegalStateException(\n                    \"Invalid Function $function changed return size. This is not supported.\"\n                )\n            }\n            return dest\n        }\n    }\n}\n","license":"apache-2.0"},{"repo_name":"sachil/Essence","path":"xyz.sachil.essence.model.net.bean.TypeData","copies":"1","size":1699,"content":"package xyz.sachil.essence.model.net.bean\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.TypeConverters\nimport com.google.gson.annotations.SerializedName\nimport xyz.sachil.essence.model.cache.converter.ListConverter\n\n@Entity(\n    tableName = \"type_data_table\",\n    primaryKeys = [\"id\"],\n    indices = [Index(value = [\"category\", \"type\"])],\n)\n@TypeConverters(ListConverter::class)\nopen class TypeData {\n    @ColumnInfo(name = \"category\")\n    @SerializedName(\"category\")\n    var category: String = \"\"\n\n    @ColumnInfo(name = \"id\")\n    @SerializedName(\"_id\")\n    var id: String = \"\"\n\n    @ColumnInfo(name = \"author\")\n    @SerializedName(\"author\")\n    var author: String = \"\"\n\n    @ColumnInfo(name = \"created_date\")\n    @SerializedName(\"createdAt\")\n    var createdDate: String = \"\"\n\n    @ColumnInfo(name = \"description\")\n    @SerializedName(\"desc\")\n    var description: String = \"\"\n\n    @ColumnInfo(name = \"images\")\n    @SerializedName(\"images\")\n    var images: List<String> = emptyList()\n\n    @ColumnInfo(name = \"like_counts\")\n    @SerializedName(\"likeCounts\")\n    var likeCounts: Int = 0\n\n    @ColumnInfo(name = \"published_date\")\n    @SerializedName(\"publishedAt\")\n    var publishedDate: String = \"\"\n\n    @ColumnInfo(name = \"stars\")\n    @SerializedName(\"stars\")\n    var starCount: Int = 0\n\n    @ColumnInfo(name = \"title\")\n    @SerializedName(\"title\")\n    var title: String = \"\"\n\n    @ColumnInfo(name = \"type\")\n    @SerializedName(\"type\")\n    var type: String = \"\"\n\n    @ColumnInfo(name = \"url\")\n    @SerializedName(\"url\")\n    var url: String = \"\"\n\n    @ColumnInfo(name = \"views\")\n    @SerializedName(\"views\")\n    var viewCounts: Int = 0\n}\n","license":"apache-2.0"},{"repo_name":"benoitletondor/EasyBudget","path":"com.benoitletondor.easybudgetapp.db.impl.entity.ExpenseEntity","copies":"1","size":1844,"content":"/*\n *   Copyright 2022 Benoit LETONDOR\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage com.benoitletondor.easybudgetapp.db.impl.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.benoitletondor.easybudgetapp.model.Expense\nimport com.benoitletondor.easybudgetapp.model.RecurringExpense\nimport java.time.LocalDate\n\n@Entity(tableName = \"expense\",\n        indices = [Index(value = [\"date\"], name = \"D_i\")])\nclass ExpenseEntity(@PrimaryKey(autoGenerate = true)\n                    @ColumnInfo(name = \"_expense_id\")\n                    val id: Long?,\n                    @ColumnInfo(name = \"title\")\n                    val title: String,\n                    @ColumnInfo(name = \"amount\")\n                    val amount: Long,\n                    @ColumnInfo(name = \"date\")\n                    val date: LocalDate,\n                    @ColumnInfo(name = \"checked\")\n                    val checked: Boolean,\n                    @ColumnInfo(name = \"monthly_id\")\n                    val associatedRecurringExpenseId: Long?) {\n\n    fun toExpense(associatedRecurringExpense: RecurringExpense?) = Expense(\n        id,\n        title,\n        amount / 100.0,\n        date,\n        checked,\n        associatedRecurringExpense,\n    )\n}","license":"apache-2.0"},{"repo_name":"benoitletondor/EasyBudget","path":"com.benoitletondor.easybudgetapp.db.impl.entity.RecurringExpenseEntity","copies":"1","size":1872,"content":"/*\n *   Copyright 2022 Benoit LETONDOR\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\npackage com.benoitletondor.easybudgetapp.db.impl.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.benoitletondor.easybudgetapp.model.RecurringExpense\nimport com.benoitletondor.easybudgetapp.model.RecurringExpenseType\nimport java.time.LocalDate\n\n@Entity(tableName = \"monthlyexpense\")\nclass RecurringExpenseEntity(@PrimaryKey\n                             @ColumnInfo(name = \"_expense_id\")\n                             val id: Long?,\n                             @ColumnInfo(name = \"title\")\n                             val title: String,\n                             @ColumnInfo(name = \"amount\")\n                             val originalAmount: Long,\n                             @ColumnInfo(name = \"recurringDate\")\n                             val recurringDate: LocalDate,\n                             @ColumnInfo(name = \"modified\")\n                             val modified: Boolean,\n                             @ColumnInfo(name = \"type\")\n                             val type: String) {\n\n    fun toRecurringExpense() = RecurringExpense(\n        id,\n        title,\n        originalAmount / 100.0,\n        recurringDate,\n        modified,\n        RecurringExpenseType.valueOf(type),\n    )\n}","license":"apache-2.0"},{"repo_name":"androidx/androidx","path":"androidx.sqlite.db.SupportSQLiteQuery","copies":"3","size":1391,"content":"/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage androidx.sqlite.db\n\n/**\n * A query with typed bindings. It is better to use this API instead of\n * [android.database.sqlite.SQLiteDatabase.rawQuery] because it allows\n * binding type safe parameters.\n */\ninterface SupportSQLiteQuery {\n    /**\n     * The SQL query. This query can have placeholders(?) for bind arguments.\n     */\n    val sql: String\n\n    /**\n     * Callback to bind the query parameters to the compiled statement.\n     *\n     * @param statement The compiled statement\n     */\n    fun bindTo(statement: SupportSQLiteProgram)\n\n    /**\n     * Is the number of arguments in this query. This is equal to the number of placeholders\n     * in the query string. See: https://www.sqlite.org/c3ref/bind_blob.html for details.\n     */\n    val argCount: Int\n}","license":"apache-2.0"},{"repo_name":"glodanif/BluetoothChat","path":"com.glodanif.bluetoothchat.data.entity.Conversation","copies":"1","size":385,"content":"package com.glodanif.bluetoothchat.data.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"conversation\")\ndata class Conversation(\n        @PrimaryKey\n        @ColumnInfo(name = \"address\")\n        var deviceAddress: String,\n        var deviceName: String,\n        var displayName: String,\n        var color: Int\n)\n","license":"apache-2.0"},{"repo_name":"glodanif/BluetoothChat","path":"com.glodanif.bluetoothchat.data.entity.ConversationWithMessages","copies":"1","size":433,"content":"package com.glodanif.bluetoothchat.data.entity\n\nimport androidx.room.Relation\nimport kotlin.collections.ArrayList\n\ndata class ConversationWithMessages(\n        var address: String,\n        var deviceName: String,\n        var displayName: String,\n        var color: Int\n) {\n\n    @Relation(parentColumn = \"address\", entityColumn = \"deviceAddress\", entity = ChatMessage::class)\n    var messages: List<SimpleChatMessage> = ArrayList()\n}\n","license":"apache-2.0"},{"repo_name":"StuStirling/ribot-viewer","path":"com.stustirling.ribotviewer.data.local.model.LocalRibot","copies":"1","size":718,"content":"package com.stustirling.ribotviewer.data.local.model\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport java.util.*\n\n/**\n * Created by Stu Stirling on 23/09/2017.\n */\n@Entity(tableName = \"ribots\")\ndata class LocalRibot(\n        @PrimaryKey var id: String,\n        @ColumnInfo(name = \"first_name\") var firstName: String,\n        @ColumnInfo(name = \"last_name\") var lastName: String,\n        var email: String,\n        @ColumnInfo(name = \"dob\") var dateOfBirth: Date,\n        var color: String,\n        var bio: String? = null,\n        var avatar: String? = null,\n        @ColumnInfo(name = \"active\") var isActive: Boolean)","license":"apache-2.0"},{"repo_name":"hanks-zyh/KotlinExample","path":"Person","copies":"1","size":107,"content":"package interfacejava\n\n/**\n * Created by hanks on 16/3/20.\n */\ninterface Person {\n    fun name(): String\n}\n","license":"apache-2.0"},{"repo_name":"charlesmadere/smash-ranks-android","path":"com.garpr.android.data.models.Endpoint","copies":"1","size":2071,"content":"package com.garpr.android.data.models\n\nimport android.os.Parcel\nimport android.os.Parcelable\nimport androidx.annotation.StringRes\nimport com.garpr.android.R\nimport com.garpr.android.extensions.createParcel\nimport com.garpr.android.misc.Constants\nimport com.squareup.moshi.Json\n\nenum class Endpoint(\n        val basePath: String,\n        @StringRes val title: Int\n) : Parcelable {\n\n    @Json(name = \"gar_pr\")\n    GAR_PR(Constants.GAR_PR_BASE_PATH, R.string.gar_pr),\n\n    @Json(name = \"not_gar_pr\")\n    NOT_GAR_PR(Constants.NOT_GAR_PR_BASE_PATH, R.string.not_gar_pr);\n\n    fun getPlayerWebPath(regionId: String, playerId: String): String {\n        return StringBuilder(getWebPath(regionId))\n                .append(\"/players/\")\n                .append(playerId)\n                .toString()\n    }\n\n    fun getRankingsWebPath(regionId: String): String {\n        return StringBuilder(getWebPath(regionId))\n                .append(\"/rankings\")\n                .toString()\n    }\n\n    fun getTournamentWebPath(regionId: String, tournamentId: String): String {\n        return StringBuilder(getTournamentsWebPath(regionId))\n                .append('/')\n                .append(tournamentId)\n                .toString()\n    }\n\n    fun getTournamentsWebPath(regionId: String): String {\n        return StringBuilder(getWebPath(regionId))\n                .append(\"/tournaments\")\n                .toString()\n    }\n\n    fun getWebPath(regionId: String? = null): String {\n        val stringBuilder = StringBuilder(basePath)\n                .append(\"/#/\")\n\n        if (!regionId.isNullOrBlank()) {\n            stringBuilder.append(regionId)\n        }\n\n        return stringBuilder.toString()\n    }\n\n    override fun describeContents(): Int = 0\n\n    override fun writeToParcel(dest: Parcel, flags: Int) {\n        dest.writeInt(ordinal)\n    }\n\n    companion object {\n        @JvmField\n        val CREATOR = createParcel { values()[it.readInt()] }\n\n        val ALPHABETICAL_ORDER = Comparator<Endpoint> { o1, o2 ->\n            o1.name.compareTo(o2.name, ignoreCase = true)\n        }\n    }\n\n}\n","license":"unlicense"},{"repo_name":"LordRaydenMK/android-architecture","path":"com.example.android.architecture.blueprints.todoapp.data.Task","copies":"1","size":2810,"content":"/*\n * Copyright 2016, The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.example.android.architecture.blueprints.todoapp.data\n\nimport com.google.common.base.Objects\nimport com.google.common.base.Strings\nimport java.util.*\n\n/**\n * Immutable model class for a Task.\n */\ndata class Task\n/**\n * Use this constructor to specify a completed Task if the Task already has an id (copy of\n * another Task).\n *\n * Use this constructor (String, String) to create a new active Task.\n *\n * Use this constructor (String, String, String) to create an active Task if the Task already has an id\n * (copy of another Task).\n *\n * @param title       title of the task\n * *\n * @param description description of the task\n * *\n * @param id          id of the task\n * *\n * @param isCompleted   true if the task is completed, false if it's active\n */\n@JvmOverloads constructor(val title: String?, val description: String?,\n                          val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false) {\n\n    /**\n     * Use this constructor to create a new completed Task.\n\n     * @param title       title of the task\n     * *\n     * @param description description of the task\n     * *\n     * @param completed   true if the task is completed, false if it's active\n     */\n    constructor(title: String?, description: String?, completed: Boolean) : this(title, description,\n            UUID.randomUUID().toString(), completed) {\n    }\n\n    val titleForList: String?\n        get() = if (!Strings.isNullOrEmpty(title)) title else description\n\n    val isActive: Boolean\n        get() = !isCompleted\n\n    val isEmpty: Boolean\n        get() = Strings.isNullOrEmpty(title) && Strings.isNullOrEmpty(description)\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other == null || javaClass != other.javaClass) return false\n        val task = other as Task\n        return Objects.equal(id, task.id) &&\n                Objects.equal(title, task.title) &&\n                Objects.equal(description, task.description)\n    }\n\n    override fun hashCode(): Int {\n        return Objects.hashCode(id, title, description)\n    }\n\n    override fun toString(): String {\n        return \"Task with title \" + title!!\n    }\n}\n","license":"apache-2.0"},{"repo_name":"Andr3Carvalh0/mGBA","path":"io.mgba.data.local.model.Game","copies":"1","size":1822,"content":"package io.mgba.data.local.model\n\nimport java.io.File\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\nimport io.mgba.data.FileManager\nimport io.mgba.utilities.Constants.PLATFORM_UNKNOWN\nimport io.mgba.widgets.RecyclerViewItem\n\n@Entity(tableName = \"Games\")\nclass Game : RecyclerViewItem{\n\n    @PrimaryKey\n    @ColumnInfo(name = \"id\")\n    lateinit var file: File\n\n    @ColumnInfo\n    var name: String? = null\n        get() {\n            field?.let { return it }\n            return FileManager.getFileWithoutExtension(file)\n        }\n\n    @ColumnInfo\n    var description: String? = null\n\n    @ColumnInfo\n    var released: String? = null\n\n    @ColumnInfo\n    var developer: String? = null\n\n    @ColumnInfo\n    var genre: String? = null\n\n    @ColumnInfo\n    var cover: String? = null\n\n    @ColumnInfo\n    var mD5: String? = null\n\n    @ColumnInfo(name = \"favourite\")\n    var isFavourite = false\n\n    @ColumnInfo\n    var platform: Int = PLATFORM_UNKNOWN\n\n    constructor()\n\n    @Ignore\n    constructor(path: String, name: String, description: String, released: String, developer: String, genre: String, coverURL: String, MD5: String, favourite: Boolean, platform: Int) {\n        this.file = File(path)\n        this.name = name\n        this.description = description\n        this.released = released\n        this.developer = developer\n        this.genre = genre\n        this.cover = coverURL\n        this.mD5 = MD5\n        this.isFavourite = favourite\n        this.platform = platform\n    }\n\n    @Ignore\n    constructor(path: String, platform: Int) {\n        this.file = File(path)\n        this.platform = platform\n    }\n\n    override fun getLetterForItem(): String {\n        name?.let { return it.substring(0, 1).toUpperCase() }\n        return \"?\"\n    }\n\n}\n","license":"mpl-2.0"},{"repo_name":"ediTLJ/novelty","path":"ro.edi.novelty.data.db.entity.DbNews","copies":"1","size":1252,"content":"/*\n* Copyright 2019 Eduard Scarlat\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\npackage ro.edi.novelty.data.db.entity\n\nimport androidx.room.*\nimport androidx.room.ForeignKey.CASCADE\n\n@Entity(\n    tableName = \"news\",\n    indices = [Index(value = [\"feed_id\", \"pub_date\"])],\n    foreignKeys = [ForeignKey(\n        entity = DbFeed::class,\n        parentColumns = arrayOf(\"id\"),\n        childColumns = arrayOf(\"feed_id\"),\n        onDelete = CASCADE\n    )]\n)\ndata class DbNews(\n    @PrimaryKey val id: Int,\n    @ColumnInfo(name = \"feed_id\") val feedId: Int,\n    val title: String,\n    val text: String,\n    val author: String?,\n    @ColumnInfo(name = \"pub_date\") val pubDate: Long,\n    @ColumnInfo(name = \"upd_date\") val updDate: Long,\n    val url: String?\n)","license":"apache-2.0"},{"repo_name":"tonyofrancis/Fetch","path":"com.tonyodev.fetch2.Status","copies":"1","size":1460,"content":"package com.tonyodev.fetch2\n\n/**\n * Enumeration which contains the different states a download\n * could go through.\n * */\nenum class Status constructor(val value: Int) {\n\n    /** Indicates when a download is newly created and not yet queued.*/\n    NONE(0),\n\n    /** Indicates when a newly created download is queued.*/\n    QUEUED(1),\n\n    /** Indicates when a download is currently being downloaded.*/\n    DOWNLOADING(2),\n\n    /** Indicates when a download is paused.*/\n    PAUSED(3),\n\n    /** Indicates when a download is completed.*/\n    COMPLETED(4),\n\n    /** Indicates when a download is cancelled.*/\n    CANCELLED(5),\n\n    /** Indicates when a download has failed.*/\n    FAILED(6),\n\n    /** Indicates when a download has been removed and is no longer managed by Fetch.*/\n    REMOVED(7),\n\n    /** Indicates when a download has been deleted and is no longer managed by Fetch.*/\n    DELETED(8),\n\n    /** Indicates when a download has been Added to Fetch for management.*/\n    ADDED(9);\n\n    companion object {\n\n        @JvmStatic\n        fun valueOf(value: Int): Status {\n            return when (value) {\n                0 -> NONE\n                1 -> QUEUED\n                2 -> DOWNLOADING\n                3 -> PAUSED\n                4 -> COMPLETED\n                5 -> CANCELLED\n                6 -> FAILED\n                7 -> REMOVED\n                8 -> DELETED\n                9 -> ADDED\n                else -> NONE\n            }\n        }\n\n    }\n\n}","license":"apache-2.0"},{"repo_name":"xwiki-contrib/android-authenticator","path":"org.xwiki.android.sync.contactdb.AccountAllUsersEntity","copies":"1","size":524,"content":"package org.xwiki.android.sync.contactdb\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport org.xwiki.android.sync.bean.ObjectSummary\n\nconst val ALL_USERS_LIST_TABLE = \"all_users_list_table\"\nconst val AllUsersListColumn = \"dataList\"\n\n@Entity(tableName = ALL_USERS_LIST_TABLE)\ndata class AccountAllUsersEntity(\n    @PrimaryKey\n    @ColumnInfo(name = UserAccountIdColumn) val id: UserAccountId,\n    @ColumnInfo(name = AllUsersListColumn) var allUsersList: List<ObjectSummary>\n)","license":"lgpl-2.1"},{"repo_name":"colesadam/hill-lists","path":"uk.colessoft.android.hilllist.domain.entity.Bagging","copies":"1","size":484,"content":"package uk.colessoft.android.hilllist.domain.entity\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport java.util.*\n\n@Entity(tableName = \"Bagging\")\ndata class Bagging (@PrimaryKey\n                     val b_id: Long,\n                    val dateClimbed: Date,\n                    val notes: String = \"\"){\n    companion object {\n        const val KEY_DATECLIMBED = \"dateClimbed\"\n        const val KEY_NOTES = \"notes\"\n        const val BAGGING_TABLE = \"Bagging\"\n    }\n\n}","license":"mit"},{"repo_name":"AoEiuV020/PaNovel","path":"cc.aoeiuv020.panovel.data.entity.Novel","copies":"1","size":6823,"content":"package cc.aoeiuv020.panovel.data.entity\n\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport cc.aoeiuv020.panovel.api.NovelChapter\nimport cc.aoeiuv020.panovel.util.noCover\nimport cc.aoeiuv020.panovel.util.notNullOrReport\nimport java.util.*\n\n/**\n * 一本小说由“网站名-作者名-小说名”共同唯一确定，\n * 通过网站名找到网站上下文类，\n * 要有extra额外的信息才能请求到小说详情页，\n *\n * Created by AoEiuV020 on 2018.05.22-09:14:02.\n */\n@Entity(\n        indices = [\n            (Index(\n                    value = [\"site\", \"author\", \"name\"],\n                    unique = true\n            )),\n            (Index(\n                    value = [\"bookshelf\"],\n                    unique = false\n            ))\n        ]\n)\n@Suppress(\"MemberVisibilityCanBePrivate\")\ndata class Novel(\n        /**\n         * 普通的id,\n         * 要给个null才能autoGenerate，\n         * 插入时拿到id再赋值回来，所以要可变var，\n         */\n        @PrimaryKey(autoGenerate = true)\n        var id: Long? = null,\n        /**\n         * 网站名，\n         * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"],\n         * 不外键到网站表，那张表不稳定，\n         *\n         * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\",\n         */\n        var site: String,\n        /**\n         * 作者名，\n         * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"],\n         */\n        var author: String,\n        /**\n         * 小说名，\n         * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"],\n         */\n        var name: String,\n        /**\n         * 用于请求小说详情页的额外信息，\n         * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"],\n         * [cc.aoeiuv020.panovel.api.NovelItem.extra]\n         */\n        var detail: String,\n\n        // 下面的有默认值，每次阅读后改变，\n\n        /**\n         * 阅读进度，\n         * 阅读至的章节索引，\n         */\n        var readAtChapterIndex: Int = 0,\n        /**\n         * 章节内的阅读进度，\n         * 看到第几页或者第几个字，具体没决定，\n         */\n        var readAtTextIndex: Int = 0,\n        /**\n         * 是否在书架上，sqlite没有分区，只建个索引，\n         */\n        var bookshelf: Boolean = false,\n        /**\n         * 章节数，\n         */\n        var chaptersCount: Int = 0,\n\n        // 小说详情页的信息，一次更新后写死，\n        // 之后就非空，\n        /**\n         * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空，\n         * 默认一样统一填充一张写着没有封面的图片地址，不空，\n         * 然后展示时判断，是noCover就填充内置的暂无封面的封面，\n         * 直接改成可空更好，但是sqlite不能改字段，\n         */\n        var image: String = noCover,\n        /**\n         * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空，\n         */\n        var introduction: String = VALUE_NULL,\n        /**\n         * 用于请求小说章节列表的extra, 获取小说详情后不可空，\n         * 不能给默认值，要留着判断是否需要请求小说详情页，\n         * [cc.aoeiuv020.panovel.api.NovelDetail.extra]\n         *\n         * 对于本地线文本小说就是编码，\n         */\n        var chapters: String? = null,\n\n        // 下面的本方该可空，强行给个初值，\n        // 有机会就更新，\n        /**\n         * 最新章节名, 刷新章节列表时更新，\n         * 这个章节名只用于展示，所以可以给个默认空字符串，\n         */\n        var lastChapterName: String = VALUE_NULL,\n        /**\n         * 阅读进度章节名, 阅读后更新，\n         * 这个章节名只用于展示，所以可以给个默认空字符串，\n         */\n        var readAtChapterName: String = VALUE_NULL,\n        /**\n         * 上次阅读时间，在阅读后更新，\n         * 时间只用于对比和展示，没阅读过就是默认最小时间，\n         */\n        var readTime: Date = Date(0),\n        /**\n         * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新，\n         * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱，\n         * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段，\n         * 时间只用于对比和展示，没刷新过章节就是默认最小时间，\n         */\n        var updateTime: Date = Date(0),\n        /**\n         * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新，\n         * 时间只用于对比和展示，没刷新过章节就是默认最小时间，\n         */\n        var checkUpdateTime: Date = Date(0),\n        /**\n         * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime],\n         * 是否刷出更新只判断章节数量，\n         *\n         * 用来对比阅读时间就知道是否是已读了，\n         * 时间只用于对比和展示，没刷新过章节就是默认最小时间，\n         */\n        var receiveUpdateTime: Date = Date(0),\n        /**\n         * 置顶时间，书架按这个排序，\n         * 不置顶的给个最小时间，\n         * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题，\n         * 没法设置个按钮置顶时显示取消置顶，\n         */\n        var pinnedTime: Date = Date(0)\n) {\n    // id的非空版本，实在是要经常用id, 而且是不可能为空的id,\n    val nId: Long get() = id.notNullOrReport()\n    // chapters的非空版本，用的不多，\n    val nChapters: String get() = chapters.notNullOrReport()\n\n    /**\n     * 打印日志经常要用，这三者决定一本小说，\n     */\n    val bookId: String get() = \"$name.$author.${site.removePrefix(\".\")}\"\n\n    val isLocalNovel: Boolean get() = site.startsWith(\".\")\n\n    fun readAt(index: Int, chapters: List<NovelChapter>) {\n        readAtChapterIndex = index\n        if (index in chapters.indices) {\n            // 仅限于章节数正常的情况，否则可能chapters为空list导致崩溃，\n            // 同时改保存的章节名，\n            readAtChapterName = chapters[index].name\n        }\n    }\n\n    companion object {\n        // 用作传参时的key,\n        const val KEY_ID: String = \"id\"\n        const val VALUE_NULL: String = \"(null)\"\n    }\n}\n","license":"gpl-3.0"},{"repo_name":"AoEiuV020/PaNovel","path":"cc.aoeiuv020.panovel.data.entity.NovelMinimal","copies":"1","size":1687,"content":"package cc.aoeiuv020.panovel.data.entity\n\nimport cc.aoeiuv020.panovel.api.NovelItem\nimport cc.aoeiuv020.panovel.server.dal.model.autogen.Novel as ServerNovel\n\n/**\n * Created by AoEiuV020 on 2018.05.28-16:30:44.\n */\ndata class NovelMinimal(\n        /**\n         * 网站名，\n         * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"],\n         * 不外键到网站表，那张表不稳定，\n         */\n        var site: String,\n        /**\n         * 作者名，\n         * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"],\n         */\n        var author: String,\n        /**\n         * 小说名，\n         * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"],\n         */\n        var name: String,\n        /**\n         * 用于请求小说详情页的额外信息，\n         * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"],\n         * [cc.aoeiuv020.panovel.api.NovelItem.extra]\n         */\n        var detail: String\n) {\n    constructor(novelItem: NovelItem)\n            : this(novelItem.site, novelItem.author, novelItem.name, novelItem.extra)\n\n    constructor(novel: ServerNovel)\n            : this(novel.site, novel.author, novel.name, novel.detail)\n\n    constructor(novel: Novel)\n            : this(novel.site, novel.author, novel.name, novel.detail)\n\n    constructor(novel: NovelWithProgress)\n            : this(novel.site, novel.author, novel.name, novel.detail)\n\n    constructor(novel: NovelWithProgressAndPinnedTime)\n            : this(novel.site, novel.author, novel.name, novel.detail)\n}","license":"gpl-3.0"},{"repo_name":"AoEiuV020/PaNovel","path":"cc.aoeiuv020.panovel.data.entity.BookListItem","copies":"1","size":1428,"content":"package cc.aoeiuv020.panovel.data.entity\n\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\n\n/**\n * Created by AoEiuV020 on 2018.05.24-16:18:20.\n */\n@Entity(\n        // 主键可以当成bookListId的索引，\n        primaryKeys = [\"bookListId\", \"novelId\"],\n        // 警告说两个外键都要索引，这里补上novelId的索引，\n        // 大概是操作父字段时要查询字字段，所以建议加上索引，\n        // 没什么必要的感觉，并不打算删改Novel表中的id,\n        indices = [\n            (Index(\n                    value = [\"novelId\"],\n                    unique = false\n            ))\n        ],\n        foreignKeys = [\n            (ForeignKey(\n                    entity = BookList::class,\n                    parentColumns = [\"id\"],\n                    childColumns = [\"bookListId\"],\n                    onDelete = ForeignKey.CASCADE\n            )),\n            (ForeignKey(\n                    entity = Novel::class,\n                    parentColumns = [\"id\"],\n                    childColumns = [\"novelId\"],\n                    onDelete = ForeignKey.CASCADE\n            ))\n        ]\n)\ndata class BookListItem(\n        /**\n         * 书单的名字，建个索引，同名的认为是同一个书单，\n         */\n        val bookListId: Long,\n        /**\n         * 外键id, 对应小说表中的id,\n         */\n        val novelId: Long\n)","license":"gpl-3.0"},{"repo_name":"AoEiuV020/PaNovel","path":"cc.aoeiuv020.panovel.data.entity.BookList","copies":"1","size":1071,"content":"package cc.aoeiuv020.panovel.data.entity\n\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport cc.aoeiuv020.panovel.util.notNullOrReport\nimport java.util.*\n\n/**\n * Created by AoEiuV020 on 2018.05.24-17:15:36.\n */\n\n/**\n * 书单，\n */\n@Entity(indices = [\n    Index(\n            value = [\"uuid\"],\n            unique = true\n    )\n])\ndata class BookList(\n        /**\n         * 普通的id,\n         * 要给个null才能autoGenerate，\n         * 插入时拿到id再赋值回来，所以要可变var，\n         */\n        @PrimaryKey(autoGenerate = true)\n        val id: Long? = null,\n        val name: String,\n        /**\n         * 创建书单的时间，用于展示时排序，\n         */\n        val createTime: Date = Date(),\n        /**\n         * 唯一的uuid, 为了避免重复导入同一个书单造成重复，\n         */\n        val uuid: String = UUID.randomUUID().toString()\n) {\n    // id的非空版本，实在是要经常用id, 而且是不可能为空的id,\n    val nId: Long get() = id.notNullOrReport()\n}","license":"gpl-3.0"},{"repo_name":"hitoshura25/Media-Player-Omega-Android","path":"com.vmenon.mpo.persistence.room.entity.DownloadEntity","copies":"1","size":719,"content":"package com.vmenon.mpo.persistence.room.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.vmenon.mpo.persistence.room.base.entity.BaseEntity\n\n@Entity(tableName = \"downloads\")\ndata class DownloadEntity(\n    @PrimaryKey(autoGenerate = true) val downloadId: Long,\n    val requesterId: Long,\n    val downloadRequestType: String,\n    val downloadQueueId: Long,\n    val downloadUrl: String,\n    val name: String,\n    val imageUrl: String?,\n    @ColumnInfo(defaultValue = \"0\") val downloadAttempt: Int\n) : BaseEntity<DownloadEntity> {\n    override fun id(): Long = downloadId\n    override fun copyWithNewId(newId: Long): DownloadEntity = copy(downloadId = newId)\n}\n","license":"apache-2.0"},{"repo_name":"android/nowinandroid","path":"com.google.samples.apps.nowinandroid.core.database.model.TopicEntity","copies":"1","size":1488,"content":"/*\n * Copyright 2022 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.samples.apps.nowinandroid.core.database.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.google.samples.apps.nowinandroid.core.model.data.Topic\n\n/**\n * Defines a topic a user may follow.\n * It has a many to many relationship with [NewsResourceEntity]\n */\n@Entity(\n    tableName = \"topics\",\n)\ndata class TopicEntity(\n    @PrimaryKey\n    val id: String,\n    val name: String,\n    val shortDescription: String,\n    @ColumnInfo(defaultValue = \"\")\n    val longDescription: String,\n    @ColumnInfo(defaultValue = \"\")\n    val url: String,\n    @ColumnInfo(defaultValue = \"\")\n    val imageUrl: String,\n)\n\nfun TopicEntity.asExternalModel() = Topic(\n    id = id,\n    name = name,\n    shortDescription = shortDescription,\n    longDescription = longDescription,\n    url = url,\n    imageUrl = imageUrl,\n)\n","license":"apache-2.0"},{"repo_name":"hazuki0x0/YuzuBrowser","path":"jp.hazuki.yuzubrowser.download.core.data.DownloadFileInfo","copies":"1","size":1894,"content":"/*\n * Copyright (C) 2017-2021 Hazuki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage jp.hazuki.yuzubrowser.download.core.data\n\nimport android.net.Uri\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"downloads\")\ndata class DownloadFileInfo(\n    @PrimaryKey(autoGenerate = true)\n    var id: Long,\n    val url: String,\n    val mimeType: String,\n    var root: Uri,\n    val name: String,\n    var size: Long,\n    var resumable: Boolean = false,\n    var startTime: Long = System.currentTimeMillis(),\n    var state: Int\n) {\n\n    constructor (\n        url: String,\n        mimeType: String,\n        root: Uri,\n        name: String,\n        size: Long,\n        resumable: Boolean = false,\n        startTime: Long = System.currentTimeMillis()\n    ) : this(0, url, mimeType, root, name, size, resumable, startTime, STATE_DOWNLOADING)\n\n    constructor(\n        root: Uri,\n        file: DownloadFile,\n        meta: MetaData\n    ) : this(file.url, meta.mineType, root, file.name ?: meta.name, meta.size, meta.resumable)\n\n    @Ignore\n    var currentSize = 0L\n\n    @Ignore\n    var transferSpeed = 0L\n\n    companion object {\n        const val STATE_DOWNLOADING = 0\n        const val STATE_DOWNLOADED = 1\n        const val STATE_CANCELED = 2\n        const val STATE_PAUSED = 4\n        const val STATE_UNKNOWN_ERROR = 512\n    }\n}\n","license":"apache-2.0"},{"repo_name":"BreakOutEvent/breakout-backend","path":"backend.model.location.Location","copies":"1","size":1987,"content":"package backend.model.location\n\nimport backend.exceptions.DomainException\nimport backend.model.BasicEntity\nimport backend.model.event.Team\nimport backend.model.misc.Coord\nimport backend.model.posting.Posting\nimport backend.model.user.Participant\nimport backend.util.distanceCoordsKM\nimport backend.util.distanceCoordsListKM\nimport java.time.LocalDateTime\nimport javax.persistence.*\n\n@Entity\nclass Location : BasicEntity {\n\n    @Embedded\n    lateinit var coord: Coord\n        private set\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    var uploader: Participant? = null\n\n    @OneToOne(mappedBy = \"location\", fetch = FetchType.LAZY)\n    var posting: Posting? = null\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    var team: Team? = null\n\n    var isDuringEvent: Boolean = false\n\n    lateinit var date: LocalDateTime\n\n    var distance: Double = 0.0\n\n    @Embedded\n    var speedToLocation: SpeedToLocation? = null\n\n    @ElementCollection(fetch = FetchType.EAGER)\n    @MapKeyColumn(name = \"location_data_key\")\n    @Column(name = \"location_data_value\")\n    var locationData: Map<String, String> = mapOf()\n\n    private constructor() : super()\n\n    constructor(coord: Coord, uploader: Participant, date: LocalDateTime, locationData: Map<String, String>) {\n        this.coord = coord\n        this.team = uploader.getCurrentTeam() ?: throw DomainException(\"A user without a team can't upload locations\")\n        this.uploader = uploader\n        this.date = date\n        this.distance = distanceCoordsKM(from = team!!.event.startingLocation, to = coord)\n        if (team!!.event.city == \"Anywhere\") {\n            // filter locations\n            var locations = this.team!!.locations.filter{ it.isDuringEvent }\n            this.distance = distanceCoordsListKM(locations.map{Coord(it.coord.latitude, it.coord.longitude)} + coord)\n        }\n        this.locationData = locationData\n    }\n\n}\n\nclass SpeedToLocation(val speed: Double? = null, val secondsDifference: Long? = null, val distanceKm: Double? = null)\n","license":"agpl-3.0"},{"repo_name":"camsteffen/polite","path":"me.camsteffen.polite.model.CalendarRuleEntity","copies":"1","size":768,"content":"package me.camsteffen.polite.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.PrimaryKey\n\n@Entity(\n    tableName = \"calendar_rule\",\n    foreignKeys = [\n        ForeignKey(\n            entity = RuleEntity::class,\n            parentColumns = [\"id\"],\n            childColumns = [\"id\"],\n            onDelete = ForeignKey.CASCADE,\n            onUpdate = ForeignKey.CASCADE\n        )\n    ]\n)\ndata class CalendarRuleEntity(\n    @PrimaryKey\n    val id: Long,\n\n    @ColumnInfo(name = \"busy_only\")\n    val busyOnly: Boolean,\n\n    @Embedded(prefix = \"match_\")\n    val matchBy: CalendarEventMatchByEntity,\n\n    @ColumnInfo(name = \"inverse_match\")\n    val inverseMatch: Boolean\n)\n","license":"mpl-2.0"},{"repo_name":"camsteffen/polite","path":"me.camsteffen.polite.model.CalendarRuleCalendar","copies":"1","size":814,"content":"package me.camsteffen.polite.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\n\n@Entity(\n    tableName = \"calendar_rule_calendar\",\n    foreignKeys = [\n        ForeignKey(\n            entity = RuleEntity::class,\n            parentColumns = [\"id\"],\n            childColumns = [\"rule_id\"],\n            onDelete = ForeignKey.CASCADE,\n            onUpdate = ForeignKey.CASCADE\n        )\n    ]\n)\nclass CalendarRuleCalendar(\n    @PrimaryKey(autoGenerate = true)\n    val id: Long,\n\n    @ColumnInfo(name = \"rule_id\", index = true)\n    val ruleId: Long,\n\n    @ColumnInfo(name = \"calendar_id\")\n    val calendarId: Long\n) {\n    @Ignore\n    constructor(ruleId: Long, calendarId: Long) : this(0L, ruleId, calendarId)\n}\n","license":"mpl-2.0"},{"repo_name":"camsteffen/polite","path":"me.camsteffen.polite.model.CalendarRuleEntry","copies":"1","size":1170,"content":"package me.camsteffen.polite.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Embedded\nimport androidx.room.Relation\n\nclass CalendarRuleEntry(\n    @Embedded\n    val ruleBase: RuleEntity,\n\n    @ColumnInfo(name = \"busy_only\")\n    val busyOnly: Boolean,\n\n    @Embedded(prefix = \"match_\")\n    val matchBy: CalendarEventMatchByEntity,\n\n    @ColumnInfo(name = \"inverse_match\")\n    val inverseMatch: Boolean,\n\n    @Relation(\n        entity = CalendarRuleCalendar::class,\n        entityColumn = \"rule_id\",\n        parentColumn = \"id\",\n        projection = [\"calendar_id\"]\n    )\n    val calendarIds: Set<Long>,\n\n    @Relation(\n        entity = CalendarRuleKeyword::class,\n        entityColumn = \"rule_id\",\n        parentColumn = \"id\",\n        projection = [\"keyword\"]\n    )\n    val keywords: Set<String>\n) {\n    fun asCalendarRule() = CalendarRule(\n        id = ruleBase.id,\n        name = ruleBase.name,\n        enabled = ruleBase.enabled,\n        vibrate = ruleBase.vibrate,\n        busyOnly = busyOnly,\n        inverseMatch = inverseMatch,\n        matchBy = matchBy.asCalendarEventMatchBy()!!,\n        calendarIds = calendarIds,\n        keywords = keywords\n    )\n}\n","license":"mpl-2.0"},{"repo_name":"camsteffen/polite","path":"me.camsteffen.polite.model.ScheduleRuleEntry","copies":"1","size":753,"content":"package me.camsteffen.polite.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Embedded\nimport me.camsteffen.polite.rule.ScheduleRuleSchedule\nimport org.threeten.bp.LocalTime\n\nclass ScheduleRuleEntry(\n    @Embedded\n    val ruleBase: RuleEntity,\n    @ColumnInfo(name = \"begin_time\")\n    val beginTime: LocalTime,\n    @ColumnInfo(name = \"end_time\")\n    val endTime: LocalTime,\n    @Embedded\n    val days: DaysOfWeekEntity\n) {\n    fun asScheduleRule(): ScheduleRule {\n        return ScheduleRule(\n            id = ruleBase.id,\n            name = ruleBase.name,\n            enabled = ruleBase.enabled,\n            vibrate = ruleBase.vibrate,\n            schedule = ScheduleRuleSchedule(beginTime, endTime, days.toDayOfWeekSet())\n        )\n    }\n}\n","license":"mpl-2.0"},{"repo_name":"camsteffen/polite","path":"me.camsteffen.polite.model.ScheduleRuleEntity","copies":"1","size":768,"content":"package me.camsteffen.polite.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.PrimaryKey\nimport org.threeten.bp.LocalTime\n\n@Entity(\n    tableName = \"schedule_rule\",\n    foreignKeys = [\n        ForeignKey(\n            entity = RuleEntity::class,\n            parentColumns = [\"id\"],\n            childColumns = [\"id\"],\n            onDelete = ForeignKey.CASCADE,\n            onUpdate = ForeignKey.CASCADE\n        )\n    ]\n)\ndata class ScheduleRuleEntity(\n    @PrimaryKey\n    val id: Long,\n    @ColumnInfo(name = \"begin_time\")\n    val beginTime: LocalTime,\n    @ColumnInfo(name = \"end_time\")\n    val endTime: LocalTime,\n    @Embedded\n    val daysOfWeek: DaysOfWeekEntity\n)\n","license":"mpl-2.0"},{"repo_name":"rolandvitezhu/TodoCloud","path":"com.rolandvitezhu.todocloud.data.User","copies":"1","size":1578,"content":"package com.rolandvitezhu.todocloud.data\n\nimport android.database.Cursor\nimport android.os.Parcelable\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport com.rolandvitezhu.todocloud.network.api.user.dto.LoginUserResponse\nimport kotlinx.android.parcel.Parcelize\n\n@Entity(tableName = \"user\")\n@Parcelize\ndata class User(\n    @PrimaryKey(autoGenerate = true)\n    var _id: Long?,\n    @ColumnInfo(name = \"user_online_id\")\n    @SerializedName(\"user_online_id\")\n    var userOnlineId: String?,\n    @ColumnInfo(name = \"name\")\n    @SerializedName(\"name\")\n    var name: String = \"\",\n    @ColumnInfo(name = \"email\")\n    @SerializedName(\"email\")\n    var email: String = \"\",\n    @ColumnInfo(name = \"api_key\")\n    @SerializedName(\"api_key\")\n    var apiKey: String?,\n    @Ignore\n    @SerializedName(\"password\")\n    var password: String = \"\"\n) : Parcelable {\n    constructor() : this(\n            null,\n            null,\n            \"\",\n            \"\",\n            \"\",\n            \"\"\n    )\n    constructor(cursor: Cursor) : this(\n            cursor.getLong(0),\n            cursor.getString(1),\n            cursor.getString(2),\n            cursor.getString(3),\n            cursor.getString(4),\n            \"\"\n    )\n    constructor(loginUserResponse: LoginUserResponse) : this(\n            null,\n            loginUserResponse.userOnlineId,\n            loginUserResponse.name,\n            loginUserResponse.email,\n            loginUserResponse.apiKey,\n            \"\"\n    )\n}","license":"mit"},{"repo_name":"rolandvitezhu/TodoCloud","path":"com.rolandvitezhu.todocloud.data.Todo","copies":"1","size":4614,"content":"package com.rolandvitezhu.todocloud.data\n\nimport android.database.Cursor\nimport android.os.Parcelable\nimport android.text.format.DateUtils\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport com.rolandvitezhu.todocloud.R\nimport com.rolandvitezhu.todocloud.app.AppController.Companion.appContext\nimport kotlinx.android.parcel.Parcelize\n\n@Entity(tableName = \"todo\")\n@Parcelize\ndata class Todo (\n        @PrimaryKey(autoGenerate = true)\n        var _id: Long?,\n        @ColumnInfo(name = \"todo_online_id\")\n        @SerializedName(\"todo_online_id\")\n        var todoOnlineId: String?,\n        @ColumnInfo(name = \"user_online_id\")\n        @SerializedName(\"user_online_id\")\n        var userOnlineId: String?,\n        @ColumnInfo(name = \"list_online_id\")\n        @SerializedName(\"list_online_id\")\n        var listOnlineId: String?,\n        @ColumnInfo(name = \"title\")\n        @SerializedName(\"title\")\n        var title: String?,\n        @ColumnInfo(name = \"priority\")\n        @SerializedName(\"priority\")\n        var priority: Boolean? = false,\n        @ColumnInfo(name = \"due_date\")\n        @SerializedName(\"due_date\")\n        var dueDate: Long = 0,\n        @ColumnInfo(name = \"reminder_date_time\")\n        @SerializedName(\"reminder_date_time\")\n        var reminderDateTime: Long = 0,\n        @ColumnInfo(name = \"description\")\n        @SerializedName(\"description\")\n        var description: String?,\n        @ColumnInfo(name = \"completed\")\n        @SerializedName(\"completed\")\n        var completed: Boolean? = false,\n        @ColumnInfo(name = \"row_version\")\n        @SerializedName(\"row_version\")\n        var rowVersion: Int = 0,\n        @ColumnInfo(name = \"deleted\")\n        @SerializedName(\"deleted\")\n        var deleted: Boolean? = false,\n        @ColumnInfo(name = \"dirty\")\n        var dirty: Boolean = false,\n        @ColumnInfo(name = \"position\")\n        @SerializedName(\"position\")\n        var position: Double = 5.0,\n        @Ignore\n        var isSelected: Boolean = false\n) : Parcelable {\n    constructor() : this(\n            null,\n            null,\n            null,\n            null,\n            null,\n            false,\n            0,\n            0,\n            null,\n            false,\n            0,\n            false,\n            false,\n            5.0,\n            false\n    )\n    constructor(cursor: Cursor) : this(\n            cursor.getLong(0),\n            cursor.getString(1),\n            cursor.getString(2),\n            cursor.getString(3),\n            cursor.getString(4),\n            cursor.getInt(5) != 0,\n            cursor.getLong(6),\n            cursor.getLong(7),\n            cursor.getString(8),\n            cursor.getInt(9) != 0,\n            cursor.getInt(10),\n            cursor.getInt(11) != 0,\n            cursor.getInt(12) != 0,\n            if (cursor.getDouble(13) == 0.0) 5.0 else cursor.getDouble(13)\n    )\n    constructor(todo: Todo) : this(\n            todo._id,\n            todo.todoOnlineId,\n            todo.userOnlineId,\n            todo.listOnlineId,\n            todo.title,\n            todo.priority,\n            todo.dueDate,\n            todo.reminderDateTime,\n            todo.description,\n            todo.completed,\n            todo.rowVersion,\n            todo.deleted,\n            todo.dirty,\n            todo.position,\n            todo.isSelected\n    )\n    val formattedDueDate: String\n        get() {\n            if (dueDate != 0L) {\n                return DateUtils.formatDateTime(\n                        appContext,\n                        dueDate,\n                        (DateUtils.FORMAT_SHOW_DATE or\n                                DateUtils.FORMAT_NUMERIC_DATE or\n                                DateUtils.FORMAT_SHOW_YEAR)\n                )\n            } else {\n                return appContext!!.getString(R.string.all_noduedate)\n            }\n        }\n    val formattedReminderDateTime: String\n        get() {\n            if (reminderDateTime != 0L) {\n                return DateUtils.formatDateTime(\n                        appContext,\n                        reminderDateTime,\n                        (DateUtils.FORMAT_SHOW_DATE\n                                or DateUtils.FORMAT_NUMERIC_DATE\n                                or DateUtils.FORMAT_SHOW_YEAR\n                                or DateUtils.FORMAT_SHOW_TIME)\n                )\n            } else {\n                return appContext!!.getString(R.string.all_noreminder)\n            }\n        }\n    val onPredefinedList: Boolean\n        get() = listOnlineId == null\n}","license":"mit"},{"repo_name":"rolandvitezhu/TodoCloud","path":"com.rolandvitezhu.todocloud.data.List","copies":"1","size":1938,"content":"package com.rolandvitezhu.todocloud.data\n\nimport android.database.Cursor\nimport android.os.Parcelable\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport kotlinx.android.parcel.Parcelize\n\n@Entity(tableName = \"list\")\n@Parcelize\ndata class List (\n        @PrimaryKey(autoGenerate = true)\n        var _id: Long?,\n        @ColumnInfo(name = \"list_online_id\")\n        @SerializedName(\"list_online_id\")\n        var listOnlineId: String?,\n        @ColumnInfo(name = \"user_online_id\")\n        @SerializedName(\"user_online_id\")\n        var userOnlineId: String?,\n        @ColumnInfo(name = \"category_online_id\")\n        @SerializedName(\"category_online_id\")\n        var categoryOnlineId: String?,\n        @ColumnInfo(name = \"title\")\n        @SerializedName(\"title\")\n        var title: String = \"\",\n        @ColumnInfo(name = \"row_version\")\n        @SerializedName(\"row_version\")\n        var rowVersion: Int = 0,\n        @ColumnInfo(name = \"deleted\")\n        @SerializedName(\"deleted\")\n        var deleted: Boolean? = false,\n        @ColumnInfo(name = \"dirty\")\n        var dirty: Boolean = false,\n        @ColumnInfo(name = \"position\")\n        @SerializedName(\"position\")\n        var position: Double = 5.0,\n        @Ignore\n        var isSelected: Boolean = false\n) : Parcelable {\n    constructor() : this (\n            null,\n            null,\n            null,\n            null,\n            \"\",\n            0,\n            false,\n            false,\n            5.0\n    )\n    constructor(cursor: Cursor) : this (\n        cursor.getLong(0),\n        cursor.getString(1),\n        cursor.getString(2),\n        cursor.getString(3),\n        cursor.getString(4),\n        cursor.getInt(5),\n        cursor.getInt(6) != 0,\n        cursor.getInt(7) != 0,\n            if (cursor.getDouble(8) == 0.0) 5.0 else cursor.getDouble(8)\n    )\n}","license":"mit"},{"repo_name":"rolandvitezhu/TodoCloud","path":"com.rolandvitezhu.todocloud.data.Category","copies":"1","size":1882,"content":"package com.rolandvitezhu.todocloud.data\n\nimport android.database.Cursor\nimport android.os.Parcelable\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport kotlinx.android.parcel.Parcelize\n\n@Entity(tableName = \"category\")\n@Parcelize\ndata class Category (\n        @PrimaryKey(autoGenerate = true)\n        var _id: Long?,\n        @ColumnInfo(name = \"category_online_id\")\n        @SerializedName(\"category_online_id\")\n        var categoryOnlineId: String?,\n        @ColumnInfo(name = \"user_online_id\")\n        @SerializedName(\"user_online_id\")\n        var userOnlineId: String?,\n        @ColumnInfo(name = \"title\")\n        @SerializedName(\"title\")\n        var title: String = \"\",\n        @ColumnInfo(name = \"row_version\")\n        @SerializedName(\"row_version\")\n        var rowVersion: Int = 0,\n        @ColumnInfo(name = \"deleted\")\n        @SerializedName(\"deleted\")\n        var deleted: Boolean? = false,\n        @ColumnInfo(name = \"dirty\")\n        var dirty: Boolean = false,\n        @ColumnInfo(name = \"position\")\n        @SerializedName(\"position\")\n        var position: Double = 5.0,\n        @Ignore\n        var isSelected: Boolean = false\n) : Parcelable {\n    constructor() : this(\"\")\n    constructor(title: String) : this(\n            null,\n            null,\n            null,\n            title,\n            0,\n            false,\n            false,\n            5.0\n    )\n    constructor(cursor: Cursor) : this(\n        cursor.getLong(0),\n        cursor.getString(1),\n        cursor.getString(2),\n        cursor.getString(3),\n        cursor.getInt(4),\n        cursor.getInt(5) != 0,\n        cursor.getInt(6) != 0,\n        if (cursor.getDouble(7) == 0.0) 5.0 else cursor.getDouble(7)\n    )\n\n    override fun toString(): String {\n        return title\n    }\n}","license":"mit"},{"repo_name":"SimonMarquis/FCM-toolbox","path":"fr.smarquis.fcm.data.model.Message","copies":"1","size":891,"content":"package fr.smarquis.fcm.data.model\n\nimport androidx.annotation.Keep\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity\n@Keep\ndata class Message(\n        @PrimaryKey\n        @ColumnInfo(name = \"messageId\") val messageId: String,\n        @ColumnInfo(name = \"from\") val from: String?,\n        @ColumnInfo(name = \"to\") val to: String?,\n        @ColumnInfo(name = \"data\") val data: Map<String, String>,\n        @ColumnInfo(name = \"collapseKey\") val collapseKey: String?,\n        @ColumnInfo(name = \"messageType\") val messageType: String?,\n        @ColumnInfo(name = \"sentTime\") val sentTime: Long,\n        @ColumnInfo(name = \"ttl\") val ttl: Int,\n        @ColumnInfo(name = \"priority\") val priority: Int,\n        @ColumnInfo(name = \"originalPriority\") val originalPriority: Int,\n        @ColumnInfo(name = \"payload\") val payload: Payload? = null)\n","license":"apache-2.0"},{"repo_name":"stefanmedack/cccTV","path":"de.stefanmedack.ccctv.persistence.entities.ConferenceWithEvents","copies":"1","size":572,"content":"package de.stefanmedack.ccctv.persistence.entities\n\nimport android.arch.persistence.room.Embedded\nimport android.arch.persistence.room.Relation\n\ndata class ConferenceWithEvents @JvmOverloads constructor(\n        @Embedded\n        val conference: Conference,\n\n        @Relation(parentColumn = \"acronym\", entityColumn = \"conference_acronym\", entity = Event::class)\n        var events: List<Event> = listOf()\n        // TODO events should be immutable, but currently can't be because of Rooms constructor handling\n        // https://issuetracker.google.com/issues/67273372\n)\n","license":"apache-2.0"},{"repo_name":"google/android-fhir","path":"com.google.android.fhir.db.impl.entities.SyncedResourceEntity","copies":"1","size":1128,"content":"/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.android.fhir.db.impl.entities\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport org.hl7.fhir.r4.model.ResourceType\n\n/**\n * Class that models a table that holds all resource types that were synced and the highest\n * `_lastUpdate` value of each resource type.\n */\n@Entity\ninternal data class SyncedResourceEntity(\n  /** Resource synced */\n  @PrimaryKey val resourceType: ResourceType,\n  /** The highest `_lastUpdate` value of the resources synced of a specific type */\n  val lastUpdate: String\n)\n","license":"apache-2.0"},{"repo_name":"LateNightProductions/CardKeeper","path":"com.awscherb.cardkeeper.data.model.ScannedCode","copies":"1","size":377,"content":"package com.awscherb.cardkeeper.data.model\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.google.zxing.BarcodeFormat\n\n@Entity(tableName = \"scannedCode\")\ndata class ScannedCode(\n    @PrimaryKey(autoGenerate = true)\n    var id: Int = 0,\n    var format: BarcodeFormat,\n    var text: String,\n    var title: String,\n    var created: Long = 0\n) : BaseModel()","license":"apache-2.0"},{"repo_name":"hitoshura25/Media-Player-Omega-Android","path":"com.vmenon.mpo.persistence.room.entity.ShowSearchEntity","copies":"1","size":350,"content":"package com.vmenon.mpo.persistence.room.entity\n\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(indices = [Index(value = [\"searchTerm\"], unique = true)], tableName = \"showSearch\")\ndata class ShowSearchEntity(\n    @PrimaryKey(autoGenerate = true)\n    val showSearchId: Long,\n    val searchTerm: String\n)","license":"apache-2.0"},{"repo_name":"StepicOrg/stepic-android","path":"org.stepik.android.domain.rubric.model.Rubric","copies":"2","size":554,"content":"package org.stepik.android.domain.rubric.model\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport kotlinx.android.parcel.Parcelize\n\n@Entity\n@Parcelize\ndata class Rubric(\n    @PrimaryKey\n    @SerializedName(\"id\")\n    val id: Long,\n    @SerializedName(\"instruction\")\n    val instruction: Long,\n    @SerializedName(\"text\")\n    val text: String,\n    @SerializedName(\"cost\")\n    val cost: Int,\n    @SerializedName(\"position\")\n    val position: Int\n) : Parcelable\n","license":"apache-2.0"},{"repo_name":"google/ground-android","path":"com.google.android.ground.persistence.local.room.entity.TileSetEntity","copies":"1","size":1180,"content":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.android.ground.persistence.local.room.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.google.android.ground.persistence.local.room.models.TileSetEntityState\n\n@Entity(tableName = \"tile_sources\")\ndata class TileSetEntity(\n  @ColumnInfo(name = \"id\") @PrimaryKey val id: String,\n  @ColumnInfo(name = \"path\") val path: String,\n  @ColumnInfo(name = \"url\") val url: String,\n  @ColumnInfo(name = \"state\") val state: TileSetEntityState,\n  @ColumnInfo(name = \"basemap_count\") val offlineAreaReferenceCount: Int\n)\n","license":"apache-2.0"},{"repo_name":"Heiner1/AndroidAPS","path":"info.nightscout.androidaps.database.entities.DeviceStatus","copies":"1","size":1423,"content":"package info.nightscout.androidaps.database.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport info.nightscout.androidaps.database.TABLE_DEVICE_STATUS\nimport info.nightscout.androidaps.database.embedments.InterfaceIDs\nimport info.nightscout.androidaps.database.interfaces.DBEntryWithTime\nimport java.util.*\n\n@Entity(tableName = TABLE_DEVICE_STATUS,\n    foreignKeys = [],\n    indices = [\n        Index(\"id\"),\n        Index(\"nightscoutId\"),\n        Index(\"timestamp\")\n    ])\ndata class DeviceStatus(\n    @PrimaryKey(autoGenerate = true)\n    var id: Long = 0,\n    @Embedded\n    var interfaceIDs_backing: InterfaceIDs? = null,\n    override var timestamp: Long,\n    override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(),\n    var device: String? = null,\n    var pump: String? = null,\n    var enacted: String? = null,\n    var suggested: String? = null,\n    var iob: String? = null,\n    var uploaderBattery: Int = 0,\n    var configuration: String? = null\n\n) : DBEntryWithTime {\n\n    var interfaceIDs: InterfaceIDs\n        get() {\n            var value = this.interfaceIDs_backing\n            if (value == null) {\n                value = InterfaceIDs()\n                interfaceIDs_backing = value\n            }\n            return value\n        }\n        set(value) {\n            interfaceIDs_backing = value\n        }\n}","license":"agpl-3.0"},{"repo_name":"SimpleMobileTools/Simple-Gallery","path":"com.simplemobiletools.gallery.pro.models.Favorite","copies":"2","size":525,"content":"package com.simplemobiletools.gallery.pro.models\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"favorites\", indices = [Index(value = [\"full_path\"], unique = true)])\ndata class Favorite(\n        @PrimaryKey(autoGenerate = true) var id: Int?,\n        @ColumnInfo(name = \"full_path\") var fullPath: String,\n        @ColumnInfo(name = \"filename\") var filename: String,\n        @ColumnInfo(name = \"parent_path\") var parentPath: String)\n","license":"gpl-3.0"},{"repo_name":"aosp-mirror/platform_frameworks_support","path":"androidx.room.integration.kotlintestapp.vo.BookWithPublisher","copies":"1","size":837,"content":"/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage androidx.room.integration.kotlintestapp.vo\n\nimport androidx.room.Embedded\n\ndata class BookWithPublisher(val bookId: String, val title: String,\n                             @Embedded val publisher: Publisher)\n","license":"apache-2.0"},{"repo_name":"androidx/androidx","path":"androidx.room.integration.kotlintestapp.vo.Author","copies":"3","size":1021,"content":"/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage androidx.room.integration.kotlintestapp.vo\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport androidx.room.TypeConverters\nimport java.util.Date\n\n@Entity\n@TypeConverters(DateConverter::class, StringToIntListConverters::class)\ndata class Author(\n    @PrimaryKey val authorId: String,\n    val name: String,\n    val dateOfBirth: Date? = null,\n    val aList: List<Int>? = null\n)\n","license":"apache-2.0"},{"repo_name":"AndroidX/androidx","path":"androidx.room.integration.kotlintestapp.vo.Book","copies":"3","size":1457,"content":"/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage androidx.room.integration.kotlintestapp.vo\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.PrimaryKey\nimport androidx.room.RoomWarnings\nimport androidx.room.TypeConverters\n\n@SuppressWarnings(RoomWarnings.MISSING_INDEX_ON_FOREIGN_KEY_CHILD)\n@Entity(\n    foreignKeys = arrayOf(\n        ForeignKey(\n            entity = Publisher::class,\n            parentColumns = arrayOf(\"publisherId\"),\n            childColumns = arrayOf(\"bookPublisherId\"),\n            deferred = true\n        )\n    )\n)\ndata class Book(\n    @PrimaryKey val bookId: String,\n    val title: String,\n    val bookPublisherId: String,\n    @ColumnInfo(defaultValue = \"0\")\n    @field:TypeConverters(Lang::class)\n    val languages: Set<Lang>,\n    @ColumnInfo(defaultValue = \"0\")\n    val salesCnt: Int\n)\n","license":"apache-2.0"},{"repo_name":"androidx/androidx","path":"androidx.room.integration.kotlintestapp.vo.BookAuthor","copies":"3","size":1512,"content":"/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage androidx.room.integration.kotlintestapp.vo\n\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\n\n@Entity(\n    foreignKeys = arrayOf(\n        ForeignKey(\n            entity = Book::class,\n            parentColumns = arrayOf(\"bookId\"),\n            childColumns = arrayOf(\"bookId\"),\n            onUpdate = ForeignKey.CASCADE,\n            onDelete = ForeignKey.CASCADE,\n            deferred = true\n        ),\n        ForeignKey(\n            entity = Author::class,\n            parentColumns = arrayOf(\"authorId\"),\n            childColumns = arrayOf(\"authorId\"),\n            onUpdate = ForeignKey.CASCADE,\n            onDelete = ForeignKey.CASCADE,\n            deferred = true\n        )\n    ),\n    primaryKeys = [\"bookId\", \"authorId\"],\n    indices = [Index(\"bookId\"), Index(\"authorId\")]\n)\ndata class BookAuthor(val bookId: String, val authorId: String)\n","license":"apache-2.0"},{"repo_name":"androidx/androidx","path":"androidx.room.integration.kotlintestapp.vo.PublisherWithBooks","copies":"3","size":1023,"content":"/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage androidx.room.integration.kotlintestapp.vo\n\nimport androidx.room.Embedded\nimport androidx.room.Relation\n\nclass PublisherWithBooks {\n    @Embedded var publisher: Publisher? = null\n    @Relation(\n        parentColumn = \"publisherId\", // publisher.publisherId\n        entityColumn = \"bookPublisherId\", // book.bookPublisherId\n        entity = Book::class\n    )\n    var books: List<Book>? = null\n}\n","license":"apache-2.0"},{"repo_name":"androidx/androidx","path":"androidx.room.integration.kotlintestapp.vo.BookWithJavaEntity","copies":"3","size":1025,"content":"/*\n * Copyright (C) 2018 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage androidx.room.integration.kotlintestapp.vo\n\nimport androidx.room.Embedded\nimport androidx.room.Relation\nimport androidx.room.RoomWarnings\n\n@SuppressWarnings(RoomWarnings.MISMATCHED_GETTER)\nclass BookWithJavaEntity {\n    @Embedded\n    var book: Book? = null\n    @Relation(parentColumn = \"bookId\", entityColumn = \"bookId\", entity = JavaEntity::class)\n    var javaEntities: List<JavaEntity>? = null\n}","license":"apache-2.0"},{"repo_name":"toastkidjp/Yobidashi_kt","path":"jp.toastkid.article_viewer.bookmark.Bookmark","copies":"2","size":519,"content":"/*\n * Copyright (c) 2019 toastkidjp.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompany this distribution.\n * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html.\n */\npackage jp.toastkid.article_viewer.bookmark\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n/**\n * @author toastkidjp\n */\n@Entity\ndata class Bookmark(@PrimaryKey(autoGenerate = false) var id: Int)","license":"epl-1.0"},{"repo_name":"michaelkourlas/voipms-sms-client","path":"net.kourlas.voipms_sms.database.entities.Deleted","copies":"1","size":1240,"content":"/*\n * VoIP.ms SMS\n * Copyright (C) 2021 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage net.kourlas.voipms_sms.database.entities\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = Deleted.TABLE_NAME)\nclass Deleted(\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0,\n    @ColumnInfo(name = COLUMN_VOIP_ID) val voipId: Long,\n    @ColumnInfo(name = COLUMN_DID) val did: String\n) {\n    companion object {\n        const val TABLE_NAME = \"deleted\"\n\n        const val COLUMN_DATABASE_ID = \"DatabaseId\"\n        const val COLUMN_VOIP_ID = \"VoipId\"\n        const val COLUMN_DID = \"Did\"\n    }\n}","license":"apache-2.0"},{"repo_name":"artjimlop/clean-architecture-kotlin","path":"com.example.data.datasources.dtos.entities.ImageEntity","copies":"1","size":453,"content":"package com.example.data.datasources.dtos.entities\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity(tableName = \"images\")\ndata class ImageEntity (@ColumnInfo(name = \"url\") val url: String,\n                        @ColumnInfo(name = \"comicId\") val id: Int) {\n    @ColumnInfo(name = \"imageId\")\n    @PrimaryKey(autoGenerate = true) var imageId: Long = 0\n}","license":"apache-2.0"},{"repo_name":"denzelby/telegram-bot-bumblebee","path":"com.github.bumblebee.command.statistics.entity.Statistic","copies":"2","size":1013,"content":"package com.github.bumblebee.command.statistics.entity\n\nimport java.time.LocalDate\nimport javax.persistence.*\n\n@Entity\n@Table(name = \"BB_STATISTICS\")\nclass Statistic {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    var id: Long? = null\n\n    var postedDate: LocalDate? = null\n\n    var messageCount: Int = 0\n\n    var chatId: Long = 0\n\n    var authorId: Long = 0\n\n    var authorName: String? = null\n\n    @Suppress(\"unused\")\n    constructor()\n\n    constructor(postedDate: LocalDate,\n                messageCount: Int,\n                chatId: Long,\n                authorId: Long,\n                authorName: String?) {\n        this.postedDate = postedDate\n        this.messageCount = messageCount\n        this.chatId = chatId\n        this.authorId = authorId\n        this.authorName = authorName\n    }\n\n    override fun toString(): String {\n        return \"Statistic(id=$id, postedDate=$postedDate, messageCount=$messageCount, chatId=$chatId, authorId=$authorId, authorName=$authorName)\"\n    }\n}","license":"mit"},{"repo_name":"vhromada/Catalog","path":"com.github.vhromada.catalog.domain.Program","copies":"1","size":2193,"content":"package com.github.vhromada.catalog.domain\n\nimport javax.persistence.Column\nimport javax.persistence.Entity\nimport javax.persistence.GeneratedValue\nimport javax.persistence.GenerationType\nimport javax.persistence.Id\nimport javax.persistence.SequenceGenerator\nimport javax.persistence.Table\n\n/**\n * A class represents program.\n *\n * @author Vladimir Hromada\n */\n@Entity\n@Table(name = \"programs\")\n@Suppress(\"JpaDataSourceORMInspection\")\ndata class Program(\n    /**\n     * ID\n     */\n    @Id\n    @SequenceGenerator(name = \"program_generator\", sequenceName = \"programs_sq\", allocationSize = 1)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"program_generator\")\n    var id: Int?,\n\n    /**\n     * UUID\n     */\n    val uuid: String,\n\n    /**\n     * Name\n     */\n    @Column(name = \"program_name\")\n    var name: String,\n\n    /**\n     * Normalized name\n     */\n    @Column(name = \"normalized_program_name\")\n    var normalizedName: String,\n\n    /**\n     * URL to english Wikipedia page about program\n     */\n    @Column(name = \"wiki_en\")\n    var wikiEn: String?,\n\n    /**\n     * URL to czech Wikipedia page about program\n     */\n    @Column(name = \"wiki_cz\")\n    var wikiCz: String?,\n\n    /**\n     * Count of media\n     */\n    @Column(name = \"media_count\")\n    var mediaCount: Int,\n\n    /**\n     * Format\n     */\n    var format: String,\n\n    /**\n     * True if there is crack\n     */\n    var crack: Boolean,\n\n    /**\n     * True if there is serial key\n     */\n    @Column(name = \"serial_key\")\n    var serialKey: Boolean,\n\n    /**\n     * Other data\n     */\n    @Column(name = \"other_data\")\n    var otherData: String?,\n\n    /**\n     * Note\n     */\n    var note: String?,\n) : Audit() {\n\n    /**\n     * Merges program.\n     *\n     * @param program program\n     */\n    @Suppress(\"DuplicatedCode\")\n    fun merge(program: Program) {\n        name = program.name\n        normalizedName = program.normalizedName\n        wikiEn = program.wikiEn\n        wikiCz = program.wikiCz\n        mediaCount = program.mediaCount\n        format = program.format\n        crack = program.crack\n        serialKey = program.serialKey\n        otherData = program.otherData\n        note = program.note\n    }\n\n}\n","license":"mit"},{"repo_name":"vhromada/Catalog","path":"com.github.vhromada.catalog.domain.io.ProgramStatistics","copies":"1","size":292,"content":"package com.github.vhromada.catalog.domain.io\n\n/**\n * A class represents statistics for programs.\n *\n * @author Vladimir Hromada\n */\ndata class ProgramStatistics(\n    /**\n     * Count of programs\n     */\n    val count: Long,\n\n    /**\n     * Count of media\n     */\n    val mediaCount: Long?\n)\n","license":"mit"},{"repo_name":"StPatrck/edac","path":"com.phapps.elitedangerous.companion.data.entities.CommanderProfile","copies":"1","size":1204,"content":"package com.phapps.elitedangerous.companion.data.entities\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Embedded\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport android.support.annotation.NonNull\nimport android.support.annotation.Nullable\n\n/**\n * Collection of detailed Commander information from various sources.\n *\n * Except for the Commander [name], all fields are serialized prior to storage. This has been\n * done to reduce the complexity of the database schema.\n */\n@Entity(tableName = \"commander_profile\")\nclass CommanderProfile {\n\n    @PrimaryKey\n    @NonNull\n    var id: Long = 0\n\n    @NonNull\n    var name = \"\"\n\n    @NonNull\n    var credits:Long = 0\n\n    @NonNull\n    var debt: Long = 0\n\n    @NonNull\n    var alive = false\n\n    @NonNull\n    var docked = false\n\n    @NonNull\n    @Embedded\n    var ranks: Ranks = Ranks()\n\n    @Nullable\n    @ColumnInfo(name = \"current_ship_id\")\n    var currentShipId: Long? = null\n\n    @Nullable\n    @ColumnInfo(name = \"current_ship_name\")\n    var currentShipName: String? = null\n\n    @NonNull\n    @ColumnInfo(name=\"last_updated\")\n    var lastUpdatedTimestamp: Long = 0\n}\n","license":"gpl-3.0"},{"repo_name":"AndroidX/androidx","path":"androidx.paging.PagingSource","copies":"3","size":17726,"content":"/*\n * Copyright 2019 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage androidx.paging\n\nimport androidx.annotation.IntRange\nimport androidx.annotation.RestrictTo\nimport androidx.annotation.VisibleForTesting\nimport androidx.paging.LoadType.REFRESH\n\n/** @suppress */\n@Suppress(\"DEPRECATION\")\n@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\npublic fun <Key : Any> PagedList.Config.toRefreshLoadParams(\n    key: Key?\n): PagingSource.LoadParams<Key> = PagingSource.LoadParams.Refresh(\n    key,\n    initialLoadSizeHint,\n    enablePlaceholders,\n)\n\n/**\n * Base class for an abstraction of pageable static data from some source, where loading pages\n * of data is typically an expensive operation. Some examples of common [PagingSource]s might be\n * from network or from a database.\n *\n * An instance of a [PagingSource] is used to load pages of data for an instance of [PagingData].\n *\n * A [PagingData] can grow as it loads more data, but the data loaded cannot be updated. If the\n * underlying data set is modified, a new [PagingSource] / [PagingData] pair must be created to\n * represent an updated snapshot of the data.\n *\n * ### Loading Pages\n *\n * [PagingData] queries data from its [PagingSource] in response to loading hints generated as\n * the user scrolls in a `RecyclerView`.\n *\n * To control how and when a [PagingData] queries data from its [PagingSource], see [PagingConfig],\n * which defines behavior such as [PagingConfig.pageSize] and [PagingConfig.prefetchDistance].\n *\n * ### Updating Data\n *\n * A [PagingSource] / [PagingData] pair is a snapshot of the data set. A new [PagingData] /\n * [PagingData] must be created if an update occurs, such as a reorder, insert, delete, or content\n * update occurs. A [PagingSource] must detect that it cannot continue loading its snapshot\n * (for instance, when Database query notices a table being invalidated), and call [invalidate].\n * Then a new [PagingSource] / [PagingData] pair would be created to represent data from the new\n * state of the database query.\n *\n * ### Presenting Data to UI\n *\n * To present data loaded by a [PagingSource] to a `RecyclerView`, create an instance of [Pager],\n * which provides a stream of [PagingData] that you may collect from and submit to a\n * [PagingDataAdapter][androidx.paging.PagingDataAdapter].\n *\n * @param Key Type of key which define what data to load. E.g. [Int] to represent either a page\n * number or item position, or [String] if your network uses Strings as next tokens returned with\n * each response.\n * @param Value Type of data loaded in by this [PagingSource]. E.g., the type of data that will be\n * passed to a [PagingDataAdapter][androidx.paging.PagingDataAdapter] to be displayed in a\n * `RecyclerView`.\n *\n * @sample androidx.paging.samples.pageKeyedPagingSourceSample\n * @sample androidx.paging.samples.itemKeyedPagingSourceSample\n *\n * @see Pager\n */\npublic abstract class PagingSource<Key : Any, Value : Any> {\n\n    private val invalidateCallbackTracker = InvalidateCallbackTracker<() -> Unit>(\n        callbackInvoker = { it() }\n    )\n\n    internal val invalidateCallbackCount: Int\n        @VisibleForTesting\n        get() = invalidateCallbackTracker.callbackCount()\n\n    /**\n     * Params for a load request on a [PagingSource] from [PagingSource.load].\n     */\n    public sealed class LoadParams<Key : Any> constructor(\n        /**\n         * Requested number of items to load.\n         *\n         * Note: It is valid for [PagingSource.load] to return a [LoadResult] that has a different\n         * number of items than the requested load size.\n         */\n        public val loadSize: Int,\n        /**\n         * From [PagingConfig.enablePlaceholders], true if placeholders are enabled and the load\n         * request for this [LoadParams] should populate [LoadResult.Page.itemsBefore] and\n         * [LoadResult.Page.itemsAfter] if possible.\n         */\n        public val placeholdersEnabled: Boolean,\n    ) {\n        /**\n         * Key for the page to be loaded.\n         *\n         * [key] can be `null` only if this [LoadParams] is [Refresh], and either no `initialKey`\n         * is provided to the [Pager] or [PagingSource.getRefreshKey] from the previous\n         * [PagingSource] returns `null`.\n         *\n         * The value of [key] is dependent on the type of [LoadParams]:\n         *  * [Refresh]\n         *      * On initial load, the nullable `initialKey` passed to the [Pager].\n         *      * On subsequent loads due to invalidation or refresh, the result of\n         *      [PagingSource.getRefreshKey].\n         *  * [Prepend] - [LoadResult.Page.prevKey] of the loaded page at the front of the list.\n         *  * [Append] - [LoadResult.Page.nextKey] of the loaded page at the end of the list.\n         */\n        public abstract val key: Key?\n\n        /**\n         * Params for an initial load request on a [PagingSource] from [PagingSource.load] or a\n         * refresh triggered by [invalidate].\n         */\n        public class Refresh<Key : Any> constructor(\n            override val key: Key?,\n            loadSize: Int,\n            placeholdersEnabled: Boolean,\n        ) : LoadParams<Key>(\n            loadSize = loadSize,\n            placeholdersEnabled = placeholdersEnabled,\n        )\n\n        /**\n         * Params to load a page of data from a [PagingSource] via [PagingSource.load] to be\n         * appended to the end of the list.\n         */\n        public class Append<Key : Any> constructor(\n            override val key: Key,\n            loadSize: Int,\n            placeholdersEnabled: Boolean,\n        ) : LoadParams<Key>(\n            loadSize = loadSize,\n            placeholdersEnabled = placeholdersEnabled,\n        )\n\n        /**\n         * Params to load a page of data from a [PagingSource] via [PagingSource.load] to be\n         * prepended to the start of the list.\n         */\n        public class Prepend<Key : Any> constructor(\n            override val key: Key,\n            loadSize: Int,\n            placeholdersEnabled: Boolean,\n        ) : LoadParams<Key>(\n            loadSize = loadSize,\n            placeholdersEnabled = placeholdersEnabled,\n        )\n\n        internal companion object {\n            fun <Key : Any> create(\n                loadType: LoadType,\n                key: Key?,\n                loadSize: Int,\n                placeholdersEnabled: Boolean,\n            ): LoadParams<Key> = when (loadType) {\n                LoadType.REFRESH -> Refresh(\n                    key = key,\n                    loadSize = loadSize,\n                    placeholdersEnabled = placeholdersEnabled,\n                )\n                LoadType.PREPEND -> Prepend(\n                    loadSize = loadSize,\n                    key = requireNotNull(key) {\n                        \"key cannot be null for prepend\"\n                    },\n                    placeholdersEnabled = placeholdersEnabled,\n                )\n                LoadType.APPEND -> Append(\n                    loadSize = loadSize,\n                    key = requireNotNull(key) {\n                        \"key cannot be null for append\"\n                    },\n                    placeholdersEnabled = placeholdersEnabled,\n                )\n            }\n        }\n    }\n\n    /**\n     * Result of a load request from [PagingSource.load].\n     */\n    public sealed class LoadResult<Key : Any, Value : Any> {\n        /**\n         * Error result object for [PagingSource.load].\n         *\n         * This return type indicates an expected, recoverable error (such as a network load\n         * failure). This failure will be forwarded to the UI as a [LoadState.Error], and may be\n         * retried.\n         *\n         * @sample androidx.paging.samples.pageKeyedPagingSourceSample\n         */\n        public data class Error<Key : Any, Value : Any>(\n            val throwable: Throwable\n        ) : LoadResult<Key, Value>() {\n            override fun toString(): String {\n                return \"\"\"LoadResult.Error(\n                    |   throwable: $throwable\n                    |) \"\"\".trimMargin()\n            }\n        }\n\n        /**\n         * Invalid result object for [PagingSource.load]\n         *\n         * This return type can be used to terminate future load requests on this [PagingSource]\n         * when the [PagingSource] is not longer valid due to changes in the underlying dataset.\n         *\n         * For example, if the underlying database gets written into but the [PagingSource] does\n         * not invalidate in time, it may return inconsistent results if its implementation depends\n         * on the immutability of the backing dataset it loads from (e.g., LIMIT OFFSET style db\n         * implementations). In this scenario, it is recommended to check for invalidation after\n         * loading and to return LoadResult.Invalid, which causes Paging to discard any\n         * pending or future load requests to this PagingSource and invalidate it.\n         *\n         * Returning [Invalid] will trigger Paging to [invalidate] this [PagingSource] and\n         * terminate any future attempts to [load] from this [PagingSource]\n         */\n        public class Invalid<Key : Any, Value : Any> : LoadResult<Key, Value>() {\n            override fun toString(): String {\n                return \"LoadResult.Invalid\"\n            }\n        }\n\n        /**\n         * Success result object for [PagingSource.load].\n         *\n         * As a convenience, iterating on this object will iterate through its loaded [data].\n         *\n         * @sample androidx.paging.samples.pageKeyedPage\n         * @sample androidx.paging.samples.pageIndexedPage\n         */\n        public data class Page<Key : Any, Value : Any> constructor(\n            /**\n             * Loaded data\n             */\n            val data: List<Value>,\n            /**\n             * [Key] for previous page if more data can be loaded in that direction, `null`\n             * otherwise.\n             */\n            val prevKey: Key?,\n            /**\n             * [Key] for next page if more data can be loaded in that direction, `null` otherwise.\n             */\n            val nextKey: Key?,\n            /**\n             * Optional count of items before the loaded data.\n             */\n            @IntRange(from = COUNT_UNDEFINED.toLong())\n            val itemsBefore: Int = COUNT_UNDEFINED,\n            /**\n             * Optional count of items after the loaded data.\n             */\n            @IntRange(from = COUNT_UNDEFINED.toLong())\n            val itemsAfter: Int = COUNT_UNDEFINED\n        ) : LoadResult<Key, Value>(), Iterable<Value> {\n\n            /**\n             * Success result object for [PagingSource.load].\n             *\n             * @param data Loaded data\n             * @param prevKey [Key] for previous page if more data can be loaded in that direction,\n             * `null` otherwise.\n             * @param nextKey [Key] for next page if more data can be loaded in that direction,\n             * `null` otherwise.\n             */\n            public constructor(\n                data: List<Value>,\n                prevKey: Key?,\n                nextKey: Key?\n            ) : this(data, prevKey, nextKey, COUNT_UNDEFINED, COUNT_UNDEFINED)\n\n            init {\n                require(itemsBefore == COUNT_UNDEFINED || itemsBefore >= 0) {\n                    \"itemsBefore cannot be negative\"\n                }\n\n                require(itemsAfter == COUNT_UNDEFINED || itemsAfter >= 0) {\n                    \"itemsAfter cannot be negative\"\n                }\n            }\n\n            override fun iterator(): Iterator<Value> {\n                return data.listIterator()\n            }\n\n            override fun toString(): String {\n                return \"\"\"LoadResult.Page(\n                    |   data size: ${data.size}\n                    |   first Item: ${data.firstOrNull()}\n                    |   last Item: ${data.lastOrNull()}\n                    |   nextKey: $nextKey\n                    |   prevKey: $prevKey\n                    |   itemsBefore: $itemsBefore\n                    |   itemsAfter: $itemsAfter\n                    |) \"\"\".trimMargin()\n            }\n\n            public companion object {\n                public const val COUNT_UNDEFINED: Int = Int.MIN_VALUE\n\n                @Suppress(\"MemberVisibilityCanBePrivate\") // Prevent synthetic accessor generation.\n                internal val EMPTY = Page(emptyList(), null, null, 0, 0)\n\n                @Suppress(\"UNCHECKED_CAST\") // Can safely ignore, since the list is empty.\n                internal fun <Key : Any, Value : Any> empty() = EMPTY as Page<Key, Value>\n            }\n        }\n    }\n\n    /**\n     * `true` if this [PagingSource] supports jumping, `false` otherwise.\n     *\n     * Override this to `true` if pseudo-fast scrolling via jumps is supported.\n     *\n     * A jump occurs when a `RecyclerView` scrolls through a number of placeholders defined by\n     * [PagingConfig.jumpThreshold] and triggers a load with [LoadType] [REFRESH].\n     *\n     * [PagingSource]s that support jumps should override [getRefreshKey] to return a [Key] that\n     * would load data fulfilling the viewport given a user's current [PagingState.anchorPosition].\n     *\n     * @see [PagingConfig.jumpThreshold]\n     */\n    public open val jumpingSupported: Boolean\n        get() = false\n\n    /**\n     * `true` if this [PagingSource] expects to re-use keys to load distinct pages\n     * without a call to [invalidate], `false` otherwise.\n     */\n    public open val keyReuseSupported: Boolean\n        get() = false\n\n    /**\n     * Whether this [PagingSource] has been invalidated, which should happen when the data this\n     * [PagingSource] represents changes since it was first instantiated.\n     */\n    public val invalid: Boolean\n        get() = invalidateCallbackTracker.invalid\n\n    /**\n     * Signal the [PagingSource] to stop loading.\n     *\n     * This method is idempotent. i.e., If [invalidate] has already been called, subsequent calls to\n     * this method should have no effect.\n     */\n    public fun invalidate() {\n        if (invalidateCallbackTracker.invalidate()) {\n            log(DEBUG) { \"Invalidated PagingSource $this\" }\n        }\n    }\n\n    /**\n     * Add a callback to invoke when the [PagingSource] is first invalidated.\n     *\n     * Once invalidated, a [PagingSource] will not become valid again.\n     *\n     * A [PagingSource] will only invoke its callbacks once - the first time [invalidate] is called,\n     * on that thread.\n     *\n     * If this [PagingSource] is already invalid, the provided [onInvalidatedCallback] will be\n     * triggered immediately.\n     *\n     * @param onInvalidatedCallback The callback that will be invoked on thread that invalidates the\n     * [PagingSource].\n     */\n    public fun registerInvalidatedCallback(onInvalidatedCallback: () -> Unit) {\n        invalidateCallbackTracker.registerInvalidatedCallback(onInvalidatedCallback)\n    }\n\n    /**\n     * Remove a previously added invalidate callback.\n     *\n     * @param onInvalidatedCallback The previously added callback.\n     */\n    public fun unregisterInvalidatedCallback(onInvalidatedCallback: () -> Unit) {\n        invalidateCallbackTracker.unregisterInvalidatedCallback(onInvalidatedCallback)\n    }\n\n    /**\n     * Loading API for [PagingSource].\n     *\n     * Implement this method to trigger your async load (e.g. from database or network).\n     */\n    public abstract suspend fun load(params: LoadParams<Key>): LoadResult<Key, Value>\n\n    /**\n     * Provide a [Key] used for the initial [load] for the next [PagingSource] due to invalidation\n     * of this [PagingSource]. The [Key] is provided to [load] via [LoadParams.key].\n     *\n     * The [Key] returned by this method should cause [load] to load enough items to\n     * fill the viewport *around* the last accessed position, allowing the next generation to\n     * transparently animate in. The last accessed position can be retrieved via\n     * [state.anchorPosition][PagingState.anchorPosition], which is typically\n     * the *top-most* or *bottom-most* item in the viewport due to access being triggered by binding\n     * items as they scroll into view.\n     *\n     * For example, if items are loaded based on integer position keys, you can return\n     * `( (state.anchorPosition ?: 0) - state.config.initialLoadSize / 2).coerceAtLeast(0)`.\n     *\n     * Alternately, if items contain a key used to load, get the key from the item in the page at\n     * index [state.anchorPosition][PagingState.anchorPosition] then try to center it based on\n     * `state.config.initialLoadSize`.\n     *\n     * @param state [PagingState] of the currently fetched data, which includes the most recently\n     * accessed position in the list via [PagingState.anchorPosition].\n     *\n     * @return [Key] passed to [load] after invalidation used for initial load of the next\n     * generation. The [Key] returned by [getRefreshKey] should load pages centered around\n     * user's current viewport. If the correct [Key] cannot be determined, `null` can be returned\n     * to allow [load] decide what default key to use.\n     */\n    public abstract fun getRefreshKey(state: PagingState<Key, Value>): Key?\n}\n","license":"apache-2.0"},{"repo_name":"MimiReader/mimi-reader","path":"com.emogoth.android.phone.mimi.db.models.QueueItem","copies":"1","size":992,"content":"package com.emogoth.android.phone.mimi.db.models\n\nimport androidx.room.ColumnInfo\n\nclass QueueItem {\n    companion object {\n        const val QUEUE_ID = \"queue_id\"\n        const val HISTORY_ID = \"history_id\"\n        const val OLD_THREAD_SIZE = \"old_thread_size\"\n    }\n\n    @ColumnInfo(name = QUEUE_ID)\n    var queueId: Int = -1\n\n    @ColumnInfo(name = HISTORY_ID)\n    var historyId: Int = -1\n\n    @ColumnInfo(name = OLD_THREAD_SIZE)\n    var oldThreadSize: Int = 0\n\n    @ColumnInfo(name = History.SIZE)\n    var threadSize: Int = 0\n\n    @ColumnInfo(name = RefreshQueue.REPLY_COUNT)\n    var replyCount: Int = 0\n\n    @ColumnInfo(name = RefreshQueue.LAST_REFRESH)\n    var lastRefresh: Long = 0\n\n    @ColumnInfo(name = History.UNREAD_COUNT)\n    var unread: Int = 0\n\n    @ColumnInfo(name = History.BOARD_NAME)\n    var boardName: String = \"\"\n\n    @ColumnInfo(name = History.THREAD_ID)\n    var threadId: Long = 0\n\n    @ColumnInfo(name = History.THREAD_REMOVED)\n    var threadRemoved: Boolean = false\n}","license":"apache-2.0"},{"repo_name":"charlesng/SampleAppArch","path":"com.cn29.aac.repo.itunes.Album","copies":"1","size":586,"content":"package com.cn29.aac.repo.itunes\n\nimport androidx.room.Entity\nimport androidx.room.Index\n\n/**\n * Created by Charles Ng on 20/10/2017.\n */\n@Entity(indices = [Index(\"artistId\")],\n        primaryKeys = [\"artistId\", \"collectionName\"])\ndata class Album(var artistId: Long = 0,\n                 var collectionName: String = \"\",\n                 var collectionPrice: Double = 0.0,\n                 var primaryGenreName: String? = null,\n                 var releaseDate: String? = null,\n                 var artworkUrl100: String? = null,\n                 var collectionViewUrl: String? = null)","license":"apache-2.0"},{"repo_name":"Heiner1/AndroidAPS","path":"info.nightscout.androidaps.database.entities.PreferenceChange","copies":"1","size":680,"content":"package info.nightscout.androidaps.database.entities\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport info.nightscout.androidaps.database.TABLE_PREFERENCE_CHANGES\nimport info.nightscout.androidaps.database.interfaces.DBEntry\nimport info.nightscout.androidaps.database.interfaces.DBEntryWithTime\nimport java.util.TimeZone\n\n@Entity(tableName = TABLE_PREFERENCE_CHANGES)\ndata class PreferenceChange(\n    @PrimaryKey(autoGenerate = true)\n        override var id: Long = 0L,\n    override var timestamp: Long,\n    override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(),\n    var key: String,\n    var value: Any?\n) : DBEntry, DBEntryWithTime","license":"agpl-3.0"},{"repo_name":"Vavassor/Tusky","path":"com.keylesspalace.tusky.components.conversation.ConversationEntity","copies":"1","size":6848,"content":"/* Copyright 2019 Conny Duck\n *\n * This file is a part of Tusky.\n *\n * This program is free software; you can redistribute it and/or modify it under the terms of the\n * GNU General Public License as published by the Free Software Foundation; either version 3 of the\n * License, or (at your option) any later version.\n *\n * Tusky is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even\n * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n * Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with Tusky; if not,\n * see <http://www.gnu.org/licenses>. */\n\npackage com.keylesspalace.tusky.components.conversation\n\nimport android.text.Spanned\nimport android.text.SpannedString\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.TypeConverters\nimport com.keylesspalace.tusky.db.Converters\nimport com.keylesspalace.tusky.entity.*\nimport com.keylesspalace.tusky.util.SmartLengthInputFilter\nimport java.util.*\n\n@Entity(primaryKeys = [\"id\",\"accountId\"])\n@TypeConverters(Converters::class)\ndata class ConversationEntity(\n        val accountId: Long,\n        val id: String,\n        val accounts: List<ConversationAccountEntity>,\n        val unread: Boolean,\n        @Embedded(prefix = \"s_\") val lastStatus: ConversationStatusEntity\n)\n\ndata class ConversationAccountEntity(\n        val id: String,\n        val username: String,\n        val displayName: String,\n        val avatar: String,\n        val emojis: List<Emoji>\n) {\n    fun toAccount(): Account {\n        return Account(\n                id = id,\n                username = username,\n                displayName = displayName,\n                avatar = avatar,\n                emojis = emojis,\n                url = \"\",\n                localUsername = \"\",\n                note = SpannedString(\"\"),\n                header = \"\"\n        )\n    }\n}\n\n@TypeConverters(Converters::class)\ndata class ConversationStatusEntity(\n        val id: String,\n        val url: String?,\n        val inReplyToId: String?,\n        val inReplyToAccountId: String?,\n        val account: ConversationAccountEntity,\n        val content: Spanned,\n        val createdAt: Date,\n        val emojis: List<Emoji>,\n        val favouritesCount: Int,\n        val favourited: Boolean,\n        val sensitive: Boolean,\n        val spoilerText: String,\n        val attachments: List<Attachment>,\n        val mentions: Array<Status.Mention>,\n        val showingHiddenContent: Boolean,\n        val expanded: Boolean,\n        val collapsible: Boolean,\n        val collapsed: Boolean\n\n) {\n    /** its necessary to override this because Spanned.equals does not work as expected  */\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as ConversationStatusEntity\n\n        if (id != other.id) return false\n        if (url != other.url) return false\n        if (inReplyToId != other.inReplyToId) return false\n        if (inReplyToAccountId != other.inReplyToAccountId) return false\n        if (account != other.account) return false\n        if (content.toString() != other.content.toString()) return false //TODO find a better method to compare two spanned strings\n        if (createdAt != other.createdAt) return false\n        if (emojis != other.emojis) return false\n        if (favouritesCount != other.favouritesCount) return false\n        if (favourited != other.favourited) return false\n        if (sensitive != other.sensitive) return false\n        if (spoilerText != other.spoilerText) return false\n        if (attachments != other.attachments) return false\n        if (!mentions.contentEquals(other.mentions)) return false\n        if (showingHiddenContent != other.showingHiddenContent) return false\n        if (expanded != other.expanded) return false\n        if (collapsible != other.collapsible) return false\n        if (collapsed != other.collapsed) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        var result = id.hashCode()\n        result = 31 * result + (url?.hashCode() ?: 0)\n        result = 31 * result + (inReplyToId?.hashCode() ?: 0)\n        result = 31 * result + (inReplyToAccountId?.hashCode() ?: 0)\n        result = 31 * result + account.hashCode()\n        result = 31 * result + content.hashCode()\n        result = 31 * result + createdAt.hashCode()\n        result = 31 * result + emojis.hashCode()\n        result = 31 * result + favouritesCount\n        result = 31 * result + favourited.hashCode()\n        result = 31 * result + sensitive.hashCode()\n        result = 31 * result + spoilerText.hashCode()\n        result = 31 * result + attachments.hashCode()\n        result = 31 * result + mentions.contentHashCode()\n        result = 31 * result + showingHiddenContent.hashCode()\n        result = 31 * result + expanded.hashCode()\n        result = 31 * result + collapsible.hashCode()\n        result = 31 * result + collapsed.hashCode()\n        return result\n    }\n\n    fun toStatus(): Status {\n        return Status(\n                id = id,\n                url = url,\n                account = account.toAccount(),\n                inReplyToId = inReplyToId,\n                inReplyToAccountId = inReplyToAccountId,\n                content = content,\n                reblog = null,\n                createdAt = createdAt,\n                emojis = emojis,\n                reblogsCount = 0,\n                favouritesCount = favouritesCount,\n                reblogged = false,\n                favourited = favourited,\n                sensitive= sensitive,\n                spoilerText = spoilerText,\n                visibility = Status.Visibility.PRIVATE,\n                attachments = attachments,\n                mentions = mentions,\n                application = null,\n                pinned = false)\n    }\n}\n\nfun Account.toEntity() =\n        ConversationAccountEntity(\n                id,\n                username,\n                displayName,\n                avatar,\n                emojis ?: emptyList()\n        )\n\nfun Status.toEntity() =\n        ConversationStatusEntity(\n                id, url, inReplyToId, inReplyToAccountId, account.toEntity(), content,\n                createdAt, emojis, favouritesCount, favourited, sensitive,\n                spoilerText, attachments, mentions,\n                false,\n                false,\n                !SmartLengthInputFilter.hasBadRatio(content, SmartLengthInputFilter.LENGTH_DEFAULT),\n                true\n        )\n\n\nfun Conversation.toEntity(accountId: Long) =\n        ConversationEntity(\n                accountId,\n                id,\n                accounts.map { it.toEntity() },\n                unread,\n                lastStatus!!.toEntity()\n        )\n","license":"gpl-3.0"},{"repo_name":"tasks/tasks","path":"org.tasks.preferences.Preferences","copies":"1","size":20103,"content":"package org.tasks.preferences\n\nimport android.annotation.SuppressLint\nimport android.content.ContentResolver\nimport android.content.Context\nimport android.content.Intent\nimport android.content.SharedPreferences\nimport android.content.pm.PackageManager\nimport android.media.RingtoneManager\nimport android.net.Uri\nimport android.os.Binder\nimport androidx.core.app.NotificationCompat\nimport androidx.core.net.toUri\nimport androidx.documentfile.provider.DocumentFile\nimport androidx.preference.PreferenceManager\nimport com.todoroo.andlib.utility.DateUtilities\nimport com.todoroo.andlib.utility.DateUtilities.now\nimport com.todoroo.astrid.activity.BeastModePreferences\nimport com.todoroo.astrid.api.AstridApiConstants\nimport com.todoroo.astrid.core.SortHelper\nimport com.todoroo.astrid.data.Task\nimport com.todoroo.astrid.data.Task.Companion.NOTIFY_AFTER_DEADLINE\nimport com.todoroo.astrid.data.Task.Companion.NOTIFY_AT_DEADLINE\nimport org.tasks.BuildConfig\nimport org.tasks.R\nimport org.tasks.Strings.isNullOrEmpty\nimport org.tasks.billing.Purchase\nimport org.tasks.data.TaskAttachment\nimport org.tasks.extensions.Context.getResourceUri\nimport org.tasks.themes.ColorProvider\nimport org.tasks.themes.ThemeBase\nimport org.tasks.time.DateTime\nimport timber.log.Timber\nimport java.io.File\nimport java.net.URI\nimport java.util.concurrent.TimeUnit\n\nclass Preferences @JvmOverloads constructor(\n        private val context: Context,\n        name: String? = getSharedPreferencesName(context)\n) : QueryPreferences {\n    private val prefs: SharedPreferences = context.getSharedPreferences(name, Context.MODE_PRIVATE)\n    private val publicPrefs: SharedPreferences = context.getSharedPreferences(AstridApiConstants.PUBLIC_PREFS, Context.MODE_PRIVATE)\n\n    fun androidBackupServiceEnabled() = getBoolean(R.string.p_backups_android_backup_enabled, true)\n\n    fun showBackupWarnings() = !getBoolean(R.string.p_backups_ignore_warnings, false)\n\n    fun addTasksToTop(): Boolean = getBoolean(R.string.p_add_to_top, true)\n\n    fun backButtonSavesTask(): Boolean = getBoolean(R.string.p_back_button_saves_task, false)\n\n    val isCurrentlyQuietHours: Boolean\n        get() {\n            if (quietHoursEnabled()) {\n                val dateTime = DateTime()\n                val start = dateTime.withMillisOfDay(quietHoursStart)\n                val end = dateTime.withMillisOfDay(quietHoursEnd)\n                return if (start.isAfter(end)) {\n                    dateTime.isBefore(end) || dateTime.isAfter(start)\n                } else {\n                    dateTime.isAfter(start) && dateTime.isBefore(end)\n                }\n            }\n            return false\n        }\n\n    fun adjustForQuietHours(time: Long): Long {\n        if (quietHoursEnabled()) {\n            val dateTime = DateTime(time)\n            val start = dateTime.withMillisOfDay(quietHoursStart)\n            val end = dateTime.withMillisOfDay(quietHoursEnd)\n            if (start.isAfter(end)) {\n                if (dateTime.isBefore(end)) {\n                    return end.millis\n                } else if (dateTime.isAfter(start)) {\n                    return end.plusDays(1).millis\n                }\n            } else {\n                if (dateTime.isAfter(start) && dateTime.isBefore(end)) {\n                    return end.millis\n                }\n            }\n        }\n        return time\n    }\n\n    private fun quietHoursEnabled(): Boolean = getBoolean(R.string.p_rmd_enable_quiet, false)\n\n    val isDefaultDueTimeEnabled: Boolean\n        get() = getBoolean(R.string.p_rmd_time_enabled, true)\n\n    val defaultDueTime: Int\n        get() = getInt(R.string.p_rmd_time, TimeUnit.HOURS.toMillis(18).toInt())\n\n    private val quietHoursStart: Int\n        get() = getMillisPerDayPref(R.string.p_rmd_quietStart, R.integer.default_quiet_hours_start)\n\n    private val quietHoursEnd: Int\n        get() = getMillisPerDayPref(R.string.p_rmd_quietEnd, R.integer.default_quiet_hours_end)\n\n    val dateShortcutMorning: Int\n        get() = getMillisPerDayPref(R.string.p_date_shortcut_morning, R.integer.default_morning)\n\n    val dateShortcutAfternoon: Int\n        get() = getMillisPerDayPref(R.string.p_date_shortcut_afternoon, R.integer.default_afternoon)\n\n    val dateShortcutEvening: Int\n        get() = getMillisPerDayPref(R.string.p_date_shortcut_evening, R.integer.default_evening)\n\n    val purchases: List<Purchase>\n        get() = try {\n            getStringSet(R.string.p_purchases).map(::Purchase)\n        } catch (e: Exception) {\n            Timber.e(e)\n            emptyList()\n        }\n\n    fun setPurchases(purchases: Collection<Purchase>) {\n        setPurchases(purchases.map(Purchase::toJson).toHashSet())\n    }\n\n    private fun setPurchases(set: HashSet<String>) {\n        try {\n            setStringSet(R.string.p_purchases, set)\n        } catch (e: Exception) {\n            Timber.e(e)\n        }\n    }\n\n    val dateShortcutNight: Int\n        get() = getMillisPerDayPref(R.string.p_date_shortcut_night, R.integer.default_night)\n\n    private fun getMillisPerDayPref(resId: Int, defResId: Int): Int {\n        val setting = getInt(resId, -1)\n        return if (setting < 0 || setting > DateTime.MAX_MILLIS_PER_DAY) {\n            context.resources.getInteger(defResId)\n        } else setting\n    }\n\n    val isDefaultCalendarSet: Boolean\n        get() {\n            val defaultCalendar = defaultCalendar\n            return defaultCalendar != null && defaultCalendar != \"-1\" && defaultCalendar != \"0\"\n        }\n\n    val ringtone: Uri?\n        get() = getRingtone(\n            R.string.p_rmd_ringtone,\n            RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)\n        )\n\n    val completionSound: Uri?\n        get() = getRingtone(\n            R.string.p_completion_ringtone,\n            context.getResourceUri(R.raw.long_rising_tone)\n        )\n\n    private fun getRingtone(pref: Int, default: Uri): Uri? {\n        val ringtone = getStringValue(pref)\n        return when {\n            ringtone == null -> default\n            ringtone.isNotBlank() -> ringtone.toUri()\n            else -> null\n        }\n    }\n\n    val isTrackingEnabled: Boolean\n        get() = getBoolean(R.string.p_collect_statistics, true)\n\n    val defaultCalendar: String?\n        get() = getStringValue(R.string.gcal_p_default)\n\n    val firstDayOfWeek: Int\n        get() {\n            val firstDayOfWeek = getIntegerFromString(R.string.p_start_of_week, 0)\n            return if (firstDayOfWeek < 1 || firstDayOfWeek > 7) 0 else firstDayOfWeek\n        }\n\n    @SuppressLint(\"ApplySharedPref\")\n    fun clear() {\n        publicPrefs.edit().clear().commit()\n        prefs.edit().clear().commit()\n    }\n\n    fun setDefaults() {\n        PreferenceManager.setDefaultValues(context, R.xml.preferences, true)\n        PreferenceManager.setDefaultValues(context, R.xml.preferences_look_and_feel, true)\n        PreferenceManager.setDefaultValues(context, R.xml.preferences_notifications, true)\n        PreferenceManager.setDefaultValues(context, R.xml.preferences_task_defaults, true)\n        PreferenceManager.setDefaultValues(context, R.xml.preferences_date_and_time, true)\n        PreferenceManager.setDefaultValues(context, R.xml.preferences_navigation_drawer, true)\n        PreferenceManager.setDefaultValues(context, R.xml.preferences_backups, true)\n        PreferenceManager.setDefaultValues(context, R.xml.preferences_advanced, true)\n        PreferenceManager.setDefaultValues(context, R.xml.help_and_feedback, true)\n        BeastModePreferences.setDefaultOrder(this, context)\n    }\n\n    fun reset() {\n        clear()\n        setDefaults()\n    }\n\n    fun getStringValue(keyResource: Int): String? = getStringValue(context.getString(keyResource))\n\n    fun getStringValue(key: String?): String? = try {\n        prefs.getString(key, null)\n    } catch (e: Exception) {\n        Timber.e(e)\n        null\n    }\n\n    val defaultRemindersSet: Set<String>\n        get() = getStringSet(\n            R.string.p_default_reminders_key,\n            hashSetOf(NOTIFY_AT_DEADLINE.toString(), NOTIFY_AFTER_DEADLINE.toString())\n        )\n\n    val defaultReminders: Int\n        get() = defaultRemindersSet\n            .mapNotNull { it.toIntOrNull() }\n            .sum()\n\n    val defaultRingMode: Int\n        get() = getIntegerFromString(R.string.p_default_reminders_mode_key, 0)\n\n    val fontSize: Int\n        get() = getInt(R.string.p_fontSize, 16)\n\n    val mapTheme: Int\n        get() = getIntegerFromString(R.string.p_map_theme, 0)\n\n    fun getIntegerFromString(keyResource: Int, defaultValue: Int): Int =\n        getIntegerFromString(context.getString(keyResource), defaultValue)\n\n    fun getIntegerFromString(keyResource: String?, defaultValue: Int): Int =\n        getStringValue(keyResource)?.toIntOrNull() ?: defaultValue\n\n    private fun getUri(key: Int): Uri? {\n        val uri = getStringValue(key)\n        return if (isNullOrEmpty(uri)) null else Uri.parse(uri)\n    }\n\n    fun setUri(key: Int, uri: URI) {\n        setString(key, uri.toString())\n    }\n\n    fun setUri(key: Int, uri: Uri) {\n        setString(key, uri.toString())\n    }\n\n    fun setString(key: Int, newValue: String?) {\n        setString(context.getString(key), newValue)\n    }\n\n    fun setString(key: String?, newValue: String?) {\n        val editor = prefs.edit()\n        editor.putString(key, newValue)\n        editor.apply()\n    }\n\n    fun setStringSet(key: Int, newValue: Set<String>) =\n        setStringSet(context.getString(key), newValue)\n\n    fun setStringSet(key: String, newValue: Set<String>) {\n        val editor = prefs.edit()\n        editor.putStringSet(key, newValue)\n        editor.apply()\n    }\n\n    private fun getStringSet(key: Int, defaultValue: Set<String> = emptySet()) =\n        getStringSet(context.getString(key), defaultValue)\n\n    private fun getStringSet(key: String, defaultValue: Set<String> = emptySet()): Set<String> =\n        prefs.getStringSet(key, defaultValue)!!\n\n    fun setStringFromInteger(keyResource: Int, newValue: Int) {\n        val editor = prefs.edit()\n        editor.putString(context.getString(keyResource), newValue.toString())\n        editor.apply()\n    }\n\n    fun getBoolean(key: String?, defValue: Boolean): Boolean = try {\n        prefs.getBoolean(key, defValue)\n    } catch (e: ClassCastException) {\n        Timber.w(e)\n        defValue\n    }\n\n    fun getBoolean(keyResources: Int, defValue: Boolean): Boolean =\n            getBoolean(context.getString(keyResources), defValue)\n\n    fun setBoolean(keyResource: Int, value: Boolean) {\n        setBoolean(context.getString(keyResource), value)\n    }\n\n    fun setBoolean(key: String?, value: Boolean) {\n        val editor = prefs.edit()\n        editor.putBoolean(key, value)\n        editor.apply()\n    }\n\n    fun getInt(resourceId: Int, defValue: Int): Int =\n            getInt(context.getString(resourceId), defValue)\n\n    fun getInt(key: String?, defValue: Int): Int = prefs.getInt(key, defValue)\n\n    fun setInt(resourceId: Int, value: Int) {\n        setInt(context.getString(resourceId), value)\n    }\n\n    fun setInt(key: String?, value: Int) {\n        val editor = prefs.edit()\n        editor.putInt(key, value)\n        editor.apply()\n    }\n\n    fun getLong(resourceId: Int, defValue: Long): Long =\n            getLong(context.getString(resourceId), defValue)\n\n    fun getLong(key: String?, defValue: Long): Long = prefs.getLong(key, defValue)\n\n    fun setLong(resourceId: Int, value: Long) {\n        setLong(context.getString(resourceId), value)\n    }\n\n    fun setLong(key: String?, value: Long) {\n        val editor = prefs.edit()\n        editor.putLong(key, value)\n        editor.apply()\n    }\n\n    fun clear(key: String?) {\n        val editor = prefs.edit()\n        editor.remove(key)\n        editor.apply()\n    }\n\n    val lastSetVersion: Int\n        get() = getInt(R.string.p_current_version, 0)\n\n    fun setCurrentVersion(version: Int) {\n        setInt(R.string.p_current_version, version)\n    }\n\n    var installVersion: Int\n        get() = getInt(R.string.p_install_version, 0)\n        set(value) = setInt(R.string.p_install_version, value)\n\n    var installDate: Long\n        get() = getLong(R.string.p_install_date, 0L)\n        set(value) = setLong(R.string.p_install_date, value)\n\n    override var sortMode: Int\n        get() = publicPrefs.getInt(PREF_SORT_SORT, SortHelper.SORT_AUTO)\n        set(value) {\n            setPublicPref(PREF_SORT_SORT, value)\n        }\n\n    override var showHidden: Boolean\n        get() = getBoolean(R.string.p_show_hidden_tasks, true)\n        set(value) { setBoolean(R.string.p_show_hidden_tasks, value) }\n\n    override var showCompleted: Boolean\n        get() = getBoolean(R.string.p_show_completed_tasks, true)\n        set(value) { setBoolean(R.string.p_show_completed_tasks, value) }\n\n    override var alwaysDisplayFullDate: Boolean\n        get() = getBoolean(R.string.p_always_display_full_date, false)\n        set(value) { setBoolean(R.string.p_always_display_full_date, value)}\n\n    override val completedTasksAtBottom: Boolean\n        get() = getBoolean(R.string.p_completed_tasks_at_bottom, true)\n\n    override val sortCompletedByCompletionDate: Boolean\n        get() = getBoolean(R.string.p_completed_tasks_sort, true)\n\n    private fun setPublicPref(key: String, value: Int) {\n        val edit = publicPrefs.edit()\n        edit?.putInt(key, value)?.apply()\n    }\n\n    val backupDirectory: Uri?\n        get() = getDirectory(R.string.p_backup_dir, \"backups\")\n\n    val externalStorage: Uri\n        get() = root.uri\n\n    val attachmentsDirectory: Uri?\n        get() = getDirectory(R.string.p_attachment_dir, TaskAttachment.FILES_DIRECTORY_DEFAULT)\n\n    private fun getDirectory(pref: Int, name: String): Uri? {\n        val uri = getUri(pref)\n        if (uri != null) {\n            when (uri.scheme) {\n                ContentResolver.SCHEME_FILE -> {\n                    val file = File(uri.path)\n                    try {\n                        if (file.canWrite()) {\n                            return uri\n                        }\n                    } catch (ignored: SecurityException) {\n                    }\n                }\n                ContentResolver.SCHEME_CONTENT -> if (hasWritePermission(context, uri)) {\n                    return uri\n                }\n            }\n        }\n        return getDefaultDirectory(name)\n    }\n\n    private fun getDefaultDirectory(name: String): Uri? =\n            root\n                    .createDirectory(name)\n                    ?.uri\n                    ?: getDefaultFileLocation(name)?.let { Uri.fromFile(it) }\n\n    private val root: DocumentFile\n        get() = DocumentFile.fromFile(context.getExternalFilesDir(null)!!)\n\n    private fun getDefaultFileLocation(type: String): File? {\n        val externalFilesDir = context.getExternalFilesDir(null) ?: return null\n        val path = String.format(\"%s/%s\", externalFilesDir.absolutePath, type)\n        val file = File(path)\n        return if (file.isDirectory || file.mkdirs()) file else null\n    }\n\n    val cacheDirectory: Uri\n        get() {\n            var cacheDir = context.externalCacheDir\n            if (cacheDir == null) {\n                cacheDir = context.cacheDir\n            }\n            return DocumentFile.fromFile(cacheDir!!).uri\n        }\n\n    private fun hasWritePermission(context: Context, uri: Uri): Boolean =\n            (PackageManager.PERMISSION_GRANTED\n                    == context.checkUriPermission(\n                    uri,\n                    Binder.getCallingPid(),\n                    Binder.getCallingUid(),\n                    Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION))\n\n    val notificationDefaults: Int\n        get() {\n            var result = 0\n            if (getBoolean(R.string.p_rmd_vibrate, true)) {\n                result = result or NotificationCompat.DEFAULT_VIBRATE\n            }\n            if (getBoolean(R.string.p_led_notification, true)) {\n                result = result or NotificationCompat.DEFAULT_LIGHTS\n            }\n            return result\n        }\n\n    fun remove(resId: Int) {\n        val editor = prefs.edit()\n        editor.remove(context.getString(resId))\n        editor.apply()\n    }\n\n    fun bundleNotifications(): Boolean = getBoolean(R.string.p_bundle_notifications, true)\n\n    fun usePersistentReminders(): Boolean = getBoolean(R.string.p_rmd_persistent, true)\n\n    var isSyncOngoing: Boolean\n        get() = syncFlags.any { getBoolean(it, false) }\n        set(value) {\n            syncFlags.forEach { setBoolean(it, value) }\n        }\n\n    fun <T> getPrefs(c: Class<T>): Map<String, T> =\n        prefs.all.filter { (_, value) -> c.isInstance(value) } as Map<String, T>\n\n    val isFlipperEnabled: Boolean\n        get() = BuildConfig.DEBUG && getBoolean(R.string.p_flipper, false)\n\n    var isPositionHackEnabled: Boolean\n        get() = getLong(R.string.p_google_tasks_position_hack, 0) > now() - DateUtilities.ONE_WEEK\n        set(value) { setLong(R.string.p_google_tasks_position_hack, if (value) now() else 0) }\n\n    override var isManualSort: Boolean\n        get() = getBoolean(R.string.p_manual_sort, false)\n        set(value) { setBoolean(R.string.p_manual_sort, value) }\n\n    override var isAstridSort: Boolean\n        get() = getBoolean(R.string.p_astrid_sort_enabled, false) && getBoolean(R.string.p_astrid_sort, false)\n        set(value) { setBoolean(R.string.p_astrid_sort, value) }\n\n    override var isReverseSort: Boolean\n        get() = getBoolean(R.string.p_reverse_sort, false)\n        set(value) { setBoolean(R.string.p_reverse_sort, value) }\n\n    val defaultPriority: Int\n        get() = getIntegerFromString(R.string.p_default_importance_key, Task.Priority.LOW)\n\n    val themeBase: Int\n        get() = getInt(R.string.p_theme, ThemeBase.DEFAULT_BASE_THEME)\n\n    val showSubtaskChip: Boolean\n        get() = getBoolean(R.string.p_subtask_chips, true)\n\n    val showStartDateChip: Boolean\n        get() = getBoolean(R.string.p_start_date_chip, true)\n\n    val showPlaceChip: Boolean\n        get() = getBoolean(R.string.p_place_chips, true)\n\n    val showListChip: Boolean\n        get() = getBoolean(R.string.p_list_chips, true)\n\n    val showTagChip: Boolean\n        get() = getBoolean(R.string.p_tag_chips, true)\n\n    fun alreadyNotified(account: String?, scope: String?): Boolean =\n            getBoolean(context.getString(R.string.p_notified_oauth_error, account, scope), false)\n\n    fun setAlreadyNotified(account: String?, scope: String?, value: Boolean) {\n        setBoolean(context.getString(R.string.p_notified_oauth_error, account, scope), value)\n    }\n\n    val defaultThemeColor: Int\n        get() = getInt(R.string.p_theme_color, ColorProvider.BLUE_500)\n\n    override fun usePagedQueries(): Boolean = getBoolean(R.string.p_use_paged_queries, false)\n\n    fun showGroupHeaders(): Boolean =\n            !usePagedQueries() && !getBoolean(R.string.p_disable_sort_groups, false)\n\n    val markdown: Boolean\n        get() = getBoolean(R.string.p_markdown, false)\n\n    val isTopAppBar: Boolean\n        get() = getIntegerFromString(R.string.p_app_bar_position, 1) == 0\n\n    var lastReviewRequest: Long\n        get() = getLong(R.string.p_last_review_request, 0L)\n        set(value) = setLong(R.string.p_last_review_request, value)\n\n    var lastSubscribeRequest: Long\n        get() = getLong(R.string.p_last_subscribe_request, 0L)\n        set(value) = setLong(R.string.p_last_subscribe_request, value)\n\n    var shownBeastModeHint: Boolean\n        get() = getBoolean(R.string.p_shown_beast_mode_hint, false)\n        set(value) = setBoolean(R.string.p_shown_beast_mode_hint, value)\n\n    val desaturateDarkMode: Boolean\n        get() = getBoolean(R.string.p_desaturate_colors, true)\n\n    val linkify: Boolean\n        get() = getBoolean(R.string.p_linkify_task_edit, false)\n\n    companion object {\n        private const val PREF_SORT_SORT = \"sort_sort\" // $NON-NLS-1$\n\n        private fun getSharedPreferencesName(context: Context): String =\n                context.packageName + \"_preferences\"\n\n        private val syncFlags = listOf(\n                R.string.p_sync_ongoing,\n                R.string.p_sync_ongoing_android,\n        )\n    }\n}","license":"gpl-3.0"},{"repo_name":"AndroidX/androidx","path":"androidx.sqlite.db.SimpleSQLiteQuery","copies":"3","size":3938,"content":"/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage androidx.sqlite.db\n\nimport android.annotation.SuppressLint\n\n/**\n * A basic implementation of [SupportSQLiteQuery] which receives a query and its args and\n * binds args based on the passed in Object type.\n *\n * @constructor Creates an SQL query with the sql string and the bind arguments.\n *\n * @param query    The query string, can include bind arguments (.e.g ?).\n * @param bindArgs The bind argument value that will replace the placeholders in the query.\n */\nclass SimpleSQLiteQuery(\n    private val query: String,\n    @Suppress(\"ArrayReturn\") // Due to legacy API\n    private val bindArgs: Array<out Any?>?\n    ) : SupportSQLiteQuery {\n\n    /**\n     * Creates an SQL query without any bind arguments.\n     *\n     * @param query The SQL query to execute. Cannot include bind parameters.\n     */\n    constructor(query: String) : this(query, null)\n\n    override val sql: String\n        get() = this.query\n\n    /**\n     * Creates an SQL query without any bind arguments.\n     *\n     * @param [statement] The SQL query to execute. Cannot include bind parameters.\n     */\n    override fun bindTo(statement: SupportSQLiteProgram) {\n        bind(statement, bindArgs)\n    }\n\n    override val argCount: Int\n        get() = bindArgs?.size ?: 0\n\n    companion object {\n        /**\n         * Binds the given arguments into the given sqlite statement.\n         *\n         * @param [statement] The sqlite statement\n         * @param [bindArgs]  The list of bind arguments\n         */\n        @SuppressLint(\"SyntheticAccessor\")\n        @JvmStatic\n        fun bind(\n            statement: SupportSQLiteProgram,\n            @Suppress(\"ArrayReturn\") // Due to legacy API\n            bindArgs: Array<out Any?>?\n        ) {\n            if (bindArgs == null) {\n                return\n            }\n\n            val limit = bindArgs.size\n            for (i in 0 until limit) {\n                val arg = bindArgs[i]\n                bind(statement, i + 1, arg)\n            }\n        }\n\n        private fun bind(statement: SupportSQLiteProgram, index: Int, arg: Any?) {\n            // extracted from android.database.sqlite.SQLiteConnection\n            if (arg == null) {\n                statement.bindNull(index)\n            } else if (arg is ByteArray) {\n                statement.bindBlob(index, arg)\n            } else if (arg is Float) {\n                statement.bindDouble(index, arg.toDouble())\n            } else if (arg is Double) {\n                statement.bindDouble(index, arg)\n            } else if (arg is Long) {\n                statement.bindLong(index, arg)\n            } else if (arg is Int) {\n                statement.bindLong(index, arg.toLong())\n            } else if (arg is Short) {\n                statement.bindLong(index, arg.toLong())\n            } else if (arg is Byte) {\n                statement.bindLong(index, arg.toLong())\n            } else if (arg is String) {\n                statement.bindString(index, arg)\n            } else if (arg is Boolean) {\n                statement.bindLong(index, if (arg) 1 else 0)\n            } else {\n                throw IllegalArgumentException(\n                    \"Cannot bind $arg at index $index Supported types: Null, ByteArray, \" +\n                        \"Float, Double, Long, Int, Short, Byte, String\"\n                )\n            }\n        }\n    }\n}","license":"apache-2.0"},{"repo_name":"laminr/aeroknow","path":"biz.eventually.atpl.data.db.Topic","copies":"1","size":718,"content":"package biz.eventually.atpl.data.db\n\nimport android.arch.persistence.room.*\n\n/**\n * Created by Thibault de Lambilly on 20/03/17.\n *\n */\n@Entity(\n        tableName = \"topic\",\n        indices = [Index(value = [\"subject_id\"], name = \"idx_topic_subject_id\")],\n        foreignKeys = [ForeignKey(entity = Subject::class, parentColumns = arrayOf(\"idWeb\"), childColumns = arrayOf(\"subject_id\"))]\n)\nclass Topic(\n        @PrimaryKey\n        @ColumnInfo(name = \"idWeb\")\n        val idWeb: Long,\n        @ColumnInfo(name = \"subject_id\")\n        val subjectId: Long,\n        var name: String = \"\",\n        var questions: Int = 0,\n        var follow: Int = 0,\n        var focus: Int = 0\n) {\n\n    @Ignore\n    var mean: Double = 0.0\n}","license":"mit"},{"repo_name":"androidx/androidx","path":"androidx.room.ColumnInfo","copies":"3","size":6691,"content":"/*\n * Copyright (C) 2016 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage androidx.room\n\nimport androidx.annotation.IntDef\nimport androidx.annotation.RequiresApi\n\n/**\n * Allows specific customization about the column associated with this field.\n *\n * For example, you can specify a column name for the field or change the column's type affinity.\n */\n@Target(AnnotationTarget.FIELD, AnnotationTarget.FUNCTION)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class ColumnInfo(\n    /**\n     * Name of the column in the database. Defaults to the field name if not set.\n     *\n     * @return Name of the column in the database.\n     */\n    val name: String = INHERIT_FIELD_NAME,\n\n    /**\n     * The type affinity for the column, which will be used when constructing the database.\n     *\n     * If it is not specified, the value defaults to [UNDEFINED] and Room resolves it based\n     * on the field's type and available TypeConverters.\n     *\n     * See [SQLite types documentation](https://www.sqlite.org/datatype3.html) for details.\n     *\n     * @return The type affinity of the column. This is either [UNDEFINED], [TEXT],\n     * [INTEGER], [REAL], or [BLOB].\n     */\n    @SuppressWarnings(\"unused\")\n    @get:SQLiteTypeAffinity\n    val typeAffinity: Int = UNDEFINED,\n\n    /**\n     * Convenience method to index the field.\n     *\n     * If you would like to create a composite index instead, see: [Index].\n     *\n     * @return True if this field should be indexed, false otherwise. Defaults to false.\n     */\n    val index: Boolean = false,\n\n    /**\n     * The collation sequence for the column, which will be used when constructing the database.\n     *\n     * The default value is [UNSPECIFIED]. In that case, Room does not add any\n     * collation sequence to the column, and SQLite treats it like [BINARY].\n     *\n     * @return The collation sequence of the column. This is either [UNSPECIFIED],\n     * [BINARY], [NOCASE], [RTRIM], [LOCALIZED] or [UNICODE].\n     */\n    @get:Collate\n    val collate: Int = UNSPECIFIED,\n\n    /**\n     * The default value for this column.\n     *\n     * ```\n     * @ColumnInfo(defaultValue = \"No name\")\n     * public name: String\n     *\n     * @ColumnInfo(defaultValue = \"0\")\n     * public flag: Int\n     * ```\n     *\n     * Note that the default value you specify here will _NOT_ be used if you simply\n     * insert the [Entity] with [Insert]. In that case, any value assigned in\n     * Java/Kotlin will be used. Use [Query] with an `INSERT` statement\n     * and skip this column there in order to use this default value.\n     *\n     * NULL, CURRENT_TIMESTAMP and other SQLite constant values are interpreted as such. If you want\n     * to use them as strings for some reason, surround them with single-quotes.\n     *\n     * ```\n     * @ColumnInfo(defaultValue = \"NULL\")\n     * public description: String?\n     *\n     * @ColumnInfo(defaultValue = \"'NULL'\")\n     * public name: String\n     * ```\n     *\n     * You can also use constant expressions by surrounding them with parentheses.\n     *\n     * ```\n     * @ColumnInfo(defaultValue = \"('Created at' || CURRENT_TIMESTAMP)\")\n     * public notice: String\n     * ```\n     *\n     * @return The default value for this column.\n     * @see [VALUE_UNSPECIFIED]\n     */\n    val defaultValue: String = VALUE_UNSPECIFIED,\n) {\n    /**\n     * The SQLite column type constants that can be used in [typeAffinity()]\n     */\n    @IntDef(UNDEFINED, TEXT, INTEGER, REAL, BLOB)\n    @Retention(AnnotationRetention.BINARY)\n    public annotation class SQLiteTypeAffinity\n\n    @RequiresApi(21)\n    @IntDef(UNSPECIFIED, BINARY, NOCASE, RTRIM, LOCALIZED, UNICODE)\n    @Retention(AnnotationRetention.BINARY)\n    public annotation class Collate\n\n    public companion object {\n        /**\n         * Constant to let Room inherit the field name as the column name. If used, Room will use\n         * the field name as the column name.\n         */\n        public const val INHERIT_FIELD_NAME: String = \"[field-name]\"\n\n        /**\n         * Undefined type affinity. Will be resolved based on the type.\n         *\n         * @see typeAffinity()\n         */\n        public const val UNDEFINED: Int = 1\n\n        /**\n         * Column affinity constant for strings.\n         *\n         * @see typeAffinity()\n         */\n        public const val TEXT: Int = 2\n\n        /**\n         * Column affinity constant for integers or booleans.\n         *\n         * @see typeAffinity()\n         */\n        public const val INTEGER: Int = 3\n\n        /**\n         * Column affinity constant for floats or doubles.\n         *\n         * @see typeAffinity()\n         */\n        public const val REAL: Int = 4\n\n        /**\n         * Column affinity constant for binary data.\n         *\n         * @see typeAffinity()\n         */\n        public const val BLOB: Int = 5\n\n        /**\n         * Collation sequence is not specified. The match will behave like [BINARY].\n         *\n         * @see collate()\n         */\n        public const val UNSPECIFIED: Int = 1\n\n        /**\n         * Collation sequence for case-sensitive match.\n         *\n         * @see collate()\n         */\n        public const val BINARY: Int = 2\n\n        /**\n         * Collation sequence for case-insensitive match.\n         *\n         * @see collate()\n         */\n        public const val NOCASE: Int = 3\n\n        /**\n         * Collation sequence for case-sensitive match except that trailing space characters are\n         * ignored.\n         *\n         * @see collate()\n         */\n        public const val RTRIM: Int = 4\n\n        /**\n         * Collation sequence that uses system's current locale.\n         *\n         * @see collate()\n         */\n        @RequiresApi(21)\n        public const val LOCALIZED: Int = 5\n\n        /**\n         * Collation sequence that uses Unicode Collation Algorithm.\n         *\n         * @see collate()\n         */\n        @RequiresApi(21)\n        public const val UNICODE: Int = 6\n\n        /**\n         * A constant for [defaultValue()] that makes the column to have no default value.\n         */\n        public const val VALUE_UNSPECIFIED: String = \"[value-unspecified]\"\n    }\n}","license":"apache-2.0"},{"repo_name":"westoncb/HNDesktop","path":"Story","copies":"1","size":1031,"content":"import com.google.gson.JsonObject\nimport java.awt.Image\nimport javax.swing.Icon\nimport javax.swing.ImageIcon\nimport javax.swing.UIManager\n\n\n/**\n * Created by weston on 8/27/17.\n */\n\nclass Story : Item {\n    var favicon: Icon? = null\n    var bigIcon: Image? = null\n\n    constructor(storyNode: JsonObject) : super(storyNode) {\n        this.favicon = UIManager.getIcon(\"FileView.fileIcon\")\n\n        Thread(Runnable { getFavicon() }).start()\n    }\n\n    fun getFavicon() {\n        if (this.url != null) {\n            val icon = FaviconFetcher.getFavicon(this.url)\n            if (icon != null) {\n                val image = FaviconFetcher.getScaledImage(icon, 16, 16)\n                this.favicon = ImageIcon(image)\n                this.bigIcon = FaviconFetcher.getScaledImage(icon, Math.min(48, icon.getWidth(null)), Math.min(48, icon.getHeight(null)))\n                PubSub.publish(PubSub.STORY_ICON_LOADED)\n            }\n        }\n    }\n\n    override fun toString(): String {\n        return this.title ?: \"--missing title--\"\n    }\n}","license":"mit"},{"repo_name":"ParaskP7/sample-code-posts-kotlin","path":"io.petros.posts.kotlin.model.User","copies":"1","size":310,"content":"package io.petros.posts.kotlin.model\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity(tableName = \"user\")\ndata class User(@PrimaryKey val id: String,\n                val name: String,\n                val username: String,\n                val email: String)\n","license":"apache-2.0"},{"repo_name":"premnirmal/StockTicker","path":"com.github.premnirmal.ticker.repo.data.QuoteWithHoldings","copies":"1","size":421,"content":"package com.github.premnirmal.ticker.repo.data\n\nimport androidx.room.Embedded\nimport androidx.room.Relation\n\ndata class QuoteWithHoldings(\n  @Embedded\n  val quote: QuoteRow,\n  @Relation(\n      parentColumn = \"symbol\",\n      entityColumn = \"quote_symbol\"\n  )\n  val holdings: List<HoldingRow>,\n  @Relation(\n      parentColumn = \"symbol\",\n      entityColumn = \"properties_quote_symbol\"\n  )\n  val properties: PropertiesRow?\n)","license":"gpl-3.0"},{"repo_name":"premnirmal/StockTicker","path":"com.github.premnirmal.ticker.repo.data.QuoteRow","copies":"1","size":2017,"content":"package com.github.premnirmal.ticker.repo.data\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity\ndata class QuoteRow(\n  @PrimaryKey @ColumnInfo(name = \"symbol\") val symbol: String,\n  @ColumnInfo(name = \"name\") val name: String,\n  @ColumnInfo(name = \"last_trade_price\") val lastTradePrice: Float,\n  @ColumnInfo(name = \"change_percent\") val changeInPercent: Float,\n  @ColumnInfo(name = \"change\") val change: Float,\n  @ColumnInfo(name = \"exchange\") val stockExchange: String,\n  @ColumnInfo(name = \"currency\") val currency: String,\n  @ColumnInfo(name = \"is_post_market\") val isPostMarket: Boolean,\n  @ColumnInfo(name = \"annual_dividend_rate\") val annualDividendRate: Float,\n  @ColumnInfo(name = \"annual_dividend_yield\") val annualDividendYield: Float,\n  @ColumnInfo(name = \"dayHigh\") val dayHigh: Float?,\n  @ColumnInfo(name = \"dayLow\") val dayLow: Float?,\n  @ColumnInfo(name = \"previousClose\") val previousClose: Float,\n  @ColumnInfo(name = \"open\") val open: Float?,\n  @ColumnInfo(name = \"regularMarketVolume\") val regularMarketVolume: Float?,\n  @ColumnInfo(name = \"peRatio\") val peRatio: Float?,\n  @ColumnInfo(name = \"fiftyTwoWeekLowChange\") val fiftyTwoWeekLowChange: Float?,\n  @ColumnInfo(name = \"fiftyTwoWeekLowChangePercent\") val fiftyTwoWeekLowChangePercent: Float?,\n  @ColumnInfo(name = \"fiftyTwoWeekHighChange\") val fiftyTwoWeekHighChange: Float?,\n  @ColumnInfo(name = \"fiftyTwoWeekHighChangePercent\") val fiftyTwoWeekHighChangePercent: Float?,\n  @ColumnInfo(name = \"fiftyTwoWeekLow\") val fiftyTwoWeekLow: Float?,\n  @ColumnInfo(name = \"fiftyTwoWeekHigh\") val fiftyTwoWeekHigh: Float?,\n  @ColumnInfo(name = \"dividendDate\") val dividendDate: Float?,\n  @ColumnInfo(name = \"earningsDate\") val earningsDate: Float?,\n  @ColumnInfo(name = \"marketCap\") val marketCap: Float?,\n  @ColumnInfo(name = \"isTradeable\") val isTradeable: Boolean?,\n  @ColumnInfo(name = \"isTriggerable\") val isTriggerable: Boolean?,\n  @ColumnInfo(name = \"marketState\") val marketState: String?\n)\n","license":"gpl-3.0"},{"repo_name":"premnirmal/StockTicker","path":"com.github.premnirmal.ticker.repo.data.HoldingRow","copies":"1","size":411,"content":"package com.github.premnirmal.ticker.repo.data\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity\ndata class HoldingRow(\n    @PrimaryKey(autoGenerate = true) var id: Long? = null,\n    @ColumnInfo(name = \"quote_symbol\") val quoteSymbol: String,\n    @ColumnInfo(name = \"shares\") val shares: Float = 0.0f,\n    @ColumnInfo(name = \"price\") val price: Float = 0.0f\n)","license":"gpl-3.0"},{"repo_name":"premnirmal/StockTicker","path":"com.github.premnirmal.ticker.repo.data.PropertiesRow","copies":"1","size":491,"content":"package com.github.premnirmal.ticker.repo.data\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity\ndata class PropertiesRow(\n  @PrimaryKey(autoGenerate = true) var id: Long? = null,\n  @ColumnInfo(name = \"properties_quote_symbol\") val quoteSymbol: String,\n  @ColumnInfo(name = \"notes\") val notes: String = \"\",\n  @ColumnInfo(name = \"alert_above\") val alertAbove: Float = 0.0f,\n  @ColumnInfo(name = \"alert_below\") val alertBelow: Float = 0.0f\n)","license":"gpl-3.0"},{"repo_name":"chrisbanes/tivi","path":"app.tivi.data.entities.Season","copies":"1","size":2402,"content":"/*\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage app.tivi.data.entities\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(\n    tableName = \"seasons\",\n    indices = [\n        Index(value = [\"trakt_id\"], unique = true),\n        Index(value = [\"show_id\"])\n    ],\n    foreignKeys = [\n        ForeignKey(\n            entity = TiviShow::class,\n            parentColumns = arrayOf(\"id\"),\n            childColumns = arrayOf(\"show_id\"),\n            onUpdate = ForeignKey.CASCADE,\n            onDelete = ForeignKey.CASCADE\n        )\n    ]\n)\ndata class Season(\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = \"id\")\n    override val id: Long = 0,\n    @ColumnInfo(name = \"show_id\") val showId: Long,\n    @ColumnInfo(name = \"trakt_id\") override val traktId: Int? = null,\n    @ColumnInfo(name = \"tmdb_id\") override val tmdbId: Int? = null,\n    @ColumnInfo(name = \"title\") val title: String? = null,\n    @ColumnInfo(name = \"overview\") val summary: String? = null,\n    @ColumnInfo(name = \"number\") val number: Int? = null,\n    @ColumnInfo(name = \"network\") val network: String? = null,\n    @ColumnInfo(name = \"ep_count\") val episodeCount: Int? = null,\n    @ColumnInfo(name = \"ep_aired\") val episodesAired: Int? = null,\n    @ColumnInfo(name = \"trakt_rating\") val traktRating: Float? = null,\n    @ColumnInfo(name = \"trakt_votes\") val traktRatingVotes: Int? = null,\n    @ColumnInfo(name = \"tmdb_poster_path\") val tmdbPosterPath: String? = null,\n    @ColumnInfo(name = \"tmdb_backdrop_path\") val tmdbBackdropPath: String? = null,\n    @ColumnInfo(name = \"ignored\") val ignored: Boolean = false\n) : TiviEntity, TmdbIdEntity, TraktIdEntity {\n    companion object {\n        const val NUMBER_SPECIALS = 0\n        val EMPTY = Season(showId = 0)\n    }\n}\n","license":"apache-2.0"},{"repo_name":"chrisbanes/tivi","path":"app.tivi.data.resultentities.SeasonWithEpisodesAndWatches","copies":"1","size":1832,"content":"/*\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage app.tivi.data.resultentities\n\nimport androidx.room.Embedded\nimport androidx.room.Relation\nimport app.tivi.data.entities.Episode\nimport app.tivi.data.entities.Season\nimport java.util.Objects\n\nclass SeasonWithEpisodesAndWatches {\n    @Embedded\n    lateinit var season: Season\n\n    @Relation(parentColumn = \"id\", entityColumn = \"season_id\", entity = Episode::class)\n    var episodes: List<EpisodeWithWatches> = emptyList()\n\n    override fun equals(other: Any?): Boolean = when {\n        other === this -> true\n        other is SeasonWithEpisodesAndWatches -> season == other.season && episodes == other.episodes\n        else -> false\n    }\n\n    override fun hashCode(): Int = Objects.hash(season, episodes)\n}\n\nval List<EpisodeWithWatches>.numberAiredToWatch: Int\n    get() = count { !it.isWatched && it.episode.isAired }\n\nval List<EpisodeWithWatches>.numberWatched: Int\n    get() = count { it.isWatched }\n\nval List<EpisodeWithWatches>.numberToAir: Int\n    get() = size - numberAired\n\nval List<EpisodeWithWatches>.numberAired: Int\n    get() = count { it.episode.isAired }\n\nval List<EpisodeWithWatches>.nextToAir: Episode?\n    get() = firstOrNull {\n        it.episode.let { ep -> !ep.isAired && ep.firstAired != null }\n    }?.episode\n","license":"apache-2.0"},{"repo_name":"SimpleMobileTools/Simple-Gallery","path":"com.simplemobiletools.gallery.pro.models.DateTaken","copies":"2","size":886,"content":"package com.simplemobiletools.gallery.pro.models\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n// Date Taken in the MediaStore is unreliable and hard to work with, keep the values in an own database\n// It is used at sorting files by date taken, checking EXIF file by file would be way too slow\n@Entity(tableName = \"date_takens\", indices = [Index(value = [\"full_path\"], unique = true)])\ndata class DateTaken(\n    @PrimaryKey(autoGenerate = true) var id: Int?,\n    @ColumnInfo(name = \"full_path\") var fullPath: String,\n    @ColumnInfo(name = \"filename\") var filename: String,\n    @ColumnInfo(name = \"parent_path\") var parentPath: String,\n    @ColumnInfo(name = \"date_taken\") var taken: Long,\n    @ColumnInfo(name = \"last_fixed\") var lastFixed: Int,\n    @ColumnInfo(name = \"last_modified\") var lastModified: Long)\n","license":"gpl-3.0"},{"repo_name":"AndroidX/androidx","path":"androidx.annotation.Keep","copies":"3","size":2173,"content":"/*\n * Copyright (C) 2015 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage androidx.annotation\n\nimport java.lang.annotation.ElementType.ANNOTATION_TYPE\nimport java.lang.annotation.ElementType.CONSTRUCTOR\nimport java.lang.annotation.ElementType.FIELD\nimport java.lang.annotation.ElementType.METHOD\nimport java.lang.annotation.ElementType.PACKAGE\nimport java.lang.annotation.ElementType.TYPE\n\n/**\n * Denotes that the annotated element should not be removed when\n * the code is minified at build time. This is typically used\n * on methods and classes that are accessed only via reflection\n * so a compiler may think that the code is unused.\n *\n * Do not use this within library code. As a best practice,\n * minification should be able to remove all library code for\n * libraries that are added as dependencies but not used. For\n * library code, consider instead using conditional keep rules.\n * E.g.: -if ... -keep ...\n *\n * Example:\n * ```\n * @Keep\n * public void foo() {\n *     ...\n * }\n * ```\n */\n@Retention(AnnotationRetention.BINARY)\n@Target(\n    AnnotationTarget.FILE,\n    AnnotationTarget.ANNOTATION_CLASS,\n    AnnotationTarget.CLASS,\n    AnnotationTarget.ANNOTATION_CLASS,\n    AnnotationTarget.CONSTRUCTOR,\n    AnnotationTarget.FUNCTION,\n    AnnotationTarget.PROPERTY_GETTER,\n    AnnotationTarget.PROPERTY_SETTER,\n    AnnotationTarget.FIELD\n)\n// Needed due to Kotlin's lack of PACKAGE annotation target\n// https://youtrack.jetbrains.com/issue/KT-45921\n@Suppress(\"DEPRECATED_JAVA_ANNOTATION\")\n@java.lang.annotation.Target(\n    PACKAGE, TYPE, ANNOTATION_TYPE, CONSTRUCTOR, METHOD, FIELD\n)\npublic annotation class Keep","license":"apache-2.0"},{"repo_name":"kamerok/Orny","path":"com.kamer.orny.data.room.entity.ExpenseEntity","copies":"1","size":419,"content":"package com.kamer.orny.data.room.entity\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport java.util.*\n\n\n@Entity(tableName = \"expenses\")\ndata class ExpenseEntity(\n        @PrimaryKey val id: String,\n        val comment: String,\n        val date: Date,\n        @ColumnInfo(name = \"is_off_budget\") val isOffBudget: Boolean\n)","license":"apache-2.0"},{"repo_name":"kamerok/Orny","path":"com.kamer.orny.data.room.entity.ExpenseEntryEntity","copies":"1","size":1158,"content":"package com.kamer.orny.data.room.entity\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.ForeignKey\n\n@Entity(\n        tableName = \"expenses_entries\",\n        primaryKeys = arrayOf(\"author_id\", \"expense_id\"),\n        foreignKeys = arrayOf(\n                ForeignKey(\n                        entity = AuthorEntity::class,\n                        parentColumns = arrayOf(\"id\"),\n                        childColumns = arrayOf(\"author_id\"),\n                        onDelete = ForeignKey.CASCADE,\n                        deferred = true\n                ),\n                ForeignKey(\n                        entity = ExpenseEntity::class,\n                        parentColumns = arrayOf(\"id\"),\n                        childColumns = arrayOf(\"expense_id\"),\n                        onDelete = ForeignKey.CASCADE,\n                        deferred = true\n                )\n        )\n)\ndata class ExpenseEntryEntity(\n    @ColumnInfo(name = \"author_id\", index = true) val authorId: String,\n    @ColumnInfo(name = \"expense_id\", index = true) val expenseId: String,\n    val amount: Double\n)","license":"apache-2.0"},{"repo_name":"clappr/clappr-android","path":"android.util.Log","copies":"1","size":1126,"content":"package android.util\n\n@Suppress(\"unused\")\nobject Log {\n\n    /**\n     * Priority constant for the println method; use Log.v.\n     */\n    const val VERBOSE = 2\n\n    /**\n     * Priority constant for the println method; use Log.d.\n     */\n    const val DEBUG = 3\n\n    /**\n     * Priority constant for the println method; use Log.i.\n     */\n    const val INFO = 4\n\n    /**\n     * Priority constant for the println method; use Log.w.\n     */\n    const val WARN = 5\n\n    /**\n     * Priority constant for the println method; use Log.e.\n     */\n    const val ERROR = 6\n\n    /**\n     * Priority constant for the println method.\n     */\n    const val ASSERT = 7\n\n    @JvmStatic\n    fun d(tag: String, msg: String): Int {\n        println(\"DEBUG: $tag: $msg\")\n        return 0\n    }\n\n    @JvmStatic\n    fun i(tag: String, msg: String): Int {\n        println(\"INFO: $tag: $msg\")\n        return 0\n    }\n\n    @JvmStatic\n    fun w(tag: String, msg: String): Int {\n        println(\"WARN: $tag: $msg\")\n        return 0\n    }\n\n    @JvmStatic\n    fun e(tag: String, msg: String): Int {\n        println(\"ERROR: $tag: $msg\")\n        return 0\n    }\n}","license":"bsd-3-clause"},{"repo_name":"magnusjerre/KaffeV2","path":"kaffe.data.Brygg","copies":"1","size":782,"content":"package kaffe.data\n\nimport kaffe.utils.erSammeBruker\nimport java.util.*\n\ndata class Brygg(\n        var _id: String?,\n        var navn: String,\n        var kaffeId: String,\n        var brygger: String,\n        var dato: Date,\n        var liter: Float,\n        var skjeer: Float,\n        var vis: Boolean,\n        var kommentar: String = \"\",\n        var malthet: Malthet,\n        var karakterer: MutableList<Karakter>) {\n\n    constructor(): this(null, \"default\", \"default\", \"default\", Date(), 0f, 0f, true, \"\", Malthet.MEDIUM, mutableListOf())\n\n    fun getKarakterForBruker(bruker: String) : Karakter? {\n        for (karakter in karakterer) {\n            if (erSammeBruker(bruker, karakter.bruker)) {\n                return karakter\n            }\n        }\n        return null\n    }\n}","license":"apache-2.0"},{"repo_name":"jamieadkins95/Roach","path":"com.jamieadkins.gwent.database.entity.DeckWithCardsEntity","copies":"1","size":291,"content":"package com.jamieadkins.gwent.database.entity\n\nimport androidx.room.Embedded\nimport androidx.room.Relation\n\nclass DeckWithCardsEntity {\n    @Embedded\n    lateinit var deck: DeckEntity\n\n    @Relation(parentColumn = \"id\", entityColumn = \"deckId\")\n    lateinit var cards: List<DeckCardEntity>\n}","license":"apache-2.0"},{"repo_name":"wordpress-mobile/WordPress-Stores-Android","path":"org.wordpress.android.fluxc.model.OrderEntity","copies":"2","size":5849,"content":"package org.wordpress.android.fluxc.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport org.wordpress.android.fluxc.model.LocalOrRemoteId.LocalId\nimport org.wordpress.android.fluxc.model.order.FeeLine\nimport org.wordpress.android.fluxc.model.order.LineItem\nimport org.wordpress.android.fluxc.model.order.OrderAddress\nimport org.wordpress.android.fluxc.model.order.ShippingLine\nimport org.wordpress.android.fluxc.model.order.TaxLine\nimport java.math.BigDecimal\n\n@Entity(\n    tableName = \"OrderEntity\",\n    indices = [Index(\n        value = [\"localSiteId\", \"orderId\"]\n    )],\n    primaryKeys = [\"localSiteId\", \"orderId\"]\n)\ndata class OrderEntity(\n    @ColumnInfo(name = \"localSiteId\")\n    val localSiteId: LocalId,\n    val orderId: Long,\n    val number: String = \"\", // The, order number to display to the user\n    val status: String = \"\",\n    val currency: String = \"\",\n    val orderKey: String = \"\",\n    val dateCreated: String = \"\", // ISO 8601-formatted date in UTC, e.g. 1955-11-05T14:15:00Z\n    val dateModified: String = \"\", // ISO 8601-formatted date in UTC, e.g. 1955-11-05T14:15:00Z\n    val total: String = \"\", // Complete total, including taxes\n    val totalTax: String = \"\", // The total amount of tax (from products, shipping, discounts, etc.)\n    val shippingTotal: String = \"\", // The total shipping cost (excluding tax)\n    val paymentMethod: String = \"\", // Payment method code e.g. 'cod' 'stripe'\n    val paymentMethodTitle: String = \"\", // Displayable payment method e.g. 'Cash on delivery' 'Credit Card (Stripe)'\n    val datePaid: String = \"\",\n    val pricesIncludeTax: Boolean = false,\n    val customerNote: String = \"\", // Note left by the customer during order submission\n    val discountTotal: String = \"\",\n    val discountCodes: String = \"\",\n    val refundTotal: BigDecimal = BigDecimal.ZERO, // The total refund value for this order (usually a negative number)\n    val billingFirstName: String = \"\",\n    val billingLastName: String = \"\",\n    val billingCompany: String = \"\",\n    val billingAddress1: String = \"\",\n    val billingAddress2: String = \"\",\n    val billingCity: String = \"\",\n    val billingState: String = \"\",\n    val billingPostcode: String = \"\",\n    val billingCountry: String = \"\",\n    val billingEmail: String = \"\",\n    val billingPhone: String = \"\",\n    val shippingFirstName: String = \"\",\n    val shippingLastName: String = \"\",\n    val shippingCompany: String = \"\",\n    val shippingAddress1: String = \"\",\n    val shippingAddress2: String = \"\",\n    val shippingCity: String = \"\",\n    val shippingState: String = \"\",\n    val shippingPostcode: String = \"\",\n    val shippingCountry: String = \"\",\n    val shippingPhone: String = \"\",\n    val lineItems: String = \"\",\n    val shippingLines: String = \"\",\n    val feeLines: String = \"\",\n    val taxLines: String = \"\",\n    val metaData: String = \"\", // this is a small subset of the metadata, see OrderMetaDataEntity for full metadata\n    @ColumnInfo(name = \"paymentUrl\", defaultValue = \"\")\n    val paymentUrl: String = \"\",\n    @ColumnInfo(name = \"isEditable\", defaultValue = \"1\")\n    val isEditable: Boolean = true\n) {\n    companion object {\n        private val gson by lazy { Gson() }\n    }\n\n    /**\n     * Returns true if there are shipping details defined for this order,\n     * which are different from the billing details.\n     *\n     * If no separate shipping details are defined, the billing details should be used instead,\n     * as the shippingX properties will be empty.\n     */\n    fun hasSeparateShippingDetails() = shippingCountry.isNotEmpty()\n\n    /**\n     * Returns the billing details wrapped in a [OrderAddress].\n     */\n    fun getBillingAddress() = OrderAddress.Billing(this)\n\n    /**\n     * Returns the shipping details wrapped in a [OrderAddress].\n     */\n    fun getShippingAddress() = OrderAddress.Shipping(this)\n\n    /**\n     * Deserializes the JSON contained in [lineItems] into a list of [LineItem] objects.\n     */\n    fun getLineItemList(): List<LineItem> {\n        val responseType = object : TypeToken<List<LineItem>>() {}.type\n        return gson.fromJson(lineItems, responseType) as? List<LineItem> ?: emptyList()\n    }\n\n    /**\n     * Returns the order subtotal (the sum of the subtotals of each line item in the order).\n     */\n    fun getOrderSubtotal(): Double {\n        return getLineItemList().sumByDouble { it.subtotal?.toDoubleOrNull() ?: 0.0 }\n    }\n\n    /**\n     * Deserializes the JSON contained in [shippingLines] into a list of [ShippingLine] objects.\n     */\n    fun getShippingLineList(): List<ShippingLine> {\n        val responseType = object : TypeToken<List<ShippingLine>>() {}.type\n        return gson.fromJson(shippingLines, responseType) as? List<ShippingLine> ?: emptyList()\n    }\n\n    /**\n     * Deserializes the JSON contained in [feeLines] into a list of [FeeLine] objects.\n     */\n    fun getFeeLineList(): List<FeeLine> {\n        val responseType = object : TypeToken<List<FeeLine>>() {}.type\n        return gson.fromJson(feeLines, responseType) as? List<FeeLine> ?: emptyList()\n    }\n\n    /**\n     * Deserializes the JSON contained in [taxLines] into a list of [TaxLine] objects.\n     */\n    fun getTaxLineList(): List<TaxLine> {\n        val responseType = object : TypeToken<List<TaxLine>>() {}.type\n        return gson.fromJson(taxLines, responseType) as? List<TaxLine> ?: emptyList()\n    }\n\n    /**\n     * Deserializes the JSON contained in [metaData] into a list of [WCMetaData] objects.\n     */\n    fun getMetaDataList(): List<WCMetaData> {\n        val responseType = object : TypeToken<List<WCMetaData>>() {}.type\n        return gson.fromJson(metaData, responseType) as? List<WCMetaData> ?: emptyList()\n    }\n\n    fun isMultiShippingLinesAvailable() = getShippingLineList().size > 1\n}\n","license":"gpl-2.0"},{"repo_name":"tronalddump-io/tronald-app","path":"io.tronalddump.app.tag.TagEntity","copies":"1","size":944,"content":"package io.tronalddump.app.tag\n\nimport io.tronalddump.app.quote.QuoteEntity\nimport javax.persistence.*\n\n@Entity\n@Table(name = \"tag\")\nopen class TagEntity(\n        @get:Basic\n        @get:Column(name = \"created_at\")\n        open var createdAt: java.sql.Timestamp? = null,\n\n        @get:JoinTable(\n                name = \"quote_tag\",\n                inverseJoinColumns = [JoinColumn(name = \"quote_id\")],\n                joinColumns = [JoinColumn(name = \"tag_id\")]\n        )\n        @get:OneToMany(fetch = FetchType.LAZY)\n        open var quotes: List<QuoteEntity>? = emptyList(),\n\n        @get:Id\n        @get:Column(name = \"tag_id\", nullable = false, insertable = false, updatable = false)\n        open var tagId: String? = null,\n\n        @get:Basic\n        @get:Column(name = \"updated_at\")\n        open var updatedAt: java.sql.Timestamp? = null,\n\n        @get:Basic\n        @get:Column(name = \"value\")\n        open var value: String? = null\n)\n\n","license":"gpl-3.0"},{"repo_name":"laminr/aeroknow","path":"biz.eventually.atpl.data.db.LastCall","copies":"1","size":662,"content":"package biz.eventually.atpl.data.db\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.Ignore\nimport android.arch.persistence.room.PrimaryKey\nimport biz.eventually.atpl.data.dao.LastCallDao\nimport java.util.*\nimport javax.inject.Inject\n\n/**\n * Created by Thibault de Lambilly on 26/08/2017.\n *\n */\n@Entity(tableName = \"last_call\")\nclass LastCall(@PrimaryKey val type: String) {\n\n    companion object {\n        val TYPE_SOURCE = \"source\"\n        val TYPE_TOPIC = \"topic\"\n    }\n\n    var updatedAt: Long = Date().time\n\n    @Ignore\n    constructor(type: String, updatedAt: Long): this(type) {\n        this.updatedAt = updatedAt\n    }\n}","license":"mit"},{"repo_name":"bropane/Job-Seer","path":"com.taylorsloan.jobseer.data.job.local.model.LocalJob","copies":"1","size":905,"content":"package com.taylorsloan.jobseer.data.job.local.model\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n/**\n * Model that describes a job that will be saved to local DB\n * Created by taylorsloan on 10/28/17.\n */\n@Entity(tableName = \"jobs\")\ndata class LocalJob(@PrimaryKey(autoGenerate = false) var id: String,\n                    var created_at: String?,\n                    var title: String?,\n                    var location: String?,\n                    var type: String?,\n                    var description: String?,\n                    var how_to_apply: String?,\n                    var company: String?,\n                    var company_url: String?,\n                    var company_logo: String?,\n                    var url: String?,\n                    var saved: Boolean? = false,\n                    val date_added: Long = System.currentTimeMillis())","license":"mit"},{"repo_name":"tbaxter120/Restdroid","path":"com.ridocula.restdroid.persistence.entities.HeaderEntity","copies":"1","size":633,"content":"package com.ridocula.restdroid.persistence.entities\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n/**\n * Created by tbaxter on 7/27/17.\n */\n@Entity(tableName = \"header\")\ndata class HeaderEntity constructor(\n        @ColumnInfo(name = \"id\")\n        @PrimaryKey\n        val id: String,\n        @ColumnInfo(name = \"parent_id\")\n        val parentId: String,\n        @ColumnInfo(name = \"type\")\n        val type: String,\n        @ColumnInfo(name = \"key\")\n        val key: String,\n        @ColumnInfo(name = \"value\")\n        val value: String\n)","license":"apache-2.0"},{"repo_name":"Suomaa/androidLearning","path":"fi.lasicaine.nutritionalvalue.model.Food","copies":"1","size":367,"content":"package fi.lasicaine.nutritionalvalue.model\n\nimport androidx.room.*\nimport fi.lasicaine.nutritionalvalue.data.network.dto.FoodDto\n\n@Entity(tableName = \"favorites\")\ndata class Food(\n    @PrimaryKey val id: String,\n    val name: String,\n    val type: String,\n    var isFavorite: Boolean = false\n) {\n    constructor(dto: FoodDto) : this(dto.ndbno, dto.name, dto.group)\n}","license":"apache-2.0"},{"repo_name":"chrisbanes/tivi","path":"app.tivi.data.entities.LastRequest","copies":"1","size":1200,"content":"/*\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage app.tivi.data.entities\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport org.threeten.bp.Instant\n\n@Entity(\n    tableName = \"last_requests\",\n    indices = [Index(value = [\"request\", \"entity_id\"], unique = true)]\n)\ndata class LastRequest(\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = \"id\")\n    override val id: Long = 0,\n    @ColumnInfo(name = \"request\") val request: Request,\n    @ColumnInfo(name = \"entity_id\") val entityId: Long,\n    @ColumnInfo(name = \"timestamp\") val timestamp: Instant\n) : TiviEntity\n","license":"apache-2.0"},{"repo_name":"AK-47-D/cms","path":"com.ak47.cms.cms.dto.TechArticleDto","copies":"1","size":806,"content":"package com.ak47.cms.cms.dto\n\nimport com.ak47.cms.cms.entity.TechArticle\nimport java.util.*\n\nclass TechArticleDto : TechArticle {\n    var tagDetail = \"\"\n\n    constructor(\n            id: Long,\n            url: String,\n            title: String,\n            simpleContent: String,\n            showContent: String,\n            tagId: Int,\n            tagDetail: String,\n            category: String,\n            gmtCreate: Date,\n            gmtModified: Date\n    ) : super() {\n        this.id = id\n        this.url = url\n        this.title = title\n        this.simpleContent = simpleContent\n        this.showContent = showContent\n        this.tagId = tagId\n        this.tagDetail = tagDetail\n        this.category = category\n        this.gmtCreate = gmtCreate\n        this.gmtModified = gmtModified\n    }\n}\n\n","license":"apache-2.0"},{"repo_name":"Heiner1/AndroidAPS","path":"info.nightscout.androidaps.database.entities.TherapyEvent","copies":"1","size":7125,"content":"package info.nightscout.androidaps.database.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport info.nightscout.androidaps.database.TABLE_THERAPY_EVENTS\nimport info.nightscout.androidaps.database.embedments.InterfaceIDs\nimport info.nightscout.androidaps.database.interfaces.DBEntryWithTimeAndDuration\nimport info.nightscout.androidaps.database.interfaces.TraceableDBEntry\nimport java.util.*\n\n@Entity(\n    tableName = TABLE_THERAPY_EVENTS,\n    foreignKeys = [ForeignKey(\n        entity = TherapyEvent::class,\n        parentColumns = [\"id\"],\n        childColumns = [\"referenceId\"]\n    )],\n    indices = [\n        Index(\"id\"),\n        Index(\"type\"),\n        Index(\"nightscoutId\"),\n        Index(\"isValid\"),\n        Index(\"referenceId\"),\n        Index(\"timestamp\")\n    ]\n)\ndata class TherapyEvent(\n    @PrimaryKey(autoGenerate = true)\n    override var id: Long = 0,\n    override var version: Int = 0,\n    override var dateCreated: Long = -1,\n    override var isValid: Boolean = true,\n    override var referenceId: Long? = null,\n    @Embedded\n    override var interfaceIDs_backing: InterfaceIDs? = null,\n    override var timestamp: Long,\n    override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(),\n    override var duration: Long = 0,\n    var type: Type,\n    var note: String? = null,\n    var enteredBy: String? = null,\n    var glucose: Double? = null,\n    var glucoseType: MeterType? = null,\n    var glucoseUnit: GlucoseUnit,\n) : TraceableDBEntry, DBEntryWithTimeAndDuration {\n\n    private fun contentEqualsTo(other: TherapyEvent): Boolean =\n        isValid == other.isValid &&\n            timestamp == other.timestamp &&\n            utcOffset == other.utcOffset &&\n            duration == other.duration &&\n            type == other.type &&\n            note == other.note &&\n            enteredBy == other.enteredBy &&\n            glucose == other.glucose &&\n            glucoseType == other.glucoseType &&\n            glucoseUnit == other.glucoseUnit\n\n    fun onlyNsIdAdded(previous: TherapyEvent): Boolean =\n        previous.id != id &&\n            contentEqualsTo(previous) &&\n            previous.interfaceIDs.nightscoutId == null &&\n            interfaceIDs.nightscoutId != null\n\n    enum class GlucoseUnit (val toString: String) {\n        MGDL (ValueWithUnit.MGDL),\n        MMOL (ValueWithUnit.MMOL);\n\n        companion object\n    }\n\n    enum class MeterType(val text: String) {\n        @SerializedName(\"Finger\")\n        FINGER(\"Finger\"),\n        @SerializedName(\"Sensor\")\n        SENSOR(\"Sensor\"),\n        @SerializedName(\"Manual\")\n        MANUAL(\"Manual\")\n        ;\n\n        companion object {\n\n            fun fromString(text: String?) = values().firstOrNull { it.text == text } ?: MANUAL\n        }\n    }\n\n    @Suppress(\"unused\")\n    enum class Type(val text: String, val nsNative: Boolean = false) {\n\n        @SerializedName(\"Site Change\")\n        CANNULA_CHANGE(\"Site Change\", nsNative = true),\n        @SerializedName(\"Insulin Change\")\n        INSULIN_CHANGE(\"Insulin Change\", nsNative = true),\n        @SerializedName(\"Pump Battery Change\")\n        PUMP_BATTERY_CHANGE(\"Pump Battery Change\", nsNative = true),\n        @SerializedName(\"Sensor Change\")\n        SENSOR_CHANGE(\"Sensor Change\", nsNative = true),\n        @SerializedName(\"Sensor Start\")\n        SENSOR_STARTED(\"Sensor Start\", nsNative = true),\n        @SerializedName(\"Sensor Stop\")\n        SENSOR_STOPPED(\"Sensor Stop\", nsNative = true),\n        @SerializedName(\"BG Check\")\n        FINGER_STICK_BG_VALUE(\"BG Check\", nsNative = true),\n        @SerializedName(\"Exercise\")\n        EXERCISE(\"Exercise\", nsNative = true),\n        @SerializedName(\"Announcement\")\n        ANNOUNCEMENT(\"Announcement\", nsNative = true),\n        @SerializedName(\"Question\")\n        QUESTION(\"Question\", nsNative = true),\n        @SerializedName(\"Note\")\n        NOTE(\"Note\", nsNative = true),\n        @SerializedName(\"OpenAPS Offline\")\n        APS_OFFLINE(\"OpenAPS Offline\", nsNative = true),\n        @SerializedName(\"D.A.D. Alert\")\n        DAD_ALERT(\"D.A.D. Alert\", nsNative = true),\n        @SerializedName(\"Mbg\")\n        NS_MBG(\"Mbg\", nsNative = true),\n\n        // Used but not as a Therapy Event (use constants only)\n        @SerializedName(\"Carb Correction\")\n        CARBS_CORRECTION(\"Carb Correction\", nsNative = true),\n        @SerializedName(\"Bolus Wizard\")\n        BOLUS_WIZARD(\"Bolus Wizard\", nsNative = true),\n        @SerializedName(\"Correction Bolus\")\n        CORRECTION_BOLUS(\"Correction Bolus\", nsNative = true),\n        @SerializedName(\"Meal Bolus\")\n        MEAL_BOLUS(\"Meal Bolus\", nsNative = true),\n        @SerializedName(\"Combo Bolus\")\n        COMBO_BOLUS(\"Combo Bolus\", nsNative = true),\n        @SerializedName(\"Temporary Target\")\n        TEMPORARY_TARGET(\"Temporary Target\", nsNative = true),\n        @SerializedName(\"Temporary Target Cancel\")\n        TEMPORARY_TARGET_CANCEL(\"Temporary Target Cancel\", nsNative = true),\n        @SerializedName(\"Profile Switch\")\n        PROFILE_SWITCH(\"Profile Switch\", nsNative = true),\n        @SerializedName(\"Snack Bolus\")\n        SNACK_BOLUS(\"Snack Bolus\", nsNative = true),\n        @SerializedName(\"Temp Basal\")\n        TEMPORARY_BASAL(\"Temp Basal\", nsNative = true),\n        @SerializedName(\"Temp Basal Start\")\n        TEMPORARY_BASAL_START(\"Temp Basal Start\", nsNative = true),\n        @SerializedName(\"Temp Basal End\")\n        TEMPORARY_BASAL_END(\"Temp Basal End\", nsNative = true),\n\n        // Not supported by NS\n        @SerializedName(\"Tube Change\")\n        TUBE_CHANGE(\"Tube Change\"),\n        @SerializedName(\"Falling Asleep\")\n        FALLING_ASLEEP(\"Falling Asleep\"),\n        @SerializedName(\"Battery Empty\")\n        BATTERY_EMPTY(\"Battery Empty\"),\n        @SerializedName(\"Reservoir Empty\")\n        RESERVOIR_EMPTY(\"Reservoir Empty\"),\n        @SerializedName(\"Occlusion\")\n        OCCLUSION(\"Occlusion\"),\n        @SerializedName(\"Pump Stopped\")\n        PUMP_STOPPED(\"Pump Stopped\"),\n        @SerializedName(\"Pump Started\")\n        PUMP_STARTED(\"Pump Started\"),\n        @SerializedName(\"Pump Paused\")\n        PUMP_PAUSED(\"Pump Paused\"),\n        @SerializedName(\"Waking Up\")\n        WAKING_UP(\"Waking Up\"),\n        @SerializedName(\"Sickness\")\n        SICKNESS(\"Sickness\"),\n        @SerializedName(\"Stress\")\n        STRESS(\"Stress\"),\n        @SerializedName(\"Pre Period\")\n        PRE_PERIOD(\"Pre Period\"),\n        @SerializedName(\"Alcohol\")\n        ALCOHOL(\"Alcohol\"),\n        @SerializedName(\"Cortisone\")\n        CORTISONE(\"Cortisone\"),\n        @SerializedName(\"Feeling Low\")\n        FEELING_LOW(\"Feeling Low\"),\n        @SerializedName(\"Feeling High\")\n        FEELING_HIGH(\"Feeling High\"),\n        @SerializedName(\"Leaking Infusion Set\")\n        LEAKING_INFUSION_SET(\"Leaking Infusion Set\"),\n\n        // Default\n        @SerializedName(\"<none>\")\n        NONE(\"<none>\")\n        ;\n\n        companion object {\n\n            fun fromString(text: String?) = values().firstOrNull { it.text == text } ?: NONE\n        }\n    }\n}","license":"agpl-3.0"},{"repo_name":"Apolline-Lille/apolline-android","path":"science.apolline.models.Device","copies":"1","size":2423,"content":"package science.apolline.models\n\n/**\n * Created by sparow on 10/20/17.\n */\n\nimport android.arch.persistence.room.*\n\nimport com.google.gson.JsonObject\nimport com.google.gson.annotations.Expose\nimport com.google.gson.annotations.SerializedName\nimport science.apolline.utils.CheckUtility\nimport science.apolline.utils.GeoHashHelper\n\n\n@Entity\ndata class Device(\n        @SerializedName(\"uuid\")\n        @Expose\n        var uuid: String,\n        @SerializedName(\"device\")\n        @Expose\n        var device: String,\n        @SerializedName(\"date\")\n        @Expose\n        var date: Long,\n        @SerializedName(\"position\")\n        @Expose\n        @Embedded\n        var position: Position?,\n        @SerializedName(\"data\")\n        @Expose\n        var data: JsonObject?,\n        /**\n         *  0 if not sync, 1 if sync\n         */\n        @SerializedName(\"isSync\")\n        @Expose\n        var isSync: Int\n) {\n    @SerializedName(\"device_id\")\n    @Expose\n    @PrimaryKey(autoGenerate = true)\n    var id: Long = 0\n\n    @Ignore\n    private var longitude: Double = -1.0\n        get() {\n            if (position?.geohash != \"no\") {\n                return  GeoHashHelper.decode(position!!.geohash).longitude\n            }\n            return -1.0\n        }\n\n\n    @Ignore\n    private var latitude: Double = -1.0\n        get() {\n            if (position?.geohash != \"no\") {\n                return  GeoHashHelper.decode(position!!.geohash).latitude\n            }\n            return -1.0\n        }\n\n\n    @Ignore\n    constructor() : this(\"\", \"\", 0, null, null, 0)\n\n\n    override fun toString(): String {\n        return \"\"\"\n        |AndroidId = $uuid\n        |Device = $device\n        |Date = $date\n        |Position = $position\n        |Data = $data\n        \"\"\".trimMargin()\n    }\n\n    fun toArray(): Array<String> {\n        val objectArray = mutableListOf<String>()\n        objectArray.add(uuid)\n        objectArray.add(device)\n        objectArray.add(CheckUtility.dateParser(date))\n//        objectArray.add(position?.geohash.orEmpty())\n        objectArray.add(longitude.toString())\n        objectArray.add(latitude.toString())\n        objectArray.add(position?.provider.orEmpty())\n        objectArray.add(position?.transport.orEmpty())\n\n        data!!.entrySet().iterator().forEach {\n            val value = it.value.asJsonArray[0].toString()\n            objectArray.add(value)\n        }\n\n        return objectArray.toTypedArray()\n    }\n}","license":"gpl-3.0"},{"repo_name":"SimpleMobileTools/Simple-Gallery","path":"com.simplemobiletools.gallery.pro.models.Widget","copies":"2","size":459,"content":"package com.simplemobiletools.gallery.pro.models\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"widgets\", indices = [(Index(value = [\"widget_id\"], unique = true))])\ndata class Widget(\n        @PrimaryKey(autoGenerate = true) var id: Int?,\n        @ColumnInfo(name = \"widget_id\") var widgetId: Int,\n        @ColumnInfo(name = \"folder_path\") var folderPath: String)\n","license":"gpl-3.0"},{"repo_name":"android/compose-samples","path":"com.example.jetcaster.data.Episode","copies":"1","size":1819,"content":"/*\n * Copyright 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.example.jetcaster.data\n\nimport androidx.compose.runtime.Immutable\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport java.time.Duration\nimport java.time.OffsetDateTime\n\n@Entity(\n    tableName = \"episodes\",\n    indices = [\n        Index(\"uri\", unique = true),\n        Index(\"podcast_uri\")\n    ],\n    foreignKeys = [\n        ForeignKey(\n            entity = Podcast::class,\n            parentColumns = [\"uri\"],\n            childColumns = [\"podcast_uri\"],\n            onUpdate = ForeignKey.CASCADE,\n            onDelete = ForeignKey.CASCADE\n        )\n    ]\n)\n@Immutable\ndata class Episode(\n    @PrimaryKey @ColumnInfo(name = \"uri\") val uri: String,\n    @ColumnInfo(name = \"podcast_uri\") val podcastUri: String,\n    @ColumnInfo(name = \"title\") val title: String,\n    @ColumnInfo(name = \"subtitle\") val subtitle: String? = null,\n    @ColumnInfo(name = \"summary\") val summary: String? = null,\n    @ColumnInfo(name = \"author\") val author: String? = null,\n    @ColumnInfo(name = \"published\") val published: OffsetDateTime,\n    @ColumnInfo(name = \"duration\") val duration: Duration? = null\n)\n","license":"apache-2.0"},{"repo_name":"binaryroot/AndroidArchitecture","path":"com.androidarchitecture.entity.User","copies":"1","size":708,"content":"package com.androidarchitecture.entity\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.Ignore\nimport android.arch.persistence.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\n\n/**\n * Created by binary on 5/18/17.\n */\n@Entity\nclass User  {\n    @PrimaryKey\n    @SerializedName(\"user_id\")\n    var uid: Int = 0\n\n    @ColumnInfo(name = \"first_name\")\n    @SerializedName(\"first_name\")\n    var firstName: String? = null\n\n    @ColumnInfo(name = \"last_name\")\n    @SerializedName(\"last_name\")\n    var lastName: String? = null\n\n    @ColumnInfo(name = \"login\")\n    @SerializedName(\"login\")\n    var login: String? = null\n}","license":"mit"},{"repo_name":"Heiner1/AndroidAPS","path":"info.nightscout.androidaps.database.entities.TemporaryTarget","copies":"1","size":2863,"content":"package info.nightscout.androidaps.database.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport info.nightscout.androidaps.database.TABLE_TEMPORARY_TARGETS\nimport info.nightscout.androidaps.database.embedments.InterfaceIDs\nimport info.nightscout.androidaps.database.interfaces.DBEntryWithTimeAndDuration\nimport info.nightscout.androidaps.database.interfaces.TraceableDBEntry\nimport java.util.*\n\n@Entity(\n    tableName = TABLE_TEMPORARY_TARGETS,\n    foreignKeys = [ForeignKey(\n        entity = TemporaryTarget::class,\n        parentColumns = [\"id\"],\n        childColumns = [\"referenceId\"]\n    )],\n    indices = [\n        Index(\"id\"),\n        Index(\"isValid\"),\n        Index(\"nightscoutId\"),\n        Index(\"referenceId\"),\n        Index(\"timestamp\")\n    ]\n)\ndata class TemporaryTarget(\n    @PrimaryKey(autoGenerate = true)\n    override var id: Long = 0,\n    override var version: Int = 0,\n    override var dateCreated: Long = -1,\n    override var isValid: Boolean = true,\n    override var referenceId: Long? = null,\n    @Embedded\n    override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(),\n    override var timestamp: Long,\n    override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(),\n    var reason: Reason,\n    var highTarget: Double, // in mgdl\n    var lowTarget: Double, // in mgdl\n    override var duration: Long // in millis\n) : TraceableDBEntry, DBEntryWithTimeAndDuration {\n\n    fun contentEqualsTo(other: TemporaryTarget): Boolean =\n        timestamp == other.timestamp &&\n            utcOffset == other.utcOffset &&\n            reason == other.reason &&\n            highTarget == other.highTarget &&\n            lowTarget == other.lowTarget &&\n            duration == other.duration &&\n            isValid == other.isValid\n\n    fun isRecordDeleted(other: TemporaryTarget): Boolean =\n        isValid && !other.isValid\n\n    fun onlyNsIdAdded(previous: TemporaryTarget): Boolean =\n        previous.id != id &&\n            contentEqualsTo(previous) &&\n            previous.interfaceIDs.nightscoutId == null &&\n            interfaceIDs.nightscoutId != null\n\n    enum class Reason(val text: String) {\n        @SerializedName(\"Custom\")\n        CUSTOM(\"Custom\"),\n        @SerializedName(\"Hypo\")\n        HYPOGLYCEMIA(\"Hypo\"),\n        @SerializedName(\"Activity\")\n        ACTIVITY(\"Activity\"),\n        @SerializedName(\"Eating Soon\")\n        EATING_SOON(\"Eating Soon\"),\n        @SerializedName(\"Automation\")\n        AUTOMATION(\"Automation\"),\n        @SerializedName(\"Wear\")\n        WEAR(\"Wear\")\n        ;\n\n        companion object {\n\n            fun fromString(reason: String?) = values().firstOrNull { it.text == reason }\n                ?: CUSTOM\n        }\n    }\n}","license":"agpl-3.0"},{"repo_name":"alashow/music-android","path":"tm.alashow.datmusic.data.repos.search.DatmusicSearchParams","copies":"1","size":1833,"content":"/*\n * Copyright (C) 2021, Alashov Berkeli\n * All rights reserved.\n */\npackage tm.alashow.datmusic.data.repos.search\n\nimport tm.alashow.datmusic.data.repos.CaptchaSolution\nimport tm.alashow.datmusic.data.repos.CaptchaSolution.Companion.toQueryMap\n\ntypealias BackendTypes = Set<DatmusicSearchParams.BackendType>\n\ndata class DatmusicSearchParams(\n    val query: String,\n    val captchaSolution: CaptchaSolution? = null,\n    val types: List<BackendType> = listOf(BackendType.AUDIOS),\n    val page: Int = 0,\n) {\n\n    // used as a key in Room/Store\n    override fun toString() = \"query=$query\" +\n        // append minerva tag to store minerva audios separately in room\n        when {\n            types.contains(BackendType.MINERVA) -> \"#minerva\"\n            types.contains(BackendType.FLACS) -> \"#flacs\"\n            else -> \"\"\n        }\n\n    companion object {\n        fun DatmusicSearchParams.toQueryMap(): Map<String, Any> = mutableMapOf<String, Any>(\n            \"query\" to query,\n            \"page\" to page,\n        ).also { map ->\n            if (captchaSolution != null) {\n                map.putAll(captchaSolution.toQueryMap())\n            }\n        }\n\n        fun DatmusicSearchParams.withTypes(vararg types: BackendType) = copy(types = types.toList())\n    }\n\n    enum class BackendType(val type: String) {\n        AUDIOS(\"audios\"), ARTISTS(\"artists\"), ALBUMS(\"albums\"), MINERVA(\"minerva\"), FLACS(\"flacs\");\n\n        override fun toString() = type\n\n        companion object {\n            private val map = values().associateBy { it.type }\n\n            fun from(value: String) = map[value] ?: AUDIOS\n\n            private const val separator = \"||\"\n            fun BackendTypes.toQueryParam() = joinToString(separator) { it.type }\n            fun String.asBackendTypes() = split(separator).map { from(it) }.toSet()\n        }\n    }\n}\n","license":"apache-2.0"},{"repo_name":"alashow/music-android","path":"tm.alashow.datmusic.domain.entities.Audio","copies":"1","size":3772,"content":"/*\n * Copyright (C) 2021, Alashov Berkeli\n * All rights reserved.\n */\npackage tm.alashow.datmusic.domain.entities\n\nimport android.net.Uri\nimport android.os.Parcelable\nimport androidx.core.net.toUri\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.IgnoredOnParcel\nimport kotlinx.parcelize.Parcelize\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport tm.alashow.datmusic.domain.UNKNOWN_ARTIST\nimport tm.alashow.datmusic.domain.UNTITLED_SONG\nimport tm.alashow.domain.models.BasePaginatedEntity\n\nprivate val MULTIPLE_ARTIST_SPLIT_REGEX = Regex(\"((,)|(feat\\\\.)|(ft\\\\.))\")\nfun String.artists() = split(MULTIPLE_ARTIST_SPLIT_REGEX, 10).map { it.trim() }\nfun String.mainArtist() = split(MULTIPLE_ARTIST_SPLIT_REGEX, 10).first().trim()\n\n@Parcelize\n@Serializable\n@Entity(tableName = \"audios\")\ndata class Audio(\n    @SerialName(\"id\")\n    @ColumnInfo(name = \"id\")\n    override val id: String = \"\",\n\n    @SerialName(\"key\")\n    @ColumnInfo(name = \"key\")\n    val searchKey: String = \"\",\n\n    @SerialName(\"source_id\")\n    @ColumnInfo(name = \"source_id\")\n    val sourceId: String = \"\",\n\n    @SerialName(\"artist\")\n    @ColumnInfo(name = \"artist\")\n    val artist: String = UNKNOWN_ARTIST,\n\n    @SerialName(\"title\")\n    @ColumnInfo(name = \"title\")\n    val title: String = UNTITLED_SONG,\n\n    @SerialName(\"duration\")\n    @ColumnInfo(name = \"duration\")\n    val duration: Int = 0,\n\n    @SerialName(\"date\")\n    @ColumnInfo(name = \"date\")\n    val date: Long = 0L,\n\n    @SerialName(\"album\")\n    @ColumnInfo(name = \"album\")\n    val album: String? = null,\n\n    @SerialName(\"is_explicit\")\n    @ColumnInfo(name = \"explicit\", defaultValue = \"0\")\n    val explicit: Boolean = false,\n\n    @SerialName(\"cover_url\")\n    @ColumnInfo(name = \"cover_url\")\n    val coverUrl: String? = null,\n\n    @SerialName(\"cover_url_medium\")\n    @ColumnInfo(name = \"cover_url_medium\")\n    val coverUrlMedium: String? = null,\n\n    @SerialName(\"cover_url_small\")\n    @ColumnInfo(name = \"cover_url_small\")\n    val coverUrlSmall: String? = null,\n\n    @SerialName(\"cover\")\n    @ColumnInfo(name = \"cover\")\n    val coverAlternate: String = \"\",\n\n    @SerialName(\"download\")\n    @ColumnInfo(name = \"download\")\n    val downloadUrl: String? = null,\n\n    @SerialName(\"stream\")\n    @ColumnInfo(name = \"stream\")\n    val streamUrl: String? = null,\n\n    @Transient\n    @ColumnInfo(name = \"params\")\n    override var params: String = defaultParams,\n\n    @Transient\n    @ColumnInfo(name = \"page\")\n    override var page: Int = defaultPage,\n\n    @PrimaryKey\n    val primaryKey: String = \"\",\n\n    @Transient\n    @ColumnInfo(name = \"search_index\")\n    val searchIndex: Int = 0,\n) : BasePaginatedEntity(), Parcelable {\n\n    @Ignore\n    @Transient\n    @IgnoredOnParcel\n    var audioDownloadItem: AudioDownloadItem? = null\n\n    fun coverUri(size: CoverImageSize = CoverImageSize.LARGE, allowAlternate: Boolean = true): Uri = (\n        when (size) {\n            CoverImageSize.LARGE -> coverUrl\n            CoverImageSize.MEDIUM -> coverUrlMedium\n            CoverImageSize.SMALL -> coverUrlSmall\n        } ?: coverUrl ?: (if (allowAlternate) coverAlternate.toUri().buildUpon().appendPath(size.type).toString() else \"\")\n        ).toUri()\n\n    fun durationMillis() = (duration * 1000).toLong()\n\n    fun fileDisplayName() = \"$artist - $title\"\n\n    fun isFlac() = searchKey == \"flacs\" || id.startsWith(\"dz.\")\n\n    fun fileMimeType() = when {\n        isFlac() -> \"audio/flac\"\n        else -> \"audio/mpeg\"\n    }\n\n    fun fileExtension() = when {\n        isFlac() -> \".flac\"\n        else -> \".mp3\"\n    }\n\n    fun artists() = artist.artists()\n    fun mainArtist() = artist.mainArtist()\n}\n","license":"apache-2.0"},{"repo_name":"alashow/music-android","path":"tm.alashow.datmusic.domain.entities.Album","copies":"1","size":2942,"content":"/*\n * Copyright (C) 2021, Alashov Berkeli\n * All rights reserved.\n */\npackage tm.alashow.datmusic.domain.entities\n\nimport android.os.Parcelable\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.Parcelize\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport tm.alashow.datmusic.domain.UNTITLED_ALBUM\nimport tm.alashow.domain.models.BasePaginatedEntity\n\ntypealias AlbumId = Long\n\n@Parcelize\n@Serializable\n@Entity(tableName = \"albums\")\ndata class Album(\n    @SerialName(\"id\")\n    val albumId: AlbumId = 0L,\n\n    @Transient\n    @ColumnInfo(name = \"id\")\n    override val id: String = albumId.toString(),\n\n    @SerialName(\"access_key\")\n    @ColumnInfo(name = \"access_key\")\n    val accessKey: String = \"\",\n\n    @SerialName(\"owner_id\")\n    @ColumnInfo(name = \"owner_id\")\n    val ownerId: Long = 0L,\n\n    @SerialName(\"title\")\n    @ColumnInfo(name = \"title\")\n    val title: String = UNTITLED_ALBUM,\n\n    @SerialName(\"subtitle\")\n    @ColumnInfo(name = \"subtitle\")\n    val subtitle: String? = null,\n\n    @SerialName(\"year\")\n    @ColumnInfo(name = \"year\")\n    val year: Int = 1970,\n\n    @SerialName(\"count\")\n    @ColumnInfo(name = \"count\")\n    val songCount: Int = 1,\n\n    @SerialName(\"plays\")\n    @ColumnInfo(name = \"plays\")\n    val playCount: Long = 0L,\n\n    @SerialName(\"followers\")\n    @ColumnInfo(name = \"followers\")\n    val followers: Int = 0,\n\n    @SerialName(\"create_time\")\n    @ColumnInfo(name = \"create_time\")\n    val createdAt: Long = 0L,\n\n    @SerialName(\"update_time\")\n    @ColumnInfo(name = \"update_time\")\n    val updatedAt: Long = 0L,\n\n    @SerialName(\"is_explicit\")\n    @ColumnInfo(name = \"explicit\")\n    val explicit: Boolean = false,\n\n    @SerialName(\"main_artists\")\n    @ColumnInfo(name = \"main_artists\")\n    val artists: List<Artist> = listOf(Artist()),\n\n    @SerialName(\"genres\")\n    @ColumnInfo(name = \"genres\")\n    val genres: List<Genre> = listOf(),\n\n    @SerialName(\"photo\")\n    @ColumnInfo(name = \"photo\")\n    val photo: Photo = Photo(),\n\n    @SerialName(\"audios\")\n    @ColumnInfo(name = \"audios\")\n    val audios: List<Audio> = emptyList(),\n\n    @Transient\n    @ColumnInfo(name = \"params\")\n    override var params: String = defaultParams,\n\n    @Transient\n    @ColumnInfo(name = \"page\")\n    override var page: Int = defaultPage,\n\n    @Transient\n    @ColumnInfo(name = \"details_fetched\")\n    val detailsFetched: Boolean = false,\n\n    @PrimaryKey\n    val primaryKey: String = \"\",\n\n    @Transient\n    @ColumnInfo(name = \"search_index\")\n    val searchIndex: Int = 0,\n) : BasePaginatedEntity(), Parcelable {\n\n    @Serializable\n    @Parcelize\n    data class Photo(\n        @SerialName(\"photo_1200\")\n        val largeUrl: String = \"\",\n\n        @SerialName(\"photo_600\")\n        val mediumUrl: String = \"\",\n\n        @SerialName(\"photo_300\")\n        val smallUrl: String = \"\",\n    ) : Parcelable\n}\n","license":"apache-2.0"},{"repo_name":"blakelee/CoinProfits","path":"net.blakelee.coinprofits.models.Coin","copies":"1","size":922,"content":"package net.blakelee.coinprofits.models\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.Index\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity(tableName = \"coin\")\nopen class Coin {\n    @PrimaryKey\n    open var id: String = \"\"                    //ethereum\n    var name: String = \"\"                  //Ethereum\n    var symbol: String = \"\"                //ETH\n    var currency: String = \"USD\"          //Currency set from settings\n    var price: Double = 0.0              //Last updated price\n    var price_btc: Double? = 0.0\n    var price_eth: Double? = 0.0\n    var volume_24h: Double? = 0.0\n    var market_cap: Double? = 0.0\n    var available_supply: Double? = 0.0\n    var total_supply: Double? = 0.0\n    var percent_change_1h: Double? = 0.0\n    var percent_change_24h: Double? = 0.0\n    var percent_change_7d: Double? = 0.0\n\n    override fun toString() = symbol + \" - \" + name\n}","license":"mit"},{"repo_name":"tbaxter120/Restdroid","path":"com.ridocula.restdroid.persistence.entities.RequestCollectionEntity","copies":"1","size":464,"content":"package com.ridocula.restdroid.persistence.entities\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n/**\n * Created by tbaxter on 7/27/17.\n */\n@Entity(tableName = \"request_collection\")\ndata class RequestCollectionEntity constructor(\n        @ColumnInfo(name = \"id\")\n        @PrimaryKey\n        val id: String,\n        @ColumnInfo(name = \"name\")\n        val name: String\n)","license":"apache-2.0"},{"repo_name":"charlesng/SampleAppArch","path":"com.cn29.aac.repo.itunes.Artist","copies":"1","size":1119,"content":"package com.cn29.aac.repo.itunes\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.TypeConverters\nimport com.cn29.aac.repo.util.TypeConvertor\nimport kotlinx.android.parcel.Parcelize\nimport java.util.*\n\n/**\n * Created by Charles Ng on 16/10/2017.\n */\n@Entity(indices = [Index(\"artistId\")],\n        primaryKeys = [\"artistId\", \"artistName\"])\n@TypeConverters(\n        TypeConvertor::class)\n@Parcelize\ndata class Artist(@JvmField var artistId: Long = 0,\n                  @JvmField var artistName: String,\n                  @JvmField var trackName: String? = null,\n                  @JvmField var artworkUrl100: String? = null,\n                  @JvmField var trackPrice: Double = 0.0,\n                  @JvmField var isFavourite: Boolean = false,\n                  @JvmField var createDate: Date? = null\n\n) : Parcelable {\n    constructor() : this(\n            artistId = 0,\n            artistName = \"\",\n            trackName = null,\n            artworkUrl100 = null,\n            trackPrice = 0.0,\n            isFavourite = false,\n            createDate = null\n    )\n}","license":"apache-2.0"},{"repo_name":"Ph1b/MaterialAudiobookPlayer","path":"de.ph1b.audiobook.data.Bookmark2","copies":"1","size":772,"content":"package de.ph1b.audiobook.data\n\nimport android.os.Bundle\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport java.time.Instant\nimport java.util.UUID\n\n@Entity(tableName = \"bookmark2\")\ndata class Bookmark2(\n  val bookId: Book2.Id,\n  val chapterId: Chapter2.Id,\n  val title: String?,\n  val time: Long,\n  val addedAt: Instant,\n  val setBySleepTimer: Boolean,\n  @PrimaryKey\n  val id: Id\n) {\n\n  data class Id(val value: UUID) {\n    companion object {\n      fun random(): Id = Id(UUID.randomUUID())\n    }\n  }\n}\n\nfun Bundle.putBookmarkId(key: String, value: Bookmark2.Id) {\n  putString(key, value.value.toString())\n}\n\nfun Bundle.getBookmarkId(key: String): Bookmark2.Id? {\n  val value = getString(key) ?: return null\n  return Bookmark2.Id(UUID.fromString(value))\n}\n","license":"lgpl-3.0"},{"repo_name":"zensum/franz","path":"Message","copies":"1","size":258,"content":"package franz\n\ninterface Message<out K, out V> {\n    fun offset(): Long\n    fun value() : V\n    fun headers(): Array<Pair<String, ByteArray>>\n    fun headers(key: String): Array<ByteArray>\n    fun key(): K\n    fun topic(): String\n    fun timestamp(): Long\n}\n","license":"mit"},{"repo_name":"dmitryustimov/weather-kotlin","path":"ru.ustimov.weather.content.impl.local.data.RoomCity","copies":"1","size":1157,"content":"package ru.ustimov.weather.content.impl.local.data\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Embedded\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport android.provider.BaseColumns\nimport ru.ustimov.weather.content.data.City\nimport ru.ustimov.weather.content.impl.local.Database\n\n@Entity(tableName = Database.Tables.CITIES)\ninternal data class RoomCity(\n        @PrimaryKey(autoGenerate = false) @ColumnInfo(name = BaseColumns._ID) private val id: Long,\n        @ColumnInfo(name = \"name\", collate = ColumnInfo.NOCASE) private val name: String?,\n        @ColumnInfo(name = \"country_code\", collate = ColumnInfo.NOCASE) private val countryCode: String,\n        @Embedded private val location: RoomLocation\n) : City {\n\n    constructor(city: City) : this(\n            id = city.id(),\n            name = city.name(),\n            countryCode = city.countryCode(),\n            location = RoomLocation(city.location())\n    )\n\n    override fun id() = id\n\n    override fun name() = name\n\n    override fun countryCode() = countryCode\n\n    override fun location() = location\n\n}","license":"apache-2.0"},{"repo_name":"dailymotion/dailymotion-sdk-android","path":"Version","copies":"1","size":106,"content":"object Version {\n    val targetSdkVersion = 28\n    val minSdkVersion = 14\n    val compileSdkVersion = 28\n}","license":"mit"},{"repo_name":"Briseus/Lurker","path":"torille.fi.lurkforreddit.data.models.view.Subreddit","copies":"1","size":686,"content":"package torille.fi.lurkforreddit.data.models.view\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport android.os.Parcelable\nimport kotlinx.android.parcel.Parcelize\n\n/**\n * Data class for showing a subreddit\n */\n\n@Entity(tableName = \"subreddits\")\n@Parcelize\ndata class Subreddit(\n    @PrimaryKey @ColumnInfo(name = \"reddit_id\") var subId: String = \"\",\n    var url: String = \"\",\n    @ColumnInfo(name = \"display_name\") var displayName: String = \"\",\n    @ColumnInfo(name = \"banner_url\") var bannerUrl: String? = \"\",\n    @ColumnInfo(name = \"key_color\") var keyColor: String? = \"\"\n) : Parcelable\n","license":"mit"},{"repo_name":"kamerok/Orny","path":"com.kamer.orny.data.room.entity.PageSettingsEntity","copies":"1","size":864,"content":"package com.kamer.orny.data.room.entity\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport com.kamer.orny.data.domain.model.PageSettings\nimport java.util.*\n\n\n@Entity(tableName = \"page_settings\")\ndata class PageSettingsEntity(\n        @PrimaryKey val id: Int = 0,\n        val budget: Double,\n        @ColumnInfo(name = \"start_date\") val startDate: Date,\n        val period: Int\n) {\n    companion object {\n        fun fromPageSettings(settings: PageSettings) = PageSettingsEntity(\n                budget = settings.budget,\n                startDate = settings.startDate,\n                period = settings.period\n        )\n    }\n\n    fun toPageSettings() = PageSettings(\n            budget = budget,\n            startDate = startDate,\n            period = period\n    )\n}","license":"apache-2.0"},{"repo_name":"kamerok/Orny","path":"com.kamer.orny.data.room.entity.AppSettingsEntity","copies":"1","size":742,"content":"package com.kamer.orny.data.room.entity\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.ForeignKey\nimport android.arch.persistence.room.PrimaryKey\n\n\n@Entity(\n        tableName = \"app_settings\",\n        foreignKeys = arrayOf(\n                ForeignKey(\n                        entity = AuthorEntity::class,\n                        parentColumns = arrayOf(\"id\"),\n                        childColumns = arrayOf(\"default_author_id\"),\n                        deferred = true\n                )\n        )\n)\ndata class AppSettingsEntity(\n        @PrimaryKey val id: Int = 0,\n        @ColumnInfo(name = \"default_author_id\", index = true) val defaultAuthorId: String?\n)","license":"apache-2.0"},{"repo_name":"devmpv/chan-reactor","path":"com.devmpv.model.Attachment","copies":"1","size":539,"content":"package com.devmpv.model\n\nimport com.fasterxml.jackson.annotation.JsonIgnore\nimport java.util.*\nimport javax.persistence.*\n\n/**\n * Entity to store attachment information\n *\n * @author devmpv\n */\n@Entity\n@Table(indexes = arrayOf(Index(columnList = \"md5\", unique = true)))\nclass Attachment {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    var id: Long? = null\n\n    @JsonIgnore\n    var md5: String? = null\n\n    var name: String? = null\n\n    @ManyToMany(mappedBy = \"attachments\")\n    val messages: Set<Message> = HashSet()\n}\n","license":"mit"},{"repo_name":"kivensolo/UiUsingListView","path":"com.kingz.database.entity.UserInfoEntity","copies":"1","size":416,"content":"package com.kingz.database.entity\n\nimport androidx.room.Entity\n\n/**\n * @author zeke.wang\n * @date 2020/7/20\n * @maintainer zeke.wang\n * @desc: 用户信息的数据库DAO\n */\n@Entity(primaryKeys = [\"id\"])\nclass UserInfoEntity(\n    val admin:Boolean,\n    val isLogin:Boolean,\n    val userId:Int,\n    val nickname:String,\n    val publicName:String,\n    val username:String,\n    val email:String,\n    val token:String\n)","license":"gpl-2.0"},{"repo_name":"google/ground-android","path":"com.google.android.ground.persistence.local.room.entity.LocationOfInterestEntity","copies":"1","size":1480,"content":"/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.android.ground.persistence.local.room.entity\n\nimport androidx.room.*\nimport com.google.android.ground.persistence.local.room.models.EntityState\n\n/**\n * Defines how Room persists LOIs in the local db. By default, Room uses the name of object fields\n * and their respective types to determine database column names and types.\n */\n@Entity(tableName = \"location_of_interest\", indices = [Index(\"survey_id\")])\ndata class LocationOfInterestEntity(\n  @ColumnInfo(name = \"id\") @PrimaryKey val id: String,\n  @ColumnInfo(name = \"survey_id\") val surveyId: String,\n  @ColumnInfo(name = \"job_id\") val jobId: String,\n  @ColumnInfo(name = \"state\") var state: EntityState, // TODO: Rename to DeletionState.\n  @Embedded(prefix = \"created_\") val created: AuditInfoEntity,\n  @Embedded(prefix = \"modified_\") val lastModified: AuditInfoEntity,\n  @Embedded val geometry: GeometryEntity?\n)\n","license":"apache-2.0"},{"repo_name":"jospint/Architecture-Components-DroidDevs","path":"com.jospint.droiddevs.architecturecomponents.model.Place","copies":"1","size":403,"content":"package com.jospint.droiddevs.architecturecomponents.model\n\nimport android.arch.persistence.room.Embedded\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity\ndata class Place(\n        @PrimaryKey val id: String,\n        val name: String,\n        val latitude: Double,\n        val longitude: Double,\n        @Embedded var forecast: Forecast? = null){\n\n\n\n}","license":"apache-2.0"},{"repo_name":"GeoffreyMetais/vlc-android","path":"org.videolan.vlc.mediadb.models.Slave","copies":"1","size":1474,"content":"/*******************************************************************************\n *  Slave.kt\n * ****************************************************************************\n * Copyright © 2018 VLC authors and VideoLAN\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.\n ******************************************************************************/\n\npackage org.videolan.vlc.mediadb.models\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"SLAVES_table\")\ndata class Slave (\n    @PrimaryKey\n    @ColumnInfo(name = \"slave_media_mrl\")\n    val mediaPath: String,\n    @ColumnInfo(name = \"slave_type\")\n    val type: Int,\n    @ColumnInfo(name = \"slave_priority\")\n    val priority:Int,\n    @ColumnInfo(name = \"slave_uri\")\n    val uri: String\n)\n\n","license":"gpl-2.0"},{"repo_name":"general-mobile/kotlin-architecture-components-notes-demo","path":"com.generalmobile.app.gmnotes.db.entities.Note","copies":"1","size":484,"content":"package com.generalmobile.app.gmnotes.db.entities\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport android.arch.persistence.room.TypeConverters\nimport com.generalmobile.app.gmnotes.db.converters.DateConverter\nimport java.util.*\n\n\n@Entity()\n@TypeConverters(DateConverter::class)\nclass Note {\n    @PrimaryKey(autoGenerate = true) var id: Long = 0\n    var title: String = \"\"\n    var note: String = \"\"\n    var createDate: Date = Date()\n}","license":"mit"},{"repo_name":"stefanmedack/cccTV","path":"de.stefanmedack.ccctv.persistence.entities.Event","copies":"1","size":2501,"content":"package de.stefanmedack.ccctv.persistence.entities\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.ForeignKey\nimport android.arch.persistence.room.ForeignKey.NO_ACTION\nimport android.arch.persistence.room.Index\nimport android.arch.persistence.room.PrimaryKey\nimport de.stefanmedack.ccctv.util.EMPTY_STRING\nimport info.metadude.kotlin.library.c3media.models.RelatedEvent\nimport org.threeten.bp.LocalDate\nimport org.threeten.bp.OffsetDateTime\n\n@Entity(tableName = \"events\",\n        foreignKeys = [\n            ForeignKey(\n                    entity = Conference::class,\n                    parentColumns = arrayOf(\"acronym\"),\n                    childColumns = arrayOf(\"conference_acronym\"),\n                    onUpdate = NO_ACTION,\n                    onDelete = NO_ACTION\n            )],\n        indices = [\n            Index(name = \"conference_idx\", value = [\"conference_acronym\"])\n        ]\n)\ndata class Event(\n\n        @PrimaryKey\n        val id: String,\n\n        @ColumnInfo(name = \"conference_acronym\")\n        val conferenceAcronym: String,\n\n        @ColumnInfo(name = \"url\")\n        val url: String,\n\n        @ColumnInfo(name = \"slug\")\n        val slug: String,\n\n        @ColumnInfo(name = \"title\")\n        val title: String,\n\n        @ColumnInfo(name = \"subtitle\")\n        val subtitle: String = EMPTY_STRING,\n\n        @ColumnInfo(name = \"description\")\n        val description: String = EMPTY_STRING,\n\n        @ColumnInfo(name = \"persons\")\n        val persons: List<String> = listOf(),\n\n        @ColumnInfo(name = \"thumb_url\")\n        val thumbUrl: String? = null,\n\n        @ColumnInfo(name = \"poster_url\")\n        val posterUrl: String? = null,\n\n        @ColumnInfo(name = \"original_language\")\n        val originalLanguage: LanguageList = LanguageList(),\n\n        @ColumnInfo(name = \"duration\")\n        val duration: Int? = null,\n\n        @ColumnInfo(name = \"view_count\")\n        val viewCount: Int = 0,\n\n        @ColumnInfo(name = \"promoted\")\n        val promoted: Boolean = false,\n\n        @ColumnInfo(name = \"tags\")\n        val tags: List<String> = listOf(),\n\n        @ColumnInfo(name = \"related\")\n        val related: List<RelatedEvent> = listOf(),\n\n        @ColumnInfo(name = \"release_date\")\n        val releaseDate: LocalDate? = null,\n\n        @ColumnInfo(name = \"date\")\n        val date: OffsetDateTime? = null,\n\n        @ColumnInfo(name = \"updated_at\")\n        val updatedAt: OffsetDateTime? = null\n\n)","license":"apache-2.0"},{"repo_name":"BoD/CineToday","path":"org.jraf.android.cinetoday.model.theater.Theater","copies":"1","size":2566,"content":"/*\n * This source is part of the\n *      _____  ___   ____\n *  __ / / _ \\/ _ | / __/___  _______ _\n * / // / , _/ __ |/ _/_/ _ \\/ __/ _ `/\n * \\___/_/|_/_/ |_/_/ (_)___/_/  \\_, /\n *                              /___/\n * repository.\n *\n * Copyright (C) 2015-present Benoit 'BoD' Lubek (BoD@JRAF.org)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.jraf.android.cinetoday.model.theater\n\nimport android.os.Parcel\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport org.jraf.android.cinetoday.util.uri.HasId\n\n@Entity\ndata class Theater(\n    @PrimaryKey\n    override var id: String,\n    var name: String,\n    var address: String,\n    var pictureUri: String?\n) : HasId, Parcelable {\n\n    override fun equals(other: Any?) = (other as? Theater)?.id == id\n\n    override fun hashCode() = id.hashCode()\n\n\n    //--------------------------------------------------------------------------\n    // region Parcelable implementation.\n    //--------------------------------------------------------------------------\n\n    companion object {\n        @Suppress(\"unused\")\n        @JvmField\n        val CREATOR: Parcelable.Creator<Theater> = object : Parcelable.Creator<Theater> {\n            override fun createFromParcel(source: Parcel): Theater {\n                return Theater(source)\n            }\n\n            override fun newArray(size: Int): Array<Theater?> {\n                return arrayOfNulls(size)\n            }\n        }\n    }\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    override fun writeToParcel(dest: Parcel, flags: Int) {\n        dest.writeString(id)\n        dest.writeString(name)\n        dest.writeString(address)\n        dest.writeString(pictureUri)\n    }\n\n    private constructor(input: Parcel) : this(\n        id = input.readString()!!,\n        name = input.readString()!!,\n        address = input.readString()!!,\n        pictureUri = input.readString()\n    )\n\n    // endregion\n}\n","license":"gpl-3.0"},{"repo_name":"samirma/MeteoriteLandings","path":"com.antonio.samir.meteoritelandingsspots.data.repository.model.Meteorite","copies":"1","size":783,"content":"package com.antonio.samir.meteoritelandingsspots.data.repository.model\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport kotlinx.android.parcel.Parcelize\n\n@Entity(tableName = \"meteorites\", indices = [Index(\"id\")])\n@Parcelize\ndata class Meteorite(\n        @PrimaryKey\n        @SerializedName(\"id\")\n        var id: Int = 0,\n        var mass: String? = null,\n        var nametype: String? = null,\n        var recclass: String? = null,\n        var name: String? = null,\n        var fall: String? = null,\n        var year: String? = null,\n        var reclong: String? = null,\n        var reclat: String? = null,\n        var address: String? = null\n\n) : Parcelable\n","license":"mit"},{"repo_name":"StepicOrg/stepik-android","path":"org.stepik.android.domain.review_session.model.ReviewSession","copies":"1","size":1670,"content":"package org.stepik.android.domain.review_session.model\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport ru.nobird.app.core.model.Identifiable\nimport java.util.Date\n\n@Entity\ndata class ReviewSession(\n    @PrimaryKey\n    @SerializedName(\"id\")\n    override val id: Long,\n    @SerializedName(\"instruction\")\n    val instruction: Long,\n    @SerializedName(\"submission\")\n    val submission: Long,\n\n    @SerializedName(\"given_reviews\")\n    val givenReviews: List<Long>,\n    @SerializedName(\"is_giving_started\")\n    val isGivingStarted: Boolean,\n    @SerializedName(\"is_giving_finished\")\n    val isGivingFinished: Boolean,\n\n    @SerializedName(\"taken_reviews\")\n    val takenReviews: List<Long>,\n    @SerializedName(\"is_taking_started\")\n    val isTakingStarted: Boolean,\n    @SerializedName(\"is_taking_finished\")\n    val isTakingFinished: Boolean,\n    @SerializedName(\"is_taking_finished_by_teacher\")\n    val isTakingFinishedByTeacher: Boolean,\n    @SerializedName(\"when_taking_finished_by_teacher\")\n    val whenTakingFinishedByTeacher: Date?,\n\n    @SerializedName(\"is_review_available\")\n    val isReviewAvailable: Boolean,\n    @SerializedName(\"is_finished\")\n    val isFinished: Boolean,\n\n    @SerializedName(\"score\")\n    val score: Float,\n\n    @SerializedName(\"available_reviews_count\")\n    val availableReviewsCount: Int?,\n\n    @SerializedName(\"active_review\")\n    val activeReview: Long?,\n\n    @Embedded\n    @SerializedName(\"actions\")\n    val actions: Actions\n) : Identifiable<Long> {\n    data class Actions(\n        @SerializedName(\"finish\")\n        val finish: Boolean\n    )\n}","license":"apache-2.0"},{"repo_name":"sheaam30/setlist","path":"setlist.shea.domain.model.SetList","copies":"1","size":1342,"content":"package setlist.shea.domain.model\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport android.os.Parcel\nimport android.os.Parcelable\n\n/**\n * Created by adamshea on 9/15/17.\n */\n\n@Entity\ndata class SetList(@PrimaryKey var listName: String = \"\", var songs: List<Song> = emptyList()) : Parcelable {\n\n    constructor(parcel: Parcel) : this(\n            parcel.readString(),\n            parcel.createTypedArrayList(Song)) {\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (other !is SetList) return false\n        if (other.listName != listName) return false\n        if (other.songs == songs) return true\n        return false\n    }\n\n    override fun hashCode(): Int {\n        var result = listName.hashCode()\n        result = 31 * result + songs.hashCode()\n        return result\n    }\n\n    override fun writeToParcel(parcel: Parcel, flags: Int) {\n        parcel.writeString(listName)\n        parcel.writeTypedList(songs)\n    }\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    companion object CREATOR : Parcelable.Creator<SetList> {\n        override fun createFromParcel(parcel: Parcel): SetList {\n            return SetList(parcel)\n        }\n\n        override fun newArray(size: Int): Array<SetList?> {\n            return arrayOfNulls(size)\n        }\n    }\n}","license":"apache-2.0"},{"repo_name":"walkingice/MomoDict","path":"org.zeroxlab.momodict.model.Entry","copies":"1","size":407,"content":"package org.zeroxlab.momodict.model\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n// TODO: null safety\n@Entity(tableName = \"entries\")\ndata class Entry(\n        var wordStr: String,\n        var data: String? = null,\n        // Name of the sourceBook of this entry, usually is a dictionary\n        var source: String? = null\n) {\n    @PrimaryKey(autoGenerate = true)\n    var entryId: Int = 0\n}\n","license":"mit"},{"repo_name":"jguerinet/MyMartlet-Android","path":"com.guerinet.mymartlet.model.Term","copies":"2","size":1749,"content":"/*\n * Copyright 2014-2019 Julien Guerinet\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.guerinet.mymartlet.model\n\nimport org.threeten.bp.LocalDate\n\n/**\n * One class term, consisting of a season and a year\n * @author Julien Guerinet\n * @since 1.0.0\n *\n * Migrated since 2.3.2\n *\n * @property season Term [Season]\n * @property year Term year\n */\ndata class Term(val season: Season, val year: Int) : Comparable<Term> {\n\n    /**\n     * Term Id, for parsing errors\n     */\n    val id = \"${season.title} $year\"\n\n    override fun compareTo(other: Term): Int =\n        year.compareTo(other.year).takeIf { it != 0 }\n            ?: season.compareTo(other.season)\n\n    /**\n     * Returns the term in the format used by McGill\n     */\n    override fun toString(): String = \"$year${season.number}\"\n\n    companion object {\n        /**\n         * Returns today's corresponding term\n         */\n        fun currentTerm(): Term {\n            val today = LocalDate.now()\n            val year = today.year\n\n            return when (today.monthValue) {\n                in 9..12 -> Term(Season.FALL, year)\n                in 1..4 -> Term(Season.WINTER, year)\n                else -> Term(Season.SUMMER, year)\n            }\n        }\n    }\n}\n","license":"apache-2.0"},{"repo_name":"jguerinet/MyMartlet-Android","path":"com.guerinet.mymartlet.model.Course","copies":"2","size":2348,"content":"/*\n * Copyright 2014-2019 Julien Guerinet\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.guerinet.mymartlet.model\n\nimport org.threeten.bp.DayOfWeek\nimport org.threeten.bp.LocalDate\nimport org.threeten.bp.LocalTime\n\n/**\n * A course in the user's schedule or one that a user can register for\n * @author Julien Guerinet\n * @author Quang Dao\n * @since 1.0.0\n *\n * Migrated since 2.3.2\n *\n * @property term Term this class is for\n * @property subject Course's 4-letter subject (ex: MATH)\n * @property number Course's number (ex: 263)\n * @property title Course title\n * @property crn Course CRN number\n * @property section Course section (ex: 001)\n * @property startTime Course's start time\n * @property endTime Course's end time\n * @property days Days this course is on\n * @property type Course type (ex: lecture, tutorial...)\n * @property location Course location (generally building and room number)\n * @property instructor Course's instructor's name\n * @property credits Number of credits for this course\n * @property startDate Course start date\n * @property endDate Course end date\n */\ndata class Course(\n    val term: Term,\n    val subject: String,\n    val number: String,\n    val title: String,\n    val crn: Int,\n    val section: String,\n    val startTime: LocalTime,\n    val endTime: LocalTime,\n    val days: List<DayOfWeek>,\n    val type: String,\n    val location: String,\n    val instructor: String,\n    val credits: Double,\n    val startDate: LocalDate,\n    val endDate: LocalDate\n) {\n    companion object {\n        /**\n         * @return A start time that will yield 0 for the rounded start time\n         */\n        val defaultStartTime = LocalTime.of(0, 5)\n\n        /**\n         * @return An end time that will yield 0 for the rounded end time\n         */\n        val defaultEndTime = LocalTime.of(0, 55)\n    }\n}\n","license":"apache-2.0"},{"repo_name":"hazuki0x0/YuzuBrowser","path":"jp.hazuki.yuzubrowser.legacy.webrtc.core.WebPermissions","copies":"1","size":4065,"content":"/*\n * Copyright (C) 2017-2021 Hazuki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage jp.hazuki.yuzubrowser.legacy.webrtc.core\n\nimport android.webkit.PermissionRequest\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport java.io.Serializable\n\n@Entity(tableName = \"permissions\")\nclass WebPermissions(\n    @PrimaryKey\n    val host: String,\n    var camera: PermissionState = PermissionState.UNCONFIGURED,\n    var microphone: PermissionState = PermissionState.UNCONFIGURED,\n    var midi: PermissionState = PermissionState.UNCONFIGURED,\n    var mediaId: PermissionState = PermissionState.UNCONFIGURED,\n) : Serializable {\n    val resources: Array<String>\n        get() {\n            val list = mutableListOf<String>()\n            if (camera === PermissionState.GRANTED) {\n                list.add(PermissionRequest.RESOURCE_VIDEO_CAPTURE)\n            }\n            if (microphone === PermissionState.GRANTED) {\n                list.add(PermissionRequest.RESOURCE_AUDIO_CAPTURE)\n            }\n            if (midi === PermissionState.GRANTED) {\n                list.add(PermissionRequest.RESOURCE_MIDI_SYSEX)\n            }\n            if (mediaId === PermissionState.GRANTED) {\n                list.add(PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID)\n            }\n            return list.toTypedArray()\n        }\n\n    fun grantAll(resources: Array<String>) {\n        setPermissions(resources, PermissionState.GRANTED)\n    }\n\n    fun denyAll(resources: Array<String>) {\n        setPermissions(resources, PermissionState.DENIED)\n    }\n\n    fun match(resources: Array<String>): Boolean {\n        for (item in resources) {\n            when (item) {\n                PermissionRequest.RESOURCE_VIDEO_CAPTURE -> if (camera !== PermissionState.GRANTED) return false\n                PermissionRequest.RESOURCE_AUDIO_CAPTURE -> if (microphone !== PermissionState.GRANTED) return false\n                PermissionRequest.RESOURCE_MIDI_SYSEX -> if (midi !== PermissionState.GRANTED) return false\n                PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID -> if (mediaId !== PermissionState.GRANTED) return false\n            }\n        }\n        return true\n    }\n\n    fun needRequest(resources: Array<String>): Boolean {\n        for (item in resources) {\n            when (item) {\n                PermissionRequest.RESOURCE_VIDEO_CAPTURE -> if (camera === PermissionState.UNCONFIGURED) return true\n                PermissionRequest.RESOURCE_AUDIO_CAPTURE -> if (microphone === PermissionState.UNCONFIGURED) return true\n                PermissionRequest.RESOURCE_MIDI_SYSEX -> if (midi === PermissionState.UNCONFIGURED) return true\n                PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID -> if (mediaId === PermissionState.UNCONFIGURED) return true\n            }\n        }\n        return false\n    }\n\n    private fun setPermissions(resources: Array<String>, state: PermissionState) {\n        for (item in resources) {\n            when (item) {\n                PermissionRequest.RESOURCE_VIDEO_CAPTURE -> camera = state\n                PermissionRequest.RESOURCE_AUDIO_CAPTURE -> microphone = state\n                PermissionRequest.RESOURCE_MIDI_SYSEX -> midi = state\n                PermissionRequest.RESOURCE_PROTECTED_MEDIA_ID -> mediaId = state\n            }\n        }\n    }\n\n    companion object {\n        operator fun invoke(host: String, resources: Array<String>, state: PermissionState = PermissionState.GRANTED): WebPermissions {\n            return WebPermissions(host).also { it.setPermissions(resources, state) }\n        }\n    }\n}\n","license":"apache-2.0"},{"repo_name":"AndroidX/androidx","path":"androidx.room.integration.kotlintestapp.vo.DataClassFromDependency","copies":"3","size":1050,"content":"/*\n * Copyright (C) 2018 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage androidx.room.integration.kotlintestapp.vo\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n/**\n * used to test the case where kotlin classes from dependencies cannot be read properly.\n * Since the main db in this app is in the test module, the original classes serve as a dependency.\n */\n@Entity\ndata class DataClassFromDependency(\n    @PrimaryKey(autoGenerate = true)\n    val id: Int,\n    val name: String\n)","license":"apache-2.0"},{"repo_name":"aosp-mirror/platform_frameworks_support","path":"androidx.room.integration.kotlintestapp.vo.EmbeddedFromDependency","copies":"1","size":794,"content":"/*\n * Copyright 2018 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage androidx.room.integration.kotlintestapp.vo\n\nimport androidx.room.Embedded\n\ndata class EmbeddedFromDependency(\n        @Embedded\n        val data: DataClassFromDependency)","license":"apache-2.0"},{"repo_name":"androidx/androidx","path":"androidx.room.integration.kotlintestapp.vo.PojoFromDependency","copies":"3","size":738,"content":"/*\n * Copyright 2018 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage androidx.room.integration.kotlintestapp.vo\n\ndata class PojoFromDependency(\n    val id: Int,\n    val name: String\n)","license":"apache-2.0"},{"repo_name":"aosp-mirror/platform_frameworks_support","path":"androidx.room.integration.kotlintestapp.vo.RelationFromDependency","copies":"1","size":909,"content":"/*\n * Copyright 2018 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage androidx.room.integration.kotlintestapp.vo\n\nimport androidx.room.Relation\n\nclass RelationFromDependency(val sharedName: String) {\n    @Relation(\n            parentColumn = \"sharedName\",\n            entityColumn = \"name\"\n    )\n    lateinit var dataItems: List<DataClassFromDependency>\n}","license":"apache-2.0"},{"repo_name":"orgzly/orgzly-android","path":"com.orgzly.android.db.entity.BookView","copies":"1","size":672,"content":"package com.orgzly.android.db.entity\n\nimport androidx.room.Embedded\nimport com.orgzly.android.repos.VersionedRook\n\ndata class BookView(\n        @Embedded\n        val book: Book,\n\n        val noteCount: Int,\n\n        @Embedded(prefix = \"link_repo_\")\n        val linkRepo: Repo? = null,\n\n        @Embedded(prefix = \"synced_to_\")\n        val syncedTo: VersionedRook? = null\n) {\n    fun hasLink(): Boolean {\n        return linkRepo != null\n    }\n\n    fun hasSync(): Boolean {\n        return syncedTo != null\n    }\n\n    fun isOutOfSync(): Boolean {\n        return syncedTo != null && book.isModified\n    }\n\n    fun isModified(): Boolean {\n        return book.isModified\n    }\n}","license":"gpl-3.0"},{"repo_name":"fossasia/rp15","path":"org.fossasia.openevent.general.event.topic.EventTopic","copies":"2","size":874,"content":"package org.fossasia.openevent.general.event.topic\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.PrimaryKey\nimport com.github.jasminb.jsonapi.LongIdHandler\nimport com.github.jasminb.jsonapi.annotations.Id\nimport com.github.jasminb.jsonapi.annotations.Relationship\nimport com.github.jasminb.jsonapi.annotations.Type\nimport org.fossasia.openevent.general.event.Event\nimport org.fossasia.openevent.general.event.EventId\n\n@Type(\"event-topic\")\n@Entity(foreignKeys = [(ForeignKey(entity = Event::class, parentColumns = [\"id\"],\n    childColumns = [\"event\"], onDelete = ForeignKey.CASCADE))])\ndata class EventTopic(\n    @Id(LongIdHandler::class)\n    @PrimaryKey\n    val id: Long,\n    val name: String,\n    val slug: String,\n    @ColumnInfo(index = true)\n    @Relationship(\"event\")\n    var event: EventId? = null\n)\n","license":"apache-2.0"},{"repo_name":"kaskasi/VocabularyTrainer","path":"de.fluchtwege.vocabulary.models.Lesson","copies":"1","size":245,"content":"package de.fluchtwege.vocabulary.models\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity\ndata class Lesson(@PrimaryKey val name: String, val description: String, var questions: List<Question>)","license":"mit"},{"repo_name":"kivensolo/UiUsingListView","path":"com.kingz.database.entity.CookiesEntity","copies":"1","size":657,"content":"package com.kingz.database.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport java.io.Serializable\n\n/**\n * author：ZekeWang\n * date：2021/5/11\n * description：网络请求的Cookie表\n * @since DataBase v3\n */\n@Entity(tableName = \"http_cookie\", primaryKeys = [\"id\"])\nclass CookiesEntity(\n    @ColumnInfo(name = \"id\")\n    var id: Int = 0,\n    @ColumnInfo(name = \"url\", defaultValue = \"\")\n    var url: String = \"\",\n    @ColumnInfo(name = \"cookies\", defaultValue = \"\")\n    var cookies: String = \"\"\n) : Serializable {\n    override fun toString(): String {\n        return \"CookiesEntity(id=$id, url='$url', cookies='$cookies')\"\n    }\n}","license":"gpl-2.0"},{"repo_name":"EmmanuelMess/Simple-Accounting","path":"com.emmanuelmess.simpleaccounting.data.Session","copies":"1","size":394,"content":"package com.emmanuelmess.simpleaccounting.data\n\nimport android.os.Parcelable\nimport com.emmanuelmess.simpleaccounting.db.legacy.TableGeneral\nimport kotlinx.android.parcel.Parcelize\n\n@Parcelize\ndata class Session(\n\tval month: Int,\n\tval year: Int,\n\tval currency: String\n): Parcelable {\n\tfun isOlderThanUpdate() = month == TableGeneral.OLDER_THAN_UPDATE || year == TableGeneral.OLDER_THAN_UPDATE\n}","license":"gpl-3.0"},{"repo_name":"wordpress-mobile/WordPress-FluxC-Android","path":"org.wordpress.android.fluxc.persistence.entity.TopPerformerProductEntity","copies":"1","size":465,"content":"package org.wordpress.android.fluxc.persistence.entity\n\nimport androidx.room.Entity\n\n@Entity(\n    tableName = \"TopPerformerProducts\",\n    primaryKeys = [\"datePeriod\", \"productId\", \"siteId\"]\n)\ndata class TopPerformerProductEntity(\n    val siteId: Long,\n    val datePeriod: String,\n    val productId: Long,\n    val name: String,\n    val imageUrl: String?,\n    val quantity: Int,\n    val currency: String,\n    val total: Double,\n    val millisSinceLastUpdated: Long\n)\n","license":"gpl-2.0"},{"repo_name":"ptkNktq/AndroidNotificationNotifier","path":"me.nya_n.notificationnotifier.model.InstalledApp","copies":"1","size":431,"content":"package me.nya_n.notificationnotifier.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\nimport java.io.Serializable\n\n@Entity(tableName = \"targets\")\ndata class InstalledApp(\n    val label: String,\n\n    @PrimaryKey\n    @ColumnInfo(name = \"package_name\")\n    @SerializedName(\"package_name\")\n    val packageName: String\n) : Serializable","license":"mit"},{"repo_name":"xwiki-contrib/android-authenticator","path":"org.xwiki.android.sync.contactdb.GroupsCacheEntity","copies":"1","size":501,"content":"package org.xwiki.android.sync.contactdb\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport org.xwiki.android.sync.bean.XWikiGroup\n\nconst val GROUPS_LIST_TABLE = \"groups_list_table\"\nconst val GroupsListColumn = \"groupsList\"\n\n@Entity(tableName = GROUPS_LIST_TABLE)\ndata class GroupsCacheEntity(\n    @PrimaryKey\n    @ColumnInfo(name = UserAccountIdColumn) val id: UserAccountId,\n    @ColumnInfo(name = GroupsListColumn) var groupsList: List<XWikiGroup>\n)","license":"lgpl-2.1"},{"repo_name":"tommykw/Musical","path":"com.github.tommykw.musical.data.entity.Musical","copies":"1","size":361,"content":"package com.github.tommykw.musical.data.entity\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity\ndata class Musical(\n        @PrimaryKey val id: Int,\n        val productionId: String,\n        val name: String,\n        val playwright: String,\n        val poster: String\n)\n\n//inline class Trilogy(val number: Int)\n//val NoTrilogy = Trilogy(-1)","license":"mit"},{"repo_name":"DreierF/MyTargets","path":"de.dreier.mytargets.shared.models.db.Arrow","copies":"1","size":1474,"content":"/*\n * Copyright (C) 2018 Florian Dreier\n *\n * This file is part of MyTargets.\n *\n * MyTargets is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2\n * as published by the Free Software Foundation.\n *\n * MyTargets is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n\npackage de.dreier.mytargets.shared.models.db\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport android.os.Parcelable\nimport de.dreier.mytargets.shared.models.Dimension\nimport de.dreier.mytargets.shared.models.IIdSettable\nimport de.dreier.mytargets.shared.models.Thumbnail\nimport kotlinx.android.parcel.Parcelize\n\n@Parcelize\n@Entity\ndata class Arrow(\n    @PrimaryKey(autoGenerate = true)\n    override var id: Long = 0,\n\n    var name: String = \"\",\n    var maxArrowNumber: Int = 12,\n    var length: String? = \"\",\n    var material: String? = \"\",\n    var spine: String? = \"\",\n    var weight: String? = \"\",\n    var tipWeight: String? = \"\",\n    var vanes: String? = \"\",\n    var nock: String? = \"\",\n    var comment: String? = \"\",\n    var diameter: Dimension = Dimension(5f, Dimension.Unit.MILLIMETER),\n\n    @ColumnInfo(typeAffinity = ColumnInfo.BLOB)\n    var thumbnail: Thumbnail? = null\n) : IIdSettable, Parcelable\n","license":"gpl-2.0"},{"repo_name":"DreierF/MyTargets","path":"de.dreier.mytargets.shared.models.db.ArrowImage","copies":"1","size":1292,"content":"/*\n * Copyright (C) 2018 Florian Dreier\n *\n * This file is part of MyTargets.\n *\n * MyTargets is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2\n * as published by the Free Software Foundation.\n *\n * MyTargets is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n\npackage de.dreier.mytargets.shared.models.db\n\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.ForeignKey.CASCADE\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport android.os.Parcelable\nimport de.dreier.mytargets.shared.models.Image\nimport kotlinx.android.parcel.Parcelize\n\n@Parcelize\n@Entity(\n    foreignKeys = [\n        ForeignKey(\n            entity = Arrow::class,\n            parentColumns = [\"id\"],\n            childColumns = [\"arrowId\"],\n            onDelete = CASCADE\n        )\n    ],\n    indices = [\n        Index(value = [\"arrowId\"])\n    ]\n)\ndata class ArrowImage(\n    @PrimaryKey(autoGenerate = true)\n    var id: Long = 0,\n\n    override var fileName: String = \"\",\n\n    var arrowId: Long? = null\n) : Image, Parcelable\n","license":"gpl-2.0"},{"repo_name":"StepicOrg/stepic-android","path":"org.stepik.android.cache.analytic.model.AnalyticLocalEvent","copies":"2","size":670,"content":"package org.stepik.android.cache.analytic.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.google.gson.JsonElement\nimport org.stepik.android.cache.analytic.structure.DbStructureAnalytic\n\n@Entity(tableName = DbStructureAnalytic.TABLE_NAME)\ndata class AnalyticLocalEvent(\n    @ColumnInfo(name = DbStructureAnalytic.Columns.EVENT_NAME)\n    val name: String,\n    @ColumnInfo(name = DbStructureAnalytic.Columns.EVENT_JSON)\n    val eventData: JsonElement,\n    @ColumnInfo(name = DbStructureAnalytic.Columns.EVENT_TIMESTAMP)\n    val eventTimestamp: Long\n) {\n    @PrimaryKey(autoGenerate = true)\n    var id: Int = 0\n}","license":"apache-2.0"},{"repo_name":"cempo/SimpleTodoList","path":"com.makeevapps.simpletodolist.datasource.db.table.Task","copies":"1","size":4459,"content":"package com.makeevapps.simpletodolist.datasource.db.table\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.Ignore\nimport android.arch.persistence.room.PrimaryKey\nimport com.makeevapps.simpletodolist.enums.TaskPriority\nimport com.makeevapps.simpletodolist.utils.DateUtils\nimport java.util.*\nimport kotlin.collections.ArrayList\n\n@Entity(tableName = \"task\")\nclass Task() {\n    @Ignore\n    constructor(title: String) : this() {\n        this.id = UUID.randomUUID().toString()\n        this.title = title\n    }\n\n    @PrimaryKey\n    var id: String = \"\"\n\n    @ColumnInfo(name = \"orderId\")\n    var orderId: Int = 0\n\n    @ColumnInfo(name = \"parentId\")\n    var parentId: String? = null\n\n    @ColumnInfo(name = \"title\")\n    var title: String = \"\"\n\n    @ColumnInfo(name = \"description\")\n    var description: String? = null\n\n    @ColumnInfo(name = \"isComplete\")\n    var isComplete: Boolean = false\n\n    @ColumnInfo(name = \"priorityId\")\n    var priority: TaskPriority = TaskPriority.defaultValue()\n\n    @ColumnInfo(name = \"dueDateTimestamp\")\n    var dueDate: Date? = null\n\n    @ColumnInfo(name = \"doneDateTimestamp\")\n    var doneDate: Date? = null\n\n    @ColumnInfo(name = \"notifyDateTimestamp\")\n    var notifyDate: Date? = null\n\n    @ColumnInfo(name = \"allDay\")\n    var allDay: Boolean = true\n\n    //@Relation(parentColumn = \"id\", entityColumn = \"parentId\", entity = Task::class)\n    @Ignore\n    var subTasks: ArrayList<Task> = ArrayList()\n\n    var subTasksCount: Int = 0\n\n    fun isDone(): Boolean = isComplete\n\n    fun isExpired(): Boolean {\n        val currentDate = DateUtils.currentTime()\n        return isExpiredForDate(currentDate)\n    }\n\n    fun isExpiredBeforeToday(): Boolean {\n        val startDayDate = DateUtils.startCurrentDayDate()\n        return isExpiredForDate(startDayDate)\n    }\n\n    fun isExpiredForCurrentTime(): Boolean {\n        val currentDate = DateUtils.currentTime()\n        return isExpiredForDate(currentDate)\n    }\n\n    private fun isExpiredForDate(date: Date): Boolean = dueDate != null && dueDate!!.before(date)\n\n    fun isNotPlaned() = dueDate == null\n\n    fun isPlaned() = dueDate != null\n\n    fun isPlanedForToday(): Boolean = isPlanedForDay(DateUtils.currentTime())\n\n    fun isPlanedForDay(date: Date): Boolean {\n        val startDayDate = DateUtils.startDayDate(date)\n        val endDayDate = DateUtils.endDayDate(date)\n        return dueDate != null && dueDate!! > startDayDate && dueDate!! <= endDayDate\n    }\n\n    fun switchDoneState() {\n        if (isDone()) {\n            isComplete = false\n            doneDate = null\n        } else {\n            isComplete = true\n            doneDate = DateUtils.currentTime()\n        }\n    }\n\n    fun markAsDone() {\n        isComplete = true\n        doneDate = DateUtils.currentTime()\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n\n        other as Task\n\n        if (id != other.id) return false\n        if (orderId != other.orderId) return false\n        if (parentId != other.parentId) return false\n        if (title != other.title) return false\n        if (description != other.description) return false\n        if (isComplete != other.isComplete) return false\n        if (priority != other.priority) return false\n        if (dueDate != other.dueDate) return false\n        if (doneDate != other.doneDate) return false\n        if (notifyDate != other.notifyDate) return false\n        if (allDay != other.allDay) return false\n        if (subTasks != other.subTasks) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        var result = id.hashCode()\n        result = 31 * result + orderId\n        result = 31 * result + (parentId?.hashCode() ?: 0)\n        result = 31 * result + title.hashCode()\n        result = 31 * result + (description?.hashCode() ?: 0)\n        result = 31 * result + isComplete.hashCode()\n        result = 31 * result + priority.hashCode()\n        result = 31 * result + (dueDate?.hashCode() ?: 0)\n        result = 31 * result + (doneDate?.hashCode() ?: 0)\n        result = 31 * result + (notifyDate?.hashCode() ?: 0)\n        result = 31 * result + allDay.hashCode()\n        result = 31 * result + subTasks.hashCode()\n        return result\n    }\n\n    override fun toString(): String {\n        return \"Task(id='$id', parentId=$parentId, title='$title')\"\n    }\n}","license":"mit"},{"repo_name":"vhromada/Catalog","path":"com.github.vhromada.catalog.domain.Game","copies":"1","size":3033,"content":"package com.github.vhromada.catalog.domain\n\nimport javax.persistence.CascadeType\nimport javax.persistence.Column\nimport javax.persistence.Entity\nimport javax.persistence.FetchType\nimport javax.persistence.GeneratedValue\nimport javax.persistence.GenerationType\nimport javax.persistence.Id\nimport javax.persistence.JoinColumn\nimport javax.persistence.OneToOne\nimport javax.persistence.SequenceGenerator\nimport javax.persistence.Table\n\n/**\n * A class represents game.\n *\n * @author Vladimir Hromada\n */\n@Entity\n@Table(name = \"games\")\n@Suppress(\"JpaDataSourceORMInspection\")\ndata class Game(\n    /**\n     * ID\n     */\n    @Id\n    @SequenceGenerator(name = \"game_generator\", sequenceName = \"games_sq\", allocationSize = 1)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"game_generator\")\n    var id: Int?,\n\n    /**\n     * UUID\n     */\n    val uuid: String,\n\n    /**\n     * Name\n     */\n    @Column(name = \"game_name\")\n    var name: String,\n\n    /**\n     * Normalized name\n     */\n    @Column(name = \"normalized_game_name\")\n    var normalizedName: String,\n\n    /**\n     * URL to english Wikipedia page about game\n     */\n    @Column(name = \"wiki_en\")\n    var wikiEn: String?,\n\n    /**\n     * URL to czech Wikipedia page about game\n     */\n    @Column(name = \"wiki_cz\")\n    var wikiCz: String?,\n\n    /**\n     * Count of media\n     */\n    @Column(name = \"media_count\")\n    var mediaCount: Int,\n\n    /**\n     * Format\n     */\n    var format: String,\n\n    /**\n     * Cheat\n     */\n    @OneToOne(cascade = [CascadeType.ALL], fetch = FetchType.EAGER, orphanRemoval = true)\n    @JoinColumn(name = \"cheat\")\n    var cheat: Cheat?,\n\n    /**\n     * True if there is crack\n     */\n    var crack: Boolean,\n\n    /**\n     * True if there is serial key\n     */\n    @Column(name = \"serial_key\")\n    var serialKey: Boolean,\n\n    /**\n     * True if there is patch\n     */\n    var patch: Boolean,\n\n    /**\n     * True if there is trainer\n     */\n    var trainer: Boolean,\n\n    /**\n     * True if there is data for trainer\n     */\n    @Column(name = \"trainer_data\")\n    var trainerData: Boolean,\n\n    /**\n     * True if there is editor\n     */\n    @Column(name = \"editor\")\n    var editor: Boolean,\n\n    /**\n     * True if there are saves\n     */\n    var saves: Boolean,\n\n    /**\n     * Other data\n     */\n    @Column(name = \"other_data\")\n    var otherData: String?,\n\n    /**\n     * Note\n     */\n    var note: String?\n) : Audit() {\n\n    /**\n     * Merges game.\n     *\n     * @param game game\n     */\n    @Suppress(\"DuplicatedCode\")\n    fun merge(game: Game) {\n        name = game.name\n        normalizedName = game.normalizedName\n        wikiEn = game.wikiEn\n        wikiCz = game.wikiCz\n        mediaCount = game.mediaCount\n        format = game.format\n        crack = game.crack\n        serialKey = game.serialKey\n        patch = game.patch\n        trainer = game.trainer\n        trainerData = game.trainerData\n        editor = game.serialKey\n        saves = game.saves\n        otherData = game.otherData\n        note = game.note\n    }\n\n}\n","license":"mit"},{"repo_name":"vhromada/Catalog","path":"com.github.vhromada.catalog.domain.io.GameStatistics","copies":"1","size":286,"content":"package com.github.vhromada.catalog.domain.io\n\n/**\n * A class represents statistics for games.\n *\n * @author Vladimir Hromada\n */\ndata class GameStatistics(\n    /**\n     * Count of programs\n     */\n    val count: Long,\n\n    /**\n     * Count of media\n     */\n    val mediaCount: Long?\n)\n","license":"mit"},{"repo_name":"SecUSo/privacy-friendly-app-example","path":"org.secuso.privacyfriendlyexample.database.model.SampleData","copies":"1","size":1854,"content":"/*\n This file is part of Privacy Friendly App Example.\n\n Privacy Friendly App Example is free software:\n you can redistribute it and/or modify it under the terms of the\n GNU General Public License as published by the Free Software Foundation,\n either version 3 of the License, or any later version.\n\n Privacy Friendly App Example is distributed in the hope\n that it will be useful, but WITHOUT ANY WARRANTY; without even\n the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n See the GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Privacy Friendly App Example. If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.secuso.privacyfriendlyexample.database.model\n\nimport android.os.Parcel\nimport android.os.Parcelable\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\n\n/**\n * The Model class for the SampleData\n */\n@Entity(tableName = \"sample_data\")\ndata class SampleData(\n        @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_id\")\n        var identifier: Int,\n        @ColumnInfo(name = \"content\")\n        var content: String?) : Parcelable {\n\n    constructor() : this(0,null)\n    @Ignore constructor(parcel: Parcel) : this(parcel.readInt(), parcel.readString())\n\n    override fun writeToParcel(parcel: Parcel, flags: Int) {\n        parcel.writeInt(identifier)\n        parcel.writeString(content)\n    }\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    companion object CREATOR : Parcelable.Creator<SampleData> {\n        override fun createFromParcel(parcel: Parcel): SampleData {\n            return SampleData(parcel)\n        }\n\n        override fun newArray(size: Int): Array<SampleData?> {\n            return arrayOfNulls(size)\n        }\n    }\n}","license":"gpl-3.0"},{"repo_name":"minecraft-dev/MinecraftDev","path":"Filter","copies":"1","size":3020,"content":"/*\n * Minecraft Dev for IntelliJ\n *\n * https://minecraftdev.org\n *\n * Copyright (c) 2022 minecraft-dev\n *\n * MIT License\n */\n\nimport com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport java.nio.file.Files\nimport java.nio.file.Path\nimport javax.inject.Inject\nimport org.gradle.api.artifacts.transform.CacheableTransform\nimport org.gradle.api.artifacts.transform.InputArtifact\nimport org.gradle.api.artifacts.transform.TransformAction\nimport org.gradle.api.artifacts.transform.TransformOutputs\nimport org.gradle.api.artifacts.transform.TransformParameters\nimport org.gradle.api.file.FileSystemLocation\nimport org.gradle.api.file.ProjectLayout\nimport org.gradle.api.file.RegularFileProperty\nimport org.gradle.api.provider.Property\nimport org.gradle.api.provider.Provider\nimport org.gradle.api.tasks.Input\nimport org.gradle.api.tasks.InputFile\nimport org.gradle.api.tasks.Internal\nimport org.gradle.api.tasks.PathSensitive\nimport org.gradle.api.tasks.PathSensitivity\n\nabstract class Filter : TransformAction<Filter.Params> {\n    interface Params : TransformParameters {\n        @get:Input\n        val ideaVersion: Property<String>\n        @get:Input\n        val ideaVersionName: Property<String>\n        @get:PathSensitive(PathSensitivity.NONE)\n        @get:InputFile\n        val depsFile: RegularFileProperty\n    }\n\n    @get:PathSensitive(PathSensitivity.NONE)\n    @get:InputArtifact\n    abstract val inputArtifact: Provider<FileSystemLocation>\n\n    @get:Inject\n    abstract val layout: ProjectLayout\n\n    private val deps: List<Dep>?\n\n    init {\n        deps = run {\n            val depsFile = parameters.depsFile.orNull?.asFile ?: return@run null\n            if (!depsFile.exists()) {\n                return@run null\n            }\n\n            val depList: DepList = depsFile.bufferedReader().use { reader ->\n                Gson().fromJson(reader, DepList::class.java)\n            }\n\n            if (\n                parameters.ideaVersion.orNull == depList.intellijVersion &&\n                parameters.ideaVersionName.orNull == depList.intellijVersionName\n            ) {\n                depList.deps\n            } else {\n                null\n            }\n        }\n    }\n\n    override fun transform(outputs: TransformOutputs) {\n        val input = inputArtifact.get().asFile.toPath()\n\n        // exclude the coroutines jar\n        // We include our own - but also IntelliJ's jar breaks sources\n        val inputParts = input.map { it.toString() }\n        if (!inputParts.containsAll(pathParts)) {\n            outputs.file(inputArtifact)\n            return\n        }\n\n        val fileName = inputParts.last()\n        if (fileName.startsWith(\"kotlinx-coroutines\")) {\n            return\n        }\n\n        deps?.forEach { d ->\n            if (fileName == \"${d.artifactId}-${d.version}.jar\") {\n                return\n            }\n        }\n\n        outputs.file(inputArtifact)\n    }\n\n    companion object {\n        private val pathParts = listOf(\"com.jetbrains.intellij.idea\", \"ideaIC\", \"lib\")\n    }\n}\n","license":"mit"},{"repo_name":"denzelby/telegram-bot-bumblebee","path":"com.github.bumblebee.command.autocomplete.entity.AutoCompletePhrase","copies":"1","size":611,"content":"package com.github.bumblebee.command.autocomplete.entity\n\nimport javax.persistence.Entity\nimport javax.persistence.Id\nimport javax.persistence.Table\n\n@Entity\n@Table(name = \"BB_AUTOCOMPLETE_PHRASES\")\nclass AutoCompletePhrase {\n\n    @Id\n    lateinit var phraseKey: String\n    lateinit var phrasePattern: String\n\n    @Suppress(\"unused\")\n    constructor()\n\n    constructor(phraseKey: String, phrasePattern: String) {\n        this.phraseKey = phraseKey\n        this.phrasePattern = phrasePattern\n    }\n\n    override fun toString(): String = \"AutoCompletePhrase(phraseKey=$phraseKey, phrasePattern=$phrasePattern)\"\n}\n","license":"mit"},{"repo_name":"bnsantos/android-offline-example","path":"com.bnsantos.offline.models.User","copies":"1","size":246,"content":"package com.bnsantos.offline.models\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity\ndata class User(\n        @PrimaryKey val id: String,\n        val name: String,\n        val email: String\n)\n\n","license":"apache-2.0"},{"repo_name":"fython/NHentai-android","path":"moe.feng.nhentai.model.History","copies":"3","size":901,"content":"package moe.feng.nhentai.model\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport com.google.gson.annotations.Expose\nimport moe.feng.nhentai.util.extension.*\nimport java.util.*\n\n@Entity(tableName = History.TAG) class History(\n\t\t@Expose val action: Int,\n\t\t@Expose @PrimaryKey var time: Long = System.currentTimeMillis(),\n\t\t@Expose var key: String = \"\"\n) {\n\n\tfun getDate(): Date {\n\t\tval date = Date()\n\t\tdate.time = time\n\t\treturn date\n\t}\n\n\tinterface KeyContainer<out T: Key> {\n\t\tfun getHistoryAction(): Int\n\t\tfun getHistoryKey(): T\n\t}\n\n\tinterface Key {\n\n\t\tfun id(): String\n\n\t}\n\n\tcompanion object {\n\n\t\tconst val TAG = \"History\"\n\n\t\tconst val ACTION_READ_BOOK = 0\n\t\tconst val ACTION_READ_TAGS = 1\n\t\tconst val ACTION_SEARCH = 2\n\n\t\tfun <T: Key> from(item: KeyContainer<T>): History\n\t\t\t\t= History(item.getHistoryAction(), key = item.getHistoryKey().id())\n\n\t}\n\n}","license":"gpl-3.0"},{"repo_name":"ayatk/biblio","path":"com.ayatk.biblio.infrastructure.database.entity.NovelEntity","copies":"1","size":2790,"content":"/*\n * Copyright (c) 2016-2018 ayatk.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.ayatk.biblio.infrastructure.database.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.ayatk.biblio.infrastructure.database.entity.enums.BigGenre\nimport com.ayatk.biblio.infrastructure.database.entity.enums.Genre\nimport com.ayatk.biblio.infrastructure.database.entity.enums.NovelState\nimport com.ayatk.biblio.infrastructure.database.entity.enums.Publisher\nimport java.util.Date\n\n@Entity(tableName = \"novel\")\ndata class NovelEntity(\n\n  @PrimaryKey\n  @ColumnInfo(index = true)\n  var code: String,\n\n  var title: String,\n\n  @ColumnInfo(name = \"user_id\", index = true)\n  var userID: Int,\n\n  var writer: String,\n\n  var story: String,\n\n  @ColumnInfo(index = true)\n  var publisher: Publisher,\n\n  @ColumnInfo(name = \"big_genre\")\n  var bigGenre: BigGenre,\n\n  @ColumnInfo(index = true)\n  var genre: Genre,\n\n  var keyword: String,\n\n  @ColumnInfo(name = \"novel_state\", index = true)\n  var novelState: NovelState,\n\n  @ColumnInfo(name = \"first_upload\")\n  var firstUpload: Date,\n\n  @ColumnInfo(name = \"last_upload\")\n  var lastUpload: Date,\n\n  var page: Int,\n\n  var length: Int,\n\n  @ColumnInfo(name = \"read_time\")\n  var readTime: Int,\n\n  @ColumnInfo(name = \"is_r18\", index = true)\n  var isR18: Boolean,\n\n  @ColumnInfo(name = \"is_r15\", index = true)\n  var isR15: Boolean,\n\n  @ColumnInfo(name = \"is_bl\", index = true)\n  var isBL: Boolean,\n\n  @ColumnInfo(name = \"is_gl\", index = true)\n  var isGL: Boolean,\n\n  @ColumnInfo(name = \"is_cruelness\", index = true)\n  var isCruelness: Boolean,\n\n  @ColumnInfo(name = \"is_transmigration\", index = true)\n  var isTransmigration: Boolean,\n\n  @ColumnInfo(name = \"is_transfer\", index = true)\n  var isTransfer: Boolean,\n\n  @ColumnInfo(name = \"global_point\", index = true)\n  var globalPoint: Int,\n\n  @ColumnInfo(name = \"bookmark_count\")\n  var bookmarkCount: Int,\n\n  @ColumnInfo(name = \"review_count\")\n  var reviewCount: Int,\n\n  @ColumnInfo(name = \"rating_count\")\n  var ratingCount: Int,\n\n  @ColumnInfo(name = \"illustration_count\")\n  var illustrationCount: Int,\n\n  @ColumnInfo(name = \"conversation_rate\")\n  var conversationRate: Int,\n\n  @ColumnInfo(name = \"novel_updated_at\")\n  var novelUpdatedAt: Date\n)\n","license":"apache-2.0"},{"repo_name":"TonnyL/Mango","path":"io.github.tonnyl.mango.data.AccessToken","copies":"1","size":2303,"content":"/*\n * Copyright (c) 2017 Lizhaotailang\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\npackage io.github.tonnyl.mango.data\n\nimport android.annotation.SuppressLint\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport android.os.Parcelable\nimport com.google.gson.annotations.Expose\nimport com.google.gson.annotations.SerializedName\nimport kotlinx.android.parcel.Parcelize\n\n/**\n * Created by lizhaotailang on 2017/6/26.\n *\n * {\n * \"access_token\" : \"29ed478ab86c07f1c069b1af76088f7431396b7c4a2523d06911345da82224a0\",\n * \"token_type\" : \"bearer\",\n * \"scope\" : \"public write\"\n * }\n */\n\n@Parcelize\n@SuppressLint(\"ParcelCreator\")\n@Entity(tableName = \"access_token\")\ndata class AccessToken(\n        @ColumnInfo(name = \"access_token\")\n        @SerializedName(\"access_token\")\n        @Expose\n        val accessToken: String,\n\n        @ColumnInfo(name = \"token_type\")\n        @SerializedName(\"token_type\")\n        @Expose\n        val tokenType: String,\n\n        @ColumnInfo(name = \"scope\")\n        @SerializedName(\"scope\")\n        @Expose\n        val scope: String,\n\n        // User id\n        @PrimaryKey\n        @ColumnInfo(name = \"id\")\n        @Expose\n        var id: Long\n) : Parcelable","license":"mit"},{"repo_name":"PtrTeixeira/cookbook-backend","path":"Configuration","copies":"2","size":567,"content":"package com.github.ptrteixeira.dropwizard.support\n\nimport io.dropwizard.Configuration\nimport io.dropwizard.setup.Bootstrap\nimport io.dropwizard.setup.Environment\n\nfun <T : Configuration> configure(\n    bootstrap: Bootstrap<T>?,\n    builder: (@BootstrapConfigurationDsl BootstrapConfiguration<T>).() -> Unit\n) {\n    bootstrap?.let {\n        builder(BootstrapConfiguration(it))\n    }\n}\n\nfun configure(\n    environment: Environment,\n    builder: (@EnvironmentConfigurationDsl EnvironmentConfiguration).() -> Unit\n) {\n    builder(EnvironmentConfiguration(environment))\n}\n","license":"mit"},{"repo_name":"google/android-fhir","path":"com.google.android.fhir.db.impl.entities.ResourceEntity","copies":"1","size":1242,"content":"/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.android.fhir.db.impl.entities\n\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport java.time.Instant\nimport java.util.UUID\nimport org.hl7.fhir.r4.model.ResourceType\n\n@Entity(\n  indices =\n    [\n      Index(value = [\"resourceUuid\"], unique = true),\n      Index(value = [\"resourceType\", \"resourceId\"], unique = true)]\n)\ninternal data class ResourceEntity(\n  @PrimaryKey(autoGenerate = true) val id: Long,\n  val resourceUuid: UUID,\n  val resourceType: ResourceType,\n  val resourceId: String,\n  val serializedResource: String,\n  val versionId: String?,\n  val lastUpdatedRemote: Instant?\n)\n","license":"apache-2.0"},{"repo_name":"google/android-fhir","path":"com.google.android.fhir.db.impl.entities.StringIndexEntity","copies":"1","size":1588,"content":"/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.android.fhir.db.impl.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.google.android.fhir.index.entities.StringIndex\nimport java.util.UUID\nimport org.hl7.fhir.r4.model.ResourceType\n\n@Entity(\n  indices =\n    [\n      Index(value = [\"resourceType\", \"index_name\", \"index_value\"]),\n      // keep this index for faster foreign lookup\n      Index(value = [\"resourceUuid\"])],\n  foreignKeys =\n    [\n      ForeignKey(\n        entity = ResourceEntity::class,\n        parentColumns = [\"resourceUuid\"],\n        childColumns = [\"resourceUuid\"],\n        onDelete = ForeignKey.CASCADE,\n        onUpdate = ForeignKey.NO_ACTION,\n        deferred = true\n      )]\n)\ninternal data class StringIndexEntity(\n  @PrimaryKey(autoGenerate = true) val id: Long,\n  val resourceUuid: UUID,\n  val resourceType: ResourceType,\n  @Embedded(prefix = \"index_\") val index: StringIndex,\n)\n","license":"apache-2.0"},{"repo_name":"google/android-fhir","path":"com.google.android.fhir.db.impl.entities.ReferenceIndexEntity","copies":"1","size":1597,"content":"/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.android.fhir.db.impl.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.google.android.fhir.index.entities.ReferenceIndex\nimport java.util.UUID\nimport org.hl7.fhir.r4.model.ResourceType\n\n@Entity(\n  indices =\n    [\n      Index(value = [\"resourceType\", \"index_name\", \"index_value\"]),\n      // keep this index for faster foreign lookup\n      Index(value = [\"resourceUuid\"])],\n  foreignKeys =\n    [\n      ForeignKey(\n        entity = ResourceEntity::class,\n        parentColumns = [\"resourceUuid\"],\n        childColumns = [\"resourceUuid\"],\n        onDelete = ForeignKey.CASCADE,\n        onUpdate = ForeignKey.NO_ACTION,\n        deferred = true\n      )]\n)\ninternal data class ReferenceIndexEntity(\n  @PrimaryKey(autoGenerate = true) val id: Long,\n  val resourceUuid: UUID,\n  val resourceType: ResourceType,\n  @Embedded(prefix = \"index_\") val index: ReferenceIndex,\n)\n","license":"apache-2.0"},{"repo_name":"google/android-fhir","path":"com.google.android.fhir.db.impl.entities.TokenIndexEntity","copies":"1","size":1601,"content":"/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.android.fhir.db.impl.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.google.android.fhir.index.entities.TokenIndex\nimport java.util.UUID\nimport org.hl7.fhir.r4.model.ResourceType\n\n@Entity(\n  indices =\n    [\n      Index(value = [\"resourceType\", \"index_name\", \"index_system\", \"index_value\"]),\n      // keep this index for faster foreign lookup\n      Index(value = [\"resourceUuid\"])],\n  foreignKeys =\n    [\n      ForeignKey(\n        entity = ResourceEntity::class,\n        parentColumns = [\"resourceUuid\"],\n        childColumns = [\"resourceUuid\"],\n        onDelete = ForeignKey.CASCADE,\n        onUpdate = ForeignKey.NO_ACTION,\n        deferred = true\n      )]\n)\ninternal data class TokenIndexEntity(\n  @PrimaryKey(autoGenerate = true) val id: Long,\n  val resourceUuid: UUID,\n  val resourceType: ResourceType,\n  @Embedded(prefix = \"index_\") val index: TokenIndex,\n)\n","license":"apache-2.0"},{"repo_name":"google/android-fhir","path":"com.google.android.fhir.db.impl.entities.QuantityIndexEntity","copies":"1","size":1607,"content":"/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.android.fhir.db.impl.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.google.android.fhir.index.entities.QuantityIndex\nimport java.util.UUID\nimport org.hl7.fhir.r4.model.ResourceType\n\n@Entity(\n  indices =\n    [\n      Index(value = [\"resourceType\", \"index_name\", \"index_value\", \"index_code\"]),\n      // keep this index for faster foreign lookup\n      Index(value = [\"resourceUuid\"])],\n  foreignKeys =\n    [\n      ForeignKey(\n        entity = ResourceEntity::class,\n        parentColumns = [\"resourceUuid\"],\n        childColumns = [\"resourceUuid\"],\n        onDelete = ForeignKey.CASCADE,\n        onUpdate = ForeignKey.NO_ACTION,\n        deferred = true\n      )]\n)\ninternal data class QuantityIndexEntity(\n  @PrimaryKey(autoGenerate = true) val id: Long,\n  val resourceUuid: UUID,\n  val resourceType: ResourceType,\n  @Embedded(prefix = \"index_\") val index: QuantityIndex\n)\n","license":"apache-2.0"},{"repo_name":"google/android-fhir","path":"com.google.android.fhir.db.impl.entities.UriIndexEntity","copies":"1","size":1578,"content":"/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.android.fhir.db.impl.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.google.android.fhir.index.entities.UriIndex\nimport java.util.UUID\nimport org.hl7.fhir.r4.model.ResourceType\n\n@Entity(\n  indices =\n    [\n      Index(value = [\"resourceType\", \"index_name\", \"index_value\"]),\n      // keep this index for faster foreign lookup\n      Index(value = [\"resourceUuid\"])],\n  foreignKeys =\n    [\n      ForeignKey(\n        entity = ResourceEntity::class,\n        parentColumns = [\"resourceUuid\"],\n        childColumns = [\"resourceUuid\"],\n        onDelete = ForeignKey.CASCADE,\n        onUpdate = ForeignKey.NO_ACTION,\n        deferred = true\n      )]\n)\ninternal data class UriIndexEntity(\n  @PrimaryKey(autoGenerate = true) val id: Long,\n  val resourceUuid: UUID,\n  val resourceType: ResourceType,\n  @Embedded(prefix = \"index_\") val index: UriIndex\n)\n","license":"apache-2.0"},{"repo_name":"google/android-fhir","path":"com.google.android.fhir.db.impl.entities.DateIndexEntity","copies":"1","size":1593,"content":"/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.android.fhir.db.impl.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.google.android.fhir.index.entities.DateIndex\nimport java.util.UUID\nimport org.hl7.fhir.r4.model.ResourceType\n\n@Entity(\n  indices =\n    [\n      Index(value = [\"resourceType\", \"index_name\", \"index_from\", \"index_to\"]),\n      // keep this index for faster foreign lookup\n      Index(value = [\"resourceUuid\"])],\n  foreignKeys =\n    [\n      ForeignKey(\n        entity = ResourceEntity::class,\n        parentColumns = [\"resourceUuid\"],\n        childColumns = [\"resourceUuid\"],\n        onDelete = ForeignKey.CASCADE,\n        onUpdate = ForeignKey.NO_ACTION,\n        deferred = true\n      )]\n)\ninternal data class DateIndexEntity(\n  @PrimaryKey(autoGenerate = true) val id: Long,\n  val resourceUuid: UUID,\n  val resourceType: ResourceType,\n  @Embedded(prefix = \"index_\") val index: DateIndex,\n)\n","license":"apache-2.0"},{"repo_name":"google/android-fhir","path":"com.google.android.fhir.db.impl.entities.PositionIndexEntity","copies":"1","size":1602,"content":"/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.android.fhir.db.impl.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.google.android.fhir.index.entities.PositionIndex\nimport java.util.UUID\nimport org.hl7.fhir.r4.model.ResourceType\n\n@Entity(\n  indices =\n    [\n      Index(value = [\"resourceType\", \"index_latitude\", \"index_longitude\"]),\n      // keep this index for faster foreign lookup\n      Index(value = [\"resourceUuid\"])],\n  foreignKeys =\n    [\n      ForeignKey(\n        entity = ResourceEntity::class,\n        parentColumns = [\"resourceUuid\"],\n        childColumns = [\"resourceUuid\"],\n        onDelete = ForeignKey.CASCADE,\n        onUpdate = ForeignKey.NO_ACTION,\n        deferred = true\n      )]\n)\ninternal data class PositionIndexEntity(\n  @PrimaryKey(autoGenerate = true) val id: Long,\n  val resourceUuid: UUID,\n  val resourceType: ResourceType,\n  @Embedded(prefix = \"index_\") val index: PositionIndex,\n)\n","license":"apache-2.0"},{"repo_name":"djkovrik/YapTalker","path":"com.sedsoftware.yaptalker.data.database.model.BlacklistedTagDbModel","copies":"1","size":497,"content":"package com.sedsoftware.yaptalker.data.database.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.sedsoftware.yaptalker.data.database.YapTalkerDatabase\n\n@Entity(tableName = YapTalkerDatabase.TAGS_BLACKLIST_TABLE)\ndata class BlacklistedTagDbModel(\n    @PrimaryKey(autoGenerate = true)\n    var id: Long = 0,\n    @ColumnInfo(name = \"tag_name\")\n    var tagName: String = \"\",\n    @ColumnInfo(name = \"tag_link\")\n    var tagLink: String = \"\"\n)\n","license":"apache-2.0"},{"repo_name":"magnusjerre/KaffeV2","path":"kaffe.data.Kaffe","copies":"1","size":265,"content":"package kaffe.data\n\ndata class Kaffe (\n        var _id: String? = null,\n        var navn: String,\n        var produsent: String,\n        var land: String,\n        var vis: Boolean = true) {\n        constructor() : this(null, \"default\", \"default\", \"default\", true)\n}","license":"apache-2.0"},{"repo_name":"Heiner1/AndroidAPS","path":"info.nightscout.androidaps.database.entities.UserEntry","copies":"1","size":7290,"content":"package info.nightscout.androidaps.database.entities\n\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport info.nightscout.androidaps.database.TABLE_USER_ENTRY\nimport info.nightscout.androidaps.database.interfaces.DBEntry\nimport info.nightscout.androidaps.database.interfaces.DBEntryWithTime\nimport java.util.*\n\n@Entity(tableName = TABLE_USER_ENTRY,\n    indices = [\n        Index(\"source\"),\n        Index(\"timestamp\")\n    ])\ndata class UserEntry(\n    @PrimaryKey(autoGenerate = true)\n    override var id: Long = 0L,\n    override var timestamp: Long,\n    override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(),\n    var action: Action,\n    var source: Sources,\n    var note: String,\n    var values: List<@JvmSuppressWildcards ValueWithUnit?>\n) : DBEntry, DBEntryWithTime {\n    enum class Action (val colorGroup: ColorGroup) {\n        BOLUS (ColorGroup.InsulinTreatment),\n        BOLUS_CALCULATOR_RESULT (ColorGroup.InsulinTreatment),\n        BOLUS_CALCULATOR_RESULT_REMOVED (ColorGroup.Aaps),\n        SMB (ColorGroup.InsulinTreatment),\n        BOLUS_ADVISOR (ColorGroup.InsulinTreatment),\n        EXTENDED_BOLUS (ColorGroup.InsulinTreatment),\n        SUPERBOLUS_TBR (ColorGroup.InsulinTreatment),\n        CARBS (ColorGroup.CarbTreatment),\n        EXTENDED_CARBS (ColorGroup.CarbTreatment),\n        TEMP_BASAL (ColorGroup.BasalTreatment),\n        TT (ColorGroup.TT),\n        NEW_PROFILE (ColorGroup.Profile),\n        CLONE_PROFILE (ColorGroup.Profile),\n        STORE_PROFILE (ColorGroup.Profile),\n        PROFILE_SWITCH (ColorGroup.Profile),\n        PROFILE_SWITCH_CLONED (ColorGroup.Profile),\n        CLOSED_LOOP_MODE (ColorGroup.Loop),\n        LGS_LOOP_MODE (ColorGroup.Loop),\n        OPEN_LOOP_MODE (ColorGroup.Loop),\n        LOOP_DISABLED (ColorGroup.Loop),\n        LOOP_ENABLED (ColorGroup.Loop),\n        LOOP_CHANGE (ColorGroup.Loop),\n        LOOP_REMOVED (ColorGroup.Loop),\n        RECONNECT (ColorGroup.Pump),\n        DISCONNECT (ColorGroup.Pump),\n        RESUME (ColorGroup.Loop),\n        SUSPEND (ColorGroup.Loop),\n        HW_PUMP_ALLOWED (ColorGroup.Pump),\n        CLEAR_PAIRING_KEYS (ColorGroup.Pump),\n        ACCEPTS_TEMP_BASAL (ColorGroup.BasalTreatment),\n        CANCEL_TEMP_BASAL (ColorGroup.BasalTreatment),\n        CANCEL_BOLUS (ColorGroup.InsulinTreatment),\n        CANCEL_EXTENDED_BOLUS (ColorGroup.InsulinTreatment),\n        CANCEL_TT (ColorGroup.TT),\n        CAREPORTAL (ColorGroup.Careportal),\n        SITE_CHANGE (ColorGroup.Pump),\n        RESERVOIR_CHANGE (ColorGroup.Pump),\n        CALIBRATION (ColorGroup.Careportal),\n        PRIME_BOLUS (ColorGroup.Pump),\n        TREATMENT (ColorGroup.InsulinTreatment),\n        CAREPORTAL_NS_REFRESH (ColorGroup.Careportal),\n        PROFILE_SWITCH_NS_REFRESH (ColorGroup.Profile),\n        TREATMENTS_NS_REFRESH (ColorGroup.InsulinTreatment),\n        TT_NS_REFRESH (ColorGroup.TT),\n        AUTOMATION_REMOVED (ColorGroup.Aaps),\n        BG_REMOVED (ColorGroup.Aaps),\n        CAREPORTAL_REMOVED (ColorGroup.Careportal),\n        EXTENDED_BOLUS_REMOVED (ColorGroup.InsulinTreatment),\n        FOOD_REMOVED (ColorGroup.CarbTreatment),\n        PROFILE_REMOVED (ColorGroup.Profile),\n        PROFILE_SWITCH_REMOVED (ColorGroup.Profile),\n        RESTART_EVENTS_REMOVED (ColorGroup.Aaps),\n        TREATMENT_REMOVED (ColorGroup.InsulinTreatment),\n        BOLUS_REMOVED (ColorGroup.InsulinTreatment),\n        CARBS_REMOVED (ColorGroup.CarbTreatment),\n        TEMP_BASAL_REMOVED (ColorGroup.BasalTreatment),\n        TT_REMOVED (ColorGroup.TT),\n        NS_PAUSED (ColorGroup.Aaps),\n        NS_RESUME (ColorGroup.Aaps),\n        NS_QUEUE_CLEARED (ColorGroup.Aaps),\n        NS_SETTINGS_COPIED (ColorGroup.Aaps),\n        ERROR_DIALOG_OK (ColorGroup.Aaps),\n        ERROR_DIALOG_MUTE (ColorGroup.Aaps),\n        ERROR_DIALOG_MUTE_5MIN (ColorGroup.Aaps),\n        OBJECTIVE_STARTED (ColorGroup.Aaps),\n        OBJECTIVE_UNSTARTED (ColorGroup.Aaps),\n        OBJECTIVES_SKIPPED (ColorGroup.Aaps),\n        STAT_RESET (ColorGroup.Aaps),\n        DELETE_LOGS (ColorGroup.Aaps),\n        DELETE_FUTURE_TREATMENTS (ColorGroup.Aaps),\n        EXPORT_SETTINGS (ColorGroup.Aaps),\n        IMPORT_SETTINGS (ColorGroup.Aaps),\n        RESET_DATABASES (ColorGroup.Aaps),\n        EXPORT_DATABASES (ColorGroup.Aaps),\n        IMPORT_DATABASES (ColorGroup.Aaps),\n        OTP_EXPORT (ColorGroup.Aaps),\n        OTP_RESET (ColorGroup.Aaps),\n        STOP_SMS (ColorGroup.Aaps),\n        FOOD (ColorGroup.CarbTreatment),\n        EXPORT_CSV (ColorGroup.Aaps),\n        START_AAPS (ColorGroup.Aaps),\n        EXIT_AAPS (ColorGroup.Aaps),\n        PLUGIN_ENABLED (ColorGroup.Aaps),\n        PLUGIN_DISABLED (ColorGroup.Aaps),\n        UNKNOWN (ColorGroup.Aaps)\n        ;\n\n        companion object {\n            fun fromString(source: String?) = values().firstOrNull { it.name == source } ?: UNKNOWN\n        }\n    }\n\n    enum class Sources {\n        TreatmentDialog,\n        InsulinDialog,\n        CarbDialog,\n        WizardDialog,\n        QuickWizard,\n        ExtendedBolusDialog,\n        TTDialog,\n        ProfileSwitchDialog,\n        LoopDialog,\n        TempBasalDialog,\n        CalibrationDialog,\n        FillDialog,\n        BgCheck,\n        SensorInsert,\n        BatteryChange,\n        Note,\n        Exercise,\n        Question,\n        Announcement,\n        Actions,            //From Actions plugin\n        Automation,         //From Automation plugin\n        Autotune,           //From Autotune plugin\n        BG,                 //From BG plugin => Add One Source per BG Source for Calibration or Sensor Change\n        Aidex,\n        Dexcom,\n        Eversense,\n        Glimp,\n        MM640g,\n        NSClientSource,\n        PocTech,\n        Tomato,\n        Glunovo,\n        Xdrip,\n        LocalProfile,       //From LocalProfile plugin\n        Loop,               //From Loop plugin\n        Maintenance,        //From Maintenance plugin\n        NSClient,           //From NSClient plugin\n        NSProfile,          //From NSProfile plugin\n        Objectives,         //From Objectives plugin\n        Pump,               //To update with one Source per pump\n        Dana,               //Only one UserEntry in Common module Dana\n        DanaR,\n        DanaRC,\n        DanaRv2,\n        DanaRS,\n        DanaI,\n        DiaconnG8,\n        Insight,\n        Combo,\n        Medtronic,\n        Omnipod,            //No entry currently\n        OmnipodEros,\n        OmnipodDash,        //No entry currently\n        MDI,\n        VirtualPump,\n        SMS,                //From SMS plugin\n        Treatments,         //From Treatments plugin\n        Wear,               //From Wear plugin\n        Food,               //From Food plugin\n        ConfigBuilder,      //From ConfigBuilder Plugin\n        Overview,           //From OverViewPlugin\n        Stats,               //From Stat Activity\n        Aaps,               // MainApp\n        Unknown             //if necessary\n        ;\n\n        companion object {\n            fun fromString(source: String?) = values().firstOrNull { it.name == source } ?: Unknown\n        }\n    }\n\n    enum class ColorGroup {\n        InsulinTreatment,\n        BasalTreatment,\n        CarbTreatment,\n        TT,\n        Profile,\n        Loop,\n        Careportal,\n        Pump,\n        Aaps\n    }\n}\n","license":"agpl-3.0"},{"repo_name":"genonbeta/TrebleShot","path":"org.monora.uprotocol.client.android.database.model.SharedText","copies":"1","size":1666,"content":"/*\n * Copyright (C) 2021 Veli Tasalı\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\npackage org.monora.uprotocol.client.android.database.model\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.ForeignKey.*\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.IgnoredOnParcel\nimport kotlinx.parcelize.Parcelize\nimport org.monora.uprotocol.client.android.model.ListItem\n\n@Parcelize\n@Entity(\n    tableName = \"sharedText\",\n    foreignKeys = [\n        ForeignKey(\n            entity = UClient::class, parentColumns = [\"uid\"], childColumns = [\"clientUid\"], onDelete = CASCADE\n        ),\n    ]\n)\ndata class SharedText(\n    @PrimaryKey(autoGenerate = true)\n    val id: Int,\n    val clientUid: String?,\n    var text: String,\n    val created: Long = System.currentTimeMillis(),\n    var modified: Long = created,\n) : Parcelable, ListItem {\n    @IgnoredOnParcel\n    override val listId: Long\n        get() = id.toLong() + created\n}\n","license":"gpl-2.0"},{"repo_name":"salRoid/Filmy","path":"tech.salroid.filmy.data.local.db.entity.MovieDetails","copies":"1","size":2357,"content":"package tech.salroid.filmy.data.local.db.entity\n\nimport androidx.room.Entity\nimport com.google.gson.annotations.SerializedName\nimport tech.salroid.filmy.data.local.model.*\nimport tech.salroid.filmy.data.local.model.Collection\n\n@Entity(tableName = \"movie_details\", primaryKeys = [\"id\", \"type\"])\ndata class MovieDetails(\n\n    @SerializedName(\"id\")\n    var id: Int,\n\n    @SerializedName(\"adult\")\n    var adult: Boolean? = null,\n\n    @SerializedName(\"backdrop_path\")\n    var backdropPath: String? = null,\n\n    @SerializedName(\"belongs_to_collection\")\n    var belongsToCollection: Collection? = null,\n\n    @SerializedName(\"budget\")\n    var budget: Int? = null,\n\n    @SerializedName(\"genres\")\n    var genres: ArrayList<Genres> = arrayListOf(),\n\n    @SerializedName(\"homepage\")\n    var homepage: String? = null,\n\n    @SerializedName(\"imdb_id\")\n    var imdbId: String? = null,\n\n    @SerializedName(\"original_language\")\n    var originalLanguage: String? = null,\n\n    @SerializedName(\"original_title\")\n    var originalTitle: String? = null,\n\n    @SerializedName(\"overview\")\n    var overview: String? = null,\n\n    @SerializedName(\"popularity\")\n    var popularity: Double? = null,\n\n    @SerializedName(\"poster_path\")\n    var posterPath: String? = null,\n\n    @SerializedName(\"production_companies\")\n    var productionCompanies: ArrayList<ProductionCompanies> = arrayListOf(),\n\n    @SerializedName(\"production_countries\")\n    var productionCountries: ArrayList<ProductionCountries> = arrayListOf(),\n\n    @SerializedName(\"release_date\")\n    var releaseDate: String? = null,\n\n    @SerializedName(\"revenue\")\n    var revenue: Int? = null,\n\n    @SerializedName(\"runtime\")\n    var runtime: Int? = null,\n\n    @SerializedName(\"spoken_languages\")\n    var spokenLanguages: ArrayList<SpokenLanguages> = arrayListOf(),\n\n    @SerializedName(\"status\")\n    var status: String? = null,\n\n    @SerializedName(\"tagline\")\n    var tagline: String? = null,\n\n    @SerializedName(\"title\")\n    var title: String? = null,\n\n    @SerializedName(\"video\")\n    var video: Boolean? = null,\n\n    @SerializedName(\"vote_average\")\n    var voteAverage: Double? = null,\n\n    @SerializedName(\"vote_count\")\n    var voteCount: Int? = null,\n\n    @SerializedName(\"trailers\")\n    var trailers: Trailers? = Trailers(),\n\n    var type: Int = 0,\n\n    var favorite: Boolean = false,\n\n    var watchlist: Boolean = false\n)","license":"apache-2.0"},{"repo_name":"DreierF/MyTargets","path":"de.dreier.mytargets.shared.models.db.Round","copies":"1","size":1837,"content":"/*\n * Copyright (C) 2018 Florian Dreier\n *\n * This file is part of MyTargets.\n *\n * MyTargets is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2\n * as published by the Free Software Foundation.\n *\n * MyTargets is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n\npackage de.dreier.mytargets.shared.models.db\n\nimport androidx.room.*\nimport androidx.room.ForeignKey.CASCADE\nimport android.os.Parcelable\nimport de.dreier.mytargets.shared.models.Dimension\nimport de.dreier.mytargets.shared.models.IIdSettable\nimport de.dreier.mytargets.shared.models.Score\nimport de.dreier.mytargets.shared.models.Target\nimport kotlinx.android.parcel.Parcelize\n\n@Parcelize\n@Entity(\n    foreignKeys = [\n        ForeignKey(\n            entity = Training::class,\n            parentColumns = [\"id\"],\n            childColumns = [\"trainingId\"],\n            onDelete = CASCADE\n        )\n    ],\n    indices = [\n        Index(value = [\"trainingId\"])\n    ]\n)\ndata class Round(\n    @PrimaryKey(autoGenerate = true)\n    override var id: Long = 0,\n\n    var trainingId: Long? = null,\n\n    var index: Int = 0,\n\n    var shotsPerEnd: Int = 0,\n\n    var maxEndCount: Int? = null,\n\n    var distance: Dimension = Dimension.UNKNOWN,\n\n    var comment: String = \"\",\n\n    @Embedded\n    var target: Target = Target(),\n\n    @Embedded\n    var score: Score = Score()\n) : IIdSettable, Parcelable {\n\n    constructor(info: RoundTemplate) : this(\n        distance = info.distance,\n        shotsPerEnd = info.shotsPerEnd,\n        maxEndCount = info.endCount,\n        index = info.index,\n        target = info.targetTemplate.copy()\n    )\n}\n","license":"gpl-2.0"},{"repo_name":"DreierF/MyTargets","path":"de.dreier.mytargets.shared.models.db.SightMark","copies":"1","size":1456,"content":"/*\n * Copyright (C) 2018 Florian Dreier\n *\n * This file is part of MyTargets.\n *\n * MyTargets is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2\n * as published by the Free Software Foundation.\n *\n * MyTargets is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\npackage de.dreier.mytargets.shared.models.db\n\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.ForeignKey.CASCADE\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport android.os.Parcelable\nimport de.dreier.mytargets.shared.models.Dimension\nimport de.dreier.mytargets.shared.models.Dimension.Unit.METER\nimport de.dreier.mytargets.shared.models.IIdSettable\nimport kotlinx.android.parcel.Parcelize\n\n@Parcelize\n@Entity(\n    foreignKeys = [\n        ForeignKey(\n            entity = Bow::class,\n            parentColumns = [\"id\"],\n            childColumns = [\"bowId\"],\n            onDelete = CASCADE\n        )\n    ],\n    indices = [\n        Index(value = [\"bowId\"])\n    ]\n)\ndata class SightMark(\n    @PrimaryKey(autoGenerate = true)\n    override var id: Long = 0,\n    var bowId: Long? = null,\n    var distance: Dimension = Dimension(18f, METER),\n    var value: String? = \"\"\n) : IIdSettable, Parcelable\n","license":"gpl-2.0"},{"repo_name":"heinika/MyGankio","path":"lijin.heinika.cn.mygankio.entiy.GirlsBean","copies":"1","size":863,"content":"package lijin.heinika.cn.mygankio.entiy\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport com.google.gson.annotations.SerializedName\n\n/**\n * Created by yun on 2017/7/27.\n * 每日福利\n */\n/**\n * _id : 5979848e421aa90ca209c4f7\n * createdAt : 2017-07-27T14:13:34.914Z\n * desc : 7-27\n * publishedAt : 2017-07-27T14:16:33.773Z\n * source : chrome\n * type : 福利\n * url : http://ww1.sinaimg.cn/large/610dc034ly1fhyeyv5qwkj20u00u0q56.jpg\n * used : true\n * who : 代码家\n */\n@Entity(tableName = \"girls\")\ndata class GirlsBean(\n        @SerializedName(\"_id\") @PrimaryKey val id: String,\n        val createdAt: String,\n        val desc: String,\n        val publishedAt: String,\n        val source: String,\n        val type: String,\n        val url: String,\n        val used: Boolean = false,\n        val who: String\n)\n","license":"apache-2.0"},{"repo_name":"AK-47-D/cms","path":"com.ak47.cms.cms.entity.StockIndex","copies":"1","size":985,"content":"package com.ak47.cms.cms.entity\n\nimport java.util.*\nimport javax.persistence.*\n\n@Entity\nclass StockIndex {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    var id: Long = -1\n\n    @Column(name = \"index_code\", unique = true)\n    var index_code: String = \"\"\n\n    @Column(name = \"prod_name\")\n    var prod_name: String = \"\"\n\n\n    @Column(name = \"last_px\")\n    var last_px: String = \"\"\n\n\n    @Column(name = \"px_change\")\n    var px_change: String = \"\"\n\n\n    @Column(name = \"px_change_rate\")\n    var px_change_rate: String = \"\"\n\n\n    @Column(name = \"price_precision\")\n    var price_precision: String = \"\"\n\n    var gmtCreated: Date = Date()\n    var gmtModified: Date = Date()\n\n\n    override fun toString(): String {\n        return \"StockIndex(id=$id, index_code='$index_code', prod_name='$prod_name', last_px='$last_px', px_change='$px_change', px_change_rate='$px_change_rate', price_precision='$price_precision', gmtCreated=$gmtCreated, gmtModified=$gmtModified)\"\n    }\n\n\n}","license":"apache-2.0"},{"repo_name":"PaulWoitaschek/MaterialAudiobookPlayer","path":"de.ph1b.audiobook.data.BookMetaData","copies":"1","size":675,"content":"package de.ph1b.audiobook.data\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport java.util.UUID\n\n@Entity(tableName = \"bookMetaData\")\ndata class BookMetaData(\n  @ColumnInfo(name = \"id\")\n  @PrimaryKey\n  val id: UUID,\n  @ColumnInfo(name = \"type\")\n  val type: Book.Type,\n  @ColumnInfo(name = \"author\")\n  val author: String?,\n  @ColumnInfo(name = \"name\")\n  val name: String,\n  @ColumnInfo(name = \"root\")\n  val root: String,\n  @ColumnInfo(name = \"addedAtMillis\")\n  val addedAtMillis: Long\n) {\n\n  init {\n    require(name.isNotEmpty(), { \"name must not be empty\" })\n    require(root.isNotEmpty(), { \"root must not be empty\" })\n  }\n}\n","license":"lgpl-3.0"},{"repo_name":"SimpleMobileTools/Simple-Gallery","path":"com.simplemobiletools.gallery.pro.models.Directory","copies":"1","size":1969,"content":"package com.simplemobiletools.gallery.pro.models\n\nimport android.content.Context\nimport androidx.room.*\nimport com.bumptech.glide.signature.ObjectKey\nimport com.simplemobiletools.commons.extensions.formatDate\nimport com.simplemobiletools.commons.extensions.formatSize\nimport com.simplemobiletools.commons.helpers.*\nimport com.simplemobiletools.gallery.pro.helpers.RECYCLE_BIN\n\n@Entity(tableName = \"directories\", indices = [Index(value = [\"path\"], unique = true)])\ndata class Directory(\n    @PrimaryKey(autoGenerate = true) var id: Long?,\n    @ColumnInfo(name = \"path\") var path: String,\n    @ColumnInfo(name = \"thumbnail\") var tmb: String,\n    @ColumnInfo(name = \"filename\") var name: String,\n    @ColumnInfo(name = \"media_count\") var mediaCnt: Int,\n    @ColumnInfo(name = \"last_modified\") var modified: Long,\n    @ColumnInfo(name = \"date_taken\") var taken: Long,\n    @ColumnInfo(name = \"size\") var size: Long,\n    @ColumnInfo(name = \"location\") var location: Int,\n    @ColumnInfo(name = \"media_types\") var types: Int,\n    @ColumnInfo(name = \"sort_value\") var sortValue: String,\n\n    // used with \"Group direct subfolders\" enabled\n    @Ignore var subfoldersCount: Int = 0,\n    @Ignore var subfoldersMediaCount: Int = 0,\n    @Ignore var containsMediaFilesDirectly: Boolean = true\n) {\n\n    constructor() : this(null, \"\", \"\", \"\", 0, 0L, 0L, 0L, 0, 0, \"\", 0, 0)\n\n    fun getBubbleText(sorting: Int, context: Context, dateFormat: String? = null, timeFormat: String? = null) = when {\n        sorting and SORT_BY_NAME != 0 -> name\n        sorting and SORT_BY_PATH != 0 -> path\n        sorting and SORT_BY_SIZE != 0 -> size.formatSize()\n        sorting and SORT_BY_DATE_MODIFIED != 0 -> modified.formatDate(context, dateFormat, timeFormat)\n        sorting and SORT_BY_RANDOM != 0 -> name\n        else -> taken.formatDate(context)\n    }\n\n    fun areFavorites() = path == FAVORITES\n\n    fun isRecycleBin() = path == RECYCLE_BIN\n\n    fun getKey() = ObjectKey(\"$path-$modified\")\n}\n","license":"gpl-3.0"},{"repo_name":"kivensolo/UiUsingListView","path":"com.kingz.coroutines.data.local.entity.User","copies":"1","size":376,"content":"package com.kingz.coroutines.data.local.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"user_info\")\ndata class User(\n    @PrimaryKey val id: Int,\n    @ColumnInfo(name = \"name\") val name: String?,\n    @ColumnInfo(name = \"email\") val email: String?,\n    @ColumnInfo(name = \"avatar\") val avatar: String?\n)","license":"gpl-2.0"},{"repo_name":"chrisbanes/tivi","path":"app.tivi.data.entities.Episode","copies":"1","size":2289,"content":"/*\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage app.tivi.data.entities\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Ignore\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport org.threeten.bp.OffsetDateTime\n\n@Entity(\n    tableName = \"episodes\",\n    indices = [\n        Index(value = [\"trakt_id\"], unique = true),\n        Index(value = [\"season_id\"])\n    ],\n    foreignKeys = [\n        ForeignKey(\n            entity = Season::class,\n            parentColumns = arrayOf(\"id\"),\n            childColumns = arrayOf(\"season_id\"),\n            onUpdate = ForeignKey.CASCADE,\n            onDelete = ForeignKey.CASCADE\n        )\n    ]\n)\ndata class Episode(\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = \"id\")\n    override val id: Long = 0,\n    @ColumnInfo(name = \"season_id\") val seasonId: Long,\n    @ColumnInfo(name = \"trakt_id\") override val traktId: Int? = null,\n    @ColumnInfo(name = \"tmdb_id\") override val tmdbId: Int? = null,\n    @ColumnInfo(name = \"title\") val title: String? = null,\n    @ColumnInfo(name = \"overview\") val summary: String? = null,\n    @ColumnInfo(name = \"number\") val number: Int? = null,\n    @ColumnInfo(name = \"first_aired\") val firstAired: OffsetDateTime? = null,\n    @ColumnInfo(name = \"trakt_rating\") val traktRating: Float? = null,\n    @ColumnInfo(name = \"trakt_rating_votes\") val traktRatingVotes: Int? = null,\n    @ColumnInfo(name = \"tmdb_backdrop_path\") val tmdbBackdropPath: String? = null\n) : TiviEntity, TraktIdEntity, TmdbIdEntity {\n    companion object {\n        val EMPTY = Episode(seasonId = 0)\n    }\n\n    @delegate:Ignore\n    val isAired by lazy { firstAired?.isBefore(OffsetDateTime.now()) ?: false }\n}\n","license":"apache-2.0"},{"repo_name":"hellenxu/TipsProject","path":"six.ca.droiddailyproject.arch.db.migration.User","copies":"1","size":448,"content":"package six.ca.droiddailyproject.arch.db.migration\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n/**\n * @CopyRight six.ca\n * Created by Heavens on 2018-11-28.\n */\n@Entity(tableName = \"user\")\ndata class User(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"uid\") val uid: Int,\n                @ColumnInfo(name = \"name\") val name: String,\n                @ColumnInfo(name = \"age\") val age: Int = 0)","license":"apache-2.0"},{"repo_name":"pyamsoft/padlock","path":"com.pyamsoft.padlock.model.db.EntityChangeEvent","copies":"1","size":849,"content":"/*\n * Copyright 2019 Peter Kenji Yamanaka\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage com.pyamsoft.padlock.model.db\n\ndata class EntityChangeEvent(\n  val type: Type,\n  val packageName: String?,\n  val activityName: String?,\n  val whitelisted: Boolean\n) {\n\n  enum class Type {\n    DELETED,\n    UPDATED,\n    INSERTED\n  }\n}\n","license":"apache-2.0"},{"repo_name":"pyamsoft/padlock","path":"com.pyamsoft.padlock.model.db.PadLockEntryModel","copies":"1","size":1035,"content":"/*\n * Copyright 2019 Peter Kenji Yamanaka\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage com.pyamsoft.padlock.model.db\n\nimport androidx.annotation.CheckResult\n\ninterface PadLockEntryModel {\n\n  @CheckResult\n  fun packageName(): String\n\n  @CheckResult\n  fun activityName(): String\n\n  @CheckResult\n  fun lockCode(): String?\n\n  @CheckResult\n  fun whitelist(): Boolean\n\n  @CheckResult\n  fun systemApplication(): Boolean\n\n  @CheckResult\n  fun ignoreUntilTime(): Long\n\n  @CheckResult\n  fun lockUntilTime(): Long\n\n}\n","license":"apache-2.0"},{"repo_name":"sandipv22/pointer_replacer","path":"com.afterroot.allusive2.model.RoomPointer","copies":"1","size":1277,"content":"/*\n * Copyright (C) 2016-2021 Sandip Vaghela\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.afterroot.allusive2.model\n\nimport android.provider.BaseColumns\nimport androidx.annotation.Keep\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Keep\n@Entity(tableName = RoomPointer.TABLE_NAME)\ndata class RoomPointer(\n    @PrimaryKey(autoGenerate = true) @ColumnInfo(index = true, name = BaseColumns._ID)\n    val id: Int = 0,\n    @ColumnInfo val pointer_name: String?,\n    @ColumnInfo val file_name: String?,\n    @ColumnInfo val pointer_desc: String?,\n    @ColumnInfo val uploader_id: String,\n    @ColumnInfo val uploader_name: String\n) {\n    companion object {\n        const val TABLE_NAME = \"pointers\"\n    }\n}\n","license":"apache-2.0"},{"repo_name":"chrisbanes/tivi","path":"app.tivi.data.entities.TiviShow","copies":"1","size":2960,"content":"/*\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage app.tivi.data.entities\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport app.tivi.extensions.unsafeLazy\nimport org.threeten.bp.DayOfWeek\nimport org.threeten.bp.LocalTime\nimport org.threeten.bp.OffsetDateTime\nimport org.threeten.bp.ZoneId\n\n@Entity(\n    tableName = \"shows\",\n    indices = [\n        Index(value = [\"trakt_id\"], unique = true),\n        Index(value = [\"tmdb_id\"])\n    ]\n)\ndata class TiviShow(\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = \"id\")\n    override val id: Long = 0,\n    @ColumnInfo(name = \"title\") val title: String? = null,\n    @ColumnInfo(name = \"original_title\") val originalTitle: String? = null,\n    @ColumnInfo(name = \"trakt_id\") override val traktId: Int? = null,\n    @ColumnInfo(name = \"tmdb_id\") override val tmdbId: Int? = null,\n    @ColumnInfo(name = \"imdb_id\") val imdbId: String? = null,\n    @ColumnInfo(name = \"overview\") val summary: String? = null,\n    @ColumnInfo(name = \"homepage\") val homepage: String? = null,\n    @ColumnInfo(name = \"trakt_rating\") val traktRating: Float? = null,\n    @ColumnInfo(name = \"trakt_votes\") val traktVotes: Int? = null,\n    @ColumnInfo(name = \"certification\") val certification: String? = null,\n    @ColumnInfo(name = \"first_aired\") val firstAired: OffsetDateTime? = null,\n    @ColumnInfo(name = \"country\") val country: String? = null,\n    @ColumnInfo(name = \"network\") val network: String? = null,\n    @ColumnInfo(name = \"network_logo_path\") val networkLogoPath: String? = null,\n    @ColumnInfo(name = \"runtime\") val runtime: Int? = null,\n    @ColumnInfo(name = \"genres\") val _genres: String? = null,\n    @ColumnInfo(name = \"last_trakt_data_update\") val traktDataUpdate: OffsetDateTime? = null,\n    @ColumnInfo(name = \"status\") val status: ShowStatus? = null,\n    @ColumnInfo(name = \"airs_day\") val airsDay: DayOfWeek? = null,\n    @ColumnInfo(name = \"airs_time\") val airsTime: LocalTime? = null,\n    @ColumnInfo(name = \"airs_tz\") val airsTimeZone: ZoneId? = null\n) : TiviEntity, TraktIdEntity, TmdbIdEntity {\n    @Ignore\n    constructor() : this(0)\n\n    @delegate:Ignore\n    val genres by unsafeLazy {\n        _genres?.split(\",\")?.mapNotNull { Genre.fromTraktValue(it.trim()) } ?: emptyList()\n    }\n\n    companion object {\n        val EMPTY_SHOW = TiviShow()\n    }\n}\n","license":"apache-2.0"},{"repo_name":"chrisbanes/tivi","path":"app.tivi.data.resultentities.ShowDetailed","copies":"1","size":1618,"content":"/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage app.tivi.data.resultentities\n\nimport androidx.room.Embedded\nimport androidx.room.Ignore\nimport androidx.room.Relation\nimport app.tivi.data.entities.ShowTmdbImage\nimport app.tivi.data.entities.TiviShow\nimport app.tivi.data.entities.findHighestRatedBackdrop\nimport app.tivi.data.entities.findHighestRatedPoster\nimport app.tivi.extensions.unsafeLazy\nimport java.util.Objects\n\nclass ShowDetailed {\n    @Embedded\n    lateinit var show: TiviShow\n\n    @Relation(parentColumn = \"id\", entityColumn = \"show_id\")\n    lateinit var images: List<ShowTmdbImage>\n\n    @delegate:Ignore\n    val backdrop: ShowTmdbImage? by unsafeLazy { images.findHighestRatedBackdrop() }\n\n    @delegate:Ignore\n    val poster: ShowTmdbImage? by unsafeLazy { images.findHighestRatedPoster() }\n\n    override fun equals(other: Any?): Boolean = when {\n        other === this -> true\n        other is ShowDetailed -> show == other.show && images == other.images\n        else -> false\n    }\n\n    override fun hashCode(): Int = Objects.hash(show, images)\n}\n","license":"apache-2.0"},{"repo_name":"orgzly/orgzly-android","path":"com.orgzly.android.db.entity.NoteProperty","copies":"1","size":740,"content":"package com.orgzly.android.db.entity\n\nimport androidx.room.*\n\n@Entity(\n        tableName = \"note_properties\",\n\n        primaryKeys = [ \"note_id\", \"position\" ],\n\n        foreignKeys = [\n            ForeignKey(\n                    entity = Note::class,\n                    parentColumns = arrayOf(\"id\"),\n                    childColumns = arrayOf(\"note_id\"),\n                    onDelete = ForeignKey.CASCADE)\n        ],\n\n        indices = [\n            Index(\"note_id\"),\n            Index(\"position\"),\n            Index(\"name\"),\n            Index(\"value\")\n        ]\n)\ndata class NoteProperty(\n        @ColumnInfo(name = \"note_id\")\n        val noteId: Long,\n\n        val position: Int,\n\n        val name: String,\n\n        val value: String\n)\n","license":"gpl-3.0"},{"repo_name":"EasySpringBoot/picture-crawler","path":"com.easy.kotlin.picturecrawler.entity.SearchKeyWord","copies":"1","size":619,"content":"package com.easy.kotlin.picturecrawler.entity\n\nimport java.util.*\nimport javax.persistence.*\n\n\n@Entity\n@Table(indexes = arrayOf(Index(name = \"idx_key_word\", columnList = \"keyWord\", unique = true)))\nclass SearchKeyWord {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    var id: Long = -1\n    @Column(name = \"keyWord\", length = 50, nullable = false, unique = true)\n    var keyWord: String = \"\"\n\n    @Column(nullable = true)\n    var totalImage: Int? = 0\n\n    var gmtCreated: Date = Date()\n    var gmtModified: Date = Date()\n    var isDeleted: Int = 0  //1 Yes 0 No\n    var deletedDate: Date = Date()\n\n}\n","license":"apache-2.0"},{"repo_name":"jrg94/PopLibrary","path":"com.therenegadecoder.poplibrary.data.Book","copies":"1","size":2404,"content":"package com.therenegadecoder.poplibrary.data\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport java.util.*\n\n\n/**\n * Models a book.\n *\n * @author Jeremy Grifski\n * @property isbn13 the ISBN-13 for the book\n * @property title the title of the book\n * @property author the author of the book\n * @property editor the editor of the book\n * @property language the language the book was written in\n * @property coverImageURL the URL of an image of the cover of the book\n * @property pageCount the number of pages in the book\n * @property dateOfPublication the date the book was published\n * @property lexileLevel the Lexile level of the book\n * @property fountasAndPinell the Fountas & Pinell level of the book\n */\n@Entity(tableName = \"book_table\")\ndata class Book(\n    val isbn13: String? = null,\n    val title: String? = null,\n    val author: String? = null,\n    val editor: String? = null,\n    val language: String? = null,\n    val coverImageURL: String? = null,\n    val pageCount: Int? = null,\n    val dateOfPublication: Date? = null,\n    val lexileLevel: Lexile? = null,\n    val fountasAndPinell: FountasAndPinell? = null\n) {\n    @PrimaryKey(autoGenerate = true)\n    var bookId: Int = 0\n\n    /**\n     * Converts the book to a string.\n     *\n     * @return book as a string\n     */\n    override fun toString(): String {\n        return title ?: \"\"\n    }\n\n    /**\n     * Tests whether or not the given character sequence matches to this book.\n     *\n     * @param str some character sequence for query\n     * @return true if the character sequence matches any part of the book\n     */\n    fun match(str: CharSequence): Boolean {\n        return checkContains(title, str)\n                || checkContains(author, str)\n                || checkContains(editor, str)\n                || checkContains(language, str)\n                || checkContains(isbn13, str)\n    }\n\n    /**\n     * A helper method for checking whether or not the field contains some character sequence.\n     * If the field is null, the expression returns false.\n     *\n     * @param field a character sequence field of this object to compare against toFind\n     * @param toFind a character sequence that may exist in the field\n     * @return true if toFind exists in field\n     */\n    private fun checkContains(field: CharSequence?, toFind: CharSequence): Boolean {\n        return field?.contains(toFind, true) ?: false\n    }\n}\n","license":"gpl-3.0"},{"repo_name":"marktony/ZhiHuDaily","path":"com.marktony.zhihudaily.data.DoubanMomentContent","copies":"1","size":3992,"content":"/*\n * Copyright 2016 lizhaotailang\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.marktony.zhihudaily.data\n\nimport android.annotation.SuppressLint\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport android.arch.persistence.room.TypeConverters\nimport android.os.Parcelable\nimport com.google.gson.annotations.Expose\nimport com.google.gson.annotations.SerializedName\nimport com.marktony.zhihudaily.database.converter.DoubanTypeConverters\nimport kotlinx.android.parcel.Parcelize\n\n/**\n * Created by lizhaotailang on 2017/5/20.\n *\n * Immutable model class for douban moment details.\n * Entity class for [com.google.gson.Gson] and [android.arch.persistence.room.Room].\n */\n\n@Entity(tableName = \"douban_moment_content\")\n@TypeConverters(DoubanTypeConverters::class)\n@Parcelize\n@SuppressLint(\"ParcelCreator\")\ndata class DoubanMomentContent(\n\n        @ColumnInfo(name = \"display_style\")\n        @Expose\n        @SerializedName(\"display_style\")\n        val displayStyle: Int,\n\n        @ColumnInfo(name = \"short_url\")\n        @Expose\n        @SerializedName(\"short_url\")\n        val shortUrl: String,\n\n        @ColumnInfo(name = \"abstract\")\n        @Expose\n        @SerializedName(\"abstract\")\n        val abs: String,\n\n        @ColumnInfo(name = \"app_css\")\n        @Expose\n        @SerializedName(\"app_css\")\n        val appCss: Int,\n\n        @ColumnInfo(name = \"like_count\")\n        @Expose\n        @SerializedName(\"like_count\")\n        val likeCount: Int,\n\n        @ColumnInfo(name = \"thumbs\")\n        @Expose\n        @SerializedName(\"thumbs\")\n        val thumbs: List<DoubanMomentNewsThumbs>,\n\n        @ColumnInfo(name = \"created_time\")\n        @Expose\n        @SerializedName(\"created_time\")\n        val createdTime: String,\n\n        @ColumnInfo(name = \"id\")\n        @PrimaryKey\n        @Expose\n        @SerializedName(\"id\")\n        val id: Int = 0,\n\n        @ColumnInfo(name = \"is_editor_choice\")\n        @Expose\n        @SerializedName(\"is_editor_choice\")\n        val isEditorChoice: Boolean,\n\n        @ColumnInfo(name = \"original_url\")\n        @Expose\n        @SerializedName(\"original_url\")\n        val originalUrl: String,\n\n        @ColumnInfo(name = \"content\")\n        @Expose\n        @SerializedName(\"content\")\n        val content: String,\n\n        @ColumnInfo(name = \"share_pic_url\")\n        @Expose\n        @SerializedName(\"share_pic_url\")\n        val sharePicUrl: String,\n\n        @ColumnInfo(name = \"type\")\n        @Expose\n        @SerializedName(\"type\")\n        val type: String,\n\n        @ColumnInfo(name = \"is_liked\")\n        @Expose\n        @SerializedName(\"is_liked\")\n        val isLiked: Boolean,\n\n        @ColumnInfo(name = \"photos\")\n        @Expose\n        @SerializedName(\"photos\")\n        val photos: List<DoubanMomentNewsThumbs>,\n\n        @ColumnInfo(name = \"published_time\")\n        @Expose\n        @SerializedName(\"published_time\")\n        val publishedTime: String,\n\n        @ColumnInfo(name = \"url\")\n        @Expose\n        @SerializedName(\"url\")\n        val url: String,\n\n        @ColumnInfo(name = \"column\")\n        @Expose\n        @SerializedName(\"column\")\n        val column: String,\n\n        @ColumnInfo(name = \"comments_count\")\n        @Expose\n        @SerializedName(\"comments_count\")\n        val commentsCount: Int,\n\n        @ColumnInfo(name = \"title\")\n        @Expose\n        @SerializedName(\"title\")\n        val title: String\n\n) : Parcelable\n","license":"apache-2.0"},{"repo_name":"dbrant/apps-android-wikipedia","path":"org.wikipedia.readinglist.database.ReadingList","copies":"1","size":5420,"content":"package org.wikipedia.readinglist.database\n\nimport org.apache.commons.lang3.StringUtils\nimport org.wikipedia.R\nimport org.wikipedia.WikipediaApp\nimport java.io.Serializable\nimport java.util.*\n\nclass ReadingList(var dbTitle: String,\n                  var description: String?,\n                  var mtime: Long = System.currentTimeMillis(),\n                  var atime: Long = mtime,\n                  var id: Long = 0,\n                  val pages: MutableList<ReadingListPage> = mutableListOf(),\n                  var sizeBytes: Long = 0,\n                  var dirty: Boolean = true,\n                  var remoteId: Long = 0) : Serializable {\n\n    @Transient\n    private var accentAndCaseInvariantTitle: String? = null\n\n    val isDefault = dbTitle.isEmpty()\n\n    val title = if (isDefault) WikipediaApp.getInstance().getString(R.string.default_reading_list_name) else dbTitle\n\n    val numPagesOffline: Int\n        get() {\n            var count = 0\n            for (page in pages) {\n                if (page.offline && page.status == ReadingListPage.STATUS_SAVED) {\n                    count++\n                }\n            }\n            return count\n        }\n\n    val sizeBytesFromPages: Long\n        get() {\n            var bytes = 0L\n            pages.forEach {\n                bytes += if (it.offline) it.sizeBytes else 0\n            }\n            return bytes\n        }\n\n    fun accentAndCaseInvariantTitle(): String {\n        if (accentAndCaseInvariantTitle == null) {\n            accentAndCaseInvariantTitle = StringUtils.stripAccents(title).toLowerCase(Locale.getDefault())\n        }\n        return accentAndCaseInvariantTitle as String\n    }\n\n    fun touch() {\n        atime = System.currentTimeMillis()\n    }\n\n    companion object {\n        const val SORT_BY_NAME_ASC = 0\n        const val SORT_BY_NAME_DESC = 1\n        const val SORT_BY_RECENT_ASC = 2\n        const val SORT_BY_RECENT_DESC = 3\n\n        @JvmField\n        val DATABASE_TABLE = ReadingListTable()\n        fun sort(list: ReadingList, sortMode: Int) {\n            when (sortMode) {\n                SORT_BY_NAME_ASC -> list.pages.sortWith { lhs: ReadingListPage, rhs: ReadingListPage -> lhs.accentAndCaseInvariantTitle().compareTo(rhs.accentAndCaseInvariantTitle()) }\n                SORT_BY_NAME_DESC -> list.pages.sortWith { lhs: ReadingListPage, rhs: ReadingListPage -> rhs.accentAndCaseInvariantTitle().compareTo(lhs.accentAndCaseInvariantTitle()) }\n                SORT_BY_RECENT_ASC -> list.pages.sortWith { lhs: ReadingListPage, rhs: ReadingListPage -> lhs.mtime.compareTo(rhs.mtime) }\n                SORT_BY_RECENT_DESC -> list.pages.sortWith { lhs: ReadingListPage, rhs: ReadingListPage -> rhs.mtime.compareTo(lhs.mtime) }\n                else -> {\n                }\n            }\n        }\n\n        fun sort(lists: MutableList<ReadingList>, sortMode: Int) {\n            when (sortMode) {\n                SORT_BY_NAME_ASC -> lists.sortWith { lhs: ReadingList, rhs: ReadingList -> lhs.accentAndCaseInvariantTitle().compareTo(rhs.accentAndCaseInvariantTitle()) }\n                SORT_BY_NAME_DESC -> lists.sortWith { lhs: ReadingList, rhs: ReadingList -> rhs.accentAndCaseInvariantTitle().compareTo(lhs.accentAndCaseInvariantTitle()) }\n                SORT_BY_RECENT_ASC -> lists.sortWith { lhs: ReadingList, rhs: ReadingList -> rhs.mtime.compareTo(lhs.mtime) }\n                SORT_BY_RECENT_DESC -> lists.sortWith { lhs: ReadingList, rhs: ReadingList -> lhs.mtime.compareTo(rhs.mtime) }\n                else -> {\n                }\n            }\n            // make the Default list sticky on top, regardless of sorting.\n            lists.firstOrNull { it.isDefault }?.let {\n                lists.remove(it)\n                lists.add(0, it)\n            }\n        }\n\n        fun sortGenericList(lists: MutableList<Any>, sortMode: Int) {\n            when (sortMode) {\n                SORT_BY_NAME_ASC -> lists.sortWith { lhs: Any?, rhs: Any? ->\n                    if (lhs is ReadingList && rhs is ReadingList) {\n                        lhs.accentAndCaseInvariantTitle().compareTo(rhs.accentAndCaseInvariantTitle())\n                    } else {\n                        0\n                    }\n                }\n                SORT_BY_NAME_DESC -> lists.sortWith { lhs: Any?, rhs: Any? ->\n                    if (lhs is ReadingList && rhs is ReadingList) {\n                        rhs.accentAndCaseInvariantTitle().compareTo(lhs.accentAndCaseInvariantTitle())\n                    } else {\n                        0\n                    }\n                }\n                SORT_BY_RECENT_ASC -> lists.sortWith { lhs: Any?, rhs: Any? ->\n                    if (lhs is ReadingList && rhs is ReadingList) {\n                        rhs.mtime.compareTo(lhs.mtime)\n                    } else {\n                        0\n                    }\n                }\n                SORT_BY_RECENT_DESC -> lists.sortWith { lhs: Any?, rhs: Any? ->\n                    if (lhs is ReadingList && rhs is ReadingList) {\n                        lhs.mtime.compareTo(rhs.mtime)\n                    } else {\n                        0\n                    }\n                }\n                else -> { }\n            }\n\n            // make the Default list sticky on top, regardless of sorting.\n            lists.firstOrNull { it is ReadingList && it.isDefault }?.let {\n                lists.remove(it)\n                lists.add(0, it)\n            }\n        }\n    }\n}\n","license":"apache-2.0"},{"repo_name":"SimpleMobileTools/Simple-Music-Player","path":"com.simplemobiletools.musicplayer.models.Album","copies":"1","size":2347,"content":"package com.simplemobiletools.musicplayer.models\n\nimport android.provider.MediaStore\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport com.simplemobiletools.commons.helpers.AlphanumericComparator\nimport com.simplemobiletools.commons.helpers.SORT_DESCENDING\nimport com.simplemobiletools.musicplayer.helpers.PLAYER_SORT_BY_ARTIST_TITLE\nimport com.simplemobiletools.musicplayer.helpers.PLAYER_SORT_BY_TITLE\n\n@Entity(tableName = \"albums\", indices = [(Index(value = [\"id\"], unique = true))])\ndata class Album(\n    @PrimaryKey(autoGenerate = true) val id: Long,\n    @ColumnInfo(name = \"artist\") val artist: String,\n    @ColumnInfo(name = \"title\") val title: String,\n    @ColumnInfo(name = \"cover_art\") val coverArt: String,\n    @ColumnInfo(name = \"year\") val year: Int,\n    @ColumnInfo(name = \"track_cnt\") var trackCnt: Int,\n    @ColumnInfo(name = \"artist_id\") var artistId: Long\n) : ListItem(), Comparable<Album> {\n    companion object {\n        var sorting = 0\n    }\n\n    override fun compareTo(other: Album): Int {\n        var result = when {\n            sorting and PLAYER_SORT_BY_TITLE != 0 -> {\n                when {\n                    title == MediaStore.UNKNOWN_STRING && other.title != MediaStore.UNKNOWN_STRING -> 1\n                    title != MediaStore.UNKNOWN_STRING && other.title == MediaStore.UNKNOWN_STRING -> -1\n                    else -> AlphanumericComparator().compare(title.toLowerCase(), other.title.toLowerCase())\n                }\n            }\n            sorting and PLAYER_SORT_BY_ARTIST_TITLE != 0 -> {\n                when {\n                    artist == MediaStore.UNKNOWN_STRING && other.artist != MediaStore.UNKNOWN_STRING -> 1\n                    artist != MediaStore.UNKNOWN_STRING && other.artist == MediaStore.UNKNOWN_STRING -> -1\n                    else -> AlphanumericComparator().compare(artist.toLowerCase(), other.artist.toLowerCase())\n                }\n            }\n            else -> year.compareTo(other.year)\n        }\n\n        if (sorting and SORT_DESCENDING != 0) {\n            result *= -1\n        }\n\n        return result\n    }\n\n    fun getBubbleText() = when {\n        sorting and PLAYER_SORT_BY_TITLE != 0 -> title\n        sorting and PLAYER_SORT_BY_ARTIST_TITLE != 0 -> artist\n        else -> year.toString()\n    }\n}\n","license":"gpl-3.0"},{"repo_name":"SimpleMobileTools/Simple-Notes","path":"com.simplemobiletools.notes.pro.models.Widget","copies":"1","size":670,"content":"package com.simplemobiletools.notes.pro.models\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"widgets\", indices = [(Index(value = [\"widget_id\"], unique = true))])\ndata class Widget(\n        @PrimaryKey(autoGenerate = true) var id: Long?,\n        @ColumnInfo(name = \"widget_id\") var widgetId: Int,\n        @ColumnInfo(name = \"note_id\") var noteId: Long,\n        @ColumnInfo(name = \"widget_bg_color\") var widgetBgColor: Int,\n        @ColumnInfo(name = \"widget_text_color\") var widgetTextColor: Int,\n        @ColumnInfo(name = \"widget_show_title\") var widgetShowTitle: Boolean)\n","license":"gpl-3.0"},{"repo_name":"StepicOrg/stepik-android","path":"org.stepik.android.domain.course_purchase.model.BillingPurchasePayload","copies":"1","size":455,"content":"package org.stepik.android.domain.course_purchase.model\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity\ndata class BillingPurchasePayload(\n    @PrimaryKey\n    val orderId: String,\n    val courseId: Long,\n    val profileId: Long,\n    val obfuscatedAccountId: String,\n    val obfuscatedProfileId: String,\n    val promoCode: String?\n) {\n    companion object {\n        val EMPTY = BillingPurchasePayload(\"\", 0L, 0L, \"\", \"\", null)\n    }\n}","license":"apache-2.0"},{"repo_name":"ayatk/biblio","path":"com.ayatk.biblio.infrastructure.database.entity.BookmarkEntity","copies":"1","size":1199,"content":"/*\n * Copyright (c) 2016-2018 ayatk.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.ayatk.biblio.infrastructure.database.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.PrimaryKey\nimport java.util.UUID\n\n@Entity(\n  tableName = \"bookmark\",\n  foreignKeys = [\n    ForeignKey(\n      parentColumns = arrayOf(\"code\"),\n      childColumns = arrayOf(\"novel_code\"),\n      entity = NovelEntity::class\n    )\n\n  ]\n)\ndata class BookmarkEntity(\n\n  @PrimaryKey\n  var id: UUID,\n\n  @ColumnInfo(name = \"novel_code\", index = true)\n  var code: String,\n\n  @ColumnInfo(index = true)\n  var page: Int,\n\n  var memo: String\n)\n","license":"apache-2.0"},{"repo_name":"stefanmedack/cccTV","path":"de.stefanmedack.ccctv.persistence.entities.PlayPosition","copies":"1","size":1086,"content":"package de.stefanmedack.ccctv.persistence.entities\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.ForeignKey\nimport android.arch.persistence.room.ForeignKey.NO_ACTION\nimport android.arch.persistence.room.Index\nimport org.threeten.bp.OffsetDateTime\n\n@Entity(tableName = \"play_positions\",\n        primaryKeys = [\"event_id\"],\n        foreignKeys = [\n            ForeignKey(\n                    entity = Event::class,\n                    parentColumns = arrayOf(\"id\"),\n                    childColumns = arrayOf(\"event_id\"),\n                    onUpdate = NO_ACTION,\n                    onDelete = NO_ACTION\n            )\n        ],\n        indices = [\n            Index(name = \"event_play_position_idx\", value = [\"event_id\"])\n        ]\n)\ndata class PlayPosition(\n\n        @ColumnInfo(name = \"event_id\")\n        val eventId: String,\n\n        @ColumnInfo(name = \"seconds\")\n        val seconds: Int = 0,\n\n        @ColumnInfo(name = \"created_at\")\n        val createdAt: OffsetDateTime = OffsetDateTime.now()\n\n)","license":"apache-2.0"},{"repo_name":"BrianLusina/MovieReel","path":"com.moviereel.data.db.entities.movie.MovieUpcomingEntity","copies":"1","size":354,"content":"package com.moviereel.data.db.entities.movie\n\n\nimport android.arch.persistence.room.Entity\nimport com.moviereel.data.db.entities.BaseEntity\n\n/**\n * @author lusinabrian on 16/05/17.\n * @Notes An upcoming Movie model. Used when storing upcoming movie items in the database\n */\n\n@Entity(tableName = \"movie_upcoming\")\nclass MovieUpcomingEntity : BaseEntity()","license":"mit"},{"repo_name":"Abdel-RhmanAli/Inventory-App","path":"com.example.android.inventory.model.Item","copies":"1","size":441,"content":"package com.example.android.inventory.model\r\n\r\nimport android.arch.persistence.room.Entity\r\nimport android.arch.persistence.room.PrimaryKey\r\nimport android.graphics.Bitmap\r\n\r\n@Entity\r\nclass Item{\r\n        @PrimaryKey(autoGenerate = true)\r\n        var id: Int = 0\r\n        var name: String = \"\"\r\n        var type: String? = null\r\n        var amount: String? = null\r\n        var supplier: String? = null\r\n        var picture: Bitmap? = null\r\n}","license":"apache-2.0"},{"repo_name":"hzsweers/CatchUp","path":"io.sweers.catchup.service.api.CatchUpItem","copies":"1","size":1392,"content":"/*\n * Copyright (C) 2019. Zac Sweers\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage io.sweers.catchup.service.api\n\nimport androidx.annotation.Keep\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.datetime.Instant\n\n@Keep\n@Entity(tableName = \"items\")\ndata class CatchUpItem(\n  @PrimaryKey val id: Long,\n  val title: String,\n  val description: String? = null,\n  val timestamp: Instant?,\n  val score: Pair<String, Int>? = null,\n  val tag: String? = null,\n  val author: String? = null,\n  val source: String? = null,\n  val itemClickUrl: String? = null,\n  @Embedded val summarizationInfo: SummarizationInfo? = null,\n  @Embedded val imageInfo: ImageInfo? = null,\n  @Embedded val mark: Mark? = null,\n  val detailKey: String? = null\n) : DisplayableItem {\n\n  override fun stableId() = id\n\n  override fun realItem() = this\n}\n","license":"apache-2.0"},{"repo_name":"BreakOutEvent/breakout-backend","path":"backend.model.sponsoring.UnregisteredSponsor","copies":"1","size":1950,"content":"package backend.model.sponsoring\n\nimport backend.model.BasicEntity\nimport backend.model.challenges.Challenge\nimport backend.model.misc.Url\nimport backend.model.user.Address\nimport backend.model.user.Sponsor\nimport javax.persistence.*\nimport backend.model.media.Media\n\n@Entity\nclass UnregisteredSponsor : BasicEntity, ISponsor {\n\n    @Transient\n    override var registeredSponsor: Sponsor? = null\n        set(value) {}\n\n    @Transient\n    override var unregisteredSponsor: UnregisteredSponsor? = this\n        set(value) {}\n\n    override var firstname: String? = null\n\n    override var lastname: String? = null\n\n    override var company: String? = null\n\n    @Enumerated(EnumType.STRING)\n    override var supporterType: SupporterType = SupporterType.DONOR\n\n    @Embedded\n    @AttributeOverride(name = \"value\", column = Column(name = \"url\"))\n    override var url: Url? = null\n\n    @Embedded\n    override var address: Address? = null\n\n    @OneToMany(mappedBy = \"unregisteredSponsor\")\n    override var sponsorings: MutableList<Sponsoring> = mutableListOf()\n\n    @OneToMany(mappedBy = \"unregisteredSponsor\")\n    override var challenges: MutableList<Challenge> = mutableListOf()\n\n    @Column(nullable = true) // TODO: Why nullable?\n    override\n    var isHidden: Boolean = false\n\n    var email: String? = null\n\n    @Transient\n    override var logo: Media? = null\n\n    /**\n     * private no-args constructor for JPA / Hibernate\n     */\n    private constructor()\n\n    constructor(firstname: String,\n                lastname: String,\n                company: String,\n                gender: String? = null,\n                url: String? = null,\n                address: Address,\n                isHidden: Boolean = false,\n                email: String? = null) {\n\n        this.firstname = firstname\n        this.lastname = lastname\n        this.company = company\n        this.address = address\n        this.isHidden = isHidden\n        this.email = email\n    }\n}\n","license":"agpl-3.0"},{"repo_name":"MarkNKamau/JustJava-Android","path":"com.marknkamau.justjava.data.models.CartProductEntity","copies":"1","size":687,"content":"package com.marknkamau.justjava.data.models\n\nimport android.os.Parcelable\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.Parcelize\n\n@Entity(tableName = \"cart_products\")\n@Parcelize\ndata class CartProductEntity(\n    @PrimaryKey(autoGenerate = true)\n    val id: Long,\n\n    @ColumnInfo(name = \"product_id\")\n    var productId: Long,\n\n    @ColumnInfo(name = \"product_name\")\n    var productName: String,\n\n    @ColumnInfo(name = \"product_base_price\")\n    var productBasePrice: Double,\n\n    @ColumnInfo(name = \"total_price\")\n    var totalPrice: Double,\n\n    @ColumnInfo(name = \"quantity\")\n    var quantity: Int\n) : Parcelable\n","license":"apache-2.0"},{"repo_name":"MarkNKamau/JustJava-Android","path":"com.marknkamau.justjava.data.models.CartOptionEntity","copies":"1","size":970,"content":"package com.marknkamau.justjava.data.models\n\nimport android.os.Parcelable\nimport androidx.room.*\nimport kotlinx.parcelize.Parcelize\n\n@Entity(\n    tableName = \"cart_product_options\",\n    foreignKeys = [ForeignKey(\n        entity = CartProductEntity::class,\n        parentColumns = arrayOf(\"id\"),\n        childColumns = arrayOf(\"cart_products_row_id\"),\n        onDelete = ForeignKey.CASCADE\n    )],\n    indices = [Index(value = [\"cart_products_row_id\"])]\n)\n@Parcelize\ndata class CartOptionEntity(\n    @PrimaryKey(autoGenerate = true)\n    var id: Long,\n\n    @ColumnInfo(name = \"choice_id\")\n    var choiceId: Long,\n\n    @ColumnInfo(name = \"choice_name\")\n    var choiceName: String,\n\n    @ColumnInfo(name = \"option_id\")\n    var optionId: Long,\n\n    @ColumnInfo(name = \"option_name\")\n    var optionName: String,\n\n    @ColumnInfo(name = \"option_price\")\n    var optionPrice: Double,\n\n    @ColumnInfo(name = \"cart_products_row_id\")\n    var cartProductsRowId: Long\n) : Parcelable\n","license":"apache-2.0"},{"repo_name":"MarkNKamau/JustJava-Android","path":"com.marknkamau.justjava.data.models.CartItem","copies":"1","size":290,"content":"package com.marknkamau.justjava.data.models\n\nimport androidx.room.Embedded\nimport androidx.room.Relation\n\ndata class CartItem(\n    @Embedded val cartItem: CartProductEntity,\n    @Relation(parentColumn = \"id\", entityColumn = \"cart_products_row_id\")\n    var options: List<CartOptionEntity>\n)\n","license":"apache-2.0"},{"repo_name":"Heiner1/AndroidAPS","path":"info.nightscout.androidaps.database.entities.APSResultLink","copies":"1","size":1702,"content":"package info.nightscout.androidaps.database.entities\n\nimport androidx.room.*\nimport info.nightscout.androidaps.database.TABLE_APS_RESULT_LINKS\nimport info.nightscout.androidaps.database.embedments.InterfaceIDs\nimport info.nightscout.androidaps.database.interfaces.TraceableDBEntry\n\n@Entity(tableName = TABLE_APS_RESULT_LINKS,\n        foreignKeys = [ForeignKey(\n                entity = APSResult::class,\n                parentColumns = arrayOf(\"id\"),\n                childColumns = arrayOf(\"apsResultId\")), ForeignKey(\n\n                entity = Bolus::class,\n                parentColumns = arrayOf(\"id\"),\n                childColumns = arrayOf(\"smbId\")), ForeignKey(\n\n                entity = TemporaryBasal::class,\n                parentColumns = arrayOf(\"id\"),\n                childColumns = arrayOf(\"tbrId\")), ForeignKey(\n\n                entity = APSResultLink::class,\n                parentColumns = arrayOf(\"id\"),\n                childColumns = arrayOf(\"referenceId\"))],\n        indices = [Index(\"referenceId\"), Index(\"apsResultId\"),\n            Index(\"smbId\"), Index(\"tbrId\")])\ndata class APSResultLink(\n        @PrimaryKey(autoGenerate = true)\n        override var id: Long = 0,\n        override var version: Int = 0,\n        override var dateCreated: Long = -1,\n        override var isValid: Boolean = true,\n        override var referenceId: Long? = null,\n        @Embedded\n        override var interfaceIDs_backing: InterfaceIDs? = null,\n        var apsResultId: Long,\n        var smbId: Long? = null,\n        var tbrId: Long? = null\n) : TraceableDBEntry {\n    override val foreignKeysValid: Boolean\n        get() = super.foreignKeysValid && apsResultId != 0L && smbId != 0L && tbrId != 0L\n}","license":"agpl-3.0"},{"repo_name":"wordpress-mobile/WordPress-FluxC-Android","path":"org.wordpress.android.fluxc.persistence.entity.OrderMetaDataEntity","copies":"2","size":1037,"content":"package org.wordpress.android.fluxc.persistence.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport org.wordpress.android.fluxc.model.LocalOrRemoteId.LocalId\nimport org.wordpress.android.fluxc.model.OrderEntity\n\n/**\n * The OrderMetaDataEntity table is used to store viewable order metadata. Order metadata\n * can potentially be quite large, so we keep it separate from the order.\n */\n@Entity(\n    tableName = \"OrderMetaData\",\n    indices = [Index(\n        value = [\"localSiteId\", \"orderId\"]\n    )],\n    primaryKeys = [\"localSiteId\", \"orderId\", \"id\"],\n    foreignKeys = [ForeignKey(\n        entity = OrderEntity::class,\n        parentColumns = [\"localSiteId\", \"orderId\"],\n        childColumns = [\"localSiteId\", \"orderId\"],\n        onDelete = ForeignKey.CASCADE\n    )]\n)\ndata class OrderMetaDataEntity(\n    @ColumnInfo(name = \"localSiteId\")\n    val localSiteId: LocalId,\n    val id: Long,\n    val orderId: Long,\n    val key: String,\n    val value: String\n)\n","license":"gpl-2.0"},{"repo_name":"wordpress-mobile/WordPress-Stores-Android","path":"org.wordpress.android.fluxc.persistence.entity.AddonEntity","copies":"2","size":1940,"content":"package org.wordpress.android.fluxc.persistence.entity\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.ForeignKey.CASCADE\nimport androidx.room.PrimaryKey\nimport androidx.room.Relation\n\ndata class AddonWithOptions(\n    @Embedded val addon: AddonEntity,\n    @Relation(\n            parentColumn = \"addonLocalId\",\n            entityColumn = \"addonLocalId\"\n    )\n    val options: List<AddonOptionEntity>\n)\n\n@Entity(\n        foreignKeys = [ForeignKey(\n                entity = GlobalAddonGroupEntity::class,\n                parentColumns = [\"globalGroupLocalId\"],\n                childColumns = [\"globalGroupLocalId\"],\n                onDelete = CASCADE\n        )]\n)\ndata class AddonEntity(\n    @PrimaryKey(autoGenerate = true) val addonLocalId: Long = 0,\n    val globalGroupLocalId: Long? = null,\n    val productRemoteId: Long? = null,\n    val siteRemoteId: Long? = null,\n    val type: LocalType,\n    val display: LocalDisplay? = null,\n    val name: String,\n    val titleFormat: LocalTitleFormat,\n    val description: String?,\n    val required: Boolean,\n    val position: Int,\n    val restrictions: LocalRestrictions? = null,\n    val priceType: LocalPriceType? = null,\n    val price: String? = null,\n    val min: Long? = null,\n    val max: Long? = null\n) {\n    enum class LocalType {\n        MultipleChoice,\n        Checkbox,\n        CustomText,\n        CustomTextArea,\n        FileUpload,\n        CustomPrice,\n        InputMultiplier,\n        Heading\n    }\n\n    enum class LocalDisplay {\n        Select,\n        RadioButton,\n        Images\n    }\n\n    enum class LocalTitleFormat {\n        Label,\n        Heading,\n        Hide\n    }\n\n    enum class LocalRestrictions {\n        AnyText,\n        OnlyLetters,\n        OnlyNumbers,\n        OnlyLettersNumbers,\n        Email\n    }\n\n    enum class LocalPriceType {\n        FlatFee,\n        QuantityBased,\n        PercentageBased\n    }\n}\n","license":"gpl-2.0"},{"repo_name":"SimpleMobileTools/Simple-Calendar","path":"com.simplemobiletools.calendar.pro.models.Widget","copies":"1","size":449,"content":"package com.simplemobiletools.calendar.pro.models\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"widgets\", indices = [(Index(value = [\"widget_id\"], unique = true))])\ndata class Widget(\n        @PrimaryKey(autoGenerate = true) var id: Long?,\n        @ColumnInfo(name = \"widget_id\") var widgetId: Int,\n        @ColumnInfo(name = \"period\") var period: Int)\n","license":"gpl-3.0"},{"repo_name":"80998062/Fank","path":"com.sinyuk.fanfou.domain.DO.Status","copies":"1","size":3529,"content":"/*\n *\n *  * Apache License\n *  *\n *  * Copyright [2017] Sinyuk\n *  *\n *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n *  * you may not use this file except in compliance with the License.\n *  * You may obtain a copy of the License at\n *  *\n *  *     http://www.apache.org/licenses/LICENSE-2.0\n *  *\n *  * Unless required by applicable law or agreed to in writing, software\n *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  * See the License for the specific language governing permissions and\n *  * limitations under the License.\n *\n */\n\npackage com.sinyuk.fanfou.domain.DO\n\nimport android.arch.persistence.room.*\nimport android.os.Parcel\nimport android.os.Parcelable\nimport android.support.annotation.NonNull\nimport com.google.gson.annotations.SerializedName\nimport com.sinyuk.fanfou.domain.convertPathToFlag\nimport com.sinyuk.fanfou.domain.db.DateConverter\nimport java.util.*\n\n/**\n * Created by sinyuk on 2017/3/28.\n *\n */\n\n@Entity(tableName = \"statuses\",\n        primaryKeys = [\"id\", \"uid\"],\n        indices = [(Index(\"pathFlag\"))])\n@TypeConverters(DateConverter::class)\ndata class Status constructor(\n        @NonNull @SerializedName(\"id\") var id: String = \"\",\n        @NonNull var uid: String = \"\",\n        @SerializedName(\"text\") var text: String? = null,\n        @SerializedName(\"source\") var source: String? = null,\n        @SerializedName(\"location\") var location: String? = null,\n        @Ignore @SerializedName(\"user\") var user: Player? = null,\n        @SerializedName(\"created_at\") var createdAt: Date? = null,\n        @Embedded(prefix = \"player_\") var playerExtracts: PlayerExtracts? = null,\n        @Embedded(prefix = \"photo_\") @SerializedName(\"photo\") var photos: Photos? = null,\n        @SerializedName(\"favorited\") var favorited: Boolean = false,\n        var pathFlag: Int = 0\n) : Parcelable {\n    fun addPath(flags: Int) {\n        pathFlag = pathFlag or flags\n    }\n\n    fun removePath(flags: Int) {\n        pathFlag = pathFlag and flags.inv()\n    }\n\n    fun addPathFlag(path: String) {\n        addPath(convertPathToFlag(path))\n    }\n\n    constructor(source: Parcel) : this(\n            source.readString(),\n            source.readString(),\n            source.readString(),\n            source.readString(),\n            source.readString(),\n            source.readParcelable<Player>(Player::class.java.classLoader),\n            source.readSerializable() as Date?,\n            source.readParcelable<PlayerExtracts>(PlayerExtracts::class.java.classLoader),\n            source.readParcelable<Photos>(Photos::class.java.classLoader),\n            1 == source.readInt(),\n            source.readInt()\n    )\n\n    override fun describeContents() = 0\n\n    override fun writeToParcel(dest: Parcel, flags: Int) = with(dest) {\n        writeString(id)\n        writeString(uid)\n        writeString(text)\n        writeString(source)\n        writeString(location)\n        writeParcelable(user, 0)\n        writeSerializable(createdAt)\n        writeParcelable(playerExtracts, 0)\n        writeParcelable(photos, 0)\n        writeInt((if (favorited) 1 else 0))\n        writeInt(pathFlag)\n    }\n\n    companion object {\n        @JvmField\n        val CREATOR: Parcelable.Creator<Status> = object : Parcelable.Creator<Status> {\n            override fun createFromParcel(source: Parcel): Status = Status(source)\n            override fun newArray(size: Int): Array<Status?> = arrayOfNulls(size)\n        }\n    }\n}\n","license":"mit"},{"repo_name":"iPoli/iPoli-android","path":"io.ipoli.android.dailychallenge.data.DailyChallenge","copies":"1","size":615,"content":"package io.ipoli.android.dailychallenge.data\n\nimport io.ipoli.android.common.Reward\nimport io.ipoli.android.quest.Entity\nimport org.threeten.bp.Instant\nimport org.threeten.bp.LocalDate\n\n/**\n * Created by Polina Zhelyazkova <polina@mypoli.fun>\n * on 5/28/18.\n */\ndata class DailyChallenge(\n    override val id: String = \"\",\n    val date: LocalDate,\n    val questIds: List<String> = emptyList(),\n    val isCompleted: Boolean = false,\n    val reward: Reward? = null,\n    override val createdAt: Instant = Instant.now(),\n    override val updatedAt: Instant = Instant.now(),\n    val removedAt: Instant? = null\n) : Entity","license":"gpl-3.0"},{"repo_name":"chrisbanes/tivi","path":"app.tivi.data.entities.TraktUser","copies":"1","size":1508,"content":"/*\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage app.tivi.data.entities\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport org.threeten.bp.OffsetDateTime\n\n@Entity(\n    tableName = \"users\",\n    indices = [Index(value = [\"username\"], unique = true)]\n)\ndata class TraktUser(\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = \"id\")\n    override val id: Long = 0,\n    @ColumnInfo(name = \"username\") val username: String,\n    @ColumnInfo(name = \"name\") val name: String? = null,\n    @ColumnInfo(name = \"joined_date\") val joined: OffsetDateTime? = null,\n    @ColumnInfo(name = \"location\") val location: String? = null,\n    @ColumnInfo(name = \"about\") val about: String? = null,\n    @ColumnInfo(name = \"avatar_url\") val avatarUrl: String? = null,\n    @ColumnInfo(name = \"vip\") val vip: Boolean? = null,\n    @ColumnInfo(name = \"is_me\") val isMe: Boolean = false\n) : TiviEntity\n","license":"apache-2.0"},{"repo_name":"zoetrope/elastiko","path":"Search","copies":"1","size":1311,"content":"import elastiko.*\nimport nl.komponents.kovenant.DirectDispatcher\nimport nl.komponents.kovenant.Kovenant\nimport org.elasticsearch.client.Client\nimport org.elasticsearch.common.unit.TimeValue\nimport org.junit.After\nimport org.junit.Before\nimport org.junit.Test\nimport kotlin.test.assertEquals\n\nclass SearchTest {\n    lateinit private var client: Client\n\n    @Before fun setup() {\n        Kovenant.context {\n            callbackContext.dispatcher = DirectDispatcher.instance\n            workerContext.dispatcher = DirectDispatcher.instance\n        }\n\n        client = transportClient(listOf(address(\"localhost\", 9350))) {\n            settings {\n                put(\"cluster.name\", \"elasticsearch\")\n            }\n        }\n    }\n\n    @After fun tearDown() {\n        client.close()\n    }\n\n    @Test fun allMatch() {\n\n        val p = client.searchAsync(\"bank\"){\n            setQuery(matchAllQuery())\n            setTimeout(TimeValue.timeValueSeconds(5))\n        }\n\n        assertEquals(1000, p.get().hits.totalHits)\n    }\n\n    @Test fun range() {\n\n        val p = client.searchAsync(\"bank\"){\n            setQuery(rangeQuery(\"age\"){\n                from(20)\n                to(25)\n            })\n            setTimeout(TimeValue.timeValueSeconds(5))\n        }\n\n        assertEquals(267, p.get().hits.totalHits)\n    }\n}","license":"mit"},{"repo_name":"alashow/music-android","path":"tm.alashow.datmusic.domain.entities.Artist","copies":"1","size":2323,"content":"/*\n * Copyright (C) 2021, Alashov Berkeli\n * All rights reserved.\n */\npackage tm.alashow.datmusic.domain.entities\n\nimport android.os.Parcelable\nimport androidx.core.net.toUri\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.parcelize.Parcelize\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport tm.alashow.Config\nimport tm.alashow.datmusic.domain.UNKNOWN_ARTIST\nimport tm.alashow.domain.models.BasePaginatedEntity\n\ntypealias ArtistId = String\n\n@Parcelize\n@Serializable\n@Entity(tableName = \"artists\")\ndata class Artist(\n    @SerialName(\"id\")\n    @ColumnInfo(name = \"id\")\n    override val id: ArtistId = \"\",\n\n    @SerialName(\"name\")\n    @ColumnInfo(name = \"name\")\n    val name: String = UNKNOWN_ARTIST,\n\n    @SerialName(\"domain\")\n    @ColumnInfo(name = \"domain\")\n    val domain: String = \"\",\n\n    @SerialName(\"photo\")\n    @ColumnInfo(name = \"photo\")\n    val _photo: List<Photo> = listOf(),\n\n    @SerialName(\"audios\")\n    @ColumnInfo(name = \"audios\")\n    val audios: List<Audio> = emptyList(),\n\n    @SerialName(\"albums\")\n    @ColumnInfo(name = \"albums\")\n    val albums: List<Album> = emptyList(),\n\n    @Transient\n    @ColumnInfo(name = \"params\")\n    override var params: String = defaultParams,\n\n    @Transient\n    @ColumnInfo(name = \"page\")\n    override var page: Int = defaultPage,\n\n    @Transient\n    @ColumnInfo(name = \"details_fetched\")\n    val detailsFetched: Boolean = false,\n\n    @PrimaryKey\n    val primaryKey: String = \"\",\n\n    @Transient\n    @ColumnInfo(name = \"search_index\")\n    val searchIndex: Int = 0,\n) : BasePaginatedEntity(), Parcelable {\n\n    private fun sourcePhoto() = _photo.maxByOrNull { it.height }?.url\n\n    fun photo() = sourcePhoto() ?: buildAlternatePhotoUrl(\"medium\")\n    fun largePhoto() = buildAlternatePhotoUrl(\"large\")\n\n    private fun buildAlternatePhotoUrl(size: String) =\n        Config.API_BASE_URL.toUri().buildUpon().encodedPath(\"cover/artists\").appendPath(name).appendPath(size).build().toString()\n\n    @Serializable\n    @Parcelize\n    data class Photo(\n        @SerialName(\"url\")\n        val url: String = \"\",\n\n        @SerialName(\"height\")\n        val height: Int = 0,\n\n        @SerialName(\"width\")\n        val width: Int = 0,\n    ) : Parcelable\n}\n","license":"apache-2.0"},{"repo_name":"scorsero/scorsero-client-android","path":"io.github.dmi3coder.scorsero.data.Score","copies":"1","size":927,"content":"package io.github.dmi3coder.scorsero.data\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n/**\n * Created by dim3coder on 12:59 PM 7/2/17.\n */\n@Entity\nclass Score() {\n\n  @PrimaryKey(autoGenerate = true)\n  var id: Int? = null\n\n  var title: String? = null\n\n  var priority: Int? = null\n\n  var description: String? = null\n\n  @ColumnInfo(name = \"creation_date\")\n  var creationDate: Long? = null\n\n  var completed: Boolean? = null\n\n  @ColumnInfo(name = \"completion_date\")\n  var completionDate: Long? = null\n\n  constructor(id: Int?, title: String?, description: String?, creationDate: Long?,\n      completed: Boolean?, completionDate: Long?) : this() {\n    this.id = id\n    this.title = title\n    this.description = description\n    this.creationDate = creationDate\n    this.completed = completed\n    this.completionDate = completionDate\n  }\n}","license":"gpl-3.0"},{"repo_name":"theScrabi/NewPipe","path":"org.schabi.newpipe.database.stream.model.StreamEntity","copies":"1","size":4286,"content":"package org.schabi.newpipe.database.stream.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport org.schabi.newpipe.database.stream.model.StreamEntity.Companion.STREAM_SERVICE_ID\nimport org.schabi.newpipe.database.stream.model.StreamEntity.Companion.STREAM_TABLE\nimport org.schabi.newpipe.database.stream.model.StreamEntity.Companion.STREAM_URL\nimport org.schabi.newpipe.extractor.localization.DateWrapper\nimport org.schabi.newpipe.extractor.stream.StreamInfo\nimport org.schabi.newpipe.extractor.stream.StreamInfoItem\nimport org.schabi.newpipe.extractor.stream.StreamType\nimport org.schabi.newpipe.player.playqueue.PlayQueueItem\nimport java.io.Serializable\nimport java.time.OffsetDateTime\n\n@Entity(\n    tableName = STREAM_TABLE,\n    indices = [\n        Index(value = [STREAM_SERVICE_ID, STREAM_URL], unique = true)\n    ]\n)\ndata class StreamEntity(\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = STREAM_ID)\n    var uid: Long = 0,\n\n    @ColumnInfo(name = STREAM_SERVICE_ID)\n    var serviceId: Int,\n\n    @ColumnInfo(name = STREAM_URL)\n    var url: String,\n\n    @ColumnInfo(name = STREAM_TITLE)\n    var title: String,\n\n    @ColumnInfo(name = STREAM_TYPE)\n    var streamType: StreamType,\n\n    @ColumnInfo(name = STREAM_DURATION)\n    var duration: Long,\n\n    @ColumnInfo(name = STREAM_UPLOADER)\n    var uploader: String,\n\n    @ColumnInfo(name = STREAM_THUMBNAIL_URL)\n    var thumbnailUrl: String? = null,\n\n    @ColumnInfo(name = STREAM_VIEWS)\n    var viewCount: Long? = null,\n\n    @ColumnInfo(name = STREAM_TEXTUAL_UPLOAD_DATE)\n    var textualUploadDate: String? = null,\n\n    @ColumnInfo(name = STREAM_UPLOAD_DATE)\n    var uploadDate: OffsetDateTime? = null,\n\n    @ColumnInfo(name = STREAM_IS_UPLOAD_DATE_APPROXIMATION)\n    var isUploadDateApproximation: Boolean? = null\n) : Serializable {\n    @Ignore\n    constructor(item: StreamInfoItem) : this(\n        serviceId = item.serviceId, url = item.url, title = item.name,\n        streamType = item.streamType, duration = item.duration, uploader = item.uploaderName,\n        thumbnailUrl = item.thumbnailUrl, viewCount = item.viewCount,\n        textualUploadDate = item.textualUploadDate, uploadDate = item.uploadDate?.offsetDateTime(),\n        isUploadDateApproximation = item.uploadDate?.isApproximation\n    )\n\n    @Ignore\n    constructor(info: StreamInfo) : this(\n        serviceId = info.serviceId, url = info.url, title = info.name,\n        streamType = info.streamType, duration = info.duration, uploader = info.uploaderName,\n        thumbnailUrl = info.thumbnailUrl, viewCount = info.viewCount,\n        textualUploadDate = info.textualUploadDate, uploadDate = info.uploadDate?.offsetDateTime(),\n        isUploadDateApproximation = info.uploadDate?.isApproximation\n    )\n\n    @Ignore\n    constructor(item: PlayQueueItem) : this(\n        serviceId = item.serviceId, url = item.url, title = item.title,\n        streamType = item.streamType, duration = item.duration, uploader = item.uploader,\n        thumbnailUrl = item.thumbnailUrl\n    )\n\n    fun toStreamInfoItem(): StreamInfoItem {\n        val item = StreamInfoItem(serviceId, url, title, streamType)\n        item.duration = duration\n        item.uploaderName = uploader\n        item.thumbnailUrl = thumbnailUrl\n\n        if (viewCount != null) item.viewCount = viewCount as Long\n        item.textualUploadDate = textualUploadDate\n        item.uploadDate = uploadDate?.let {\n            DateWrapper(it, isUploadDateApproximation ?: false)\n        }\n\n        return item\n    }\n\n    companion object {\n        const val STREAM_TABLE = \"streams\"\n        const val STREAM_ID = \"uid\"\n        const val STREAM_SERVICE_ID = \"service_id\"\n        const val STREAM_URL = \"url\"\n        const val STREAM_TITLE = \"title\"\n        const val STREAM_TYPE = \"stream_type\"\n        const val STREAM_DURATION = \"duration\"\n        const val STREAM_UPLOADER = \"uploader\"\n        const val STREAM_THUMBNAIL_URL = \"thumbnail_url\"\n\n        const val STREAM_VIEWS = \"view_count\"\n        const val STREAM_TEXTUAL_UPLOAD_DATE = \"textual_upload_date\"\n        const val STREAM_UPLOAD_DATE = \"upload_date\"\n        const val STREAM_IS_UPLOAD_DATE_APPROXIMATION = \"is_upload_date_approximation\"\n    }\n}\n","license":"gpl-3.0"},{"repo_name":"StephaneBg/ScoreItProject","path":"com.sbgapps.scoreit.cache.model.UniversalGameData","copies":"1","size":867,"content":"/*\n * Copyright 2018 Stéphane Baiget\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.sbgapps.scoreit.cache.model\n\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"games\")\ndata class UniversalGameData(\n    @PrimaryKey(autoGenerate = true) val id: Long? = null,\n    var name: String\n)","license":"apache-2.0"},{"repo_name":"vhromada/Catalog","path":"com.github.vhromada.catalog.domain.Music","copies":"1","size":2088,"content":"package com.github.vhromada.catalog.domain\n\nimport org.hibernate.annotations.Fetch\nimport org.hibernate.annotations.FetchMode\nimport javax.persistence.CascadeType\nimport javax.persistence.Column\nimport javax.persistence.Entity\nimport javax.persistence.FetchType\nimport javax.persistence.GeneratedValue\nimport javax.persistence.GenerationType\nimport javax.persistence.Id\nimport javax.persistence.OneToMany\nimport javax.persistence.OrderBy\nimport javax.persistence.SequenceGenerator\nimport javax.persistence.Table\n\n/**\n * A class represents music.\n *\n * @author Vladimir Hromada\n */\n@Entity\n@Table(name = \"music\")\n@Suppress(\"JpaDataSourceORMInspection\")\ndata class Music(\n    /**\n     * ID\n     */\n    @Id\n    @SequenceGenerator(name = \"music_generator\", sequenceName = \"music_sq\", allocationSize = 1)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"music_generator\")\n    var id: Int?,\n\n    /**\n     * UUID\n     */\n    val uuid: String,\n\n    /**\n     * Name\n     */\n    @Column(name = \"music_name\")\n    var name: String,\n\n    /**\n     * Normalized name\n     */\n    @Column(name = \"normalized_music_name\")\n    var normalizedName: String,\n\n    /**\n     * URL to english Wikipedia page about music\n     */\n    @Column(name = \"wiki_en\")\n    var wikiEn: String?,\n\n    /**\n     * URL to czech Wikipedia page about music\n     */\n    @Column(name = \"wiki_cz\")\n    var wikiCz: String?,\n\n    /**\n     * Count of media\n     */\n    @Column(name = \"media_count\")\n    var mediaCount: Int,\n\n    /**\n     * Note\n     */\n    var note: String?,\n\n    /**\n     * Songs\n     */\n    @OneToMany(mappedBy = \"music\", fetch = FetchType.EAGER, cascade = [CascadeType.ALL], orphanRemoval = true)\n    @OrderBy(\"id\")\n    @Fetch(FetchMode.SELECT)\n    val songs: MutableList<Song>\n) : Audit() {\n\n    /**\n     * Merges music.\n     *\n     * @param music music\n     */\n    fun merge(music: Music) {\n        name = music.name\n        normalizedName = music.normalizedName\n        wikiEn = music.wikiEn\n        wikiCz = music.wikiCz\n        mediaCount = music.mediaCount\n        note = music.note\n    }\n\n}\n","license":"mit"},{"repo_name":"vhromada/Catalog","path":"com.github.vhromada.catalog.domain.io.MusicStatistics","copies":"1","size":284,"content":"package com.github.vhromada.catalog.domain.io\n\n/**\n * A class represents statistics for music.\n *\n * @author Vladimir Hromada\n */\ndata class MusicStatistics(\n    /**\n     * Count of music\n     */\n    val count: Long,\n\n    /**\n     * Count of media\n     */\n    val mediaCount: Long?\n)\n","license":"mit"},{"repo_name":"google/ground-android","path":"com.google.android.ground.persistence.local.room.entity.SubmissionEntity","copies":"1","size":1667,"content":"/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.android.ground.persistence.local.room.entity\n\nimport androidx.room.*\nimport com.google.android.ground.model.submission.Submission\nimport com.google.android.ground.persistence.local.room.models.EntityState\n\n/** Representation of a [Submission] in local db. */\n@Entity(\n  foreignKeys =\n    [\n      ForeignKey(\n        entity = LocationOfInterestEntity::class,\n        parentColumns = [\"id\"],\n        childColumns = [\"location_of_interest_id\"],\n        onDelete = ForeignKey.CASCADE\n      )\n    ],\n  tableName = \"submission\",\n  indices = [Index(\"location_of_interest_id\", \"job_id\", \"state\")]\n)\ndata class SubmissionEntity(\n  @ColumnInfo(name = \"id\") @PrimaryKey val id: String,\n  @ColumnInfo(name = \"location_of_interest_id\") val locationOfInterestId: String,\n  @ColumnInfo(name = \"job_id\") val jobId: String,\n  @ColumnInfo(name = \"state\") var state: EntityState,\n  @ColumnInfo(name = \"responses\") var responses: String?,\n  @Embedded(prefix = \"created_\") val created: AuditInfoEntity,\n  @Embedded(prefix = \"modified_\") var lastModified: AuditInfoEntity,\n)\n","license":"apache-2.0"},{"repo_name":"chrisbanes/tivi","path":"app.tivi.data.entities.SortOption","copies":"1","size":720,"content":"/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage app.tivi.data.entities\n\nenum class SortOption {\n    SUPER_SORT,\n    LAST_WATCHED,\n    ALPHABETICAL,\n    DATE_ADDED\n}\n","license":"apache-2.0"},{"repo_name":"vhromada/Catalog","path":"com.github.vhromada.catalog.domain.Song","copies":"1","size":1532,"content":"package com.github.vhromada.catalog.domain\n\nimport javax.persistence.Column\nimport javax.persistence.Entity\nimport javax.persistence.FetchType\nimport javax.persistence.GeneratedValue\nimport javax.persistence.GenerationType\nimport javax.persistence.Id\nimport javax.persistence.JoinColumn\nimport javax.persistence.ManyToOne\nimport javax.persistence.SequenceGenerator\nimport javax.persistence.Table\n\n/**\n * A class represents song.\n *\n * @author Vladimir Hromada\n */\n@Entity\n@Table(name = \"songs\")\n@Suppress(\"JpaDataSourceORMInspection\")\ndata class Song(\n    /**\n     * ID\n     */\n    @Id\n    @SequenceGenerator(name = \"song_generator\", sequenceName = \"songs_sq\", allocationSize = 1)\n    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"song_generator\")\n    var id: Int?,\n\n    /**\n     * UUID\n     */\n    val uuid: String,\n\n    /**\n     * Name\n     */\n    @Column(name = \"song_name\")\n    var name: String,\n\n    /**\n     * Length\n     */\n    @Column(name = \"song_length\")\n    var length: Int,\n\n    /**\n     * Note\n     */\n    var note: String?,\n\n    /**\n     * Music\n     */\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"music\")\n    var music: Music? = null\n) : Audit() {\n\n    /**\n     * Merges song.\n     *\n     * @param song song\n     */\n    fun merge(song: Song) {\n        name = song.name\n        length = song.length\n        note = song.note\n    }\n\n    override fun toString(): String {\n        return \"Song(id=$id, uuid=$uuid, name=$name, length=$length, note=$note, music=${music?.id})\"\n    }\n\n}\n","license":"mit"},{"repo_name":"vhromada/Catalog","path":"com.github.vhromada.catalog.domain.io.SongStatistics","copies":"1","size":271,"content":"package com.github.vhromada.catalog.domain.io\n\n/**\n * A class represents statistics for songs.\n *\n * @author Vladimir Hromada\n */\ndata class SongStatistics(\n    /**\n     * Count of songs\n     */\n    val count: Long,\n\n    /**\n     * Length\n     */\n    val length: Long?\n)\n","license":"mit"},{"repo_name":"Duke1/UnrealMedia","path":"com.qfleng.um.database.entity.StringKeyData","copies":"1","size":472,"content":"package com.qfleng.um.database.entity\n\nimport androidx.room.*\nimport com.qfleng.um.database.DbConst\n\n/**\n * Created by Duke\n */\n@Entity(tableName = DbConst.STRING_KEY_DATA_TABLE_NAME)\nclass StringKeyData {\n    companion object {\n        @Ignore\n        const val KEY_LAST_PLAY_AUDIO_URL = \"LAST_PLAY_AUDIO_URL\"\n    }\n\n    @PrimaryKey(autoGenerate = false)\n    @ColumnInfo(name = \"key\")\n    var key: String = \"\"\n\n\n    @ColumnInfo(name = \"data\")\n    var data: String = \"\"\n\n}","license":"mit"},{"repo_name":"Heiner1/AndroidAPS","path":"info.nightscout.androidaps.database.entities.BolusCalculatorResult","copies":"1","size":4064,"content":"package info.nightscout.androidaps.database.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport info.nightscout.androidaps.database.TABLE_BOLUS_CALCULATOR_RESULTS\nimport info.nightscout.androidaps.database.embedments.InterfaceIDs\nimport info.nightscout.androidaps.database.interfaces.DBEntryWithTime\nimport info.nightscout.androidaps.database.interfaces.TraceableDBEntry\nimport java.util.*\n\n@Entity(\n    tableName = TABLE_BOLUS_CALCULATOR_RESULTS,\n    foreignKeys = [ForeignKey(\n        entity = BolusCalculatorResult::class,\n        parentColumns = [\"id\"],\n        childColumns = [\"referenceId\"]\n    )],\n    indices = [\n        Index(\"referenceId\"),\n        Index(\"timestamp\"),\n        Index(\"id\"),\n        Index(\"isValid\")\n    ]\n)\ndata class BolusCalculatorResult(\n    @PrimaryKey(autoGenerate = true)\n    override var id: Long = 0,\n    override var version: Int = 0,\n    override var dateCreated: Long = -1,\n    override var isValid: Boolean = true,\n    override var referenceId: Long? = null,\n    @Embedded\n    override var interfaceIDs_backing: InterfaceIDs? = null,\n    override var timestamp: Long,\n    override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(),\n    var targetBGLow: Double,\n    var targetBGHigh: Double,\n    var isf: Double,\n    var ic: Double,\n    var bolusIOB: Double,\n    var wasBolusIOBUsed: Boolean,\n    var basalIOB: Double,\n    var wasBasalIOBUsed: Boolean,\n    var glucoseValue: Double,\n    var wasGlucoseUsed: Boolean,\n    var glucoseDifference: Double,\n    var glucoseInsulin: Double,\n    var glucoseTrend: Double,\n    var wasTrendUsed: Boolean,\n    var trendInsulin: Double,\n    var cob: Double,\n    var wasCOBUsed: Boolean,\n    var cobInsulin: Double,\n    var carbs: Double,\n    var wereCarbsUsed: Boolean,\n    var carbsInsulin: Double,\n    var otherCorrection: Double,\n    var wasSuperbolusUsed: Boolean,\n    var superbolusInsulin: Double,\n    var wasTempTargetUsed: Boolean,\n    var totalInsulin: Double,\n    var percentageCorrection: Int,\n    var profileName: String,\n    var note: String\n) : TraceableDBEntry, DBEntryWithTime {\n\n    private fun contentEqualsTo(other: BolusCalculatorResult): Boolean =\n        isValid == other.isValid &&\n            timestamp == other.timestamp &&\n            utcOffset == other.utcOffset &&\n            targetBGLow == other.targetBGLow &&\n            targetBGHigh == other.targetBGHigh &&\n            isf == other.isf &&\n            ic == other.ic &&\n            bolusIOB == other.bolusIOB &&\n            wasBolusIOBUsed == other.wasBolusIOBUsed &&\n            basalIOB == other.basalIOB &&\n            wasBasalIOBUsed == other.wasBasalIOBUsed &&\n            glucoseValue == other.glucoseValue &&\n            wasGlucoseUsed == other.wasGlucoseUsed &&\n            glucoseDifference == other.glucoseDifference &&\n            glucoseInsulin == other.glucoseInsulin &&\n            glucoseTrend == other.glucoseTrend &&\n            wasTrendUsed == other.wasTrendUsed &&\n            trendInsulin == other.trendInsulin &&\n            cob == other.cob &&\n            wasCOBUsed == other.wasCOBUsed &&\n            cobInsulin == other.cobInsulin &&\n            carbs == other.carbs &&\n            wereCarbsUsed == other.wereCarbsUsed &&\n            carbsInsulin == other.carbsInsulin &&\n            otherCorrection == other.otherCorrection &&\n            wasSuperbolusUsed == other.wasSuperbolusUsed &&\n            superbolusInsulin == other.superbolusInsulin &&\n            wasTempTargetUsed == other.wasTempTargetUsed &&\n            totalInsulin == other.totalInsulin &&\n            percentageCorrection == other.percentageCorrection &&\n            profileName == other.profileName &&\n            note == other.note\n\n    fun onlyNsIdAdded(previous: BolusCalculatorResult): Boolean =\n        previous.id != id &&\n            contentEqualsTo(previous) &&\n            previous.interfaceIDs.nightscoutId == null &&\n            interfaceIDs.nightscoutId != null\n}","license":"agpl-3.0"},{"repo_name":"chandilsachin/DietTracker","path":"com.chandilsachin.diettracker.model.Date","copies":"1","size":2453,"content":"package com.chandilsachin.diettracker.model\n\nimport android.os.Parcel\nimport android.os.Parcelable\nimport java.io.Serializable\nimport java.text.SimpleDateFormat\nimport java.util.*\nimport java.util.concurrent.TimeUnit\nimport kotlin.properties.Delegates\n\n/**\n * Created by sachin on 28/5/17.\n */\nclass Date : Serializable, Parcelable{\n\n    var date:Int by Delegates.notNull()\n    var month:Int by Delegates.notNull()\n    var year:Int by Delegates.notNull()\n    var calendar:Calendar by Delegates.notNull()\n\n    constructor():this(Calendar.getInstance())\n\n    constructor(date:Int, month:Int, year:Int){\n        this.date = date\n        this.month = month\n        this.year = year\n        this.calendar = Calendar.getInstance()\n        initCalendar()\n    }\n\n    constructor(calendar: Calendar){\n        date = calendar.get(Calendar.DATE)\n        month = calendar.get(Calendar.MONTH)+1\n        year = calendar.get(Calendar.YEAR)\n        this.calendar = calendar\n\n        initCalendar()\n    }\n\n    private fun initCalendar(){\n        var dateFormat = SimpleDateFormat(\"dd/MM/yyyy\")\n        calendar.time = dateFormat.parse(\"$date/$month/$year\")\n    }\n\n    fun getTime():Long{\n        return calendar.timeInMillis\n    }\n\n    fun getPrettyDate():String{\n        var prettyDate = \"\"\n        val today = Date()\n        prettyDate = if(today.equals(this))\"Today\" else if(today - this == 1) \"Yesterday\" else \"$date/$month/$year\"\n        return prettyDate\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if(other is Date){\n            return other.date == date && other.month == month && other.year == year\n        }\n        return false\n    }\n\n    operator fun minus(value:Date):Int{\n        return TimeUnit.DAYS.convert(getTime() - value.getTime(),\n                TimeUnit.MILLISECONDS).toInt()\n    }\n\n    companion object{\n        infix fun past(days:Int):Date{\n            return getDateTo(days)\n        }\n\n        infix fun ahead(days:Int):Date{\n            return getDateTo(days)\n        }\n\n        private fun getDateTo(days:Int):Date{\n            val cal = Calendar.getInstance()\n            cal.add(Calendar.DATE, days)\n            return Date(cal)\n        }\n    }\n\n    override fun writeToParcel(dest: Parcel?, flags: Int) {\n        val array = IntArray(3)\n        array[0] = date\n        array[1] = month\n        array[2] = year\n        dest?.writeIntArray(array)\n    }\n\n    override fun describeContents(): Int {\n        return 0\n    }\n}","license":"gpl-3.0"},{"repo_name":"MimiReader/mimi-reader","path":"com.emogoth.android.phone.mimi.db.models.Filter","copies":"1","size":846,"content":"package com.emogoth.android.phone.mimi.db.models\n\nimport androidx.room.*\nimport com.emogoth.android.phone.mimi.db.MimiDatabase\n\n@Entity(tableName = MimiDatabase.FILTERS_TABLE,\n        indices = [Index(Filter.ID, unique = true), Index(Filter.BOARD_NAME), Index(Filter.NAME, unique = true)])\nclass Filter {\n    companion object {\n        const val ID = \"id\"\n        const val NAME = \"name\"\n        const val FILTER = \"filter\"\n        const val BOARD_NAME = \"board\"\n        const val HIGHLIGHT = \"highlight\"\n    }\n\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = ID)\n    var id: Int? = null\n\n    @ColumnInfo(name = NAME)\n    var name: String = \"\"\n\n    @ColumnInfo(name = FILTER)\n    var filter: String = \"\"\n\n    @ColumnInfo(name = BOARD_NAME)\n    var boardName: String = \"\"\n\n    @ColumnInfo(name = HIGHLIGHT)\n    var highlight: Int = 0\n}","license":"apache-2.0"},{"repo_name":"SimpleMobileTools/Simple-Music-Player","path":"com.simplemobiletools.musicplayer.models.QueueItem","copies":"1","size":434,"content":"package com.simplemobiletools.musicplayer.models\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\n\n@Entity(tableName = \"queue_items\", primaryKeys = [\"track_id\"])\ndata class QueueItem(\n    @ColumnInfo(name = \"track_id\") var trackId: Long,\n    @ColumnInfo(name = \"track_order\") var trackOrder: Int,\n    @ColumnInfo(name = \"is_current\") var isCurrent: Boolean,\n    @ColumnInfo(name = \"last_position\") var lastPosition: Int\n)\n","license":"gpl-3.0"},{"repo_name":"rinp/javaQuiz","path":"xxx.jq.entity.Quiz","copies":"1","size":2987,"content":"package xxx.jq.entity\n\n\nimport org.hibernate.annotations.DynamicUpdate\nimport org.hibernate.annotations.OptimisticLocking\nimport org.hibernate.validator.constraints.NotBlank\nimport org.springframework.data.annotation.CreatedBy\nimport org.springframework.data.annotation.CreatedDate\nimport org.springframework.data.annotation.LastModifiedDate\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener\nimport java.time.Duration\nimport java.time.LocalDateTime\nimport java.util.*\nimport javax.persistence.CascadeType\nimport javax.persistence.Column\nimport javax.persistence.Entity\nimport javax.persistence.EntityListeners\nimport javax.persistence.FetchType\nimport javax.persistence.GeneratedValue\nimport javax.persistence.Id\nimport javax.persistence.JoinColumn\nimport javax.persistence.ManyToOne\nimport javax.persistence.OneToMany\nimport javax.persistence.Version\nimport javax.validation.Valid\nimport javax.validation.constraints.NotNull\nimport javax.validation.constraints.Size\n\n/**\n * 問題Entity\n *\n * @param id 管理用Id\n * @param version 管理用Version\n * @param createDate 作成日\n * @param updateDate 更新日\n * @param createdBy 作成者\n * @param title 問題名\n * @param source 問題ソース\n * @param content 問題文\n * @param explanation 解説\n * @param choices 選択肢\n * @author rinp\n * @since 2015/10/08\n */\n@Entity\n@DynamicUpdate\n@OptimisticLocking\n@EntityListeners(AuditingEntityListener::class)\ndata class Quiz(\n        @Id\n        @GeneratedValue\n        override var id: Long? = null,\n\n        @Version\n        var version: Long = -1,\n\n        @CreatedDate\n        var createDate: LocalDateTime = LocalDateTime.MIN,\n\n        @LastModifiedDate\n        var updateDate: LocalDateTime = LocalDateTime.MIN,\n\n        @CreatedBy\n        @ManyToOne(fetch = FetchType.LAZY)\n        var createdBy: Account = Account(),\n\n        @field:NotBlank(message = \"問題名は必ず入力してください。\")\n        var title: String = \"\",\n\n        @field:NotBlank(message = \"問題文は必ず入力してください。\")\n        var content: String = \"\",\n\n        @field:NotBlank(message = \"ソースは必ず入力してください。\")\n        @Column(columnDefinition = \"TEXT\")\n        var source: String = \"\",\n\n        @Valid\n        @OneToMany(cascade = arrayOf(CascadeType.ALL))\n        @field:NotNull(message = \"選択肢は必ず設定してください。\")\n        @field:Size(min = 2, max = 6, message = \"選択肢は2つ以上6つ以下で設定してください。\")\n        var choices: MutableList<Choice> = ArrayList(),\n\n        @Column(columnDefinition = \"TEXT\")\n        var explanation: String = \"\",\n\n        var answerCount: Long = 0,\n\n        var correctCount: Long = 0,\n\n        var executeTime: Duration = Duration.ZERO,\n\n        @ManyToOne\n        @JoinColumn(nullable = false)\n        @field:NotNull(message = \"カテゴリーは必ず選択してください。\")\n        var category: Category = Category()\n\n) : BaseEntity","license":"mit"},{"repo_name":"rinp/javaQuiz","path":"xxx.jq.entity.ResultHeader","copies":"1","size":1781,"content":"package xxx.jq.entity\n\nimport org.hibernate.annotations.DynamicUpdate\nimport org.hibernate.annotations.OptimisticLocking\nimport org.springframework.data.annotation.CreatedBy\nimport org.springframework.data.annotation.CreatedDate\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener\nimport java.time.Duration\nimport java.time.LocalDateTime\nimport java.util.*\nimport javax.persistence.CascadeType\nimport javax.persistence.Entity\nimport javax.persistence.EntityListeners\nimport javax.persistence.GeneratedValue\nimport javax.persistence.Id\nimport javax.persistence.ManyToMany\nimport javax.persistence.Version\nimport javax.validation.constraints.NotNull\nimport javax.persistence.ManyToOne as MtoO\n\n/**\n * @author rinp\n * @since 2015/11/13\n * @param id 結果まとめのid\n * @param version バージョン\n * @param createdBy 問題解答アカウント\n * @param executeTime 問題の解答時間合計\n * @param answerCount 問題数\n * @param correctCount 正解数\n * @param results 問題個々の結果\n * @param aggregate 集計有無\n */\n@Entity\n@DynamicUpdate\n@OptimisticLocking\n@EntityListeners(AuditingEntityListener::class)\ndata class ResultHeader(\n        @Id\n        @GeneratedValue\n        override var id: Long? = null,\n\n        @Version\n        var version: Long = -1,\n\n        @CreatedBy\n        @MtoO\n        var createdBy: Account = Account(),\n\n        @CreatedDate\n        var createDate: LocalDateTime = LocalDateTime.MIN,\n\n        @field:NotNull\n        var executeTime: Duration = Duration.ZERO,\n\n        var answerCount: Int = 0,\n\n        var correctCount: Int = 0,\n\n        @ManyToMany(cascade = arrayOf(CascadeType.PERSIST))\n        var results: MutableList<Result> = ArrayList(),\n\n        var aggregate: Boolean = false\n\n) : BaseEntity\n","license":"mit"},{"repo_name":"fython/PackageTracker","path":"info.papdt.express.helper.model.Category","copies":"1","size":1205,"content":"package info.papdt.express.helper.model\n\nimport android.os.Parcel\nimport android.os.Parcelable\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity\ndata class Category(\n        @PrimaryKey var title: String,\n        @ColumnInfo(name = \"icon_name\") var iconCode: String = \"archive\"\n) : Parcelable, Comparable<Category> {\n\n    constructor(src: Category): this(src.title, src.iconCode)\n\n    override fun compareTo(other: Category): Int {\n        return title.compareTo(other.title)\n    }\n\n    companion object {\n\n        @JvmField\n        val CREATOR = object : Parcelable.Creator<Category> {\n            override fun createFromParcel(parcel: Parcel): Category {\n                return Category(parcel)\n            }\n\n            override fun newArray(size: Int): Array<Category?> {\n                return arrayOfNulls(size)\n            }\n        }\n\n    }\n\n    constructor(parcel: Parcel) : this(\n            parcel.readString()!!,\n            parcel.readString()!!\n    )\n\n    override fun writeToParcel(parcel: Parcel, flags: Int) = with(parcel) {\n        writeString(title)\n        writeString(iconCode)\n    }\n\n    override fun describeContents(): Int = 0\n\n}","license":"gpl-3.0"},{"repo_name":"djkovrik/YapTalker","path":"com.sedsoftware.yaptalker.data.database.model.BlacklistedTopicDbModel","copies":"1","size":595,"content":"package com.sedsoftware.yaptalker.data.database.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.sedsoftware.yaptalker.data.database.YapTalkerDatabase\nimport java.util.Date\n\n@Entity(tableName = YapTalkerDatabase.TOPICS_BLACKLIST_TABLE)\ndata class BlacklistedTopicDbModel(\n    @PrimaryKey(autoGenerate = true)\n    var id: Long = 0L,\n    @ColumnInfo(name = \"topic_name\")\n    var topicName: String = \"\",\n    @ColumnInfo(name = \"topic_id\")\n    var topicId: Int = 0,\n    @ColumnInfo(name = \"date_added\")\n    var dateAdded: Date = Date()\n)\n","license":"apache-2.0"},{"repo_name":"TUWien/DocScan","path":"at.ac.tuwien.caa.docscan.db.model.state.LockState","copies":"1","size":1358,"content":"package at.ac.tuwien.caa.docscan.db.model.state\n\n/**\n * The locked state describes restricted writing/editing access to [Document]s and [Page]s.\n *\n * E.g. if an upload or export is performed, the file states should be preserved, otherwise\n * it could easily happen, that while a large document upload is ongoing, someone meanwhile\n * deletes/modifies or adds a new page.\n */\nenum class LockState(val id: String) {\n    /**\n     * Neither a document, nor any of the pages are locked. They can be modified.\n     */\n    NONE(\"NONE\"),\n\n    /**\n     * Some of the document pages are locked, but not the entire document itself, i.e. a page\n     * could be added to the document, while another page is being processed.\n     */\n    PARTIAL_LOCK(\"PARTIAL_LOCK\"),\n\n    /**\n     * The entire document, with all of if its pages is locked, it cannot be modified, neither\n     * any of its data.\n     */\n    FULL_LOCK(\"FULL_LOCK\");\n\n    fun isLocked(): Boolean {\n        return when (this) {\n            NONE -> false\n            PARTIAL_LOCK, FULL_LOCK -> true\n        }\n    }\n\n    companion object {\n        fun getLockStateById(id: String?): LockState {\n            id ?: return NONE\n            values().forEach { value ->\n                if (value.id == id) {\n                    return value\n                }\n            }\n            return NONE\n        }\n    }\n}\n","license":"lgpl-3.0"},{"repo_name":"TUWien/DocScan","path":"at.ac.tuwien.caa.docscan.db.model.Document","copies":"1","size":3198,"content":"package at.ac.tuwien.caa.docscan.db.model\n\nimport android.os.Parcelable\nimport androidx.annotation.Keep\nimport androidx.room.*\nimport at.ac.tuwien.caa.docscan.db.model.Document.Companion.TABLE_NAME_DOCUMENTS\nimport at.ac.tuwien.caa.docscan.db.model.state.LockState\nimport at.ac.tuwien.caa.docscan.logic.Helper\nimport at.ac.tuwien.caa.docscan.logic.PageFileType\nimport kotlinx.parcelize.Parcelize\nimport java.util.*\n\n@Parcelize\n@Keep\n@Entity(tableName = TABLE_NAME_DOCUMENTS)\ndata class Document(\n    @PrimaryKey\n    @ColumnInfo(name = KEY_ID)\n    val id: UUID,\n    @ColumnInfo(name = KEY_TITLE)\n    var title: String,\n    /**\n     * Represents a custom optional file prefix.\n     */\n    @ColumnInfo(name = KEY_FILE_PREFIX)\n    var filePrefix: String? = null,\n    /**\n     * Represents the active state of a document, only one document can be active.\n     */\n    @ColumnInfo(name = KEY_IS_ACTIVE)\n    var isActive: Boolean,\n    /**\n     * Represents the lock state of a document.\n     */\n    @ColumnInfo(name = KEY_LOCK_STATE)\n    var lockState: LockState = LockState.NONE,\n    /**\n     * Represents the active state of a document, only one document can be active.\n     */\n    @Embedded(prefix = KEY_META_DATA_PREFIX)\n    var metaData: MetaData? = null,\n    /**\n     * Represents the transkribus upload id, which is used to associate uploads of documents with an id.\n     * A soon as the upload is entirely finished, this id correponds to the document id of the Transkribus BE.\n     *\n     * see [Upload] or [TranskribusAPIService] for more information.\n     */\n    @ColumnInfo(name = KEY_TRANSKRIBUS_UPLOAD_ID)\n    var uploadId: Int? = null\n) : Parcelable {\n    companion object {\n        const val TABLE_NAME_DOCUMENTS = \"documents\"\n        const val KEY_ID = \"id\"\n        const val KEY_TITLE = \"title\"\n        const val KEY_FILE_PREFIX = \"file_prefix\"\n        const val KEY_META_DATA_PREFIX = \"metadata_\"\n        const val KEY_IS_ACTIVE = \"is_active\"\n        const val KEY_LOCK_STATE = \"lock_state\"\n        const val KEY_TRANSKRIBUS_UPLOAD_ID = \"transkribus_upload_id\"\n    }\n}\n\n/**\n * @return a file name for the document.\n * @param pageNr the pageIndex (starting from 1)\n * @param fileType the page's filetype.\n */\nfun Document.getFileName(pageNr: Int, fileType: PageFileType): String {\n    return fileNamePrefix(pageNr) + \".${fileType.extension}\"\n}\n\nprivate fun Document.sanitizedTitle(): String {\n    return title.replace(\" \", \"\").lowercase()\n}\n\nprivate fun Document.fileNamePrefix(pageNumber: Int): String {\n    filePrefix?.let {\n        if (it.isNotEmpty()) {\n            return Helper.getFileNamePrefix(\n                Helper.getFileTimeStamp(), it, pageNumber\n            )\n        }\n    }\n    return Helper.getFileNamePrefix(\n        Helper.getFileTimeStamp(), sanitizedTitle(), pageNumber\n    )\n}\n\nfun Document.edit(title: String, prefix: String?, metaData: MetaData?): Document {\n    this.title = title\n    this.filePrefix = prefix\n    val metaDataTemp = metaData\n    metaData?.relatedUploadId = this.metaData?.relatedUploadId\n\n    metaData?.hierarchy = this.metaData?.hierarchy\n    metaData?.description = this.metaData?.description\n    this.metaData = metaDataTemp\n    return this\n}\n","license":"lgpl-3.0"},{"repo_name":"TUWien/DocScan","path":"at.ac.tuwien.caa.docscan.db.model.Page","copies":"1","size":5694,"content":"package at.ac.tuwien.caa.docscan.db.model\n\nimport android.graphics.PointF\nimport android.os.Parcelable\nimport androidx.annotation.Keep\nimport androidx.room.ColumnInfo\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport at.ac.tuwien.caa.docscan.camera.cv.thread.crop.PageDetector\nimport at.ac.tuwien.caa.docscan.db.model.Page.Companion.TABLE_NAME_PAGES\nimport at.ac.tuwien.caa.docscan.db.model.boundary.SinglePageBoundary\nimport at.ac.tuwien.caa.docscan.db.model.boundary.asClockwiseList\nimport at.ac.tuwien.caa.docscan.db.model.boundary.asPoint\nimport at.ac.tuwien.caa.docscan.db.model.error.IOErrorCode\nimport at.ac.tuwien.caa.docscan.db.model.exif.Rotation\nimport at.ac.tuwien.caa.docscan.db.model.state.ExportState\nimport at.ac.tuwien.caa.docscan.db.model.state.PostProcessingState\nimport at.ac.tuwien.caa.docscan.db.model.state.UploadState\nimport at.ac.tuwien.caa.docscan.logic.*\nimport kotlinx.parcelize.Parcelize\nimport java.util.*\n\n/**\n * Represents the [Page] entity, which is uniquely represented in the storage by the [docId] and\n * [id].\n */\n@Parcelize\n@Keep\n@Entity(tableName = TABLE_NAME_PAGES)\ndata class Page(\n    /**\n     * Uniquely identifies the page.\n     */\n    @PrimaryKey\n    @ColumnInfo(name = KEY_ID)\n    val id: UUID,\n    /**\n     * The id of [Document] to which the page belongs to.\n     */\n    @ColumnInfo(name = KEY_DOC_ID)\n    val docId: UUID,\n    /**\n     * The hash of the page file.\n     */\n    @ColumnInfo(name = KEY_FILE_HASH)\n    var fileHash: String,\n    /**\n     * The ordering index of the page, across all pages in a single document.\n     */\n    @ColumnInfo(name = KEY_INDEX)\n    val index: Int,\n    /**\n     * The rotation of the page. The exif info is saved separately into the file, this\n     * column is necessary to keep track of file changes in the DB.\n     */\n    @ColumnInfo(name = KEY_ROTATION)\n    var rotation: Rotation,\n\n    /**\n     * Represents the page file type.\n     */\n    @ColumnInfo(name = KEY_FILE_TYPE)\n    val fileType: PageFileType,\n    /**\n     * Represents the processing state of the page.\n     */\n    @ColumnInfo(name = KEY_POST_PROCESSING_STATE)\n    var postProcessingState: PostProcessingState,\n    /**\n     * Represents the export state of the page.\n     */\n    @ColumnInfo(name = KEY_EXPORT_STATE)\n    var exportState: ExportState,\n    /**\n     * An optional (cropping) boundary with 4 points.\n     */\n    @Embedded(prefix = KEY_SINGLE_PAGE_BOUNDARY_PREFIX)\n    var singlePageBoundary: SinglePageBoundary?,\n\n    @Embedded(prefix = KEY_UPLOAD_PREFIX)\n    var transkribusUpload: Upload = Upload(),\n\n    /**\n     * Represents the old legacy absolute file path, which is just used to check\n     * if a page has not been already migrated, if the migration is performed multiple times.\n     *\n     * Do not use this any further, this will be soon deleted.\n     */\n    @ColumnInfo(name = KEY_LEGACY_ABSOLUTE_FILE_PATH)\n    var legacyFilePath: String? = null,\n\n    ) : Parcelable {\n    companion object {\n        const val TABLE_NAME_PAGES = \"pages\"\n        const val KEY_ID = \"id\"\n        const val KEY_DOC_ID = \"doc_id\"\n        const val KEY_FILE_HASH = \"file_hash\"\n        const val KEY_INDEX = \"index\"\n        const val KEY_ROTATION = \"rotation\"\n        const val KEY_UPLOAD_PREFIX = \"upload\"\n        const val KEY_POST_PROCESSING_STATE = \"post_processing_state\"\n        const val KEY_FILE_TYPE = \"file_type\"\n        const val KEY_SINGLE_PAGE_BOUNDARY = \"single_page_boundary\"\n        const val KEY_EXPORT_STATE = \"export_state\"\n        const val KEY_SINGLE_PAGE_BOUNDARY_PREFIX = \"spb\"\n        const val KEY_LEGACY_ABSOLUTE_FILE_PATH = \"legacy_absolute_file_path\"\n    }\n}\n\nfun Page.isUploadingOrProcessing(): Boolean {\n    return isUploadInProgress() || isProcessing()\n}\n\nfun Page.isUploaded(): Boolean {\n    return transkribusUpload.state == UploadState.UPLOADED\n}\n\nfun Page.isUploadInProgress(): Boolean {\n    return transkribusUpload.state == UploadState.UPLOAD_IN_PROGRESS\n}\n\nfun Page.isUploadScheduled(): Boolean {\n    return transkribusUpload.state == UploadState.SCHEDULED\n}\n\nfun Page.isProcessing(): Boolean {\n    return postProcessingState == PostProcessingState.PROCESSING\n}\n\nfun Page.isPostProcessed(): Boolean {\n    return postProcessingState == PostProcessingState.DONE\n}\n\nfun Page.isExporting(): Boolean {\n    return exportState == ExportState.EXPORTING\n}\n\nfun Page.getSingleBoundaryPoints(): MutableList<PointF> {\n    return (singlePageBoundary?.asClockwiseList() ?: SinglePageBoundary.getDefault()\n        .asClockwiseList()).map { point ->\n        point.asPoint()\n    }.toMutableList()\n}\n\n/**\n * Pre-Condition: [points] must have at least 4 elments.\n */\nfun Page.setSinglePageBoundary(points: List<PointF>) {\n    singlePageBoundary = points.toSinglePageBoundary()\n}\n\nfun List<PointF>.toSinglePageBoundary(): SinglePageBoundary {\n    return SinglePageBoundary(\n        this[0].asPoint(),\n        this[1].asPoint(),\n        this[2].asPoint(),\n        this[3].asPoint()\n    )\n}\n\nfun Page.asDocumentPageExtra(): DocumentPage {\n    return DocumentPage(docId = this.docId, pageId = this.id)\n}\n\nfun Page.computeFileHash(fileHandler: FileHandler): Resource<Unit> {\n    val file = fileHandler.getFileByPage(this) ?: return IOErrorCode.FILE_MISSING.asFailure()\n    fileHash = file.getFileHash()\n    return Success(Unit)\n}\n\nfun Page.getScaledCropPoints(\n    width: Int,\n    height: Int\n): List<PointF> {\n    val points =\n        (singlePageBoundary?.asClockwiseList()\n            ?: SinglePageBoundary.getDefault().asClockwiseList()).map { point ->\n            PointF(point.x, point.y)\n        }\n    PageDetector.scalePointsGeneric(points, width, height)\n    return points\n}\n","license":"lgpl-3.0"},{"repo_name":"PaulWoitaschek/MaterialAudiobookPlayer","path":"de.ph1b.audiobook.data.Chapter","copies":"1","size":2007,"content":"package de.ph1b.audiobook.data\n\nimport androidx.collection.SparseArrayCompat\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport de.ph1b.audiobook.common.comparator.NaturalOrderComparator\nimport de.ph1b.audiobook.common.sparseArray.contentEquals\nimport de.ph1b.audiobook.common.sparseArray.forEachIndexed\nimport java.io.File\nimport java.util.UUID\n\n/**\n * Represents a chapter in a book.\n */\n@Entity(\n  tableName = \"chapters\",\n  indices = [(Index(value = [\"bookId\"]))]\n)\ndata class Chapter(\n  @ColumnInfo(name = \"file\")\n  val file: File,\n  @ColumnInfo(name = \"name\")\n  val name: String,\n  @ColumnInfo(name = \"duration\")\n  val duration: Int,\n  @ColumnInfo(name = \"fileLastModified\")\n  val fileLastModified: Long,\n  @ColumnInfo(name = \"marks\")\n  val marks: SparseArrayCompat<String>,\n  @ColumnInfo(name = \"bookId\")\n  val bookId: UUID,\n  @ColumnInfo(name = \"id\")\n  @PrimaryKey(autoGenerate = true)\n  val id: Long = 0L\n) : Comparable<Chapter> {\n\n  init {\n    require(name.isNotEmpty())\n  }\n\n  override fun compareTo(other: Chapter) =\n    NaturalOrderComparator.fileComparator.compare(file, other.file)\n\n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other !is Chapter) return false\n    return this.file == other.file &&\n        this.name == other.name &&\n        this.duration == other.duration &&\n        this.fileLastModified == other.fileLastModified &&\n        this.marks.contentEquals(other.marks)\n  }\n\n  override fun hashCode(): Int {\n    var hashCode = 17\n    hashCode = 31 * hashCode + file.hashCode()\n    hashCode = 31 * hashCode + name.hashCode()\n    hashCode = 31 * hashCode + duration.hashCode()\n    hashCode = 31 * hashCode + fileLastModified.hashCode()\n    marks.forEachIndexed { index, key, value ->\n      hashCode = 31 * hashCode + index.hashCode()\n      hashCode = 31 * hashCode + key.hashCode()\n      hashCode = 31 * hashCode + value.hashCode()\n    }\n    return hashCode\n  }\n}\n","license":"lgpl-3.0"},{"repo_name":"codebutler/odyssey","path":"com.codebutler.retrograde.lib.library.db.entity.Game","copies":"1","size":2079,"content":"/*\n * Game.kt\n *\n * Copyright (C) 2017 Retrograde Project\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage com.codebutler.retrograde.lib.library.db.entity\n\nimport android.net.Uri\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(\n        tableName = \"games\",\n        indices = [\n            Index(\"id\", unique = true),\n            Index(\"fileUri\", unique = true),\n            Index(\"title\"),\n            Index(\"systemId\"),\n            Index(\"lastIndexedAt\"),\n            Index(\"lastPlayedAt\"),\n            Index(\"isFavorite\")\n        ]\n)\ndata class Game(\n    @PrimaryKey(autoGenerate = true)\n    val id: Int = 0,\n    val fileName: String,\n    val fileUri: Uri,\n    val title: String,\n    val systemId: String,\n    val developer: String?,\n    val coverFrontUrl: String?,\n    val lastIndexedAt: Long,\n    val lastPlayedAt: Long? = null,\n    val isFavorite: Boolean = false\n) {\n        companion object {\n                val DIFF_CALLBACK = object : DiffUtil.ItemCallback<Game>() {\n                        override fun areItemsTheSame(oldItem: Game, newItem: Game): Boolean {\n                                return oldItem.id == newItem.id\n                        }\n\n                        override fun areContentsTheSame(oldItem: Game, newItem: Game): Boolean {\n                                return oldItem == newItem\n                        }\n                }\n        }\n}\n","license":"gpl-3.0"},{"repo_name":"mattvchandler/ProgressBars","path":"Widget","copies":"1","size":14767,"content":"/*\nCopyright (C) 2020 Matthew Chandler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\npackage org.mattvchandler.progressbars\n\nimport android.app.AlarmManager\nimport android.app.PendingIntent\nimport android.app.WallpaperManager\nimport android.appwidget.AppWidgetManager\nimport android.appwidget.AppWidgetProvider\nimport android.content.ComponentName\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Color\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.PowerManager\nimport android.os.SystemClock\nimport android.util.Log\nimport android.view.View\nimport android.widget.RemoteViews\nimport androidx.core.content.ContextCompat\nimport androidx.preference.PreferenceManager\nimport org.mattvchandler.progressbars.db.DB\nimport org.mattvchandler.progressbars.db.Data\nimport org.mattvchandler.progressbars.db.Progress_bars_table\nimport org.mattvchandler.progressbars.db.get_nullable_int\nimport org.mattvchandler.progressbars.list.View_data\nimport org.mattvchandler.progressbars.settings.Settings\nimport kotlin.math.sqrt\n\nclass Widget: AppWidgetProvider()\n{\n    override fun onUpdate(context: Context?, appWidgetManager: AppWidgetManager?, appWidgetIds: IntArray?)\n    {\n        if(context != null)\n            update(context, appWidgetManager, appWidgetIds)\n    }\n\n    override fun onAppWidgetOptionsChanged(context: Context?, appWidgetManager: AppWidgetManager?, appWidgetId: Int, newOptions: Bundle?)\n    {\n        if(context != null)\n            update(context, appWidgetManager, intArrayOf(appWidgetId))\n        super.onAppWidgetOptionsChanged(context, appWidgetManager, appWidgetId, newOptions)\n    }\n\n    override fun onDisabled(context: Context?)\n    {\n        val am = context!!.getSystemService(Context.ALARM_SERVICE) as AlarmManager\n        am.cancel(build_alarm_intent(context))\n    }\n\n    override fun onDeleted(context: Context?, appWidgetIds: IntArray?)\n    {\n        if(appWidgetIds != null)\n        {\n            val db = DB(context!!).writableDatabase\n            for(widget_id in appWidgetIds)\n            {\n                val arg_array = arrayOf(widget_id.toString())\n\n                val cursor = db.rawQuery(Progress_bars_table.SELECT_WIDGET, arg_array)\n                if(cursor.count > 0)\n                {\n                    cursor.moveToFirst()\n                    val data = Data(cursor)\n\n                    data.unregister_alarms(context)\n                    db.delete(Progress_bars_table.TABLE_NAME, \"${Progress_bars_table.WIDGET_ID_COL} = ?\", arg_array)\n                }\n                cursor.close()\n            }\n\n            db.close()\n        }\n    }\n\n    override fun onReceive(context: Context?, intent: Intent?)\n    {\n        when(intent?.action)\n        {\n            Intent.ACTION_TIME_CHANGED, Intent.ACTION_TIMEZONE_CHANGED, ACTION_UPDATE_TIME -> if(context != null) update(context, null, null)\n            else -> super.onReceive(context, intent)\n        }\n    }\n\n    companion object\n    {\n        private const val ACTION_UPDATE_TIME = \"org.mattvchandler.progressbars.ACTION_UPDATE_TIME\"\n\n        fun create_or_update_data(context: Context, widget_id: Int, data: Data)\n        {\n            val db = DB(context).writableDatabase\n            val cursor = db.rawQuery(Progress_bars_table.SELECT_WIDGET, arrayOf(widget_id.toString()))\n            if(cursor.count == 0 && data.rowid == null)\n            {\n                data.register_alarms(context)\n                data.insert(db)\n            }\n            else\n            {\n                data.update_alarms(context)\n                data.update(db)\n            }\n            cursor.close()\n            db.close()\n\n            update(context, AppWidgetManager.getInstance(context), intArrayOf(widget_id))\n        }\n\n        fun create_data_from_id(context: Context, widget_id: Int): Data\n        {\n            // TODO: return some indication that we've adopted an orphan (will need to move the DB update), and show a dialog saying that there is an orphan to adopt\n            var data: Data? = null\n            val db = DB(context).writableDatabase\n            val cursor = db.rawQuery(Progress_bars_table.SELECT_WIDGET, arrayOf(widget_id.toString()))\n\n            if(cursor.count == 0)\n            {\n                // check to see if there is an orphaned widget ID we can adopt\n                val valid_widget_ids = AppWidgetManager.getInstance(context).getAppWidgetIds(ComponentName(context.packageName, Widget::class.java.name))\n\n                val orphan_cursor = db.rawQuery(Progress_bars_table.SELECT_ALL_WIDGETS, null)\n                orphan_cursor.moveToFirst()\n                for(i in 0 until orphan_cursor.count)\n                {\n                    val orphan_widget_id = orphan_cursor.get_nullable_int(Progress_bars_table.WIDGET_ID_COL)!!\n\n                    if(orphan_widget_id !in valid_widget_ids)\n                    {\n                        Log.d(\"Widget::create_data_fr…\", \"Adopting orphaned id: $orphan_widget_id to $widget_id\")\n\n                        val adopted_cursor = db.rawQuery(Progress_bars_table.SELECT_WIDGET, arrayOf(orphan_widget_id.toString()))\n                        adopted_cursor.moveToFirst()\n                        data = Data(adopted_cursor)\n                        data.widget_id = widget_id\n                        adopted_cursor.close()\n\n                        break\n                    }\n                    orphan_cursor.moveToNext()\n                }\n                orphan_cursor.close()\n                // didn't find an orphan to adopt, so we'll leave data null to make a new one\n            }\n            else\n            {\n                cursor.moveToFirst()\n                data = Data(cursor)\n            }\n\n            cursor.close()\n            db.close()\n\n            if(data == null)\n            {\n                data = Data(context)\n                data.widget_id = widget_id\n            }\n\n            return data\n        }\n\n        private fun get_data_from_id(context: Context, widget_id: Int): Data?\n        {\n\n            var data: Data? = null\n            val db = DB(context).writableDatabase\n            val cursor = db.rawQuery(Progress_bars_table.SELECT_WIDGET, arrayOf(widget_id.toString()))\n\n            if(cursor.count != 0)\n            {\n                cursor.moveToFirst()\n                data = Data(cursor)\n            }\n\n            cursor.close()\n            db.close()\n\n            return data\n        }\n\n        private fun update(context: Context, appWidgetManager: AppWidgetManager?, appWidgetIds: IntArray?)\n        {\n            val pm = context.getSystemService(Context.POWER_SERVICE) as PowerManager\n            val screen_on = if(Build.VERSION.SDK_INT >= 20) pm.isInteractive else true\n            if(screen_on)\n            {\n                val appWidgetManager_default = appWidgetManager ?: AppWidgetManager.getInstance(context)\n\n                for(appWidgetId in appWidgetIds?: appWidgetManager_default.getAppWidgetIds(ComponentName(context, Widget::class.java)))\n                {\n                    val data = get_data_from_id(context, appWidgetId)\n                    if(data != null)\n                        build_view(context, appWidgetManager_default, appWidgetId, View_data(context, data))\n                }\n            }\n\n            // schedule another update\n            val time_interval = PreferenceManager.getDefaultSharedPreferences(context).getString(context.resources.getString(R.string.pref_widget_refresh_key), context.resources.getString(R.string.pref_widget_refresh_default))!!.toInt()\n            val am = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager\n            am.set(AlarmManager.ELAPSED_REALTIME, SystemClock.elapsedRealtime() + time_interval, build_alarm_intent(context))\n        }\n\n        private fun build_alarm_intent(context:Context):PendingIntent\n        {\n            val intent = Intent(context, Widget::class.java)\n            intent.action = ACTION_UPDATE_TIME\n\n            return PendingIntent.getBroadcast(context, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT)\n        }\n\n        private fun build_view(context: Context, appWidgetManager: AppWidgetManager, widget_id: Int, data: View_data)\n        {\n            data.reinit(context)\n\n            val views = RemoteViews(context.packageName, if(data.separate_time) R.layout.progress_bar_widget else R.layout.single_progress_bar_widget)\n\n            val text_color = when(PreferenceManager.getDefaultSharedPreferences(context).getString(context.resources.getString(R.string.pref_widget_text_color_key),\n                                                                                                   context.resources.getString(R.string.pref_widget_text_color_default)))\n            {\n                \"white\" -> Color.WHITE\n                \"black\" -> Color.BLACK\n                \"auto\" ->\n                {\n                    if(Build.VERSION.SDK_INT >= 27)\n                    {\n                        val lum = WallpaperManager.getInstance(context)?.getWallpaperColors(WallpaperManager.FLAG_SYSTEM)?.primaryColor?.luminance() ?: 0.0f\n                        if(lum > sqrt(0.0525f) - 0.05f)\n                            Color.BLACK\n                        else\n                            Color.WHITE\n                    }\n                    else\n                        Color.WHITE\n                }\n                else -> Color.WHITE\n            }\n\n            val has_bg = PreferenceManager.getDefaultSharedPreferences(context).getBoolean(context.resources.getString(R.string.pref_widget_bg_key),\n                                                                                           context.resources.getBoolean(R.bool.pref_widget_bg_default))\n            views.setInt(R.id.background, \"setBackgroundColor\",\n                    if(has_bg)\n                        ContextCompat.getColor(context, R.color.widget_bg_color)\n                    else\n                        Color.TRANSPARENT)\n\n\n            views.setTextViewText(R.id.title, data.title)\n            views.setTextColor(R.id.title, text_color)\n\n            if(data.show_time_text)\n            {\n                views.setTextViewText(R.id.time_text, data.time_text_disp.get())\n                views.setTextColor(R.id.time_text, text_color)\n                views.setViewVisibility(R.id.time_text, View.VISIBLE)\n            }\n            else\n            {\n                views.setViewVisibility(R.id.time_text, View.GONE)\n            }\n\n            if(data.separate_time)\n            {\n                if(data.show_start)\n                {\n                    views.setTextViewText(R.id.start_time_date, data.start_date_disp.get())\n                    views.setTextViewText(R.id.start_time_time, data.start_time_disp.get())\n\n                    views.setTextColor(R.id.start_time_label, text_color)\n                    views.setTextColor(R.id.start_time_date, text_color)\n                    views.setTextColor(R.id.start_time_time, text_color)\n\n                    views.setViewVisibility(R.id.start_time_box, View.VISIBLE)\n                }\n                else\n                {\n                    views.setViewVisibility(R.id.start_time_box, View.GONE)\n                }\n                if(data.show_end)\n                {\n                    views.setTextViewText(R.id.end_time_date, data.end_date_disp.get())\n                    views.setTextViewText(R.id.end_time_time, data.end_time_disp.get())\n\n                    views.setTextColor(R.id.end_time_label, text_color)\n                    views.setTextColor(R.id.end_time_date, text_color)\n                    views.setTextColor(R.id.end_time_time, text_color)\n\n                    views.setViewVisibility(R.id.end_time_box, View.VISIBLE)\n                }\n                else\n                {\n                    views.setViewVisibility(R.id.end_time_box, View.GONE)\n                }\n                if(data.show_progress)\n                {\n                    views.setTextViewText(R.id.percentage, data.percentage_disp.get())\n                    views.setTextColor(R.id.percentage, text_color)\n                    views.setInt(R.id.progress_bar, \"setProgress\", data.progress_disp.get())\n\n                    views.setViewVisibility(R.id.percentage_box, View.VISIBLE)\n                }\n                else\n                {\n                    views.setViewVisibility(R.id.percentage_box, View.GONE)\n                }\n\n                if(data.show_start || data.show_end || data.show_progress)\n                    views.setViewVisibility(R.id.center_box, View.VISIBLE)\n                else\n                    views.setViewVisibility(R.id.center_box, View.GONE)\n            }\n            else\n            {\n                if(data.show_end)\n                {\n                    views.setTextViewText(R.id.date, data.end_date_disp.get())\n                    views.setTextViewText(R.id.time, data.end_time_disp.get())\n\n                    views.setTextColor(R.id.date, text_color)\n                    views.setTextColor(R.id.time, text_color)\n\n                    views.setViewVisibility(R.id.center_box, View.VISIBLE)\n                }\n                else\n                {\n                    views.setViewVisibility(R.id.center_box, View.GONE)\n                }\n            }\n\n            val edit_intent = Intent(context, Settings::class.java)\n            edit_intent.action = AppWidgetManager.ACTION_APPWIDGET_CONFIGURE\n            edit_intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\n\n            edit_intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widget_id)\n            views.setOnClickPendingIntent(R.id.background, PendingIntent.getActivity(context, 0, edit_intent, PendingIntent.FLAG_CANCEL_CURRENT))\n\n            appWidgetManager.updateAppWidget(widget_id, views)\n        }\n    }\n}\n","license":"mit"},{"repo_name":"mgolokhov/dodroid","path":"doit.study.droid.data.local.entity.Question","copies":"1","size":557,"content":"package doit.study.droid.data.local.entity\n\nimport androidx.annotation.NonNull\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport java.util.Date\n\n@Entity\ndata class Question(\n    @PrimaryKey\n    @NonNull\n    // Read only\n    val id: Int,\n    val text: String,\n    val wrong: List<String>,\n    val right: List<String>,\n    val docLink: String,\n        // Read/Write\n    val wrongCounter: Int = 0,\n    val rightCounter: Int = 0,\n    val consecutiveRightCounter: Int = 0,\n    val lastViewedAt: Long = Date().time,\n    val studiedAt: Long = 0\n)\n","license":"mit"},{"repo_name":"fython/NHentai-android","path":"moe.feng.nhentai.model.Book","copies":"3","size":4208,"content":"package moe.feng.nhentai.model\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport android.util.Log\nimport com.google.gson.annotations.Expose\nimport com.google.gson.annotations.SerializedName\nimport moe.feng.nhentai.R\nimport moe.feng.nhentai.api.ApiConstants\nimport java.text.DateFormat\nimport java.util.*\n\n@Entity(tableName = Book.TAG) class Book: History.KeyContainer<Book.HistoryKey> {\n\n\t// Serializable fields\n\t@Expose @PrimaryKey @SerializedName(\"id\") lateinit var bookId: String\n\t@Expose @SerializedName(\"media_id\") lateinit var galleryId: String\n\tprivate @Expose @SerializedName(\"title\") var titles: BookTitle = BookTitle()\n\t@Expose @SerializedName(\"upload_date\") var uploadDate: Long = 0L\n\t@Expose @SerializedName(\"num_favorites\") var favCount: Int = 0\n\t@Expose var scanlator: String = \"\"\n\t@Expose @SerializedName(\"num_pages\") var pageCount: Int = 0\n\tprivate @Expose @SerializedName(\"images\") var _images: BookImages = BookImages()\n\t@Expose @SerializedName(\"tags\") var allTags: Array<Tag> = emptyArray()\n\n\t// Favourite mark\n\t@Expose var isFavourite: Boolean = false\n\n\t// Methods\n\tval images: BookImages get() = _images.apply { book = this@Book }\n\n\tval language: String get() = allTags.find {\n\t\tit.type == Tag.TYPE_LANGUAGE && it.name != Tag.LANG_TRANSLATED }?.name ?: Tag.LANG_JAPANESE\n\tval tags: Array<Tag> get() = allTags.filter { it.type == Tag.TYPE_TAG }.toTypedArray()\n\tval categories: Array<Tag> get() = allTags.filter { it.type == Tag.TYPE_CATEGORY }.toTypedArray()\n\tval characters: Array<Tag> get() = allTags.filter { it.type == Tag.TYPE_CHARACTER }.toTypedArray()\n\tval groups: Array<Tag> get() = allTags.filter { it.type == Tag.TYPE_GROUP }.toTypedArray()\n\tval parodies: Array<Tag> get() = allTags.filter { it.type == Tag.TYPE_PARODY }.toTypedArray()\n\tval artists: Array<Tag> get() = allTags.filter { it.type == Tag.TYPE_ARTIST }.toTypedArray()\n\n\tval title: String get() = titles.english\n\tval jpTitle: String? get() = titles.japanese\n\tval prettyTitle: String? get() = titles.pretty\n\n\tfun getLanguageFlagRes(): Int = when (language) {\n\t\tTag.LANG_CHINESE -> R.drawable.ic_lang_cn\n\t\tTag.LANG_ENGLISH -> R.drawable.ic_lang_gb\n\t\tTag.LANG_JAPANESE -> R.drawable.ic_lang_jp\n\t\telse -> 0\n\t}\n\n\tfun getFormattedTime(): String = DateFormat.getDateTimeInstance().format(Date(uploadDate * 1000))\n\n\toverride fun getHistoryAction(): Int = History.ACTION_READ_BOOK\n\n\toverride fun getHistoryKey(): Book.HistoryKey\n\t\t\t= HistoryKey(bookId, galleryId, titles, images.cover)\n\n\t// Sub-classes\n\n\tdata class BookTitle(\n\t\t\t@Expose var japanese: String? = null,\n\t\t\t@Expose var pretty: String? = null,\n\t\t\t@Expose var english: String = \"\"\n\t)\n\n\tclass BookImages(\n\t\t\t@Expose var cover: Picture? = null,\n\t\t\t@Expose var pages: Array<Picture> = emptyArray(),\n\t\t\t@Expose var thumbnail: Picture? = null,\n\t\t\tvar book: Book? = null\n\t) {\n\n\t\tfun getThumbnails(): Array<PictureUrl> {\n\t\t\tbook?.let {\n\t\t\t\tval list = mutableListOf<PictureUrl>()\n\t\t\t\tfor (i in 1..it.pageCount) {\n\t\t\t\t\tlist += PictureUrl(it.pageThumbnails[i], title = i.toString())\n\t\t\t\t}\n\t\t\t\treturn list.toTypedArray()\n\t\t\t}\n\t\t\treturn emptyArray()\n\t\t}\n\n\t}\n\n\tclass HistoryKey(\n\t\t\t@Expose val id: String,\n\t\t\t@Expose val galleryId: String,\n\t\t\t@Expose val titles: BookTitle,\n\t\t\t@Expose val cover: Picture? = null\n\t): History.Key {\n\t\toverride fun id(): String = id\n\t}\n\n\tcompanion object {\n\n\t\tconst val TAG = \"Book\"\n\n\t}\n\n\t// Extend function\n\n\tval requestUrl: String get() = ApiConstants.getBookDetailsUrl(bookId)\n\tval thumbUrl: String get() = ApiConstants.getBookThumbUrl(galleryId, images.cover?.fileType)\n\tval bigCoverUrl: String get() = ApiConstants.getBigCoverUrl(galleryId)\n\tval pagePictures: BookPageGetter get() = BookPageGetter(this, false)\n\tval pageThumbnails: BookPageGetter get() = BookPageGetter(this, true)\n\n\tval relatedApiUrl: String get() = ApiConstants.getBookRecommendUrl(bookId)\n\n\tclass BookPageGetter internal constructor(private val book: Book, private val thumb: Boolean) {\n\n\t\toperator fun get(pageNum: Int): String =\n\t\t\t\t(if (!thumb) ApiConstants::getPictureUrl else ApiConstants::getThumbPictureUrl)(\n\t\t\t\t\t\tbook.galleryId,\n\t\t\t\t\t\tpageNum.toString(),\n\t\t\t\t\t\tbook.images.pages[pageNum - 1].fileType\n\t\t\t\t)\n\n\t}\n\n}","license":"gpl-3.0"},{"repo_name":"Adventech/sabbath-school-android-2","path":"app.ss.storage.db.entity.UserEntity","copies":"1","size":1591,"content":"/*\n * Copyright (c) 2022. Adventech <info@adventech.io>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\npackage app.ss.storage.db.entity\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport app.ss.models.auth.AccountToken\n\n@Entity(tableName = \"user\")\ndata class UserEntity(\n    @PrimaryKey val uid: String,\n    val displayName: String?,\n    val email: String?,\n    val photo: String?,\n    val emailVerified: Boolean,\n    val phoneNumber: String?,\n    val isAnonymous: Boolean,\n    val tenantId: String?,\n    val stsTokenManager: AccountToken\n)\n","license":"mit"},{"repo_name":"exponent/exponent","path":"expo.modules.updates.db.entity.UpdateEntity","copies":"2","size":1281,"content":"package expo.modules.updates.db.entity\n\nimport androidx.room.*\nimport expo.modules.updates.db.enums.UpdateStatus\nimport org.json.JSONObject\nimport java.util.*\n\n@Entity(\n  tableName = \"updates\",\n  foreignKeys = [\n    ForeignKey(\n      entity = AssetEntity::class,\n      parentColumns = [\"id\"],\n      childColumns = [\"launch_asset_id\"],\n      onDelete = ForeignKey.CASCADE\n    )\n  ],\n  indices = [\n    Index(value = [\"launch_asset_id\"]),\n    Index(value = [\"scope_key\", \"commit_time\"], unique = true)\n  ]\n)\nclass UpdateEntity(\n  @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID,\n  @field:ColumnInfo(name = \"commit_time\") var commitTime: Date,\n  @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String,\n  @field:ColumnInfo(name = \"scope_key\") var scopeKey: String\n) {\n  @ColumnInfo(name = \"launch_asset_id\")\n  var launchAssetId: Long? = null\n\n  @ColumnInfo(name = \"manifest\")\n  var manifest: JSONObject? = null\n\n  var status = UpdateStatus.PENDING\n\n  var keep = false\n\n  @ColumnInfo(name = \"last_accessed\")\n  var lastAccessed: Date = Date()\n\n  @ColumnInfo(name = \"successful_launch_count\", defaultValue = \"0\")\n  var successfulLaunchCount = 0\n\n  @ColumnInfo(name = \"failed_launch_count\", defaultValue = \"0\")\n  var failedLaunchCount = 0\n}\n","license":"bsd-3-clause"},{"repo_name":"exponent/exponent","path":"expo.modules.updates.db.entity.AssetEntity","copies":"2","size":1331,"content":"package expo.modules.updates.db.entity\n\nimport android.net.Uri\nimport androidx.room.*\nimport expo.modules.updates.db.enums.HashType\nimport org.json.JSONObject\nimport java.util.*\n\n@Entity(tableName = \"assets\", indices = [Index(value = [\"key\"], unique = true)])\nclass AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?) {\n  @PrimaryKey(autoGenerate = true) // 0 is treated as unset while inserting the entity into the db\n  var id: Long = 0\n\n  var url: Uri? = null\n\n  var headers: JSONObject? = null\n\n  @ColumnInfo(name = \"extra_request_headers\")\n  var extraRequestHeaders: JSONObject? = null\n\n  var metadata: JSONObject? = null\n\n  @ColumnInfo(name = \"download_time\")\n  var downloadTime: Date? = null\n\n  @ColumnInfo(name = \"relative_path\")\n  var relativePath: String? = null\n\n  var hash: ByteArray? = null\n\n  @ColumnInfo(name = \"hash_type\")\n  var hashType = HashType.SHA256\n\n  @ColumnInfo(name = \"expected_hash\")\n  var expectedHash: String? = null\n\n  @ColumnInfo(name = \"marked_for_deletion\")\n  var markedForDeletion = false\n\n  @Ignore\n  var isLaunchAsset = false\n\n  @Ignore\n  var embeddedAssetFilename: String? = null\n\n  @Ignore\n  var resourcesFilename: String? = null\n\n  @Ignore\n  var resourcesFolder: String? = null\n\n  @Ignore\n  var scale: Float? = null\n\n  @Ignore\n  var scales: Array<Float>? = null\n}\n","license":"bsd-3-clause"},{"repo_name":"exponent/exponent","path":"expo.modules.updates.db.enums.UpdateStatus","copies":"2","size":968,"content":"package expo.modules.updates.db.enums\n\n/**\n * Download status that indicates whether or under what conditions an\n * update is able to be launched.\n */\nenum class UpdateStatus {\n  /**\n   * The update has been fully downloaded and is ready to launch.\n   */\n  READY,\n  /**\n   * The update manifest has been download from the server but not all assets have finished\n   * downloading successfully.\n   */\n  PENDING,\n  /**\n   * The update has been partially loaded (copied) from its location embedded in the app bundle, but\n   * not all assets have been copied successfully. The update may be able to be launched directly\n   * from its embedded location unless a new binary version with a new embedded update has been\n   * installed.\n   */\n  EMBEDDED,\n  /**\n   * The update manifest has been downloaded and indicates that the update is being served from a\n   * developer tool. It can be launched by a host application that can run a development bundle.\n   */\n  DEVELOPMENT\n}\n","license":"bsd-3-clause"},{"repo_name":"michaelkourlas/voipms-sms-client","path":"net.kourlas.voipms_sms.database.entities.Draft","copies":"1","size":1425,"content":"/*\n * VoIP.ms SMS\n * Copyright (C) 2021 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage net.kourlas.voipms_sms.database.entities\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport net.kourlas.voipms_sms.sms.Message\n\n@Entity(tableName = Draft.TABLE_NAME)\nclass Draft(\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0,\n    @ColumnInfo(name = COLUMN_DID) val did: String,\n    @ColumnInfo(name = COLUMN_CONTACT) val contact: String,\n    @ColumnInfo(name = COLUMN_MESSAGE) val text: String\n) {\n    fun toMessage(): Message = Message(this)\n\n    companion object {\n        const val TABLE_NAME = \"draft\"\n\n        const val COLUMN_DATABASE_ID = \"DatabaseId\"\n        const val COLUMN_DID = \"Did\"\n        const val COLUMN_CONTACT = \"Contact\"\n        const val COLUMN_MESSAGE = \"Text\"\n    }\n}","license":"apache-2.0"},{"repo_name":"android/compose-samples","path":"com.example.jetcaster.data.PodcastFollowedEntry","copies":"1","size":1415,"content":"/*\n * Copyright 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.example.jetcaster.data\n\nimport androidx.compose.runtime.Immutable\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(\n    tableName = \"podcast_followed_entries\",\n    foreignKeys = [\n        ForeignKey(\n            entity = Podcast::class,\n            parentColumns = [\"uri\"],\n            childColumns = [\"podcast_uri\"],\n            onUpdate = ForeignKey.CASCADE,\n            onDelete = ForeignKey.CASCADE\n        )\n    ],\n    indices = [\n        Index(\"podcast_uri\", unique = true)\n    ]\n)\n@Immutable\ndata class PodcastFollowedEntry(\n    @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") val id: Long = 0,\n    @ColumnInfo(name = \"podcast_uri\") val podcastUri: String\n)\n","license":"apache-2.0"},{"repo_name":"mgolokhov/dodroid","path":"doit.study.droid.data.local.entity.Tag","copies":"1","size":267,"content":"package doit.study.droid.data.local.entity\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity\ndata class Tag(\n    @PrimaryKey(autoGenerate = true)\n    val id: Int = 0,\n    val name: String,\n        // Read/Write\n    val selected: Boolean = false\n)\n","license":"mit"},{"repo_name":"mgolokhov/dodroid","path":"doit.study.droid.data.local.entity.QuestionTagJoin","copies":"1","size":779,"content":"package doit.study.droid.data.local.entity\n\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(\n        foreignKeys = [\n            ForeignKey(\n                    entity = Question::class,\n                    parentColumns = [\"id\"],\n                    childColumns = [\"questionId\"]\n            ),\n            ForeignKey(\n                    entity = Tag::class,\n                    parentColumns = [\"id\"],\n                    childColumns = [\"tagId\"]\n            )\n        ],\n        indices = [\n            Index(\"questionId\"),\n            Index(\"tagId\")\n        ]\n)\ndata class QuestionTagJoin(\n    @PrimaryKey(autoGenerate = true)\n    val id: Int = 0,\n    val questionId: Int,\n    val tagId: Int\n)\n","license":"mit"},{"repo_name":"marktony/ZhiHuDaily","path":"com.marktony.zhihudaily.data.ZhihuDailyContent","copies":"1","size":2526,"content":"/*\n * Copyright 2016 lizhaotailang\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"),\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.marktony.zhihudaily.data\n\nimport android.annotation.SuppressLint\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport android.arch.persistence.room.TypeConverters\nimport android.os.Parcelable\nimport com.google.gson.annotations.Expose\nimport com.google.gson.annotations.SerializedName\nimport com.marktony.zhihudaily.database.converter.StringTypeConverter\nimport kotlinx.android.parcel.Parcelize\n\n@Entity(tableName = \"zhihu_daily_content\")\n@TypeConverters(StringTypeConverter::class)\n@Parcelize\n@SuppressLint(\"ParcelCreator\")\ndata class ZhihuDailyContent(\n\n        @ColumnInfo(name = \"body\")\n        @Expose\n        @SerializedName(\"body\")\n        val body: String,\n\n        @ColumnInfo(name = \"image_source\")\n        @Expose\n        @SerializedName(\"image_source\")\n        val imageSource: String,\n\n        @ColumnInfo(name = \"title\")\n        @Expose\n        @SerializedName(\"title\")\n        val title: String,\n\n        @ColumnInfo(name = \"image\")\n        @Expose\n        @SerializedName(\"image\")\n        val image: String,\n\n        @ColumnInfo(name = \"share_url\")\n        @Expose\n        @SerializedName(\"share_url\")\n        val shareUrl: String,\n\n        @ColumnInfo(name = \"js\")\n        @Expose\n        @SerializedName(\"js\")\n        val js: List<String>,\n\n        @Expose\n        @SerializedName(\"ga_prefix\")\n        val gaPrefix: String,\n\n        @ColumnInfo(name = \"images\")\n        @Expose\n        @SerializedName(\"images\")\n        val images: List<String>,\n\n        @ColumnInfo(name = \"type\")\n        @Expose\n        @SerializedName(\"type\")\n        val type: Int,\n\n        @PrimaryKey\n        @ColumnInfo(name = \"id\")\n        @Expose\n        @SerializedName(\"id\")\n        val id: Int = 0,\n\n        @ColumnInfo(name = \"css\")\n        @Expose\n        @SerializedName(\"css\")\n        val css: List<String>\n\n) : Parcelable","license":"apache-2.0"},{"repo_name":"alexpensato/spring-boot-repositories-samples","path":"net.pensato.data.cassandra.sample.domain.Student","copies":"1","size":1107,"content":"/*\n * Copyright 2017 twitter.com/PensatoAlex\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.pensato.data.cassandra.sample.domain\n\nimport org.springframework.cassandra.core.PrimaryKeyType\nimport org.springframework.data.cassandra.mapping.PrimaryKeyColumn\nimport org.springframework.data.cassandra.mapping.Table\nimport java.time.LocalDateTime\n\n@Table\ndata class Student(\n        @PrimaryKeyColumn(name = \"name\", ordinal = 1, type = PrimaryKeyType.PARTITIONED)\n        var name: String,\n        var college: String = \"\",\n        var enrollment: LocalDateTime = LocalDateTime.now()\n)\n","license":"apache-2.0"},{"repo_name":"GeoffreyMetais/vlc-android","path":"org.videolan.vlc.mediadb.models.CustomDirectory","copies":"1","size":188,"content":"package org.videolan.vlc.mediadb.models\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity()\ndata class CustomDirectory(\n        @PrimaryKey\n        val path: String\n)\n\n","license":"gpl-2.0"},{"repo_name":"Heiner1/AndroidAPS","path":"info.nightscout.androidaps.database.entities.TotalDailyDose","copies":"1","size":1611,"content":"package info.nightscout.androidaps.database.entities\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport info.nightscout.androidaps.database.TABLE_TOTAL_DAILY_DOSES\nimport info.nightscout.androidaps.database.embedments.InterfaceIDs\nimport info.nightscout.androidaps.database.interfaces.DBEntryWithTime\nimport info.nightscout.androidaps.database.interfaces.TraceableDBEntry\nimport java.util.*\n\n@Entity(tableName = TABLE_TOTAL_DAILY_DOSES,\n    foreignKeys = [ForeignKey(\n        entity = TotalDailyDose::class,\n        parentColumns = [\"id\"],\n        childColumns = [\"referenceId\"])],\n    indices = [\n        Index(\"id\"),\n        Index(\"pumpId\"),\n        Index(\"pumpType\"),\n        Index(\"pumpSerial\"),\n        Index(\"isValid\"),\n        Index(\"referenceId\"),\n        Index(\"timestamp\")\n    ])\ndata class TotalDailyDose(\n    @PrimaryKey(autoGenerate = true)\n    override var id: Long = 0,\n    override var version: Int = 0,\n    override var dateCreated: Long = -1,\n    override var isValid: Boolean = true,\n    override var referenceId: Long? = null,\n    @Embedded\n    override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(),\n    override var timestamp: Long,\n    override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(),\n    var basalAmount: Double = 0.0,\n    var bolusAmount: Double = 0.0,\n    var totalAmount: Double = 0.0, // if zero it's calculated as basalAmount + bolusAmount\n    var carbs: Double = 0.0\n) : TraceableDBEntry, DBEntryWithTime {\n    companion object\n}","license":"agpl-3.0"},{"repo_name":"google/ground-android","path":"com.google.android.ground.persistence.local.room.entity.OfflineAreaEntity","copies":"1","size":1387,"content":"/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.google.android.ground.persistence.local.room.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.google.android.ground.model.basemap.OfflineArea\nimport com.google.android.ground.persistence.local.room.models.OfflineAreaEntityState\n\n/** Represents a [OfflineArea] in the local data store. */\n@Entity(tableName = \"offline_base_map\")\ndata class OfflineAreaEntity(\n  @ColumnInfo(name = \"id\") @PrimaryKey val id: String,\n  @ColumnInfo(name = \"name\") val name: String,\n  @ColumnInfo(name = \"state\") val state: OfflineAreaEntityState,\n  @ColumnInfo(name = \"north\") val north: Double,\n  @ColumnInfo(name = \"south\") val south: Double,\n  @ColumnInfo(name = \"east\") val east: Double,\n  @ColumnInfo(name = \"west\") val west: Double\n)\n","license":"apache-2.0"},{"repo_name":"stronganizer/stronganizer-android","path":"com.stronganizer.android.data.model.Competition","copies":"1","size":610,"content":"package com.stronganizer.android.data.model\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.Ignore\nimport android.arch.persistence.room.PrimaryKey\nimport java.util.*\n\n/**\n * Created by valio_stoyanov on 7/30/17.\n */\n\n@Entity(tableName = \"competition\") data class Competition(\n        @PrimaryKey val id: Int,\n        @ColumnInfo(name = \"name\") val name: String,\n        @ColumnInfo(name = \"description\") val description: String,\n        @ColumnInfo(name = \"dateTime\") val dateTime: Date,\n        @Ignore val location: Location\n)","license":"apache-2.0"},{"repo_name":"rosariopfernandes/rollapass","path":"io.github.rosariopfernandes.rollapass.model.User","copies":"1","size":280,"content":"package io.github.rosariopfernandes.rollapass.model\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity\ndata class User(\n        @PrimaryKey(autoGenerate = true)\n        var userId: Int?,\n        var masterPassword: String\n) {\n    constructor(): this(null, \"\")\n}","license":"gpl-3.0"},{"repo_name":"dmitryustimov/weather-kotlin","path":"ru.ustimov.weather.content.impl.local.data.RoomCountry","copies":"1","size":1006,"content":"package ru.ustimov.weather.content.impl.local.data\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.Index\nimport android.arch.persistence.room.PrimaryKey\nimport android.provider.BaseColumns\nimport ru.ustimov.weather.content.data.Country\nimport ru.ustimov.weather.content.impl.local.Database\n\n@Entity(tableName = Database.Tables.COUNTRIES,\n        indices = arrayOf(Index(value = \"code\", unique = true)))\ninternal data class RoomCountry(\n        @PrimaryKey(autoGenerate = true) @ColumnInfo(name = BaseColumns._ID) private val id: Long? = null,\n        @ColumnInfo(name = \"code\", collate = ColumnInfo.NOCASE) private val code: String,\n        @ColumnInfo(name = \"name\", collate = ColumnInfo.NOCASE) private val name: String?\n) : Country {\n\n    constructor(country: Country) : this(code = country.code(), name = country.name())\n\n    fun id() = id\n\n    override fun code() = code.toLowerCase()\n\n    override fun name() = name\n\n}","license":"apache-2.0"},{"repo_name":"arieled91/openteam","path":"com.openteam.application.model.Event","copies":"1","size":955,"content":"package com.openteam.application.model\n\n\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators\nimport org.hibernate.id.UUIDGenerator\nimport org.springframework.format.annotation.DateTimeFormat\nimport java.time.LocalDateTime\nimport java.util.*\nimport javax.persistence.*\n\n@Entity\n@Table(name = \"event\", schema = \"openteam\")\ndata class Event(\n    var name: String = \"\",\n\n    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)\n    var dateTime: LocalDateTime = LocalDateTime.MIN,\n\n    @OneToMany(cascade = arrayOf(CascadeType.ALL))\n    @JoinTable(name = \"event_teams\", joinColumns = arrayOf(JoinColumn(name = \"key\")), inverseJoinColumns = arrayOf(JoinColumn(name = \"event_id\")))\n    var teams: MutableList<Team> =  arrayListOf(Team(\"default\")),\n\n    var creationTime : LocalDateTime = LocalDateTime.now(),\n\n    var uuid : String = UUID.randomUUID().toString(),\n\n    @Id @GeneratedValue(strategy= GenerationType.IDENTITY)\n    private var id: Long = 0\n\n)","license":"apache-2.0"},{"repo_name":"arieled91/openteam","path":"com.openteam.application.model.Player","copies":"1","size":435,"content":"package com.openteam.application.model\n\nimport java.time.LocalDateTime\nimport javax.persistence.*\n\n@Entity\n@Table(name = \"player\", schema = \"openteam\")\ndata class Player (\n    var name : String = \"\",\n    var email: String = \"\",\n    var guest: Boolean = false,\n    var active: Boolean = true,\n    var creationTime : LocalDateTime = LocalDateTime.now(),\n\n    @Id @GeneratedValue(strategy= GenerationType.IDENTITY)\n    var id : Long = 0\n)","license":"apache-2.0"},{"repo_name":"jeantuffier/reminder","path":"fr.jeantuffier.reminder.free.common.model.Task","copies":"1","size":1060,"content":"package fr.jeantuffier.reminder.free.common.model\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity(tableName = \"task\")\ndata class Task(\n    @PrimaryKey(autoGenerate = true)\n    val id: Int,\n\n    @ColumnInfo(name = \"title\")\n    val title: String,\n\n    @ColumnInfo(name = \"priority\")\n    val priority: Int,\n\n    @ColumnInfo(name = \"delay\")\n    val delay: Int,\n\n    @ColumnInfo(name = \"frequency\")\n    val frequency: String,\n\n    @ColumnInfo(name = \"fromTime\")\n    val fromTime: String,\n\n    @ColumnInfo(name = \"toTime\")\n    val toTime: String,\n\n    @ColumnInfo(name = \"createdAtTime\")\n    val createdAtTime: String\n) {\n\n    companion object {\n        const val ID = \"Task.ID\"\n        const val TITLE = \"Task.TITLE\"\n        const val FROM = \"Task.FROM\"\n        const val TO = \"Task.TO\"\n        const val HOURS = \"hours\"\n        const val PRIORITY = \"Task.PRIORITY\"\n    }\n\n    fun getDelayInMs() = Frequency.valueOf(frequency.toUpperCase()).getTimeInMs(delay)\n\n}\n","license":"mit"},{"repo_name":"DreierF/MyTargets","path":"de.dreier.mytargets.shared.models.db.Signature","copies":"1","size":2001,"content":"/*\n * Copyright (C) 2018 Florian Dreier\n *\n * This file is part of MyTargets.\n *\n * MyTargets is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2\n * as published by the Free Software Foundation.\n *\n * MyTargets is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n */\n\npackage de.dreier.mytargets.shared.models.db\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport android.graphics.Bitmap\nimport android.os.Parcel\nimport android.os.Parcelable\nimport de.dreier.mytargets.shared.utils.readBitmap\nimport de.dreier.mytargets.shared.utils.writeBitmap\n\n@Entity\ndata class Signature(\n        @PrimaryKey(autoGenerate = true)\n        var id: Long = 0,\n\n        var name: String = \"\",\n\n        /** A bitmap of the signature or null if no signature has been set. */\n        @ColumnInfo(typeAffinity = ColumnInfo.BLOB)\n        var bitmap: Bitmap? = null\n) : Parcelable {\n\n    val isSigned: Boolean\n        get() = bitmap != null\n\n    fun getName(defaultName: String): String {\n        return if (name.isEmpty()) defaultName else name\n    }\n\n    override fun describeContents() = 0\n\n    override fun writeToParcel(dest: Parcel, flags: Int) {\n        dest.writeLong(id)\n        dest.writeString(name)\n        dest.writeBitmap(bitmap)\n    }\n\n    companion object {\n        @JvmField\n        val CREATOR = object : Parcelable.Creator<Signature> {\n            override fun createFromParcel(source: Parcel): Signature {\n                val id = source.readLong()\n                val name = source.readString()!!\n                val bitmap = source.readBitmap()\n                return Signature(id, name, bitmap)\n            }\n\n            override fun newArray(size: Int) = arrayOfNulls<Signature>(size)\n        }\n    }\n}\n","license":"gpl-2.0"},{"repo_name":"solokot/Simple-Gallery","path":"com.simplemobiletools.gallery.pro.models.Medium","copies":"1","size":3910,"content":"package com.simplemobiletools.gallery.pro.models\n\nimport android.content.Context\nimport androidx.room.*\nimport com.bumptech.glide.signature.ObjectKey\nimport com.simplemobiletools.commons.extensions.*\nimport com.simplemobiletools.commons.helpers.SORT_BY_DATE_MODIFIED\nimport com.simplemobiletools.commons.helpers.SORT_BY_NAME\nimport com.simplemobiletools.commons.helpers.SORT_BY_PATH\nimport com.simplemobiletools.commons.helpers.SORT_BY_SIZE\nimport com.simplemobiletools.gallery.pro.helpers.*\nimport java.io.File\nimport java.io.Serializable\nimport java.util.*\n\n@Entity(tableName = \"media\", indices = [(Index(value = [\"full_path\"], unique = true))])\ndata class Medium(\n    @PrimaryKey(autoGenerate = true) var id: Long?,\n    @ColumnInfo(name = \"filename\") var name: String,\n    @ColumnInfo(name = \"full_path\") var path: String,\n    @ColumnInfo(name = \"parent_path\") var parentPath: String,\n    @ColumnInfo(name = \"last_modified\") var modified: Long,\n    @ColumnInfo(name = \"date_taken\") var taken: Long,\n    @ColumnInfo(name = \"size\") var size: Long,\n    @ColumnInfo(name = \"type\") var type: Int,\n    @ColumnInfo(name = \"video_duration\") var videoDuration: Int,\n    @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean,\n    @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long,\n\n    @Ignore var gridPosition: Int = 0   // used at grid view decoration at Grouping enabled\n) : Serializable, ThumbnailItem() {\n\n    constructor() : this(null, \"\", \"\", \"\", 0L, 0L, 0L, 0, 0, false, 0L, 0)\n\n    companion object {\n        private const val serialVersionUID = -6553149366975655L\n    }\n\n    fun isWebP() = name.isWebP()\n\n    fun isGIF() = type == TYPE_GIFS\n\n    fun isImage() = type == TYPE_IMAGES\n\n    fun isVideo() = type == TYPE_VIDEOS\n\n    fun isRaw() = type == TYPE_RAWS\n\n    fun isSVG() = type == TYPE_SVGS\n\n    fun isPortrait() = type == TYPE_PORTRAITS\n\n    fun isApng() = name.isApng()\n\n    fun isHidden() = name.startsWith('.')\n\n    fun isHeic() = name.toLowerCase().endsWith(\".heic\") || name.toLowerCase().endsWith(\".heif\")\n\n    fun getBubbleText(sorting: Int, context: Context, dateFormat: String, timeFormat: String) = when {\n        sorting and SORT_BY_NAME != 0 -> name\n        sorting and SORT_BY_PATH != 0 -> path\n        sorting and SORT_BY_SIZE != 0 -> size.formatSize()\n        sorting and SORT_BY_DATE_MODIFIED != 0 -> modified.formatDate(context, dateFormat, timeFormat)\n        else -> taken.formatDate(context)\n    }\n\n    fun getGroupingKey(groupBy: Int): String {\n        return when {\n            groupBy and GROUP_BY_LAST_MODIFIED_DAILY != 0 -> getDayStartTS(modified, false)\n            groupBy and GROUP_BY_LAST_MODIFIED_MONTHLY != 0 -> getDayStartTS(modified, true)\n            groupBy and GROUP_BY_DATE_TAKEN_DAILY != 0 -> getDayStartTS(taken, false)\n            groupBy and GROUP_BY_DATE_TAKEN_MONTHLY != 0 -> getDayStartTS(taken, true)\n            groupBy and GROUP_BY_FILE_TYPE != 0 -> type.toString()\n            groupBy and GROUP_BY_EXTENSION != 0 -> name.getFilenameExtension().toLowerCase()\n            groupBy and GROUP_BY_FOLDER != 0 -> parentPath\n            else -> \"\"\n        }\n    }\n\n    fun getIsInRecycleBin() = deletedTS != 0L\n\n    private fun getDayStartTS(ts: Long, resetDays: Boolean): String {\n        val calendar = Calendar.getInstance(Locale.ENGLISH).apply {\n            timeInMillis = ts\n            set(Calendar.HOUR_OF_DAY, 0)\n            set(Calendar.MINUTE, 0)\n            set(Calendar.SECOND, 0)\n            set(Calendar.MILLISECOND, 0)\n\n            if (resetDays) {\n                set(Calendar.DAY_OF_MONTH, 1)\n            }\n        }\n\n        return calendar.timeInMillis.toString()\n    }\n\n    fun getSignature(): String {\n        val lastModified = if (modified > 1) {\n            modified\n        } else {\n            File(path).lastModified()\n        }\n\n        return \"$path-$lastModified-$size\"\n    }\n\n    fun getKey() = ObjectKey(getSignature())\n}\n","license":"gpl-3.0"},{"repo_name":"jrgonzalezg/OpenLibraryApp","path":"com.github.jrgonzalezg.openlibrary.features.books.domain.BookSummary","copies":"1","size":798,"content":"/*\n * Copyright (C) 2017 Juan Ramón González González (https://github.com/jrgonzalezg)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.github.jrgonzalezg.openlibrary.features.books.domain\n\ndata class BookSummary(val key: String, val title: String, val covers: List<Int>?)\n","license":"apache-2.0"},{"repo_name":"BoD/CineToday","path":"org.jraf.android.cinetoday.model.movie.Movie","copies":"1","size":2768,"content":"/*\n * This source is part of the\n *      _____  ___   ____\n *  __ / / _ \\/ _ | / __/___  _______ _\n * / // / , _/ __ |/ _/_/ _ \\/ __/ _ `/\n * \\___/_/|_/_/ |_/_/ (_)___/_/  \\_, /\n *                              /___/\n * repository.\n *\n * Copyright (C) 2015-present Benoit 'BoD' Lubek (BoD@JRAF.org)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.jraf.android.cinetoday.model.movie\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\nimport androidx.room.TypeConverters\nimport org.jraf.android.cinetoday.database.Converters\nimport org.jraf.android.cinetoday.model.showtime.Showtime\nimport org.jraf.android.cinetoday.util.uri.HasId\nimport java.util.Date\nimport java.util.TreeMap\n\n@Entity\ndata class Movie(\n    @PrimaryKey\n    override var id: String,\n\n    var originalTitle: String,\n    var localTitle: String,\n\n    var directors: String?,\n    var actors: String?,\n\n    @field:TypeConverters(Converters.DateConverter::class)\n    var releaseDate: Date?,\n    var durationSeconds: Int?,\n\n    @field:TypeConverters(Converters.ListConverter::class)\n    var genres: Array<String>,\n\n    var posterUri: String?,\n    var trailerUri: String?,\n\n    @Deprecated(\"No longer used\")\n    var webUri: String,\n    var synopsis: String?,\n\n    var isNew: Boolean,\n\n    @field:ColumnInfo(name = \"color\")\n    var colorDark: Int?,\n\n    var colorLight: Int?,\n) : HasId {\n\n    @Ignore\n    constructor() : this(\n        id = \"\",\n        originalTitle = \"\",\n        localTitle = \"\",\n        directors = null,\n        actors = null,\n        releaseDate = null,\n        durationSeconds = null,\n        genres = emptyArray<String>(),\n        posterUri = null,\n        trailerUri = null,\n        webUri = \"\",\n        synopsis = null,\n        isNew = false,\n        colorDark = null,\n        colorLight = null,\n    )\n\n    /**\n     * Keys: id of the theater.\n     *\n     * Values: showtimes for today at a given theater.\n     */\n    @Ignore\n    var todayShowtimes = TreeMap<String, List<Showtime>>()\n\n\n    override fun equals(other: Any?) = (other as? Movie)?.id == id\n\n    override fun hashCode() = id.hashCode()\n\n}\n","license":"gpl-3.0"},{"repo_name":"walleth/kethereum","path":"org.kethereum.model.Address","copies":"1","size":395,"content":"package org.kethereum.model\n\ndata class Address(private val input: String) {\n\n    val cleanHex = input.removePrefix(\"0x\")\n\n    @Transient\n    val hex = \"0x$cleanHex\"\n\n    override fun toString() = hex\n\n    override fun equals(other: Any?)\n            = other is Address && other.cleanHex.toUpperCase() == cleanHex.toUpperCase()\n\n    override fun hashCode() = cleanHex.toUpperCase().hashCode()\n}\n","license":"mit"},{"repo_name":"orgzly/orgzly-android","path":"com.orgzly.android.db.entity.NoteView","copies":"1","size":2988,"content":"package com.orgzly.android.db.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Embedded\n\n\ndata class NoteView(\n        @Embedded\n        val note: Note,\n\n        @ColumnInfo(name = \"inherited_tags\")\n        val inheritedTags: String? = null,\n\n        @ColumnInfo(name = \"scheduled_range_string\")\n        val scheduledRangeString : String? = null,\n        @ColumnInfo(name = \"scheduled_time_string\")\n        val scheduledTimeString : String? = null,\n        @ColumnInfo(name = \"scheduled_time_end_string\")\n        val scheduledTimeEndString : String? = null,\n        @ColumnInfo(name = \"scheduled_time_timestamp\")\n        val scheduledTimeTimestamp : Long? = null,\n        @ColumnInfo(name = \"scheduled_time_start_of_day\")\n        val scheduledTimeStartOfDay : Long? = null,\n        @ColumnInfo(name = \"scheduled_time_hour\")\n        val scheduledTimeHour : Int? = null,\n\n        @ColumnInfo(name = \"deadline_range_string\")\n        val deadlineRangeString : String? = null,\n        @ColumnInfo(name = \"deadline_time_string\")\n        val deadlineTimeString : String? = null,\n        @ColumnInfo(name = \"deadline_time_end_string\")\n        val deadlineTimeEndString : String? = null,\n        @ColumnInfo(name = \"deadline_time_timestamp\")\n        val deadlineTimeTimestamp : Long? = null,\n        @ColumnInfo(name = \"deadline_time_start_of_day\")\n        val deadlineTimeStartOfDay : Long? = null,\n        @ColumnInfo(name = \"deadline_time_hour\")\n        val deadlineTimeHour : Int? = null,\n\n        @ColumnInfo(name = \"closed_range_string\")\n        val closedRangeString : String? = null,\n        @ColumnInfo(name = \"closed_time_string\")\n        val closedTimeString : String? = null,\n        @ColumnInfo(name = \"closed_time_end_string\")\n        val closedTimeEndString : String? = null,\n        @ColumnInfo(name = \"closed_time_timestamp\")\n        val closedTimeTimestamp : Long? = null,\n        @ColumnInfo(name = \"closed_time_start_of_day\")\n        val closedTimeStartOfDay : Long? = null,\n        @ColumnInfo(name = \"closed_time_hour\")\n        val closedTimeHour : Int? = null,\n\n        @ColumnInfo(name = \"clock_range_string\")\n        val clockRangeString : String? = null,\n        @ColumnInfo(name = \"clock_time_string\")\n        val clockTimeString : String? = null,\n        @ColumnInfo(name = \"clock_time_end_string\")\n        val clockTimeEndString : String? = null,\n\n        @ColumnInfo(name = \"event_string\")\n        val eventString : String? = null,\n        @ColumnInfo(name = \"event_timestamp\")\n        val eventTimestamp: Long? = null,\n        @ColumnInfo(name = \"event_start_of_day\")\n        val eventStartOfDay : Long? = null,\n        @ColumnInfo(name = \"event_hour\")\n        val eventHour : Int? = null,\n\n        @ColumnInfo(name = \"book_name\")\n        val bookName: String\n) {\n    fun hasInheritedTags(): Boolean {\n        return inheritedTags != null\n    }\n\n    fun getInheritedTagsList(): List<String> {\n        return Note.dbDeSerializeTags(inheritedTags)\n    }\n}\n","license":"gpl-3.0"},{"repo_name":"Wackalooon/EcoMeter","path":"com.wackalooon.meter.data.model.MeterDatabaseEntity","copies":"1","size":283,"content":"package com.wackalooon.meter.data.model\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport com.wackalooon.meter.domain.model.Type\n\n@Entity\ndata class MeterDatabaseEntity (\n    @PrimaryKey(autoGenerate = true) val id: Long,\n    val name: String,\n    val type: Type\n)\n","license":"apache-2.0"},{"repo_name":"michaelkourlas/voipms-sms-client","path":"net.kourlas.voipms_sms.database.entities.Sms","copies":"1","size":2232,"content":"/*\n * VoIP.ms SMS\n * Copyright (C) 2021 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage net.kourlas.voipms_sms.database.entities\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport net.kourlas.voipms_sms.sms.Message\nimport java.util.*\n\n@Entity(tableName = Sms.TABLE_NAME)\ndata class Sms(\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0,\n    @ColumnInfo(name = COLUMN_VOIP_ID) val voipId: Long? = null,\n    @ColumnInfo(name = COLUMN_DATE) val date: Long = Date().time / 1000L,\n    @ColumnInfo(name = COLUMN_INCOMING) val incoming: Long = 0,\n    @ColumnInfo(name = COLUMN_DID) val did: String = \"\",\n    @ColumnInfo(name = COLUMN_CONTACT) val contact: String = \"\",\n    @ColumnInfo(name = COLUMN_TEXT) val text: String = \"\",\n    @ColumnInfo(name = COLUMN_UNREAD) val unread: Long = 0,\n    @ColumnInfo(name = COLUMN_DELIVERED) val delivered: Long = 0,\n    @ColumnInfo(name = COLUMN_DELIVERY_IN_PROGRESS)\n    val deliveryInProgress: Long = 0\n) {\n    fun toMessage(): Message = Message(this)\n\n    fun toMessage(databaseId: Long): Message = Message(this, databaseId)\n\n    companion object {\n        const val TABLE_NAME = \"sms\"\n\n        const val COLUMN_DATABASE_ID = \"DatabaseId\"\n        const val COLUMN_VOIP_ID = \"VoipId\"\n        const val COLUMN_DATE = \"Date\"\n        const val COLUMN_INCOMING = \"Type\"\n        const val COLUMN_DID = \"Did\"\n        const val COLUMN_CONTACT = \"Contact\"\n        const val COLUMN_TEXT = \"Text\"\n        const val COLUMN_UNREAD = \"Unread\"\n        const val COLUMN_DELIVERED = \"Delivered\"\n        const val COLUMN_DELIVERY_IN_PROGRESS = \"DeliveryInProgress\"\n    }\n}","license":"apache-2.0"},{"repo_name":"michaelkourlas/voipms-sms-client","path":"net.kourlas.voipms_sms.sms.ConversationId","copies":"1","size":1298,"content":"/*\n * VoIP.ms SMS\n * Copyright (C) 2017-2021 Michael Kourlas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage net.kourlas.voipms_sms.sms\n\nimport androidx.room.ColumnInfo\nimport net.kourlas.voipms_sms.database.entities.Sms\n\n/**\n * A conversation is uniquely identified by its participants, which are\n * represented by a DID and a contact phone number.\n *\n * @param did The DID associated with the conversation.\n * @param contact The contact associated with the conversation.\n */\ndata class ConversationId(\n    @ColumnInfo(name = Sms.COLUMN_DID)\n    val did: String,\n    @ColumnInfo(name = Sms.COLUMN_CONTACT)\n    val contact: String\n) {\n    /**\n     * Gets a unique identifier for this conversation.\n     */\n    fun getId(): String {\n        return \"${did}_${contact}\"\n    }\n}\n","license":"apache-2.0"},{"repo_name":"orgzly/orgzly-android","path":"com.orgzly.android.db.entity.Repo","copies":"1","size":428,"content":"package com.orgzly.android.db.entity\n\nimport androidx.room.*\nimport com.orgzly.android.repos.RepoType\n\n@Entity(\n        tableName = \"repos\",\n\n        indices = [\n            Index(\"url\", unique = true)\n        ]\n)\ndata class Repo(\n        @PrimaryKey(autoGenerate = true)\n        val id: Long,\n\n        val type: RepoType,\n\n        val url: String\n) {\n        override fun toString(): String {\n            return url\n        }\n}","license":"gpl-3.0"},{"repo_name":"Adventech/sabbath-school-android-2","path":"app.ss.storage.db.entity.VideoInfoEntity","copies":"1","size":1444,"content":"/*\n * Copyright (c) 2022. Adventech <info@adventech.io>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\npackage app.ss.storage.db.entity\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport app.ss.models.media.SSVideo\n\n@Entity(tableName = \"video_info\")\ndata class VideoInfoEntity(\n    @PrimaryKey val id: String,\n    val lessonIndex: String,\n    val artist: String,\n    val clips: List<SSVideo>\n)\n","license":"mit"},{"repo_name":"orgzly/orgzly-android","path":"com.orgzly.android.db.entity.OrgTimestamp","copies":"1","size":1536,"content":"package com.orgzly.android.db.entity\n\nimport androidx.room.*\n\n@Entity(\n        tableName = \"org_timestamps\",\n\n        indices = [\n            Index(\"string\", unique = true),\n            Index(\"timestamp\"),\n            Index(\"end_timestamp\")\n        ]\n)\ndata class OrgTimestamp(\n        @PrimaryKey(autoGenerate = true)\n        val id: Long,\n\n        val string: String,\n\n        @ColumnInfo(name = \"is_active\")\n        val isActive: Boolean,\n\n        val year: Int,\n\n        val month: Int,\n\n        val day: Int,\n\n        val hour: Int?,\n\n        val minute: Int?,\n\n        val second: Int?,\n\n        @ColumnInfo(name = \"end_hour\")\n        val endHour: Int?,\n\n        @ColumnInfo(name = \"end_minute\")\n        val endMinute: Int?,\n\n        @ColumnInfo(name = \"end_second\")\n        val endSecond: Int?,\n\n        @ColumnInfo(name = \"repeater_type\")\n        val repeaterType: Int?,\n\n        @ColumnInfo(name = \"repeater_value\")\n        val repeaterValue: Int?,\n\n        @ColumnInfo(name = \"repeater_unit\")\n        val repeaterUnit: Int?,\n\n        @ColumnInfo(name = \"habit_deadline_value\")\n        val habitDeadlineValue: Int?,\n\n        @ColumnInfo(name = \"habit_deadline_unit\")\n        val habitDeadlineUnit: Int?,\n\n        @ColumnInfo(name = \"delay_type\")\n        val delayType: Int?,\n\n        @ColumnInfo(name = \"delay_value\")\n        val delayValue: Int?,\n\n        @ColumnInfo(name = \"delay_unit\")\n        val delayUnit: Int?,\n\n        val timestamp: Long,\n\n        @ColumnInfo(name = \"end_timestamp\")\n        val endTimestamp: Long?\n)","license":"gpl-3.0"},{"repo_name":"Jason-Chen-2017/restfeel","path":"com.restfeel.entity.Blog","copies":"1","size":1007,"content":"package com.restfeel.entity\n\nimport org.bson.types.ObjectId\nimport org.springframework.data.mongodb.core.mapping.Document\nimport java.util.*\nimport javax.persistence.GeneratedValue\nimport javax.persistence.GenerationType\nimport javax.persistence.Id\nimport javax.persistence.Version\n\n@Document(collection = \"blog\") // 如果不指定collection，默认遵从命名规则\nclass Blog {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    var id: String = ObjectId.get().toString()\n    @Version\n    var version: Long = 0\n    var title: String = \"\"\n    var content: String = \"\"\n    var author: String = \"\"\n    var gmtCreated: Date = Date()\n    var gmtModified: Date = Date()\n    var isDeleted: Int = 0 //1 Yes 0 No\n    var deletedDate: Date = Date()\n    override fun toString(): String {\n        return \"Blog(id='$id', version=$version, title='$title', content='$content', author='$author', gmtCreated=$gmtCreated, gmtModified=$gmtModified, isDeleted=$isDeleted, deletedDate=$deletedDate)\"\n    }\n\n}\n\n","license":"apache-2.0"},{"repo_name":"alex-tavella/MooV","path":"br.com.bookmark.movie.data.local.entity.MovieBookmark","copies":"1","size":830,"content":"/*\n * Copyright 2020 Alex Almeida Tavella\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.bookmark.movie.data.local.entity\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"movie_bookmark\")\ndata class MovieBookmark(\n    @PrimaryKey(autoGenerate = false) val id: Int\n)\n","license":"apache-2.0"},{"repo_name":"google-developer-training/android-demos","path":"com.android.samples.donuttracker.model.Coffee","copies":"2","size":1009,"content":"/*\n * Copyright (C) 2021 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.android.samples.donuttracker.model\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n/**\n * This class holds the data that we are tracking for each cup of coffee: its name, a description,\n * and a rating.\n */\n@Entity\ndata class Coffee(\n    @PrimaryKey(autoGenerate = true) val id: Long,\n    val name: String,\n    val description: String = \"\",\n    val rating: Int\n)\n","license":"apache-2.0"},{"repo_name":"StPatrck/edac","path":"com.phapps.elitedangerous.companion.data.entities.Station","copies":"1","size":267,"content":"package com.phapps.elitedangerous.companion.data.entities\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity(tableName = \"stations\")\nclass Station {\n\n    @PrimaryKey\n    var id: Long = 0\n\n    var name: String = \"\"\n}\n","license":"gpl-3.0"},{"repo_name":"StPatrck/edac","path":"com.phapps.elitedangerous.companion.data.entities.Starport","copies":"1","size":739,"content":"package com.phapps.elitedangerous.companion.data.entities\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Embedded\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\nimport android.support.annotation.NonNull\nimport android.support.annotation.Nullable\n\n@Entity(tableName = \"starports\")\nclass Starport {\n\n    @PrimaryKey\n    var id: Long = 0\n\n    @NonNull\n    var name: String = \"\"\n\n    @Nullable\n    var faction: String? = null\n\n    @Nullable\n    var minorFaction: String? = null\n\n    @Nullable\n    @Embedded(prefix = \"service_\")\n    var services: StarportServices? = null\n\n    @NonNull\n    @ColumnInfo(name = \"star_system_id\")\n    var starSystemId: Long = 0\n}\n","license":"gpl-3.0"},{"repo_name":"google-developer-training/android-demos","path":"com.android.samples.donuttracker.core.model.Donut","copies":"2","size":1005,"content":"/*\n * Copyright (C) 2021 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.android.samples.donuttracker.core.model\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n/**\n * This class holds the data that we are tracking for each donut: its name, a description, and\n * a rating.\n */\n@Entity\ndata class Donut(\n    @PrimaryKey(autoGenerate = true) val id: Long,\n    val name: String,\n    val description: String = \"\",\n    val rating: Int\n)\n","license":"apache-2.0"},{"repo_name":"laminr/aeroknow","path":"biz.eventually.atpl.data.dto.QuestionView","copies":"1","size":594,"content":"package biz.eventually.atpl.data.dto\n\nimport android.arch.persistence.room.Embedded\nimport android.arch.persistence.room.Relation\nimport biz.eventually.atpl.data.db.Answer\nimport biz.eventually.atpl.data.db.Question\nimport biz.eventually.atpl.data.db.Subject\nimport biz.eventually.atpl.data.db.Topic\n\n/**\n * Created by Thibault de Lambilly on 25/10/17.\n */\nclass QuestionView(\n        @Embedded\n        var question: Question = Question(-1, -1, \"\", \"\"),\n\n        @Relation(parentColumn = \"idWeb\", entityColumn = \"question_id\", entity = Answer::class)\n        var answers: List<Answer>? = null\n)","license":"mit"},{"repo_name":"yifeidesu/DayPlus-Countdown","path":"com.robyn.dayplus2.data.MyEvent","copies":"1","size":1448,"content":"package com.robyn.dayplus2.data\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.Ignore\nimport android.arch.persistence.room.PrimaryKey\nimport org.joda.time.DateTime\nimport java.util.*\n\n/**\n * Created by yifei on 5/11/2017.\n *\n * model + database scheme\n */\n@Entity\nclass MyEvent {\n\n    // fields in database scheme\n    @PrimaryKey\n    @ColumnInfo(name = \"uuid\")\n    var uuid: String //mUuid to string\n\n    @ColumnInfo(name = \"title\")\n    var title: String? = null\n\n    @ColumnInfo(name = \"description\")\n    var description: String? = null\n\n    @ColumnInfo(name = \"bgImagePath\")\n    var bgImagePath: String? = null\n\n    @ColumnInfo(name = \"datetime\")\n    var datetime: Long = 0\n\n    @ColumnInfo(name = \"repeatMode\")\n    var repeatMode: Int = 0 // 0, 1, 2, 3 = never, week, month, year\n\n    // 0,1,2,3,4,5 = cake, loving, face, social, work, no categoryCode -\n    // to match the tab position in tabLayout\n    @ColumnInfo(name = \"categoryCode\")\n    var categoryCode: Int = 5\n\n    @ColumnInfo(name = \"isStar\")\n    var isStarred: Boolean = false\n\n    constructor() {\n        uuid = UUID.randomUUID().toString()\n        datetime = DateTime().withTimeAtStartOfDay().millis // millis is long\n    }\n\n    @Ignore\n    constructor(datetime: Long, title: String) {\n        uuid = UUID.randomUUID().toString()\n        this.datetime = datetime\n        this.title = title\n    }\n}\n\n","license":"apache-2.0"},{"repo_name":"orgzly/orgzly-android","path":"com.orgzly.android.db.entity.NoteEvent","copies":"1","size":911,"content":"package com.orgzly.android.db.entity\n\nimport androidx.room.*\n\n@Entity(\n        tableName = \"note_events\",\n\n        primaryKeys = [ \"note_id\", \"org_range_id\" ],\n\n        foreignKeys = [\n            ForeignKey(\n                    entity = Note::class,\n                    parentColumns = arrayOf(\"id\"),\n                    childColumns = arrayOf(\"note_id\"),\n                    onDelete = ForeignKey.CASCADE),\n\n            ForeignKey(\n                    entity = OrgRange::class,\n                    parentColumns = arrayOf(\"id\"),\n                    childColumns = arrayOf(\"org_range_id\"),\n                    onDelete = ForeignKey.CASCADE)\n        ],\n\n        indices = [\n            Index(\"note_id\"),\n            Index(\"org_range_id\")\n        ]\n)\ndata class NoteEvent(\n        @ColumnInfo(name = \"note_id\")\n        val noteId: Long,\n\n        @ColumnInfo(name = \"org_range_id\")\n        val orgRangeId: Long\n)\n","license":"gpl-3.0"},{"repo_name":"EdenTewelde/project_alpha_omega","path":"Car","copies":"2","size":446,"content":"import java.util.*\n\nclass Car(val id: Int, var wantsToDrive: Boolean = true) {\n\n    var isDelayed: Boolean = false\n    val isDelayedAtHour : MutableList<Int> = mutableListOf()\n    val wantsToDriveAtHour : MutableList<Int> = mutableListOf()\n\n    fun wantsToDriveAtHour(hour: Int): Boolean {\n        return wantsToDriveAtHour.contains(hour)\n    }\n\n    fun isDelayedAtHour(hour: Int): Boolean {\n        return isDelayedAtHour.contains(hour)\n    }\n}\n","license":"cc0-1.0"},{"repo_name":"thm-projects/arsnova-backend","path":"de.thm.arsnova.service.authservice.model.RoomAccess","copies":"1","size":1671,"content":"package de.thm.arsnova.service.authservice.model\n\nimport java.util.Date\nimport javax.persistence.Entity\nimport javax.persistence.Id\nimport javax.persistence.IdClass\nimport javax.persistence.Temporal\nimport javax.persistence.TemporalType\n\n@Entity\n@IdClass(RoomAccessPK::class)\nclass RoomAccess(\n  @Id\n  var roomId: String? = \"\",\n  @Id\n  var userId: String? = \"\",\n  val rev: String = \"\",\n  var role: String? = \"\",\n  @Temporal(TemporalType.TIMESTAMP)\n  var creationTimestamp: Date? = null,\n  @Temporal(TemporalType.TIMESTAMP)\n  var lastAccess: Date? = null\n) {\n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (javaClass != other?.javaClass) return false\n\n    other as RoomAccess\n\n    if (roomId != other.roomId) return false\n    if (userId != other.userId) return false\n    if (rev != other.rev) return false\n    if (role != other.role) return false\n    if (creationTimestamp != other.creationTimestamp) return false\n    if (lastAccess != other.lastAccess) return false\n\n    return true\n  }\n\n  override fun hashCode(): Int {\n    var result = roomId?.hashCode() ?: 0\n    result = 31 * result + (userId?.hashCode() ?: 0)\n    result = 31 * result + rev.hashCode()\n    result = 31 * result + (role?.hashCode() ?: 0)\n    result = 31 * result + creationTimestamp.hashCode()\n    result = 31 * result + lastAccess.hashCode()\n    return result\n  }\n\n  override fun toString(): String {\n    return \"\"\"\n         RoomAccess(\n           roomId=$roomId,\n           userId=$userId,\n           rev='$rev',\n           role=$role,\n           creationTimestamp=$creationTimestamp,\n           lastAccess=$lastAccess\n         )\n    \"\"\".trimIndent()\n  }\n}\n","license":"gpl-3.0"},{"repo_name":"pflammertsma/cryptogram","path":"com.pixplicity.cryptogram.models.PuzzleState","copies":"1","size":236,"content":"package com.pixplicity.cryptogram.models\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity\ndata class PuzzleState(\n    @PrimaryKey val id: Long,\n    @ColumnInfo var starred: Boolean\n)\n","license":"mit"},{"repo_name":"exponent/exponent","path":"expo.modules.updates.db.entity.UpdateAssetEntity","copies":"2","size":789,"content":"package expo.modules.updates.db.entity\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport java.util.*\n\n@Entity(\n  tableName = \"updates_assets\",\n  primaryKeys = [\"update_id\", \"asset_id\"],\n  foreignKeys = [\n    ForeignKey(\n      entity = UpdateEntity::class,\n      parentColumns = [\"id\"],\n      childColumns = [\"update_id\"],\n      onDelete = ForeignKey.CASCADE\n    ), ForeignKey(\n      entity = AssetEntity::class,\n      parentColumns = [\"id\"],\n      childColumns = [\"asset_id\"],\n      onDelete = ForeignKey.CASCADE\n    )\n  ],\n  indices = [Index(value = [\"asset_id\"])]\n)\nclass UpdateAssetEntity(\n  @field:ColumnInfo(name = \"update_id\") var updateId: UUID,\n  @field:ColumnInfo(name = \"asset_id\") var assetId: Long\n)\n","license":"bsd-3-clause"},{"repo_name":"alexpensato/spring-boot-repositories-samples","path":"net.pensato.data.cassandra.sample.domain.College","copies":"1","size":1050,"content":"/*\n * Copyright 2017 twitter.com/PensatoAlex\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.pensato.data.cassandra.sample.domain\n\nimport org.springframework.cassandra.core.PrimaryKeyType\nimport org.springframework.data.cassandra.mapping.PrimaryKeyColumn\nimport org.springframework.data.cassandra.mapping.Table\n\n@Table\ndata class College(\n        @PrimaryKeyColumn(name = \"name\", ordinal = 1, type = PrimaryKeyType.PARTITIONED)\n        var name: String,\n        var city: String = \"\",\n        var disciplines: Set<String>\n)\n","license":"apache-2.0"},{"repo_name":"marcplouhinec/trust-service-reputation","path":"fr.marcsworld.model.dto.DocumentUrlAndType","copies":"1","size":225,"content":"package fr.marcsworld.model.dto\n\nimport fr.marcsworld.enums.DocumentType\n\n/**\n * URL and type of a document.\n *\n * @author Marc Plouhinec\n */\nclass DocumentUrlAndType(\n        val url: String,\n        val type: DocumentType\n)","license":"mit"},{"repo_name":"vhromada/Catalog","path":"com.github.vhromada.catalog.domain.io.EpisodeStatistics","copies":"1","size":280,"content":"package com.github.vhromada.catalog.domain.io\n\n/**\n * A class represents statistics for episodes.\n *\n * @author Vladimir Hromada\n */\ndata class EpisodeStatistics(\n    /**\n     * Count of episodes\n     */\n    val count: Long,\n\n    /**\n     * Length\n     */\n    val length: Long?\n)\n","license":"mit"},{"repo_name":"Petrulak/kotlin-mvp-clean-architecture","path":"com.petrulak.cleankotlin.data.source.local.model.WeatherEntity","copies":"1","size":271,"content":"package com.petrulak.cleankotlin.data.source.local.model\n\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity\ndata class WeatherEntity(\n    @PrimaryKey()\n    val uid: Long,\n    val name: String,\n    val visibility: Int\n)\n\n","license":"mit"},{"repo_name":"nico-gonzalez/K-Places","path":"com.edreams.android.workshops.kotlin.data.venues.cache.entity.VenueEntity","copies":"1","size":534,"content":"package com.edreams.android.workshops.kotlin.data.venues.cache.entity\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity(tableName = \"venue\")\ndata class VenueEntity(@PrimaryKey val id: String, val name: String, val rating: Float,\n    val photo: String, val formattedPhone: String?, val distance: Int,\n    val formattedAddress: String?, val checkinsCount: Int, val tips: String?,\n    @ColumnInfo(index = true) val query: String? = null)","license":"apache-2.0"},{"repo_name":"stronganizer/stronganizer-android","path":"com.stronganizer.android.data.model.Meeting","copies":"1","size":602,"content":"package com.stronganizer.android.data.model\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.Ignore\nimport android.arch.persistence.room.PrimaryKey\nimport java.util.*\n\n/**\n * Created by valio_stoyanov on 7/30/17.\n */\n\n@Entity(tableName = \"meeting\") data class Meeting(\n        @PrimaryKey val id: Int,\n        @ColumnInfo(name = \"name\") val name: String,\n        @ColumnInfo(name = \"description\") val description: String,\n        @ColumnInfo(name = \"dateTime\") val dateTime: Date,\n        @Ignore val location: Location\n)","license":"apache-2.0"},{"repo_name":"wordpress-mobile/WordPress-FluxC-Android","path":"org.wordpress.android.fluxc.persistence.entity.InboxNoteEntity","copies":"2","size":1034,"content":"package org.wordpress.android.fluxc.persistence.entity\n\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\nimport androidx.room.Relation\n\ndata class InboxNoteWithActions(\n    @Embedded val inboxNote: InboxNoteEntity,\n    @Relation(\n        parentColumn = \"localId\",\n        entityColumn = \"inboxNoteLocalId\"\n    )\n    val noteActions: List<InboxNoteActionEntity>\n)\n\n@Entity(\n    tableName = \"InboxNotes\",\n    indices = [Index(\n        value = [\"remoteId\", \"siteId\"],\n        unique = true\n    )]\n)\ndata class InboxNoteEntity(\n    @PrimaryKey(autoGenerate = true) val localId: Long = 0,\n    val remoteId: Long,\n    val siteId: Long,\n    val name: String,\n    val title: String,\n    val content: String,\n    val dateCreated: String,\n    val status: LocalInboxNoteStatus,\n    val source: String?,\n    val type: String?,\n    val dateReminder: String?\n) {\n    enum class LocalInboxNoteStatus {\n        Unactioned,\n        Actioned,\n        Snoozed,\n        Unknown\n    }\n}\n","license":"gpl-2.0"},{"repo_name":"wordpress-mobile/WordPress-Stores-Android","path":"org.wordpress.android.fluxc.persistence.entity.InboxNoteActionEntity","copies":"2","size":729,"content":"package org.wordpress.android.fluxc.persistence.entity\n\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\n\n@Entity(\n    tableName = \"InboxNoteActions\",\n    foreignKeys = [ForeignKey(\n        entity = InboxNoteEntity::class,\n        parentColumns = [\"localId\"],\n        childColumns = [\"inboxNoteLocalId\"],\n        onDelete = ForeignKey.CASCADE\n    )],\n    primaryKeys = [\"remoteId\", \"inboxNoteLocalId\"]\n)\ndata class InboxNoteActionEntity(\n    val remoteId: Long,\n    val inboxNoteLocalId: Long,\n    val siteId: Long,\n    val name: String,\n    val label: String,\n    val url: String,\n    val query: String? = null,\n    val status: String? = null,\n    val primary: Boolean = false,\n    val actionedText: String? = null\n)\n","license":"gpl-2.0"},{"repo_name":"Suomaa/androidLearning","path":"fi.lasicaine.nutritionalvalue.model.FoodDetails","copies":"1","size":1141,"content":"package fi.lasicaine.nutritionalvalue.model\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport androidx.room.TypeConverters\nimport fi.lasicaine.nutritionalvalue.data.db.NutrientListConverter\nimport fi.lasicaine.nutritionalvalue.data.network.dto.DetailsDto\nimport fi.lasicaine.nutritionalvalue.data.network.dto.NutrientDto\n\n\n@Entity(tableName = \"details\")\n@TypeConverters(NutrientListConverter::class)\ndata class FoodDetails(\n    @PrimaryKey val id: String,\n    val name: String,\n    val nutrients: List<Nutrient>\n) {\n    constructor(dto: DetailsDto) : this(\n        dto.desc.ndbno,\n        dto.desc.name,\n        dto.nutrients.map(::Nutrient)\n    )\n}\n\ndata class Nutrient(\n    val id: Int,\n    val detailsId: String,\n    val name: String,\n    val amountPer100g: Amount,\n    val type: NutrientType\n) {\n    constructor(dto: NutrientDto) : this(\n        dto.nutrient_id!!,\n        dto.detailsId!!,\n        dto.name,\n        Amount(dto.value.toDouble(), WeightUnit.fromString(dto.unit)),\n        NutrientType.valueOf(dto.group.toUpperCase())\n    )\n}\n\nenum class NutrientType {\n    PROXIMATES, MINERALS, VITAMINS, LIPIDS, OTHER\n}","license":"apache-2.0"},{"repo_name":"Ph1b/MaterialAudiobookPlayer","path":"de.ph1b.audiobook.data.Chapter2","copies":"1","size":1849,"content":"package de.ph1b.audiobook.data\n\nimport android.net.Uri\nimport androidx.core.net.toUri\nimport androidx.room.Entity\nimport androidx.room.Ignore\nimport androidx.room.PrimaryKey\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.descriptors.PrimitiveKind\nimport kotlinx.serialization.descriptors.PrimitiveSerialDescriptor\nimport kotlinx.serialization.descriptors.SerialDescriptor\nimport kotlinx.serialization.encoding.Decoder\nimport kotlinx.serialization.encoding.Encoder\nimport java.time.Instant\n\n@Entity(tableName = \"chapters2\")\ndata class Chapter2(\n  @PrimaryKey\n  val id: Id,\n  val name: String,\n  val duration: Long,\n  val fileLastModified: Instant,\n  val markData: List<MarkData>,\n) {\n\n  init {\n    require(name.isNotEmpty())\n  }\n\n  @Ignore\n  val chapterMarks: List<ChapterMark> = if (markData.isEmpty()) {\n    listOf(ChapterMark(name, 0L, duration))\n  } else {\n    val sorted = markData.sorted()\n    sorted.mapIndexed { index, (startMs, name) ->\n      val isFirst = index == 0\n      val isLast = index == sorted.size - 1\n      val start = if (isFirst) 0L else startMs\n      val end = if (isLast) duration else sorted[index + 1].startMs - 1\n      ChapterMark(name = name, startMs = start, endMs = end)\n    }\n  }\n\n  @Serializable(with = ChapterIdSerializer::class)\n  data class Id(val value: String) {\n\n    constructor(uri: Uri) : this(uri.toString())\n  }\n}\n\nobject ChapterIdSerializer : KSerializer<Chapter2.Id> {\n\n  override val descriptor: SerialDescriptor\n    get() = PrimitiveSerialDescriptor(\"chapterId\", PrimitiveKind.STRING)\n\n  override fun deserialize(decoder: Decoder): Chapter2.Id = Chapter2.Id(decoder.decodeString())\n\n  override fun serialize(encoder: Encoder, value: Chapter2.Id) {\n    encoder.encodeString(value.value)\n  }\n}\n\n\nfun Chapter2.Id.toUri(): Uri = value.toUri()\n","license":"lgpl-3.0"},{"repo_name":"kannix68/advent_of_code_2016","path":"Node","copies":"1","size":274,"content":"/**\n * Node class.\n */\n\nopen class Node(val nodeid: String) {\n  fun ident(other: Node): Boolean {\n    println(\"indent? ${this.nodeid} ==? ${other.nodeid}\")\n    return this.nodeid == other.nodeid\n  }\n\n  override open fun toString(): String {\n    return \"node($nodeid)\"\n  }\n}\n","license":"mit"},{"repo_name":"marktony/ZhiHuDaily","path":"com.marktony.zhihudaily.data.GuokrHandpickNewsResult","copies":"1","size":5400,"content":"/*\n * Copyright 2016 lizhaotailang\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.marktony.zhihudaily.data\n\nimport android.annotation.SuppressLint\nimport android.arch.persistence.room.*\nimport android.os.Parcelable\nimport com.google.gson.annotations.Expose\nimport com.google.gson.annotations.SerializedName\nimport com.marktony.zhihudaily.database.converter.GuokrResultTypeConverter\nimport kotlinx.android.parcel.Parcelize\n\n/**\n * Created by lizhaotailang on 2017/6/17.\n *\n * Immutable model class for guokr news result.\n * Entity class for [com.google.gson.Gson] and [android.arch.persistence.room.Room].\n */\n\n@Entity(tableName = \"guokr_handpick_news\")\n@TypeConverters(GuokrResultTypeConverter::class)\n@Parcelize\n@SuppressLint(\"ParcelCreator\")\ndata class GuokrHandpickNewsResult(\n\n        @ColumnInfo(name = \"image\")\n        @Expose\n        @SerializedName(\"image\")\n        val image: String,\n\n        @ColumnInfo(name = \"is_replyable\")\n        @Expose\n        @SerializedName(\"is_replyable\")\n        val isReplyable: Boolean,\n\n        @ColumnInfo(name = \"channels\")\n        @Expose\n        @SerializedName(\"channels\")\n        val channels: List<GuokrHandpickContentChannel>?,\n\n        @ColumnInfo(name = \"channel_keys\")\n        @Expose\n        @SerializedName(\"channel_keys\")\n        val channelKeys: List<String>?,\n\n        @ColumnInfo(name = \"preface\")\n        @Expose\n        @SerializedName(\"preface\")\n        val preface: String,\n\n        @PrimaryKey\n        @ColumnInfo(name = \"id\")\n        @Expose\n        @SerializedName(\"id\")\n        val id: Int = 0,\n\n        @Embedded\n        @Expose\n        @SerializedName(\"subject\")\n        val subject: GuokrHandpickContentChannel,\n\n        @ColumnInfo(name = \"copyright\")\n        @Expose\n        @SerializedName(\"copyright\")\n        val copyright: String,\n\n        @Embedded\n        @Expose\n        @SerializedName(\"author\")\n        val author: GuokrHandpickNewsAuthor,\n\n        @ColumnInfo(name = \"image_description\")\n        @Expose\n        @SerializedName(\"image_description\")\n        val imageDescription: String,\n\n        @ColumnInfo(name = \"is_show_summary\")\n        @Expose\n        @SerializedName(\"is_show_summary\")\n        val isShowSummary: Boolean,\n\n        @ColumnInfo(name = \"minisite_key\")\n        @Expose\n        @SerializedName(\"minisite_key\")\n        val minisiteKey: String,\n\n        @Embedded\n        @Expose\n        @SerializedName(\"image_info\")\n        val imageInfo: GuokrHandpickContentImageInfo,\n\n        @ColumnInfo(name = \"subject_key\")\n        @Expose\n        @SerializedName(\"subject_key\")\n        val subjectKey: String,\n\n        @Embedded\n        @Expose\n        @SerializedName(\"minisite\")\n        val minisite: GuokrHandpickContentMinisite,\n\n        @ColumnInfo(name = \"tags\")\n        @Expose\n        @SerializedName(\"tags\")\n        val tags: List<String>?,\n\n        @ColumnInfo(name = \"date_published\")\n        @Expose\n        @SerializedName(\"date_published\")\n        val datePublished: String,\n\n        @ColumnInfo(name = \"avatar\")\n        @Expose\n        @SerializedName(\"avatar\")\n        val authors: List<GuokrHandpickNewsAuthor>?,\n\n        @ColumnInfo(name = \"replies_count\")\n        @Expose\n        @SerializedName(\"replies_count\")\n        val repliesCount: Int,\n\n        @ColumnInfo(name = \"is_author_external\")\n        @Expose\n        @SerializedName(\"is_author_external\")\n        val isAuthorExternal: Boolean,\n\n        @ColumnInfo(name = \"recommends_count\")\n        @Expose\n        @SerializedName(\"recommends_count\")\n        val recommendsCount: Int,\n\n        @ColumnInfo(name = \"title_hide\")\n        @Expose\n        @SerializedName(\"title_hide\")\n        val titleHide: String,\n\n        @ColumnInfo(name = \"date_modified\")\n        @Expose\n        @SerializedName(\"date_modified\")\n        val dateModified: String,\n\n        @ColumnInfo(name = \"url\")\n        @Expose\n        @SerializedName(\"url\")\n        val url: String,\n\n        @ColumnInfo(name = \"title\")\n        @Expose\n        @SerializedName(\"title\")\n        val title: String,\n\n        @ColumnInfo(name = \"small_image\")\n        @Expose\n        @SerializedName(\"small_image\")\n        val smallImage: String,\n\n        @ColumnInfo(name = \"summary\")\n        @Expose\n        @SerializedName(\"summary\")\n        val summary: String,\n\n        @ColumnInfo(name = \"ukey_author\")\n        @Expose\n        @SerializedName(\"ukey_author\")\n        val ukeyAuthor: String,\n\n        @ColumnInfo(name = \"date_created\")\n        @Expose\n        @SerializedName(\"date_created\")\n        val dateCreated: String,\n\n        @ColumnInfo(name = \"resource_url\")\n        @Expose\n        @SerializedName(\"resource_url\")\n        val resourceUrl: String,\n\n        @ColumnInfo(name = \"favorite\")\n        @Expose\n        var isFavorite: Boolean = false,\n\n        @ColumnInfo(name = \"timestamp\")\n        @Expose\n        var timestamp: Long\n\n) : Parcelable\n","license":"apache-2.0"}]