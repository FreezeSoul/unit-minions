[{"id":0,"identifierName":"com.meiji.daily.data.local.dao.ZhuanlanDao","requiredType":["data class ZhuanlanBean( var followersCount: Int, var creator: Creator, var topics: List<Topic>, var activateState: String, var href: String, var acceptSubmission: Boolean, var firstTime: Boolean, var pendingName: String, var avatar: Avatar, var canManage: Boolean, var description: String, var nameCanEditUntil: Int, var reason: String, var banUntil: Int, @PrimaryKey var slug: String, var name: String, var url: String, var intro: String, var topicsCanEditUntil: Int, var activateAuthorRequested: String, var commentPermission: String, var following: Boolean, var postsCount: Int, var canPost: Boolean, var type: Int = 0 )"],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(zhuanlanBean: ZhuanlanBean): Long","prompt":""},{"id":1,"identifierName":"com.meiji.daily.data.local.dao.ZhuanlanDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(list: MutableList<ZhuanlanBean>)","prompt":""},{"id":2,"identifierName":"com.meiji.daily.data.local.dao.ZhuanlanDao","requiredType":[],"content":"@Query(\"SELECT * FROM zhuanlans WHERE type = :type\")\n    fun query(type: Int): Maybe<MutableList<ZhuanlanBean>>","prompt":""},{"id":3,"identifierName":"com.meiji.daily.data.local.dao.ZhuanlanDao","requiredType":[],"content":"@Query(\"DELETE FROM zhuanlans WHERE slug = :slug\")\n    fun delete(slug: String)","prompt":""},{"id":4,"identifierName":"id.kotlin.sample.room.data.UserDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun createUser(user: User)","prompt":""},{"id":5,"identifierName":"id.kotlin.sample.room.data.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM User\")\n    fun findAll(): List<User>","prompt":""},{"id":6,"identifierName":"id.kotlin.sample.room.data.UserDao","requiredType":[],"content":"@Update\n    fun updateUser(user: User)","prompt":""},{"id":7,"identifierName":"id.kotlin.sample.room.data.UserDao","requiredType":[],"content":"@Delete\n    fun deleteUser(user: User)","prompt":""},{"id":8,"identifierName":"jp.ac.kcg.repository.ItemRepository","requiredType":[],"content":"@Query(\"select i from Item i where i.user = :user and :before <= i.receiptDate and i.receiptDate <= :after\")\n    fun searchItems(@Param(\"user\") user: User, @Param(\"before\") before: LocalDate, @Param(\"after\") after: LocalDate): List<Item>","prompt":""},{"id":9,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract suspend fun insertInternal(chosenPhoto: ChosenPhoto): Long","prompt":""},{"id":10,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Transaction\n    open suspend fun insert(\n            context: Context,\n            chosenPhoto: ChosenPhoto,\n            callingApplication: String?\n    ): Long = if (persistUriAccess(context, chosenPhoto)) {\n        val id = insertInternal(chosenPhoto)\n        if (id != 0L && callingApplication != null) {\n            val metadata = Metadata(ChosenPhoto.getContentUri(id), Date(),\n                    context.getString(R.string.gallery_shared_from, callingApplication))\n            GalleryDatabase.getInstance(context).metadataDao().insert(metadata)\n        }\n        GalleryScanWorker.enqueueInitialScan(context, listOf(id))\n        id\n    } else {\n        0L\n    }","prompt":""},{"id":11,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract suspend fun insertAllInternal(chosenPhoto: List<ChosenPhoto>): List<Long>","prompt":""},{"id":12,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Transaction\n    open suspend fun insertAll(context: Context, uris: Collection<Uri>) {\n        insertAllInternal(uris\n                .map { ChosenPhoto(it) }\n                .filter { persistUriAccess(context, it) }\n        ).run {\n            if (isNotEmpty()) {\n                GalleryScanWorker.enqueueInitialScan(context, this)\n            }\n        }\n    }","prompt":""},{"id":13,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"private fun isTreeUri(possibleTreeUri: Uri): Boolean {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            return DocumentsContract.isTreeUri(possibleTreeUri)\n        } else {\n            try {\n                // Prior to N we can't directly check if the URI is a tree URI, so we have to just try it\n                val treeDocumentId = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                    DocumentsContract.getTreeDocumentId(possibleTreeUri)\n                } else {\n                    // No tree URIs prior to Lollipop\n                    return false\n                }\n                return treeDocumentId?.isNotEmpty() == true\n            } catch (e: IllegalArgumentException) {\n                // Definitely not a tree URI\n                return false\n            }\n        }\n    }","prompt":""},{"id":14,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Throws(IOException::class)\n    private fun writeUriToFile(context: Context, uri: Uri, destFile: File?) {\n        if (destFile == null) {\n            throw IOException(\"Invalid destination for $uri\")\n        }\n        try {\n            context.contentResolver.openInputStream(uri)?.use { input ->\n                FileOutputStream(destFile).use { out ->\n                    input.copyTo(out)\n                }\n            }\n        } catch (e: SecurityException) {\n            throw IOException(\"Unable to read Uri: $uri\", e)\n        } catch (e: UnsupportedOperationException) {\n            throw IOException(\"Unable to read Uri: $uri\", e)\n        }\n    }","prompt":""},{"id":15,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Query(\"SELECT * FROM chosen_photos WHERE _id = :id\")\n    internal abstract fun chosenPhotoBlocking(id: Long): ChosenPhoto?","prompt":""},{"id":16,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Query(\"SELECT * FROM chosen_photos WHERE _id = :id\")\n    abstract suspend fun getChosenPhoto(id: Long): ChosenPhoto?","prompt":""},{"id":17,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Query(\"SELECT * FROM chosen_photos WHERE _id IN (:ids)\")\n    abstract suspend fun getChosenPhotos(ids: List<Long>): List<ChosenPhoto>","prompt":""},{"id":18,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Query(\"DELETE FROM chosen_photos WHERE _id IN (:ids)\")\n    internal abstract suspend fun deleteInternal(ids: List<Long>)","prompt":""},{"id":19,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Transaction\n    open suspend fun delete(context: Context, ids: List<Long>) {\n        deleteBackingPhotos(context, getChosenPhotos(ids))\n        deleteInternal(ids)\n    }","prompt":""},{"id":20,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Query(\"DELETE FROM chosen_photos\")\n    internal abstract suspend fun deleteAllInternal()","prompt":""},{"id":21,"identifierName":"com.google.android.apps.muzei.gallery.ChosenPhotoDao","requiredType":[],"content":"@Transaction\n    open suspend fun deleteAll(context: Context) {\n        deleteBackingPhotos(context, chosenPhotosBlocking)\n        deleteAllInternal()\n    }","prompt":""},{"id":22,"identifierName":"com.jamieadkins.gwent.database.CardDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertCards(items: Collection<CardEntity>)","prompt":""},{"id":23,"identifierName":"com.jamieadkins.gwent.database.CardDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM \" + GwentDatabase.CARD_TABLE)\n    fun getCardsOnce(): Single<List<CardWithArtEntity>>","prompt":""},{"id":24,"identifierName":"com.jamieadkins.gwent.database.CardDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM \" + GwentDatabase.CARD_TABLE)\n    fun getCards(): Flowable<List<CardWithArtEntity>>","prompt":""},{"id":25,"identifierName":"com.jamieadkins.gwent.database.CardDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM \" + GwentDatabase.CARD_TABLE + \" WHERE id=:cardId\")\n    fun getCard(cardId: String): Flowable<CardWithArtEntity>","prompt":""},{"id":26,"identifierName":"com.jamieadkins.gwent.database.CardDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM \" + GwentDatabase.CARD_TABLE + \"  WHERE id IN(:ids)\")\n    fun getCards(ids: List<String>): Flowable<List<CardWithArtEntity>>","prompt":""},{"id":27,"identifierName":"com.jamieadkins.gwent.database.CardDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM \" + GwentDatabase.CARD_TABLE + \" WHERE faction=:faction AND type='Leader'\")\n    fun getLeaders(faction: String): Flowable<List<CardWithArtEntity>>","prompt":""},{"id":28,"identifierName":"com.jamieadkins.gwent.database.CardDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM \" + GwentDatabase.CARD_TABLE + \" WHERE faction IN(:factions) OR secondaryFaction IN(:factions)\")\n    fun getCardsInFactions(factions: List<String>): Flowable<List<CardWithArtEntity>>","prompt":""},{"id":29,"identifierName":"com.jamieadkins.gwent.database.CardDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM \" + GwentDatabase.CARD_TABLE)\n    fun count(): Flowable<Int>","prompt":""},{"id":30,"identifierName":"com.simplemobiletools.notes.pro.interfaces.NotesDao","requiredType":["data class Note( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"title\") var title: String, @ColumnInfo(name = \"value\") var value: String, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"path\") var path: String, @ColumnInfo(name = \"protection_type\") var protectionType: Int, @ColumnInfo(name = \"protection_hash\") var protectionHash: String )"],"content":"@Query(\"SELECT * FROM notes ORDER BY title COLLATE NOCASE ASC\")\n    fun getNotes(): List<Note>","prompt":""},{"id":31,"identifierName":"com.simplemobiletools.notes.pro.interfaces.NotesDao","requiredType":[],"content":"@Query(\"SELECT * FROM notes WHERE id = :id\")\n    fun getNoteWithId(id: Long): Note?","prompt":""},{"id":32,"identifierName":"com.simplemobiletools.notes.pro.interfaces.NotesDao","requiredType":[],"content":"@Query(\"SELECT id FROM notes WHERE path = :path\")\n    fun getNoteIdWithPath(path: String): Long?","prompt":""},{"id":33,"identifierName":"com.simplemobiletools.notes.pro.interfaces.NotesDao","requiredType":[],"content":"@Query(\"SELECT id FROM notes WHERE title = :title COLLATE NOCASE\")\n    fun getNoteIdWithTitle(title: String): Long?","prompt":""},{"id":34,"identifierName":"com.simplemobiletools.notes.pro.interfaces.NotesDao","requiredType":[],"content":"@Query(\"SELECT id FROM notes WHERE title = :title\")\n    fun getNoteIdWithTitleCaseSensitive(title: String): Long?","prompt":""},{"id":35,"identifierName":"com.simplemobiletools.notes.pro.interfaces.NotesDao","requiredType":["data class Note( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"title\") var title: String, @ColumnInfo(name = \"value\") var value: String, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"path\") var path: String, @ColumnInfo(name = \"protection_type\") var protectionType: Int, @ColumnInfo(name = \"protection_hash\") var protectionHash: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertOrUpdate(note: Note): Long","prompt":""},{"id":36,"identifierName":"com.simplemobiletools.notes.pro.interfaces.NotesDao","requiredType":["data class Note( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"title\") var title: String, @ColumnInfo(name = \"value\") var value: String, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"path\") var path: String, @ColumnInfo(name = \"protection_type\") var protectionType: Int, @ColumnInfo(name = \"protection_hash\") var protectionHash: String )"],"content":"@Delete\n    fun deleteNote(note: Note)","prompt":""},{"id":37,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT * FROM character, thumbnail, comic_list, story_list, event_list, series_list\n        WHERE id = :id\n        AND thumbnail.thumbnail_character_id = character.id\n        AND comic_list.comic_list_character_id = character.id\n        AND story_list.story_list_character_id = character.id\n        AND event_list.event_list_character_id = character.id\n        AND series_list.series_list_character_id = character.id\n        LIMIT 1\n        \"\"\"\n    )\n    abstract fun findById(id: Long): Maybe<CharacterRelations>","prompt":""},{"id":38,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT * FROM character, thumbnail, comic_list, story_list, event_list, series_list\n        WHERE\n        thumbnail.thumbnail_character_id = character.id\n        AND comic_list.comic_list_character_id = character.id\n        AND story_list.story_list_character_id = character.id\n        AND event_list.event_list_character_id = character.id\n        AND series_list.series_list_character_id = character.id\n        \"\"\"\n    )\n    abstract fun all(): Single<List<CharacterRelations>>","prompt":""},{"id":39,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract fun insert(characterEntity: CharacterEntity): Long","prompt":""},{"id":40,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract fun insert(urlEntity: UrlEntity): Long","prompt":""},{"id":41,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract fun insert(thumbnailEntity: ThumbnailEntity): Long","prompt":""},{"id":42,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract fun insert(comicListEntity: ComicListEntity): Long","prompt":""},{"id":43,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract fun insert(storyListEntity: StoryListEntity): Long","prompt":""},{"id":44,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract fun insert(eventListEntity: EventListEntity): Long","prompt":""},{"id":45,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract fun insert(seriesListEntity: SeriesListEntity): Long","prompt":""},{"id":46,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract fun insert(summaryEntity: SummaryEntity): Long","prompt":""},{"id":47,"identifierName":"com.github.felipehjcosta.marvelapp.cache.data.CharactersDao","requiredType":[],"content":"fun insert(characterRelations: CharacterRelations) {\n        val characterId = insert(characterRelations.character)\n        characterRelations.urls.forEach {\n            it.characterId = characterRelations.character.id\n            it.id = insert(it)\n        }\n        characterRelations.thumbnail.characterId = characterId\n        characterRelations.thumbnail.id = insert(characterRelations.thumbnail)\n        characterRelations.comicListRelations.apply {\n            comicList.characterId = characterId\n            comicList.id = insert(comicList)\n            comicListSummary.forEach {\n                it.comicListId = comicList.id\n                it.id = insert(it)\n            }\n        }\n\n        characterRelations.storyListRelations.apply {\n            storyListEntity.characterId = characterId\n            storyListEntity.id = insert(storyListEntity)\n            storyListSummary.forEach {\n                it.storyListId = storyListEntity.id\n                it.id = insert(it)\n            }\n        }\n\n        characterRelations.eventListRelations.apply {\n            eventListEntity.characterId = characterId\n            eventListEntity.id = insert(eventListEntity)\n            eventListSummary.forEach {\n                it.eventListId = eventListEntity.id\n                it.id = insert(it)\n            }\n        }\n\n        characterRelations.seriesListRelations.apply {\n            seriesListEntity.characterId = characterId\n            seriesListEntity.id = insert(seriesListEntity)\n            seriesListSummary.forEach {\n                it.seriesListId = seriesListEntity.id\n                it.id = insert(it)\n            }\n        }\n\n    }","prompt":""},{"id":48,"identifierName":"org.wordpress.android.fluxc.persistence.bloggingprompts.BloggingPromptsDao","requiredType":[],"content":"@Query(\"SELECT * FROM BloggingPrompts WHERE id = :promptId AND siteLocalId = :siteLocalId\")\n    abstract fun getPrompt(siteLocalId: Int, promptId: Int): Flow<List<BloggingPromptEntity>>","prompt":""},{"id":49,"identifierName":"org.wordpress.android.fluxc.persistence.bloggingprompts.BloggingPromptsDao","requiredType":[],"content":"@Query(\"SELECT * FROM BloggingPrompts WHERE date = :date AND siteLocalId = :siteLocalId\")\n    @TypeConverters(BloggingPromptDateConverter::class)\n    abstract fun getPromptForDate(siteLocalId: Int, date: Date): Flow<List<BloggingPromptEntity>>","prompt":""},{"id":50,"identifierName":"org.wordpress.android.fluxc.persistence.bloggingprompts.BloggingPromptsDao","requiredType":[],"content":"@Query(\"SELECT * FROM BloggingPrompts WHERE siteLocalId = :siteLocalId\")\n    abstract fun getAllPrompts(siteLocalId: Int): Flow<List<BloggingPromptEntity>>","prompt":""},{"id":51,"identifierName":"org.wordpress.android.fluxc.persistence.bloggingprompts.BloggingPromptsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insert(prompts: List<BloggingPromptEntity>)","prompt":""},{"id":52,"identifierName":"org.wordpress.android.fluxc.persistence.bloggingprompts.BloggingPromptsDao","requiredType":[],"content":"suspend fun insertForSite(siteLocalId: Int, prompts: List<BloggingPromptModel>) {\n        insert(prompts.map { BloggingPromptEntity.from(siteLocalId, it) })\n    }","prompt":""},{"id":53,"identifierName":"org.wordpress.android.fluxc.persistence.bloggingprompts.BloggingPromptsDao","requiredType":[],"content":"@Query(\"DELETE FROM BloggingPrompts\")\n    abstract fun clear()","prompt":""},{"id":54,"identifierName":"data.tinder.recommendation.RecommendationUserPhotoDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertPhoto(photo: RecommendationUserPhotoEntity)","prompt":""},{"id":55,"identifierName":"data.tinder.recommendation.RecommendationUserPhotoDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserPhotoEntity WHERE id=:id\")\n  @Transaction\n  fun selectPhotoById(id: String): List<RecommendationUserPhotoWithRelatives>","prompt":""},{"id":56,"identifierName":"com.cn29.aac.datasource.auth.db.AuthDao","requiredType":["data class LoginBean(@JvmField @SerializedName(\"email\") var email: String, @SerializedName(\"authType\") var authType: String, @JvmField @SerializedName(\"isLogin\") var isLogin: Int = 0, @JvmField var password: String? = null )"],"content":"@Query(\"SELECT * FROM Auth Where email = :email limit 1\")\n    fun getLogin(email: String?): LiveData<LoginBean>","prompt":""},{"id":57,"identifierName":"com.cn29.aac.datasource.auth.db.AuthDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(loginBean: LoginBean?): Long","prompt":""},{"id":58,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Query(\"DELETE FROM feed\")\n    abstract fun deleteAll(): Int","prompt":""},{"id":59,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        DELETE FROM feed WHERE\n\n        feed.stream_id IN (\n            SELECT s.uid FROM streams s\n\n            INNER JOIN feed f\n            ON s.uid = f.stream_id\n\n            WHERE s.upload_date < :offsetDateTime\n        )\n        \"\"\"\n    )\n    abstract fun unlinkStreamsOlderThan(offsetDateTime: OffsetDateTime)","prompt":""},{"id":60,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        DELETE FROM feed\n        \n        WHERE feed.subscription_id = :subscriptionId\n\n        AND feed.stream_id IN (\n            SELECT s.uid FROM streams s\n\n            INNER JOIN feed f\n            ON s.uid = f.stream_id\n\n            WHERE s.stream_type = \"LIVE_STREAM\" OR s.stream_type = \"AUDIO_LIVE_STREAM\"\n        )\n        \"\"\"\n    )\n    abstract fun unlinkOldLivestreams(subscriptionId: Long)","prompt":""},{"id":61,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    abstract fun insert(feedEntity: FeedEntity)","prompt":""},{"id":62,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    abstract fun insertAll(entities: List<FeedEntity>): List<Long>","prompt":""},{"id":63,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":["data class FeedLastUpdatedEntity( @PrimaryKey @ColumnInfo(name = SUBSCRIPTION_ID) var subscriptionId: Long, @ColumnInfo(name = LAST_UPDATED) var lastUpdated: OffsetDateTime? = null )"],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    internal abstract fun insertLastUpdated(lastUpdatedEntity: FeedLastUpdatedEntity): Long","prompt":""},{"id":64,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":["data class FeedLastUpdatedEntity( @PrimaryKey @ColumnInfo(name = SUBSCRIPTION_ID) var subscriptionId: Long, @ColumnInfo(name = LAST_UPDATED) var lastUpdated: OffsetDateTime? = null )"],"content":"@Update(onConflict = OnConflictStrategy.IGNORE)\n    internal abstract fun updateLastUpdated(lastUpdatedEntity: FeedLastUpdatedEntity)","prompt":""},{"id":65,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":["data class FeedLastUpdatedEntity( @PrimaryKey @ColumnInfo(name = SUBSCRIPTION_ID) var subscriptionId: Long, @ColumnInfo(name = LAST_UPDATED) var lastUpdated: OffsetDateTime? = null )"],"content":"@Transaction\n    open fun setLastUpdatedForSubscription(lastUpdatedEntity: FeedLastUpdatedEntity) {\n        val id = insertLastUpdated(lastUpdatedEntity)\n\n        if (id == -1L) {\n            updateLastUpdated(lastUpdatedEntity)\n        }\n    }","prompt":""},{"id":66,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT MIN(lu.last_updated) FROM feed_last_updated lu\n\n        INNER JOIN feed_group_subscription_join fgs\n        ON fgs.subscription_id = lu.subscription_id AND fgs.group_id = :groupId\n        \"\"\"\n    )\n    abstract fun oldestSubscriptionUpdate(groupId: Long): Flowable<List<OffsetDateTime>>","prompt":""},{"id":67,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Query(\"SELECT MIN(last_updated) FROM feed_last_updated\")\n    abstract fun oldestSubscriptionUpdateFromAll(): Flowable<List<OffsetDateTime>>","prompt":""},{"id":68,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM feed_last_updated WHERE last_updated IS NULL\")\n    abstract fun notLoadedCount(): Flowable<Long>","prompt":""},{"id":69,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT COUNT(*) FROM subscriptions s\n        \n        INNER JOIN feed_group_subscription_join fgs\n        ON s.uid = fgs.subscription_id AND fgs.group_id = :groupId\n\n        LEFT JOIN feed_last_updated lu\n        ON s.uid = lu.subscription_id \n\n        WHERE lu.last_updated IS NULL\n        \"\"\"\n    )\n    abstract fun notLoadedCountForGroup(groupId: Long): Flowable<Long>","prompt":""},{"id":70,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT s.* FROM subscriptions s\n\n        LEFT JOIN feed_last_updated lu\n        ON s.uid = lu.subscription_id \n\n        WHERE lu.last_updated IS NULL OR lu.last_updated < :outdatedThreshold\n        \"\"\"\n    )\n    abstract fun getAllOutdated(outdatedThreshold: OffsetDateTime): Flowable<List<SubscriptionEntity>>","prompt":""},{"id":71,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT s.* FROM subscriptions s\n\n        INNER JOIN feed_group_subscription_join fgs\n        ON s.uid = fgs.subscription_id AND fgs.group_id = :groupId\n\n        LEFT JOIN feed_last_updated lu\n        ON s.uid = lu.subscription_id\n\n        WHERE lu.last_updated IS NULL OR lu.last_updated < :outdatedThreshold\n        \"\"\"\n    )\n    abstract fun getAllOutdatedForGroup(groupId: Long, outdatedThreshold: OffsetDateTime): Flowable<List<SubscriptionEntity>>","prompt":""},{"id":72,"identifierName":"org.schabi.newpipe.database.feed.dao.FeedDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT s.* FROM subscriptions s\n\n        LEFT JOIN feed_last_updated lu\n        ON s.uid = lu.subscription_id\n\n        WHERE \n            (lu.last_updated IS NULL OR lu.last_updated < :outdatedThreshold)\n            AND s.notification_mode = :notificationMode\n        \"\"\"\n    )\n    abstract fun getOutdatedWithNotificationMode(\n        outdatedThreshold: OffsetDateTime,\n        @NotificationMode notificationMode: Int\n    ): Flowable<List<SubscriptionEntity>>","prompt":""},{"id":73,"identifierName":"info.nightscout.androidaps.diaconn.database.DiaconnHistoryRecordDao","requiredType":[],"content":"@Query(\"SELECT * from $TABLE_DIACONN_HISTORY WHERE timestamp >= :timestamp AND code = :type\")\n    abstract fun allFromByType(timestamp: Long, type: Byte): Single<List<DiaconnHistoryRecord>>","prompt":""},{"id":74,"identifierName":"info.nightscout.androidaps.diaconn.database.DiaconnHistoryRecordDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun createOrUpdate(diaconnHistoryRecord: DiaconnHistoryRecord)","prompt":""},{"id":75,"identifierName":"info.nightscout.androidaps.diaconn.database.DiaconnHistoryRecordDao","requiredType":[],"content":"@Query( \"SELECT * from $TABLE_DIACONN_HISTORY WHERE pumpUid = :pumpUid ORDER BY timestamp DESC LIMIT 1\" )\n    abstract fun getLastRecord(pumpUid: String): DiaconnHistoryRecord?","prompt":""},{"id":76,"identifierName":"com.orgzly.android.db.dao.BookSyncDao","requiredType":[],"content":"@Query(\"SELECT * FROM book_syncs WHERE book_id = :bookId\")\n    fun get(bookId: Long): BookSync?","prompt":""},{"id":77,"identifierName":"com.orgzly.android.db.dao.BookSyncDao","requiredType":[],"content":"@Transaction\n    fun upsert(bookId: Long, versionedRookId: Long) {\n        val sync = get(bookId)\n\n        if (sync == null) {\n            insert(BookSync(bookId, versionedRookId))\n        } else {\n            update(sync.copy(versionedRookId = versionedRookId))\n        }\n    }","prompt":""},{"id":78,"identifierName":"com.google.samples.apps.iosched.shared.data.db.SpeakerFtsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(speakers: List<SpeakerFtsEntity>)","prompt":""},{"id":79,"identifierName":"com.google.samples.apps.iosched.shared.data.db.SpeakerFtsDao","requiredType":[],"content":"@Query(\"SELECT speakerId FROM speakersFts WHERE speakersFts MATCH :query\")\n    fun searchAllSpeakers(query: String): List<String>","prompt":""},{"id":80,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationRoleActionDao","requiredType":[],"content":"@Query(\"SELECT * FROM ConversationRoleAction\")\n    suspend fun allConversationRoleActions(): List<ConversationRoleActionEntity>","prompt":""},{"id":81,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationRoleActionDao","requiredType":[],"content":"@Query(\"SELECT * FROM ConversationRoleAction ORDER BY conv_id LIMIT :batchSize OFFSET :start\")\n    override suspend fun nextBatch(start: Int, batchSize: Int): List<ConversationRoleActionEntity>?","prompt":""},{"id":82,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationRoleActionDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM ConversationRoleAction\")\n    override suspend fun count(): Int","prompt":""},{"id":83,"identifierName":"rynkbit.tk.coffeelist.db.dao.InvoiceDao","requiredType":[],"content":"@Query(\"select * from invoice\")\n    override fun findAll(): Flowable<List<DatabaseInvoice>>","prompt":""},{"id":84,"identifierName":"rynkbit.tk.coffeelist.db.dao.InvoiceDao","requiredType":[],"content":"@Query(\"select * from invoice where id = :invoiceId\")\n    fun findById(invoiceId: Int): Single<DatabaseInvoice>","prompt":""},{"id":85,"identifierName":"rynkbit.tk.coffeelist.db.dao.InvoiceDao","requiredType":[],"content":"@Query(\"select * from invoice where customer_id = :customerId\")\n    fun findByCustomer(customerId: Int): Flowable<List<DatabaseInvoice>>","prompt":""},{"id":86,"identifierName":"rynkbit.tk.coffeelist.db.dao.InvoiceDao","requiredType":["data class InvoiceState(@StringRes val nameId: Int)"],"content":"@Query(\"select * from invoice where customer_id = :customerId and state = :state\")\n    fun findByCustomerAndState(customerId: Int, state: InvoiceState): Flowable<List<DatabaseInvoice>>","prompt":""},{"id":87,"identifierName":"rynkbit.tk.coffeelist.db.dao.InvoiceDao","requiredType":[],"content":"@Query(\"delete from invoice where customer_id = :customerId\")\n    fun deleteByCustomer(customerId: Int): Single<Unit>","prompt":""},{"id":88,"identifierName":"rynkbit.tk.coffeelist.db.dao.InvoiceDao","requiredType":[],"content":"@Query(\"delete from invoice\")\n    fun deleteAll(): Single<Unit>","prompt":""},{"id":89,"identifierName":"com.android.example.sleepsamplekotlin.data.db.SleepSegmentEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM sleep_segment_events_table ORDER BY start_time_millis DESC\")\n    fun getAll(): Flow<List<SleepSegmentEventEntity>>","prompt":""},{"id":90,"identifierName":"com.android.example.sleepsamplekotlin.data.db.SleepSegmentEventDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(sleepSegmentEventEntity: SleepSegmentEventEntity)","prompt":""},{"id":91,"identifierName":"com.android.example.sleepsamplekotlin.data.db.SleepSegmentEventDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertAll(sleepSegmentEventEntities: List<SleepSegmentEventEntity>)","prompt":""},{"id":92,"identifierName":"com.android.example.sleepsamplekotlin.data.db.SleepSegmentEventDao","requiredType":[],"content":"@Delete\n    suspend fun delete(sleepSegmentEventEntity: SleepSegmentEventEntity)","prompt":""},{"id":93,"identifierName":"com.android.example.sleepsamplekotlin.data.db.SleepSegmentEventDao","requiredType":[],"content":"@Query(\"DELETE FROM sleep_segment_events_table\")\n    suspend fun deleteAll()","prompt":""},{"id":94,"identifierName":"org.fossasia.openevent.general.speakers.SpeakerDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertSpeakers(speakers: List<Speaker>)","prompt":""},{"id":95,"identifierName":"org.fossasia.openevent.general.speakers.SpeakerDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertSpeaker(speaker: Speaker)","prompt":""},{"id":96,"identifierName":"org.fossasia.openevent.general.speakers.SpeakerDao","requiredType":[],"content":"@Query(\"SELECT * from Speaker WHERE id = :id\")\n    fun getSpeaker(id: Long): Flowable<Speaker>","prompt":""},{"id":97,"identifierName":"org.fossasia.openevent.general.speakers.SpeakerDao","requiredType":[],"content":"@Query(\"SELECT * FROM speaker WHERE email = :email AND event = :eventId\")\n    fun getSpeakerByEmailAndEvent(email: String, eventId: Long): Single<Speaker>","prompt":""},{"id":98,"identifierName":"org.tasks.data.TagDao","requiredType":[],"content":"@Query(\"UPDATE tags SET name = :name WHERE tag_uid = :tagUid\")\n    abstract suspend fun rename(tagUid: String, name: String)","prompt":""},{"id":99,"identifierName":"org.tasks.data.TagDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insert(tag: Tag)","prompt":""},{"id":100,"identifierName":"org.tasks.data.TagDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insert(tags: Iterable<Tag>)","prompt":""},{"id":101,"identifierName":"org.tasks.data.TagDao","requiredType":[],"content":"@Query(\"DELETE FROM tags WHERE task = :taskId AND tag_uid in (:tagUids)\")\n    internal abstract suspend fun deleteTags(taskId: Long, tagUids: List<String>)","prompt":""},{"id":102,"identifierName":"org.tasks.data.TagDao","requiredType":[],"content":"@Query(\"SELECT * FROM tags WHERE tag_uid = :tagUid\")\n    abstract suspend fun getByTagUid(tagUid: String): List<Tag>","prompt":""},{"id":103,"identifierName":"org.tasks.data.TagDao","requiredType":[],"content":"@Query(\"SELECT * FROM tags WHERE task = :taskId\")\n    abstract suspend fun getTagsForTask(taskId: Long): List<Tag>","prompt":""},{"id":104,"identifierName":"org.tasks.data.TagDao","requiredType":[],"content":"@Query(\"SELECT * FROM tags WHERE task = :taskId AND tag_uid = :tagUid\")\n    abstract suspend fun getTagByTaskAndTagUid(taskId: Long, tagUid: String): Tag?","prompt":""},{"id":105,"identifierName":"org.tasks.data.TagDao","requiredType":[],"content":"@Delete\n    abstract suspend fun delete(tags: List<Tag>)","prompt":""},{"id":106,"identifierName":"org.tasks.data.TagDao","requiredType":["data class Tasknull"],"content":"@Transaction\n    open suspend fun applyTags(task: Task, tagDataDao: TagDataDao, current: List<TagData>) {\n        val taskId = task.id\n        val existing = HashSet(tagDataDao.getTagDataForTask(taskId))\n        val selected = HashSet<TagData>(current)\n        val added = selected subtract existing\n        val removed = existing subtract selected\n        deleteTags(taskId, removed.map { td -> td.remoteId!! })\n        insert(task, added)\n    }","prompt":""},{"id":107,"identifierName":"org.tasks.data.TagDao","requiredType":["data class Tasknull"],"content":"suspend fun insert(task: Task, tags: Collection<TagData>) {\n        if (!tags.isEmpty()) {\n            insert(tags.map { Tag(task, it) })\n        }\n    }","prompt":""},{"id":108,"identifierName":"org.istbd.IST_Syllabus.db.CourseDao","requiredType":[],"content":"@Update\n    abstract suspend fun update(courseEntity: CourseEntity)","prompt":""},{"id":109,"identifierName":"org.istbd.IST_Syllabus.db.CourseDao","requiredType":[],"content":"@Query(\"SELECT * FROM course\")\n    abstract suspend fun getAll(): List<CourseEntity>","prompt":""},{"id":110,"identifierName":"org.istbd.IST_Syllabus.db.CourseDao","requiredType":[],"content":"@Query(\"SELECT * FROM course WHERE department = :department order by major\")\n    abstract suspend fun getAllByDepartment(department: String): List<CourseEntity>","prompt":""},{"id":111,"identifierName":"de.tutao.tutanota.data.KeyValueDao","requiredType":[],"content":"@Query(\"SELECT value FROM KeyValue WHERE key = :key LIMIT 1\")\n\tfun getString(key: String): String?","prompt":""},{"id":112,"identifierName":"de.tutao.tutanota.data.KeyValueDao","requiredType":[],"content":"@Query(\"INSERT OR REPLACE INTO KeyValue (key, value) VALUES (:key, :value)\")\n\tfun putString(key: String, value: String?)","prompt":""},{"id":113,"identifierName":"de.tutao.tutanota.data.KeyValueDao","requiredType":[],"content":"@Query(\"SELECT CAST(value as INT) FROM KeyValue WHERE key = :key LIMIT 1\")\n\tfun getLong(key: String): Long","prompt":""},{"id":114,"identifierName":"de.tutao.tutanota.data.KeyValueDao","requiredType":[],"content":"@Query(\"INSERT OR REPLACE INTO KeyValue (key, value) VALUES (:key, :value)\")\n\tfun putLong(key: String, value: Long)","prompt":""},{"id":115,"identifierName":"com.android.tv.reference.shared.watchprogress.WatchProgressDao","requiredType":[],"content":"@Query(\"SELECT * FROM watch_progress WHERE video_id = :videoId LIMIT 1\")\n    fun getWatchProgressByVideoId(videoId: String): LiveData<WatchProgress>","prompt":""},{"id":116,"identifierName":"com.android.tv.reference.shared.watchprogress.WatchProgressDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(watchProgress: WatchProgress)","prompt":""},{"id":117,"identifierName":"com.android.tv.reference.shared.watchprogress.WatchProgressDao","requiredType":[],"content":"@Query(\"DELETE FROM watch_progress\")\n    suspend fun deleteAll()","prompt":""},{"id":118,"identifierName":"com.nobrain.android.lottiefiles.repository.local.dao.LottieDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(vararg item: Lottie)","prompt":""},{"id":119,"identifierName":"com.nobrain.android.lottiefiles.repository.local.dao.LottieDao","requiredType":[],"content":"@Delete\n    fun delete(vararg item: Lottie)","prompt":""},{"id":120,"identifierName":"com.nobrain.android.lottiefiles.repository.local.dao.LottieDao","requiredType":[],"content":"@Query(\"SELECT * FROM lottie\")\n    fun getAll(): LiveData<List<Lottie>>","prompt":""},{"id":121,"identifierName":"com.nobrain.android.lottiefiles.repository.local.dao.LottieDao","requiredType":[],"content":"@Query(\"SELECT * FROM lottie ORDER BY id desc\")\n    fun getAllOnRx(): Flowable<List<Lottie>>","prompt":""},{"id":122,"identifierName":"com.nobrain.android.lottiefiles.repository.local.dao.LottieDao","requiredType":[],"content":"@Query(\"SELECT * FROM lottie WHERE starred = 1\")\n    fun getStarred(): List<Lottie>","prompt":""},{"id":123,"identifierName":"com.nobrain.android.lottiefiles.repository.local.dao.LottieDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM lottie WHERE id = :id\")\n    fun getCount(id:String) : Int","prompt":""},{"id":124,"identifierName":"com.nobrain.android.lottiefiles.repository.local.dao.LottieDao","requiredType":[],"content":"@Query(\"SELECT * FROM lottie WHERE title LIKE :keyword\")\n    fun query(keyword: String) : Flowable<List<Lottie>>","prompt":""},{"id":125,"identifierName":"org.stepik.android.cache.review_instruction.dao.ReviewInstructionDao","requiredType":["data class ReviewInstruction( @PrimaryKey @SerializedName(\"id\") override val id: Long, @SerializedName(\"step\") val step: Long, @SerializedName(\"min_reviews\") val minReviews: Int, @SerializedName(\"strategy_type\") val strategyType: ReviewStrategyType, @SerializedName(\"rubrics\") val rubrics: List<Long>, @SerializedName(\"is_frozen\") val isFrozen: Boolean, @SerializedName(\"text\") val text: String )"],"content":"@Query(\"SELECT * FROM ReviewInstruction WHERE id = :id\")\n    fun getReviewInstruction(id: Long): Maybe<ReviewInstruction>","prompt":""},{"id":126,"identifierName":"org.stepik.android.cache.review_instruction.dao.ReviewInstructionDao","requiredType":["data class ReviewInstruction( @PrimaryKey @SerializedName(\"id\") override val id: Long, @SerializedName(\"step\") val step: Long, @SerializedName(\"min_reviews\") val minReviews: Int, @SerializedName(\"strategy_type\") val strategyType: ReviewStrategyType, @SerializedName(\"rubrics\") val rubrics: List<Long>, @SerializedName(\"is_frozen\") val isFrozen: Boolean, @SerializedName(\"text\") val text: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun saveReviewInstruction(item: ReviewInstruction): Completable","prompt":""},{"id":127,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE id = :id\")\n    override fun findById(id: Long): ExtendedBolus?","prompt":""},{"id":128,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_EXTENDED_BOLUSES\")\n    override fun deleteAllEntries()","prompt":""},{"id":129,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT id FROM $TABLE_EXTENDED_BOLUSES ORDER BY id DESC limit 1\")\n    fun getLastId(): Maybe<Long>","prompt":""},{"id":130,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE timestamp = :timestamp AND referenceId IS NULL\")\n    fun findByTimestamp(timestamp: Long): ExtendedBolus?","prompt":""},{"id":131,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE nightscoutId = :nsId AND referenceId IS NULL\")\n    fun findByNSId(nsId: String): ExtendedBolus?","prompt":""},{"id":132,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE pumpId = :pumpId AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL\")\n    fun findByPumpIds(pumpId: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): ExtendedBolus?","prompt":""},{"id":133,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE endId = :endPumpId AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL\")\n    fun findByPumpEndIds(endPumpId: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): ExtendedBolus?","prompt":""},{"id":134,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":["data class ExtendedBolus( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), override var duration: Long, var amount: Double, var isEmulatingTempBasal: Boolean = false )"],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE timestamp <= :timestamp AND (timestamp + duration) > :timestamp AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL AND isValid = 1 ORDER BY timestamp DESC LIMIT 1\")\n    fun getExtendedBolusActiveAt(timestamp: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): Maybe<ExtendedBolus>","prompt":""},{"id":135,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":["data class ExtendedBolus( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), override var duration: Long, var amount: Double, var isEmulatingTempBasal: Boolean = false )"],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE timestamp <= :timestamp AND (timestamp + duration) > :timestamp AND referenceId IS NULL AND isValid = 1 ORDER BY timestamp DESC LIMIT 1\")\n    fun getExtendedBolusActiveAt(timestamp: Long): Maybe<ExtendedBolus>","prompt":""},{"id":136,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE timestamp >= :timestamp AND isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getExtendedBolusDataFromTime(timestamp: Long): Single<List<ExtendedBolus>>","prompt":""},{"id":137,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE timestamp >= :from AND timestamp <= :to AND isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getExtendedBolusDataFromTimeToTime(from: Long, to: Long): Single<List<ExtendedBolus>>","prompt":""},{"id":138,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE timestamp >= :timestamp AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getExtendedBolusDataIncludingInvalidFromTime(timestamp: Long): Single<List<ExtendedBolus>>","prompt":""},{"id":139,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE timestamp >= :from AND timestamp <= :to AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getExtendedBolusDataIncludingInvalidFromTimeToTime(from: Long, to: Long): Single<List<ExtendedBolus>>","prompt":""},{"id":140,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"// This query will be used with v3 to get all changed records\n    @Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE id > :id AND referenceId IS NULL OR id IN (SELECT DISTINCT referenceId FROM $TABLE_EXTENDED_BOLUSES WHERE id > :id) ORDER BY id ASC\")\n    fun getModifiedFrom(id: Long): Single<List<ExtendedBolus>>","prompt":""},{"id":141,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":["data class ExtendedBolus( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), override var duration: Long, var amount: Double, var isEmulatingTempBasal: Boolean = false )"],"content":"// for WS we need 1 record only\n    @Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE id > :id ORDER BY id ASC limit 1\")\n    fun getNextModifiedOrNewAfter(id: Long): Maybe<ExtendedBolus>","prompt":""},{"id":142,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":["data class ExtendedBolus( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), override var duration: Long, var amount: Double, var isEmulatingTempBasal: Boolean = false )"],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE id = :referenceId\")\n    fun getCurrentFromHistoric(referenceId: Long): Maybe<ExtendedBolus>","prompt":""},{"id":143,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE isValid = 1 AND referenceId IS NULL ORDER BY id ASC LIMIT 1\")\n    fun getOldestRecord(): ExtendedBolus?","prompt":""},{"id":144,"identifierName":"info.nightscout.androidaps.database.daos.ExtendedBolusDao","requiredType":["data class ExtendedBolus( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), override var duration: Long, var amount: Double, var isEmulatingTempBasal: Boolean = false )"],"content":"@Query(\"SELECT * FROM $TABLE_EXTENDED_BOLUSES WHERE dateCreated > :since AND dateCreated <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<ExtendedBolus>","prompt":""},{"id":145,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDataDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertTypeData(typeDataList: List<TypeData>)","prompt":""},{"id":146,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDataDao","requiredType":[],"content":"@Query(\"SELECT * FROM type_data_table WHERE category=:category AND type=:type ORDER BY published_date DESC \")\n    fun getTypeData(category: String, type: String): DataSource.Factory<Int, TypeData>","prompt":""},{"id":147,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDataDao","requiredType":["data class TypeDatanull","data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updateTypeData(vararg typeData: TypeData)","prompt":""},{"id":148,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDataDao","requiredType":[],"content":"@Query(\"SELECT COUNT(id) FROM type_data_table WHERE category=:category AND type=:type\")\n    fun getCount(category: String, type: String): Int","prompt":""},{"id":149,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDataDao","requiredType":["data class TypeDatanull","data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Delete\n    fun deleteTypeData(vararg typeData: TypeData)","prompt":""},{"id":150,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDataDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"DELETE FROM type_data_table WHERE category=:category AND type=:type\")\n    fun deleteTypeData(category: String, type: String)","prompt":""},{"id":151,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDataDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"DELETE FROM type_data_table\")\n    fun deleteAllData()","prompt":""},{"id":152,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":["data class ExpenseEntity(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_expense_id\") val id: Long?, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"amount\") val amount: Long, @ColumnInfo(name = \"date\") val date: LocalDate, @ColumnInfo(name = \"checked\") val checked: Boolean, @ColumnInfo(name = \"monthly_id\") val associatedRecurringExpenseId: Long?)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun persistExpense(expenseEntity: ExpenseEntity): Long","prompt":""},{"id":153,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM expense WHERE date = :dayDate LIMIT 1\")\n    suspend fun hasExpenseForDay(dayDate: LocalDate): Int","prompt":""},{"id":154,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":["data class ExpenseEntity(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_expense_id\") val id: Long?, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"amount\") val amount: Long, @ColumnInfo(name = \"date\") val date: LocalDate, @ColumnInfo(name = \"checked\") val checked: Boolean, @ColumnInfo(name = \"monthly_id\") val associatedRecurringExpenseId: Long?)"],"content":"@Query(\"SELECT * FROM expense WHERE date = :dayDate\")\n    suspend fun getExpensesForDay(dayDate: LocalDate): List<ExpenseEntity>","prompt":""},{"id":155,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":["data class ExpenseEntity(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_expense_id\") val id: Long?, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"amount\") val amount: Long, @ColumnInfo(name = \"date\") val date: LocalDate, @ColumnInfo(name = \"checked\") val checked: Boolean, @ColumnInfo(name = \"monthly_id\") val associatedRecurringExpenseId: Long?)"],"content":"@Query(\"SELECT * FROM expense WHERE date >= :monthStartDate AND date <= :monthEndDate\")\n    suspend fun getExpensesForMonth(monthStartDate: LocalDate, monthEndDate: LocalDate): List<ExpenseEntity>","prompt":""},{"id":156,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":[],"content":"@Query(\"SELECT SUM(amount) FROM expense WHERE date <= :dayDate\")\n    suspend fun getBalanceForDay(dayDate: LocalDate): Long?","prompt":""},{"id":157,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":[],"content":"@Query(\"SELECT SUM(amount) FROM expense WHERE date <= :dayDate AND checked\")\n    suspend fun getCheckedBalanceForDay(dayDate: LocalDate): Long?","prompt":""},{"id":158,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":["data class RecurringExpenseEntity(@PrimaryKey @ColumnInfo(name = \"_expense_id\") val id: Long?, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"amount\") val originalAmount: Long, @ColumnInfo(name = \"recurringDate\") val recurringDate: LocalDate, @ColumnInfo(name = \"modified\") val modified: Boolean, @ColumnInfo(name = \"type\") val type: String)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun persistRecurringExpense(recurringExpenseEntity: RecurringExpenseEntity): Long","prompt":""},{"id":159,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":["data class RecurringExpenseEntity(@PrimaryKey @ColumnInfo(name = \"_expense_id\") val id: Long?, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"amount\") val originalAmount: Long, @ColumnInfo(name = \"recurringDate\") val recurringDate: LocalDate, @ColumnInfo(name = \"modified\") val modified: Boolean, @ColumnInfo(name = \"type\") val type: String)"],"content":"@Delete\n    suspend fun deleteRecurringExpense(recurringExpenseEntity: RecurringExpenseEntity)","prompt":""},{"id":160,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":["data class ExpenseEntity(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_expense_id\") val id: Long?, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"amount\") val amount: Long, @ColumnInfo(name = \"date\") val date: LocalDate, @ColumnInfo(name = \"checked\") val checked: Boolean, @ColumnInfo(name = \"monthly_id\") val associatedRecurringExpenseId: Long?)"],"content":"@Delete\n    suspend fun deleteExpense(expenseEntity: ExpenseEntity)","prompt":""},{"id":161,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":[],"content":"@Query(\"DELETE FROM expense WHERE monthly_id = :recurringExpenseId\")\n    suspend fun deleteAllExpenseForRecurringExpense(recurringExpenseId: Long)","prompt":""},{"id":162,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":["data class ExpenseEntity(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_expense_id\") val id: Long?, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"amount\") val amount: Long, @ColumnInfo(name = \"date\") val date: LocalDate, @ColumnInfo(name = \"checked\") val checked: Boolean, @ColumnInfo(name = \"monthly_id\") val associatedRecurringExpenseId: Long?)"],"content":"@Query(\"SELECT * FROM expense WHERE monthly_id = :recurringExpenseId\")\n    suspend fun getAllExpenseForRecurringExpense(recurringExpenseId: Long): List<ExpenseEntity>","prompt":""},{"id":163,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":[],"content":"@Query(\"DELETE FROM expense WHERE monthly_id = :recurringExpenseId AND date > :afterDate\")\n    suspend fun deleteAllExpenseForRecurringExpenseAfterDate(recurringExpenseId: Long, afterDate: LocalDate)","prompt":""},{"id":164,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":["data class ExpenseEntity(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_expense_id\") val id: Long?, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"amount\") val amount: Long, @ColumnInfo(name = \"date\") val date: LocalDate, @ColumnInfo(name = \"checked\") val checked: Boolean, @ColumnInfo(name = \"monthly_id\") val associatedRecurringExpenseId: Long?)"],"content":"@Query(\"SELECT * FROM expense WHERE monthly_id = :recurringExpenseId AND date > :afterDate\")\n    suspend fun getAllExpensesForRecurringExpenseAfterDate(recurringExpenseId: Long, afterDate: LocalDate): List<ExpenseEntity>","prompt":""},{"id":165,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":[],"content":"@Query(\"DELETE FROM expense WHERE monthly_id = :recurringExpenseId AND date < :beforeDate\")\n    suspend fun deleteAllExpenseForRecurringExpenseBeforeDate(recurringExpenseId: Long, beforeDate: LocalDate)","prompt":""},{"id":166,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":["data class ExpenseEntity(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_expense_id\") val id: Long?, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"amount\") val amount: Long, @ColumnInfo(name = \"date\") val date: LocalDate, @ColumnInfo(name = \"checked\") val checked: Boolean, @ColumnInfo(name = \"monthly_id\") val associatedRecurringExpenseId: Long?)"],"content":"@Query(\"SELECT * FROM expense WHERE monthly_id = :recurringExpenseId AND date < :beforeDate\")\n    suspend fun getAllExpensesForRecurringExpenseBeforeDate(recurringExpenseId: Long, beforeDate: LocalDate): List<ExpenseEntity>","prompt":""},{"id":167,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM expense WHERE monthly_id = :recurringExpenseId AND date < :beforeDate LIMIT 1\")\n    suspend fun hasExpensesForRecurringExpenseBeforeDate(recurringExpenseId: Long, beforeDate: LocalDate): Int","prompt":""},{"id":168,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":[],"content":"@Query(\"SELECT * FROM monthlyexpense WHERE _expense_id = :recurringExpenseId LIMIT 1\")\n    suspend fun findRecurringExpenseForId(recurringExpenseId: Long): RecurringExpenseEntity?","prompt":""},{"id":169,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery\n    suspend fun checkpoint(supportSQLiteQuery: SupportSQLiteQuery): Int","prompt":""},{"id":170,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":[],"content":"@Query(\"SELECT * FROM expense ORDER BY date LIMIT 1\")\n    suspend fun getOldestExpense(): ExpenseEntity?","prompt":""},{"id":171,"identifierName":"com.benoitletondor.easybudgetapp.db.impl.ExpenseDao","requiredType":[],"content":"@Query(\"UPDATE expense SET checked = 1 WHERE date < :beforeDate\")\n    suspend fun markAllEntriesAsChecked(beforeDate: LocalDate)","prompt":""},{"id":172,"identifierName":"com.akhbulatov.wordkeeper.data.global.local.database.word.WordDao","requiredType":[],"content":"@Query(\"SELECT * FROM words ORDER BY name\")\n    fun getAllWordsSortedByName(): Flow<List<WordDbModel>>","prompt":""},{"id":173,"identifierName":"com.akhbulatov.wordkeeper.data.global.local.database.word.WordDao","requiredType":[],"content":"@Query(\"SELECT * FROM words ORDER BY datetime DESC\")\n    fun getAllWordsSortedByDescDatetime(): Flow<List<WordDbModel>>","prompt":""},{"id":174,"identifierName":"com.akhbulatov.wordkeeper.data.global.local.database.word.WordDao","requiredType":[],"content":"@Query(\"SELECT * FROM words WHERE category = :category\")\n    fun getWordsByCategory(category: String): Flow<List<WordDbModel>>","prompt":""},{"id":175,"identifierName":"com.akhbulatov.wordkeeper.data.global.local.database.word.WordDao","requiredType":[],"content":"@Insert\n    suspend fun insetWord(word: WordDbModel)","prompt":""},{"id":176,"identifierName":"com.akhbulatov.wordkeeper.data.global.local.database.word.WordDao","requiredType":[],"content":"@Update\n    suspend fun updateWord(word: WordDbModel)","prompt":""},{"id":177,"identifierName":"com.akhbulatov.wordkeeper.data.global.local.database.word.WordDao","requiredType":[],"content":"@Delete\n    suspend fun deleteWords(words: List<WordDbModel>)","prompt":""},{"id":178,"identifierName":"com.google.android.ground.persistence.local.room.dao.SurveyDao","requiredType":[],"content":"@Transaction\n  @Query(\"SELECT * FROM survey\")\n  fun getAllSurveys(): Single<List<SurveyEntityAndRelations>>","prompt":""},{"id":179,"identifierName":"com.google.android.ground.persistence.local.room.dao.SurveyDao","requiredType":[],"content":"@Transaction\n  @Query(\"SELECT * FROM survey WHERE id = :id\")\n  fun getSurveyById(id: String): Maybe<SurveyEntityAndRelations>","prompt":""},{"id":180,"identifierName":"com.glodanif.bluetoothchat.data.database.ConversationsDao","requiredType":["data class Conversation( @PrimaryKey @ColumnInfo(name = \"address\") var deviceAddress: String, var deviceName: String, var displayName: String, var color: Int )"],"content":"@Query(\"SELECT * FROM conversation\")\n    fun getContacts(): List<Conversation>","prompt":""},{"id":181,"identifierName":"com.glodanif.bluetoothchat.data.database.ConversationsDao","requiredType":["data class ConversationWithMessages( var address: String, var deviceName: String, var displayName: String, var color: Int )"],"content":"@Transaction\n    @Query(\"SELECT * FROM conversation\")\n    fun getAllConversationsWithMessages(): List<ConversationWithMessages>","prompt":""},{"id":182,"identifierName":"com.glodanif.bluetoothchat.data.database.ConversationsDao","requiredType":[],"content":"@Query(\"SELECT * FROM conversation WHERE address = :address\")\n    fun getConversationByAddress(address: String): Conversation?","prompt":""},{"id":183,"identifierName":"com.glodanif.bluetoothchat.data.database.ConversationsDao","requiredType":["data class Conversation( @PrimaryKey @ColumnInfo(name = \"address\") var deviceAddress: String, var deviceName: String, var displayName: String, var color: Int )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(conversations: Conversation)","prompt":""},{"id":184,"identifierName":"com.glodanif.bluetoothchat.data.database.ConversationsDao","requiredType":[],"content":"@Query(\"DELETE FROM conversation WHERE address = :address\")\n    fun delete(address: String)","prompt":""},{"id":185,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":[],"content":"@Query(\"select * from otp_tokens order by ordinal\")\n    fun getAll(): Flow<List<OtpToken>>","prompt":""},{"id":186,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":[],"content":"@Query(\"select * from otp_tokens where id = :id\")\n    fun get(id: Long): Flow<OtpToken?>","prompt":""},{"id":187,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":[],"content":"@Query(\"select ordinal from otp_tokens order by ordinal desc limit 1\")\n    fun getLastOrdinal(): Long?","prompt":""},{"id":188,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":[],"content":"@Query(\"delete from otp_tokens where id = :id\")\n    suspend fun deleteById(id: Long): Void","prompt":""},{"id":189,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertAll(otpTokenList: List<OtpToken>)","prompt":""},{"id":190,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(otpTokenList: OtpToken)","prompt":""},{"id":191,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":[],"content":"@Update\n    suspend fun update(otpTokenList: OtpToken)","prompt":""},{"id":192,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":[],"content":"@Query(\"update otp_tokens set ordinal = :ordinal where id = :id\")\n    suspend fun updateOrdinal(id: Long, ordinal: Long)","prompt":""},{"id":193,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":[],"content":"/**\n     * This incrementCounter won't trigger Flow collect by using raw query\n     * We do not want increment count triggering flow because it can refresh the token\n     */\n    suspend fun incrementCounter(id: Long) {\n        incrementCounterRaw(\n            SimpleSQLiteQuery(\"update otp_tokens set counter = counter + 1 where id = ?\",\n                arrayOf(id))\n        )\n    }","prompt":""},{"id":194,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery\n    suspend fun incrementCounterRaw(query: SupportSQLiteQuery): Int","prompt":""},{"id":195,"identifierName":"org.fedorahosted.freeotp.data.OtpTokenDao","requiredType":[],"content":"@Transaction\n    suspend fun movePairs(pairs : List<Pair<Long,Long>>){\n        for(pair in pairs.listIterator()) {\n            withContext(Dispatchers.IO) {\n                val token1 = get(pair.first).first()\n                val token2 = get(pair.second).first()\n\n                if (token1 == null || token2 == null) {\n                    return@withContext\n                }\n                updateOrdinal(pair.first, token2.ordinal)\n                updateOrdinal(pair.second, token1.ordinal)\n            }\n        }\n    }","prompt":""},{"id":196,"identifierName":"me.raatiniemi.worker.data.projects.TimeIntervalDao","requiredType":[],"content":"@Query(\"\"\"SELECT * FROM time_intervals\n        WHERE project_id = :projectId AND\n            (start_in_milliseconds >= :startInMilliseconds OR stop_in_milliseconds = 0)\n        ORDER BY stop_in_milliseconds ASC, start_in_milliseconds ASC\"\"\")\n    fun findAll(projectId: Long, startInMilliseconds: Long): List<TimeIntervalEntity>","prompt":""},{"id":197,"identifierName":"me.raatiniemi.worker.data.projects.TimeIntervalDao","requiredType":[],"content":"@Query(\"SELECT * FROM time_intervals WHERE _id = :id LIMIT 1\")\n    fun find(id: Long): TimeIntervalEntity?","prompt":""},{"id":198,"identifierName":"me.raatiniemi.worker.data.projects.TimeIntervalDao","requiredType":[],"content":"@Query(\"\"\"SELECT * FROM time_intervals\n        WHERE project_id = :projectId AND stop_in_milliseconds = 0\"\"\")\n    fun findActiveTime(projectId: Long): TimeIntervalEntity?","prompt":""},{"id":199,"identifierName":"me.raatiniemi.worker.data.projects.TimeIntervalDao","requiredType":[],"content":"@Insert\n    fun add(entity: TimeIntervalEntity): Long","prompt":""},{"id":200,"identifierName":"me.raatiniemi.worker.data.projects.TimeIntervalDao","requiredType":[],"content":"@Update\n    fun update(entities: List<TimeIntervalEntity>)","prompt":""},{"id":201,"identifierName":"me.raatiniemi.worker.data.projects.TimeIntervalDao","requiredType":[],"content":"@Delete\n    fun remove(entities: List<TimeIntervalEntity>)","prompt":""},{"id":202,"identifierName":"com.github.vhromada.catalog.repository.MovieRepository","requiredType":[],"content":"/**\n     * Finds movie by UUID.\n     *\n     * @param uuid UUID\n     * @return movie\n     */\n    fun findByUuid(uuid: String): Optional<Movie>","prompt":""},{"id":203,"identifierName":"com.github.vhromada.catalog.repository.MovieRepository","requiredType":[],"content":"/**\n     * Returns statistics for media.\n     *\n     * @return statistics for media\n     */\n    @Query(\"SELECT new com.github.vhromada.catalog.domain.io.MediaStatistics(COUNT(m.id), SUM(m.length)) FROM Medium m\")\n    fun getMediaStatistics(): MediaStatistics","prompt":""},{"id":204,"identifierName":"com.stustirling.ribotviewer.data.local.dao.RibotDao","requiredType":[],"content":"@Query(\"SELECT * FROM ribots\")\n    fun getRibots() : Flowable<List<LocalRibot>>","prompt":""},{"id":205,"identifierName":"com.stustirling.ribotviewer.data.local.dao.RibotDao","requiredType":["data class LocalRibot( @PrimaryKey var id: String, @ColumnInfo(name = \"first_name\") var firstName: String, @ColumnInfo(name = \"last_name\") var lastName: String, var email: String, @ColumnInfo(name = \"dob\") var dateOfBirth: Date, var color: String, var bio: String? = null, var avatar: String? = null, @ColumnInfo(name = \"active\") var isActive: Boolean)"],"content":"@Query(\"SELECT * FROM ribots WHERE id = :id\")\n    fun getRibot(id:String) : LocalRibot","prompt":""},{"id":206,"identifierName":"com.stustirling.ribotviewer.data.local.dao.RibotDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(ribots: List<LocalRibot>)","prompt":""},{"id":207,"identifierName":"github.nisrulz.example.usingroomorm.PersonDao","requiredType":[],"content":"// Adds a person to the database\n    @Insert\n    fun insertAll(vararg people: Person)","prompt":""},{"id":208,"identifierName":"github.nisrulz.example.usingroomorm.PersonDao","requiredType":[],"content":"// Removes a person from the database\n    @Delete\n    fun delete(person: Person)","prompt":""},{"id":209,"identifierName":"github.nisrulz.example.usingroomorm.PersonDao","requiredType":[],"content":"// Gets all people in the database with a address\n    @Query(\"SELECT * FROM person WHERE address LIKE :address\")\n    fun getAllPeopleWithAddress(address: String): List<Person?>?","prompt":""},{"id":210,"identifierName":"com.garpr.android.data.database.SmashCompetitorDao","requiredType":[],"content":"@Query(\"DELETE FROM smashCompetitors\")\n    fun deleteAll()","prompt":""},{"id":211,"identifierName":"com.garpr.android.data.database.SmashCompetitorDao","requiredType":["data class Endpoint( val basePath: String, @StringRes val title: Int )"],"content":"@Query(\"SELECT * FROM smashCompetitors WHERE endpoint = :endpoint AND id = :id LIMIT 1\")\n    fun get(endpoint: Endpoint, id: String): DbSmashCompetitor?","prompt":""},{"id":212,"identifierName":"com.garpr.android.data.database.SmashCompetitorDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(dbSmashCompetitors: List<DbSmashCompetitor>)","prompt":""},{"id":213,"identifierName":"hello.repository.MessageRepository","requiredType":[],"content":"@Query(\"select m from Message m where m.subject like ?1%\")\n\tfun findBySubject(subject: String): List<Message>","prompt":""},{"id":214,"identifierName":"org.wordpress.android.fluxc.persistence.BloggingRemindersDao","requiredType":[],"content":"@Query(\"SELECT * FROM BloggingReminders\")\n    fun getAll(): Flow<List<BloggingReminders>>","prompt":""},{"id":215,"identifierName":"org.wordpress.android.fluxc.persistence.BloggingRemindersDao","requiredType":[],"content":"@Query(\"SELECT * FROM BloggingReminders WHERE localSiteId = :siteId\")\n    fun liveGetBySiteId(siteId: Int): Flow<BloggingReminders?>","prompt":""},{"id":216,"identifierName":"org.wordpress.android.fluxc.persistence.BloggingRemindersDao","requiredType":[],"content":"@Query(\"SELECT * FROM BloggingReminders WHERE localSiteId = :siteId\")\n    suspend fun getBySiteId(siteId: Int): List<BloggingReminders>","prompt":""},{"id":217,"identifierName":"org.wordpress.android.fluxc.persistence.BloggingRemindersDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(type: BloggingReminders): Long","prompt":""},{"id":218,"identifierName":"com.cherryperry.amiami.model.mongodb.ItemMongoRepository","requiredType":[],"content":"@Query(value = \"{ url: { \\$nin: ?0 } }\", delete = true)\n    fun deleteWhereIdNotInList(ids: Collection<String>): Long","prompt":""},{"id":219,"identifierName":"org.tvheadend.data.dao.TagAndChannelDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insert(tagAndChannel: TagAndChannelEntity)","prompt":""},{"id":220,"identifierName":"org.tvheadend.data.dao.TagAndChannelDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insert(tagAndChannel: List<TagAndChannelEntity>)","prompt":""},{"id":221,"identifierName":"org.tvheadend.data.dao.TagAndChannelDao","requiredType":[],"content":"@Update\n    abstract fun update(tagAndChannel: TagAndChannelEntity)","prompt":""},{"id":222,"identifierName":"org.tvheadend.data.dao.TagAndChannelDao","requiredType":[],"content":"@Delete\n    abstract fun delete(tagAndChannel: TagAndChannelEntity)","prompt":""},{"id":223,"identifierName":"org.tvheadend.data.dao.TagAndChannelDao","requiredType":[],"content":"@Delete\n    abstract fun delete(tagAndChannel: List<TagAndChannelEntity>)","prompt":""},{"id":224,"identifierName":"org.tvheadend.data.dao.TagAndChannelDao","requiredType":[],"content":"@Transaction\n    open fun insertAndDelete(newTagAndChannels: List<TagAndChannelEntity>, oldTagAndChannels: List<TagAndChannelEntity>) {\n        delete(oldTagAndChannels)\n        insert(newTagAndChannels)\n    }","prompt":""},{"id":225,"identifierName":"org.tvheadend.data.dao.TagAndChannelDao","requiredType":[],"content":"@Query(\"DELETE FROM tags_and_channels \" +\n            \" WHERE connection_id IN (SELECT id FROM connections WHERE active = 1) \" +\n            \" AND tag_id = :id\")\n    abstract fun deleteByTagId(id: Int)","prompt":""},{"id":226,"identifierName":"org.tvheadend.data.dao.TagAndChannelDao","requiredType":[],"content":"@Query(\"DELETE FROM tags_and_channels\")\n    abstract fun deleteAll()","prompt":""},{"id":227,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"SELECT * FROM books WHERE id = :id\")\n    abstract fun get(id: Long): Book?","prompt":""},{"id":228,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"SELECT * FROM books WHERE name = :name\")\n    abstract fun get(name: String): Book?","prompt":""},{"id":229,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"SELECT * FROM books WHERE id = :id\")\n    abstract fun getLiveData(id: Long): LiveData<Book> // null not allowed, use List","prompt":""},{"id":230,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"SELECT * FROM books WHERE last_action_type = :type\")\n    abstract fun getWithActionType(type: BookAction.Type): List<Book>","prompt":""},{"id":231,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Insert\n    abstract fun insertBooks(vararg books: Book): LongArray","prompt":""},{"id":232,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Update\n    abstract fun updateBooks(vararg book: Book): Int","prompt":""},{"id":233,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"UPDATE books SET preface = :preface, title = :title WHERE id = :id\")\n    abstract fun updatePreface(id: Long, preface: String?, title: String?)","prompt":""},{"id":234,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"UPDATE books SET last_action_type = :type, last_action_message = :message, last_action_timestamp = :timestamp WHERE id = :id\")\n    abstract fun updateLastAction(id: Long, type: BookAction.Type, message: String, timestamp: Long)","prompt":""},{"id":235,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"UPDATE books SET last_action_type = :type, last_action_message = :message, last_action_timestamp = :timestamp, sync_status = :status WHERE id = :id\")\n    abstract fun updateLastActionAndSyncStatus(id: Long, type: BookAction.Type, message: String, timestamp: Long, status: String?): Int","prompt":""},{"id":236,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"UPDATE books SET last_action_type = :type, last_action_message = :message, last_action_timestamp = :timestamp, sync_status = :status WHERE last_action_type = :whereType\")\n    abstract fun updateStatusToCanceled(whereType: BookAction.Type, type: BookAction.Type, message: String, timestamp: Long, status: String?): Int","prompt":""},{"id":237,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"UPDATE books SET name = :name WHERE id = :id\")\n    abstract fun updateName(id: Long, name: String): Int","prompt":""},{"id":238,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"UPDATE books SET is_dummy = :dummy WHERE id = :id\")\n    abstract fun updateDummy(id: Long, dummy: Boolean)","prompt":""},{"id":239,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"UPDATE books SET mtime = :mtime, is_modified = 1 WHERE id IN (:ids)\")\n    abstract fun setIsModified(ids: Set<Long>, mtime: Long): Int","prompt":""},{"id":240,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"@Query(\"UPDATE books SET is_modified = 0 WHERE id IN (:ids)\")\n    abstract fun setIsNotModified(ids: Set<Long>): Int","prompt":""},{"id":241,"identifierName":"com.orgzly.android.db.dao.BookDao","requiredType":[],"content":"fun getOrInsert(name: String): Long =\n            get(name).let {\n                it?.id ?: insert(Book(0, name, isDummy = true))\n            }","prompt":""},{"id":242,"identifierName":"com.rohitsuratekar.NCBSinfo.database.TripsDao","requiredType":[],"content":"@Insert\n    fun insertTrips(tripData: TripData): Long","prompt":""},{"id":243,"identifierName":"com.rohitsuratekar.NCBSinfo.database.TripsDao","requiredType":[],"content":"// Will return 0 id not found\n    @Query(\n        \"SELECT tripID FROM trips \" +\n                \"WHERE routeID LIKE :routeID AND \" +\n                \"day LIKE :day \"\n    )\n    fun getTripID(routeID: Int, day: Int): Int","prompt":""},{"id":244,"identifierName":"com.rohitsuratekar.NCBSinfo.database.TripsDao","requiredType":[],"content":"@Update\n    fun updateTrips(tripData: TripData)","prompt":""},{"id":245,"identifierName":"com.rohitsuratekar.NCBSinfo.database.TripsDao","requiredType":[],"content":"@Query(\"SELECT * FROM trips \" + \"WHERE routeID LIKE :routeID \")\n    fun getTripsByRoute(routeID: Int): List<TripData>","prompt":""},{"id":246,"identifierName":"com.rohitsuratekar.NCBSinfo.database.TripsDao","requiredType":[],"content":"@Query(\"SELECT * FROM trips WHERE tripID LIKE :tripID\")\n    fun getTrip(tripID: Int): TripData","prompt":""},{"id":247,"identifierName":"com.rohitsuratekar.NCBSinfo.database.TripsDao","requiredType":[],"content":"@Delete\n    fun deleteTrip(tripData: TripData)","prompt":""},{"id":248,"identifierName":"com.rohitsuratekar.NCBSinfo.database.TripsDao","requiredType":[],"content":"@Query(\"DELETE FROM trips \" + \"WHERE routeID LIKE :routeID \")\n    fun deleteTripsByRoute(routeID: Int)","prompt":""},{"id":249,"identifierName":"com.rohitsuratekar.NCBSinfo.database.TripsDao","requiredType":[],"content":"@Query(\"DELETE FROM trips \" + \"WHERE tripID LIKE :tripID \")\n    fun deleteTripsByTrip(tripID: Int)","prompt":""},{"id":250,"identifierName":"com.rohitsuratekar.NCBSinfo.database.TripsDao","requiredType":[],"content":"@Query(\"DELETE FROM trips\")\n    fun deleteAll()","prompt":""},{"id":251,"identifierName":"com.sinyuk.fanfou.domain.db.dao.KeywordDao","requiredType":[],"content":"@Query(\"SELECT * FROM keys ORDER BY createdAt DESC\")\n    fun list(): LiveData<MutableList<Keyword>?>","prompt":""},{"id":252,"identifierName":"com.sinyuk.fanfou.domain.db.dao.KeywordDao","requiredType":[],"content":"@Query(\"SELECT * FROM keys ORDER BY createdAt DESC LIMIT :limit\")\n    fun take(limit: Int): LiveData<MutableList<Keyword>?>","prompt":""},{"id":253,"identifierName":"com.sinyuk.fanfou.domain.db.dao.KeywordDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun save(item: Keyword)","prompt":""},{"id":254,"identifierName":"com.sinyuk.fanfou.domain.db.dao.KeywordDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun create(item: Keyword)","prompt":""},{"id":255,"identifierName":"com.sinyuk.fanfou.domain.db.dao.KeywordDao","requiredType":[],"content":"@Delete\n    fun delete(item: Keyword)","prompt":""},{"id":256,"identifierName":"com.sinyuk.fanfou.domain.db.dao.KeywordDao","requiredType":[],"content":"@Query(\"DELETE FROM keys\")\n    fun clear()","prompt":""},{"id":257,"identifierName":"com.sinyuk.fanfou.domain.db.dao.KeywordDao","requiredType":[],"content":"@Query(\"SELECT * FROM keys WHERE query LIKE '%' || :query || '%' ORDER BY createdAt DESC\")\n    fun filter(query: String): LiveData<MutableList<Keyword>?>","prompt":""},{"id":258,"identifierName":"com.sinyuk.fanfou.domain.db.dao.KeywordDao","requiredType":[],"content":"@Query(\"SELECT * FROM keys WHERE query LIKE '%' || :query || '%' ORDER BY createdAt DESC LIMIT :limit\")\n    fun filterAndTake(query: String, limit: Int): LiveData<MutableList<Keyword>?>","prompt":""},{"id":259,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@After\n    fun tearDown() {\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n        assertTrue(countingTaskExecutorRule.isIdle)\n    }","prompt":""},{"id":260,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun initialLoad_empty() = setupAndRun { db ->\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.refresh()\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).isEmpty()\n    }","prompt":""},{"id":261,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun initialLoad() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.refresh()\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n    }","prompt":""},{"id":262,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun simpleAppend() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.append(key = 15)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(15, 20)\n        )\n    }","prompt":""},{"id":263,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun simplePrepend() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.prepend(key = 20)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(15, 20)\n        )\n    }","prompt":""},{"id":264,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun initialLoad_invalidationTracker_isRegistered() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.refresh()\n        // run loadSingle to register InvalidationTracker\n        single.await()\n\n        assertTrue(pagingSource.observer.privateRegisteredState().get())\n    }","prompt":""},{"id":265,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun nonInitialLoad_invalidationTracker_isRegistered() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.prepend(key = 20)\n        // run loadSingle to register InvalidationTracker\n        single.await()\n\n        assertTrue(pagingSource.observer.privateRegisteredState().get())\n    }","prompt":""},{"id":266,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun refresh_singleImmediatelyReturn() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.refresh()\n\n        var observer = single.test()\n        observer.assertNotComplete()\n\n        // let room complete its tasks\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n\n        val result = observer.values().first() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n        observer.assertComplete()\n        observer.assertNoErrors()\n        observer.dispose()\n    }","prompt":""},{"id":267,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun append_singleImmediatelyReturn() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.append(key = 10)\n\n        var observer = single.test()\n        observer.assertNotComplete()\n\n        // let room complete its tasks\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n\n        val result = observer.values().first() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(10, 15)\n        )\n        observer.assertComplete()\n        observer.assertNoErrors()\n        observer.dispose()\n    }","prompt":""},{"id":268,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun prepend_singleImmediatelyReturn() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.prepend(key = 15)\n\n        var observer = single.test()\n        observer.assertNotComplete()\n\n        // let room complete its tasks\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n\n        val result = observer.values().first() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(10, 15)\n        )\n        observer.assertComplete()\n        observer.assertNoErrors()\n        observer.dispose()\n    }","prompt":""},{"id":269,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun dbUpdate_invalidatesPagingSource() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.append(key = 50)\n\n        // trigger load to register observer\n        single.await()\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n\n        // make sure observer is registered and pagingSource is still valid at this point\n        assertTrue(pagingSource.observer.privateRegisteredState().get())\n        assertFalse(pagingSource.invalid)\n\n        // this should cause refreshVersionsSync to invalidate pagingSource\n        db.dao.addItem(TestItem(113))\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n\n        assertTrue(pagingSource.invalid)\n\n        val single2 = pagingSource.append(key = 55)\n        val result = single2.await()\n        Truth.assertThat(result).isInstanceOf(LoadResult.Invalid::class.java)\n    }","prompt":""},{"id":270,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun append_returnsInvalid() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.append(key = 50)\n\n        // this should cause load to return LoadResult.Invalid\n        pagingSource.invalidate()\n        assertTrue(pagingSource.invalid)\n\n        // trigger load\n        var result = single.await()\n\n        // let room complete its tasks\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n        Truth.assertThat(result).isInstanceOf(LoadResult.Invalid::class.java)\n    }","prompt":""},{"id":271,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun prepend_returnsInvalid() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.prepend(key = 50)\n\n        // this should cause load to return LoadResult.Invalid\n        pagingSource.invalidate()\n        assertTrue(pagingSource.invalid)\n\n        // trigger load\n        var observer = single.test()\n\n        // let room complete its tasks\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n        val result = observer.values().first()\n        Truth.assertThat(result).isInstanceOf(LoadResult.Invalid::class.java)\n        observer.dispose()\n    }","prompt":""},{"id":272,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun refresh_consecutively() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.refresh()\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n\n        val pagingSource2 = LimitOffsetRxPagingSourceImpl(db)\n        val single2 = pagingSource2.refresh()\n        val result2 = single2.await() as LoadResult.Page\n        Truth.assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n    }","prompt":""},{"id":273,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun append_consecutively() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n\n        val single = pagingSource.append(key = 15)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(15, 20)\n        )\n\n        val single2 = pagingSource.append(key = 40)\n        val result2 = single2.await() as LoadResult.Page\n        Truth.assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(40, 45)\n        )\n\n        val single3 = pagingSource.append(key = 45) // sequential append\n        val result3 = single3.await() as LoadResult.Page\n        Truth.assertThat(result3.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(45, 50)\n        )\n    }","prompt":""},{"id":274,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun prepend_consecutively() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n\n        val single = pagingSource.prepend(key = 15)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(10, 15)\n        )\n\n        val single2 = pagingSource.prepend(key = 40)\n        val result2 = single2.await() as LoadResult.Page\n        Truth.assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(35, 40)\n        )\n\n        val single3 = pagingSource.prepend(key = 45) // sequential prepend\n        val result3 = single3.await() as LoadResult.Page\n        Truth.assertThat(result3.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(40, 45)\n        )\n    }","prompt":""},{"id":275,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun refreshAgain_afterDispose() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n\n        var isDisposed = false\n        val single = pagingSource.refresh()\n            // dispose right after subscription\n            .doOnSubscribe { disposable -> disposable.dispose() }\n            .doOnSuccess { Truth.assertWithMessage(\"The single should not succeed\").fail() }\n            .doOnError { Truth.assertWithMessage(\"The single should not error out\").fail() }\n            .doOnDispose { isDisposed = true }\n\n        assertFailsWith<AssertionError> { withTestTimeout(2) { single.await() } }\n        assertTrue(isDisposed)\n        assertFalse(pagingSource.invalid)\n\n        // using same paging source\n        val single2 = pagingSource.refresh()\n        val result2 = single2.await() as LoadResult.Page\n        Truth.assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n    }","prompt":""},{"id":276,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun appendAgain_afterDispose() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n\n        var isDisposed = false\n        val single = pagingSource.append(key = 15)\n            // dispose right after subscription\n            .doOnSubscribe { disposable -> disposable.dispose() }\n            .doOnSuccess { Truth.assertWithMessage(\"The single should not succeed\").fail() }\n            .doOnError { Truth.assertWithMessage(\"The single should not error out\").fail() }\n            .doOnDispose { isDisposed = true }\n\n        assertFailsWith<AssertionError> { withTestTimeout(2) { single.await() } }\n        assertTrue(isDisposed)\n        assertFalse(pagingSource.invalid)\n\n        // try with same key same paging source\n        val single2 = pagingSource.append(key = 15)\n        val result2 = single2.await() as LoadResult.Page\n        Truth.assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(15, 20)\n        )\n    }","prompt":""},{"id":277,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun prependAgain_afterDispose() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n\n        var isDisposed = false\n        val single = pagingSource.prepend(key = 40)\n            // dispose right after subscription\n            .doOnSubscribe { disposable -> disposable.dispose() }\n            .doOnSuccess { Truth.assertWithMessage(\"The single should not succeed\").fail() }\n            .doOnError { Truth.assertWithMessage(\"The single should not error out\").fail() }\n            .doOnDispose { isDisposed = true }\n\n        assertFailsWith<AssertionError> { withTestTimeout(2) { single.await() } }\n        assertTrue(isDisposed)\n        assertFalse(pagingSource.invalid)\n\n        // try with same key same paging source\n        val single2 = pagingSource.prepend(key = 40)\n        val result2 = single2.await() as LoadResult.Page\n        Truth.assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(35, 40)\n        )\n    }","prompt":""},{"id":278,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun assert_usesQueryExecutor() {\n        val queryExecutor = TestExecutor()\n        val testDb = Room.inMemoryDatabaseBuilder(\n            ApplicationProvider.getApplicationContext(),\n            LimitOffsetTestDb::class.java\n        ).setQueryExecutor(queryExecutor)\n            .build()\n\n        testDb.dao.addAllItems(ITEMS_LIST)\n        queryExecutor.executeAll() // add items first\n\n        runTest {\n            assertFalse(queryExecutor.executeAll()) // make sure its idle now\n            val pagingSource = LimitOffsetRxPagingSourceImpl(testDb)\n            val single = pagingSource.append(key = 15)\n\n            var resultReceived = false\n            // subscribe to single\n            launch {\n                val result = single.await() as LoadResult.Page\n                assertThat(result.data).containsExactlyElementsIn(\n                    ITEMS_LIST.subList(15, 20)\n                )\n                resultReceived = true\n            }\n\n            advanceUntilIdle()\n\n            // execute Single's await()\n            assertTrue(queryExecutor.executeAll())\n\n            advanceUntilIdle()\n\n            assertTrue(resultReceived)\n            assertFalse(queryExecutor.executeAll())\n        }\n        testDb.close()\n    }","prompt":""},{"id":279,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun cancelledCoroutine_disposesSingle() {\n        val testDb = Room.inMemoryDatabaseBuilder(\n            ApplicationProvider.getApplicationContext(),\n            LimitOffsetTestDb::class.java\n        ).build()\n\n        testDb.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(testDb)\n\n        runBlocking {\n            var isDisposed = false\n            val single = pagingSource.refresh()\n                .doOnSubscribe { Thread.sleep(300) } // subscribe but delay the load\n                .doOnSuccess { Truth.assertWithMessage(\"The single should not succeed\").fail() }\n                .doOnError { Truth.assertWithMessage(\"The single should not error out\").fail() }\n                .doOnDispose { isDisposed = true }\n\n            val job = launch { single.await() }\n            job.start()\n            delay(100) // start single.await() to subscribe but don't let it complete\n            job.cancelAndJoin()\n\n            assertTrue(job.isCancelled)\n            assertTrue(isDisposed)\n        }\n\n        // need to drain before closing testDb or else will throw SQLiteConnectionPool exception\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n        testDb.close()\n    }","prompt":""},{"id":280,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun refresh_secondaryConstructor() = setupAndRun { db ->\n        val pagingSource = object : LimitOffsetRxPagingSource<TestItem>(\n            db = db,\n            supportSQLiteQuery = SimpleSQLiteQuery(\"SELECT * FROM $tableName ORDER BY id ASC\")\n        ) {\n            override fun convertRows(cursor: Cursor): List<TestItem> {\n                return convertRowsHelper(cursor)\n            }\n        }\n\n        db.dao.addAllItems(ITEMS_LIST)\n        val single = pagingSource.refresh()\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n    }","prompt":""},{"id":281,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun append_secondaryConstructor() = setupAndRun { db ->\n        val pagingSource = object : LimitOffsetRxPagingSource<TestItem>(\n            db = db,\n            supportSQLiteQuery = SimpleSQLiteQuery(\"SELECT * FROM $tableName ORDER BY id ASC\")\n        ) {\n            override fun convertRows(cursor: Cursor): List<TestItem> {\n                return convertRowsHelper(cursor)\n            }\n        }\n\n        db.dao.addAllItems(ITEMS_LIST)\n        val single = pagingSource.append(key = 15)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(15, 20)\n        )\n    }","prompt":""},{"id":282,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun prepend_secondaryConstructor() = setupAndRun { db ->\n        val pagingSource = object : LimitOffsetRxPagingSource<TestItem>(\n            db = db,\n            supportSQLiteQuery = SimpleSQLiteQuery(\"SELECT * FROM $tableName ORDER BY id ASC\")\n        ) {\n            override fun convertRows(cursor: Cursor): List<TestItem> {\n                return convertRowsHelper(cursor)\n            }\n        }\n\n        db.dao.addAllItems(ITEMS_LIST)\n        val single = pagingSource.prepend(key = 15)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(10, 15)\n        )\n    }","prompt":""},{"id":283,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun jumping_enabled() = setupAndRun { db ->\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        assertTrue(pagingSource.jumpingSupported)\n    }","prompt":""},{"id":284,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"private fun setupAndRun(\n        test: suspend (LimitOffsetTestDb) -> Unit\n    ) {\n        val db = Room.inMemoryDatabaseBuilder(\n            ApplicationProvider.getApplicationContext(),\n            LimitOffsetTestDb::class.java\n        ).build()\n\n        runTest {\n            test(db)\n        }\n       db.close()\n    }","prompt":""},{"id":285,"identifierName":"androidx.room.paging.rxjava2.LimitOffsetRxPagingSourceImpl","requiredType":[],"content":"override fun convertRows(cursor: Cursor): List<TestItem> = convertRowsHelper(cursor)","prompt":""},{"id":286,"identifierName":"androidx.room.paging.rxjava2.TestItemDao","requiredType":[],"content":"@Insert\n    fun addAllItems(testItems: List<TestItem>)","prompt":""},{"id":287,"identifierName":"androidx.room.paging.rxjava2.TestItemDao","requiredType":[],"content":"@Insert\n    fun addItem(testItem: TestItem)","prompt":""},{"id":288,"identifierName":"androidx.room.paging.rxjava2.TestItemDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) from $tableName\")\n    fun itemCount(): Int","prompt":""},{"id":289,"identifierName":"com.jamieadkins.gwent.database.KeywordDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(entity: KeywordEntity): Long","prompt":""},{"id":290,"identifierName":"com.jamieadkins.gwent.database.KeywordDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(items: Collection<KeywordEntity>)","prompt":""},{"id":291,"identifierName":"com.jamieadkins.gwent.database.KeywordDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${GwentDatabase.KEYWORD_TABLE} WHERE keywordId = :keywordId AND locale = :locale\")\n    fun getKeywordForLocale(keywordId: String, locale: String): Flowable<KeywordEntity>","prompt":""},{"id":292,"identifierName":"com.jamieadkins.gwent.database.KeywordDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${GwentDatabase.KEYWORD_TABLE} WHERE locale = :locale\")\n    fun getKeywordsForLocale(locale: String): Flowable<List<KeywordEntity>>","prompt":""},{"id":293,"identifierName":"com.jamieadkins.gwent.database.KeywordDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${GwentDatabase.KEYWORD_TABLE} WHERE keywordId = :keywordId\")\n    fun getKeyword(keywordId: String): Flowable<List<KeywordEntity>>","prompt":""},{"id":294,"identifierName":"com.jamieadkins.gwent.database.KeywordDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${GwentDatabase.KEYWORD_TABLE}\")\n    fun getAllKeywords(): Flowable<List<KeywordEntity>>","prompt":""},{"id":295,"identifierName":"com.jamieadkins.gwent.database.KeywordDao","requiredType":[],"content":"@Query(\"DELETE FROM ${GwentDatabase.KEYWORD_TABLE}\")\n    fun clear(): Completable","prompt":""},{"id":296,"identifierName":"tonnysunm.com.acornote.model.ColorTagDao","requiredType":[],"content":"// Room executes all queries on a separate thread. So there is no suspend.\n    @Query(\"SELECT * FROM color_tag_table\")\n    fun getAll(): LiveData<List<ColorTag>>","prompt":""},{"id":297,"identifierName":"tonnysunm.com.acornote.model.ColorTagDao","requiredType":[],"content":"@Query(\"SELECT count(*) from color_tag_table\")\n    suspend fun notesCount(): Int","prompt":""},{"id":298,"identifierName":"tonnysunm.com.acornote.model.ColorTagDao","requiredType":[],"content":"@Update\n    suspend fun update(entities: List<ColorTag>)","prompt":""},{"id":299,"identifierName":"org.havenapp.main.dao.EventTriggerDAO","requiredType":[],"content":"@Insert\n    fun insert(eventTrigger: EventTrigger) : Long","prompt":""},{"id":300,"identifierName":"org.havenapp.main.dao.EventTriggerDAO","requiredType":[],"content":"@Delete\n    fun delete(eventTrigger: EventTrigger)","prompt":""},{"id":301,"identifierName":"org.havenapp.main.dao.EventTriggerDAO","requiredType":[],"content":"@Delete\n    fun deleteAll(eventTriggerList: List<EventTrigger>)","prompt":""},{"id":302,"identifierName":"org.havenapp.main.dao.EventTriggerDAO","requiredType":[],"content":"@Update\n    fun update(eventTrigger: EventTrigger)","prompt":""},{"id":303,"identifierName":"org.havenapp.main.dao.EventTriggerDAO","requiredType":[],"content":"@Query(\"SELECT * FROM EVENT_TRIGGER WHERE ID = :id\")\n    fun findById(id : Long?) : EventTrigger","prompt":""},{"id":304,"identifierName":"org.havenapp.main.dao.EventTriggerDAO","requiredType":[],"content":"@Query(\"SELECT * FROM EVENT_TRIGGER WHERE M_EVENT_ID = :eventId\")\n    fun getEventTriggerList(eventId: Long?) : MutableList<EventTrigger>","prompt":""},{"id":305,"identifierName":"org.havenapp.main.dao.EventTriggerDAO","requiredType":[],"content":"@Query(\"SELECT * FROM EVENT_TRIGGER WHERE M_EVENT_ID = :eventId\")\n    fun getEventTriggerListAsync(eventId: Long?) : LiveData<MutableList<EventTrigger>>","prompt":""},{"id":306,"identifierName":"org.havenapp.main.dao.EventTriggerDAO","requiredType":[],"content":"@Query(\"SELECT * FROM EVENT_TRIGGER\")\n    fun getAllEventTriggers() : MutableList<EventTrigger>","prompt":""},{"id":307,"identifierName":"org.havenapp.main.dao.EventTriggerDAO","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM EVENT_TRIGGER WHERE M_EVENT_ID = :eventId\")\n    fun getEventTriggerListCountAsync(eventId: Long?) : LiveData<Int>","prompt":""},{"id":308,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Attempts to insert a [WorkSpec] into the database.\n     *\n     * @param workSpec The WorkSpec to insert.\n     */\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insertWorkSpec(workSpec: WorkSpec)","prompt":""},{"id":309,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Deletes [WorkSpec]s from the database.\n     *\n     * @param id The WorkSpec id to delete.\n     */\n    @Query(\"DELETE FROM workspec WHERE id=:id\")\n    fun delete(id: String)","prompt":""},{"id":310,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * @param id The identifier\n     * @return The WorkSpec associated with that id\n     */\n    @Query(\"SELECT * FROM workspec WHERE id=:id\")\n    fun getWorkSpec(id: String): WorkSpec?","prompt":""},{"id":311,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     *\n     * @param name The work graph name\n     * @return The [WorkSpec]s labelled with the given name\n     */\n    @Query(\n        \"SELECT id, state FROM workspec WHERE id IN \" +\n            \"(SELECT work_spec_id FROM workname WHERE name=:name)\"\n    )\n    fun getWorkSpecIdAndStatesForName(name: String): List<WorkSpec.IdAndState>","prompt":""},{"id":312,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * @return All WorkSpec ids in the database.\n     */\n    @Query(\"SELECT id FROM workspec\")\n    fun getAllWorkSpecIds(): List<String>","prompt":""},{"id":313,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * @return A [LiveData] list of all WorkSpec ids in the database.\n     */\n    @Transaction\n    @Query(\"SELECT id FROM workspec\")\n    fun getAllWorkSpecIdsLiveData(): LiveData<List<String>>","prompt":""},{"id":314,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Updates the state of at least one [WorkSpec] by ID.\n     *\n     * @param state The new state\n     * @param id The IDs for the [WorkSpec]s to update\n     * @return The number of rows that were updated\n     */\n    @Query(\"UPDATE workspec SET state=:state WHERE id=:id\")\n    fun setState(state: WorkInfo.State, id: String): Int","prompt":""},{"id":315,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Increment periodic counter.\n     */\n    @Query(\"UPDATE workspec SET period_count=period_count+1 WHERE id=:id\")\n    fun incrementPeriodCount(id: String)","prompt":""},{"id":316,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Updates the output of a [WorkSpec].\n     *\n     * @param id The [WorkSpec] identifier to update\n     * @param output The [Data] to set as the output\n     */\n    @Query(\"UPDATE workspec SET output=:output WHERE id=:id\")\n    fun setOutput(id: String, output: Data)","prompt":""},{"id":317,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Updates the period start time of a [WorkSpec].\n     *\n     * @param id The [WorkSpec] identifier to update\n     * @param enqueueTime The time when the period started.\n     */\n    @Query(\"UPDATE workspec SET last_enqueue_time=:enqueueTime WHERE id=:id\")\n    fun setLastEnqueuedTime(id: String, enqueueTime: Long)","prompt":""},{"id":318,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Increment run attempt count of a [WorkSpec].\n     *\n     * @param id The identifier for the [WorkSpec]\n     * @return The number of rows that were updated (should be 0 or 1)\n     */\n    @Query(\"UPDATE workspec SET run_attempt_count=run_attempt_count+1 WHERE id=:id\")\n    fun incrementWorkSpecRunAttemptCount(id: String): Int","prompt":""},{"id":319,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Reset run attempt count of a [WorkSpec].\n     *\n     * @param id The identifier for the [WorkSpec]\n     * @return The number of rows that were updated (should be 0 or 1)\n     */\n    @Query(\"UPDATE workspec SET run_attempt_count=0 WHERE id=:id\")\n    fun resetWorkSpecRunAttemptCount(id: String): Int","prompt":""},{"id":320,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Retrieves the state of a [WorkSpec].\n     *\n     * @param id The identifier for the [WorkSpec]\n     * @return The state of the [WorkSpec]\n     */\n    @Query(\"SELECT state FROM workspec WHERE id=:id\")\n    fun getState(id: String): WorkInfo.State?","prompt":""},{"id":321,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * For a [WorkSpec] identifier, retrieves its [WorkSpec.WorkInfoPojo].\n     *\n     * @param id The identifier of the [WorkSpec]\n     * @return A list of [WorkSpec.WorkInfoPojo]\n     */\n    @Transaction\n    @Query(\"SELECT id, state, output, run_attempt_count, generation FROM workspec WHERE id=:id\")\n    fun getWorkStatusPojoForId(id: String): WorkSpec.WorkInfoPojo?","prompt":""},{"id":322,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * For a list of [WorkSpec] identifiers, retrieves a [List] of their\n     * [WorkSpec.WorkInfoPojo].\n     *\n     * @param ids The identifier of the [WorkSpec]s\n     * @return A [List] of [WorkSpec.WorkInfoPojo]\n     */\n    @Transaction\n    @Query(\"SELECT id, state, output, run_attempt_count, generation \" +\n        \"FROM workspec WHERE id IN (:ids)\")\n    fun getWorkStatusPojoForIds(ids: List<String>): List<WorkSpec.WorkInfoPojo>","prompt":""},{"id":323,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * For a list of [WorkSpec] identifiers, retrieves a [LiveData] list of their\n     * [WorkSpec.WorkInfoPojo].\n     *\n     * @param ids The identifier of the [WorkSpec]s\n     * @return A [LiveData] list of [WorkSpec.WorkInfoPojo]\n     */\n    @Transaction\n    @Query(\"SELECT id, state, output, run_attempt_count, generation \" +\n        \"FROM workspec WHERE id IN (:ids)\")\n    fun getWorkStatusPojoLiveDataForIds(ids: List<String>): LiveData<List<WorkSpec.WorkInfoPojo>>","prompt":""},{"id":324,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Retrieves a list of [WorkSpec.WorkInfoPojo] for all work with a given tag.\n     *\n     * @param tag The tag for the [WorkSpec]s\n     * @return A list of [WorkSpec.WorkInfoPojo]\n     */\n    @Transaction\n    @Query(\n        \"\"\"SELECT id, state, output, run_attempt_count, generation FROM workspec WHERE id IN\n            (SELECT work_spec_id FROM worktag WHERE tag=:tag)\"\"\"\n    )\n    fun getWorkStatusPojoForTag(tag: String): List<WorkSpec.WorkInfoPojo>","prompt":""},{"id":325,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Retrieves a [LiveData] list of [WorkSpec.WorkInfoPojo] for all work with a\n     * given tag.\n     *\n     * @param tag The tag for the [WorkSpec]s\n     * @return A [LiveData] list of [WorkSpec.WorkInfoPojo]\n     */\n    @Transaction\n    @Query(\n        \"\"\"SELECT id, state, output, run_attempt_count, generation FROM workspec WHERE id IN\n            (SELECT work_spec_id FROM worktag WHERE tag=:tag)\"\"\"\n    )\n    fun getWorkStatusPojoLiveDataForTag(tag: String): LiveData<List<WorkSpec.WorkInfoPojo>>","prompt":""},{"id":326,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Retrieves a list of [WorkSpec.WorkInfoPojo] for all work with a given name.\n     *\n     * @param name The name of the [WorkSpec]s\n     * @return A list of [WorkSpec.WorkInfoPojo]\n     */\n    @Transaction\n    @Query(\n        \"SELECT id, state, output, run_attempt_count, generation FROM workspec WHERE id IN \" +\n            \"(SELECT work_spec_id FROM workname WHERE name=:name)\"\n    )\n    fun getWorkStatusPojoForName(name: String): List<WorkSpec.WorkInfoPojo>","prompt":""},{"id":327,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Retrieves a [LiveData] list of [WorkSpec.WorkInfoPojo] for all work with a\n     * given name.\n     *\n     * @param name The name for the [WorkSpec]s\n     * @return A [LiveData] list of [WorkSpec.WorkInfoPojo]\n     */\n    @Transaction\n    @Query(\n        \"SELECT id, state, output, run_attempt_count, generation FROM workspec WHERE id IN \" +\n            \"(SELECT work_spec_id FROM workname WHERE name=:name)\"\n    )\n    fun getWorkStatusPojoLiveDataForName(name: String): LiveData<List<WorkSpec.WorkInfoPojo>>","prompt":""},{"id":328,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Gets all inputs coming from prerequisites for a particular [WorkSpec].  These are\n     * [Data] set via `Worker#setOutputData()`.\n     *\n     * @param id The [WorkSpec] identifier\n     * @return A list of all inputs coming from prerequisites for `id`\n     */\n    @Query(\n        \"\"\"SELECT output FROM workspec WHERE id IN\n             (SELECT prerequisite_id FROM dependency WHERE work_spec_id=:id)\"\"\"\n    )\n    fun getInputsFromPrerequisites(id: String): List<Data>","prompt":""},{"id":329,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Retrieves work ids for unfinished work with a given tag.\n     *\n     * @param tag The tag used to identify the work\n     * @return A list of work ids\n     */\n    @Query(\n        \"SELECT id FROM workspec WHERE state NOT IN \" + COMPLETED_STATES +\n        \" AND id IN (SELECT work_spec_id FROM worktag WHERE tag=:tag)\"\n    )\n    fun getUnfinishedWorkWithTag(tag: String): List<String>","prompt":""},{"id":330,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Retrieves work ids for unfinished work with a given name.\n     *\n     * @param name THe tag used to identify the work\n     * @return A list of work ids\n     */\n    @Query(\n        \"SELECT id FROM workspec WHERE state NOT IN \" + COMPLETED_STATES +\n            \" AND id IN (SELECT work_spec_id FROM workname WHERE name=:name)\"\n    )\n    fun getUnfinishedWorkWithName(name: String): List<String>","prompt":""},{"id":331,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Retrieves work ids for all unfinished work.\n     *\n     * @return A list of work ids\n     */\n    @Query(\"SELECT id FROM workspec WHERE state NOT IN \" + COMPLETED_STATES)\n    fun getAllUnfinishedWork(): List<String>","prompt":""},{"id":332,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * @return `true` if there is pending work.\n     */\n    @Query(\"SELECT COUNT(*) > 0 FROM workspec WHERE state NOT IN $COMPLETED_STATES LIMIT 1\")\n    fun hasUnfinishedWork(): Boolean","prompt":""},{"id":333,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Marks a [WorkSpec] as scheduled.\n     *\n     * @param id        The identifier for the [WorkSpec]\n     * @param startTime The time at which the [WorkSpec] was scheduled.\n     * @return The number of rows that were updated (should be 0 or 1)\n     */\n    @Query(\"UPDATE workspec SET schedule_requested_at=:startTime WHERE id=:id\")\n    fun markWorkSpecScheduled(id: String, startTime: Long): Int","prompt":""},{"id":334,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * @return The time at which the [WorkSpec] was scheduled.\n     */\n    @Query(\"SELECT schedule_requested_at FROM workspec WHERE id=:id\")\n    fun getScheduleRequestedAtLiveData(id: String): LiveData<Long>","prompt":""},{"id":335,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Resets the scheduled state on the [WorkSpec]s that are not in a a completed state.\n     * @return The number of rows that were updated\n     */\n    @Query(\n        \"UPDATE workspec SET schedule_requested_at=\" + WorkSpec.SCHEDULE_NOT_REQUESTED_YET +\n            \" WHERE state NOT IN \" + COMPLETED_STATES\n    )\n    fun resetScheduledState(): Int","prompt":""},{"id":336,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * @return The List of [WorkSpec]s that are eligible to be scheduled.\n     */\n    @Query(\n        \"SELECT * FROM workspec WHERE \" +\n            \"state=\" + ENQUEUED +\n            // We only want WorkSpecs which have not been previously scheduled.\n            \" AND schedule_requested_at=\" + WorkSpec.SCHEDULE_NOT_REQUESTED_YET +\n            // Order by period start time so we execute scheduled WorkSpecs in FIFO order\n            \" ORDER BY last_enqueue_time\" +\n            \" LIMIT \" +\n            \"(SELECT MAX(:schedulerLimit\" + \"-COUNT(*), 0) FROM workspec WHERE\" +\n            \" schedule_requested_at<>\" + WorkSpec.SCHEDULE_NOT_REQUESTED_YET +\n            \" AND state NOT IN \" + COMPLETED_STATES +\n            \")\"\n    )\n    fun getEligibleWorkForScheduling(schedulerLimit: Int): List<WorkSpec>","prompt":""},{"id":337,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * @return The List of [WorkSpec]s that can be scheduled irrespective of scheduling\n     * limits.\n     */\n    @Query(\n        \"SELECT * FROM workspec WHERE \" +\n            \"state=$ENQUEUED\" +\n            // Order by period start time so we execute scheduled WorkSpecs in FIFO order\n            \" ORDER BY last_enqueue_time\" +\n            \" LIMIT :maxLimit\"\n    )\n    fun getAllEligibleWorkSpecsForScheduling(maxLimit: Int): List<WorkSpec> // Unfinished work","prompt":""},{"id":338,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * @return The List of [WorkSpec]s that are unfinished and scheduled.\n     */\n    @Query(\n        \"SELECT * FROM workspec WHERE \" + // Unfinished work\n            \"state=\" + ENQUEUED + // We only want WorkSpecs which have been scheduled.\n            \" AND schedule_requested_at<>\" + WorkSpec.SCHEDULE_NOT_REQUESTED_YET\n    )\n    fun getScheduledWork(): List<WorkSpec>","prompt":""},{"id":339,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * @return The List of [WorkSpec]s that are running.\n     */\n    @Query(\n        \"SELECT * FROM workspec WHERE \" + // Unfinished work\n            \"state=\" + WorkTypeConverters.StateIds.RUNNING\n    )\n    fun getRunningWork(): List<WorkSpec>","prompt":""},{"id":340,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * @return The List of [WorkSpec] which completed recently.\n     */\n    @Query(\n        \"SELECT * FROM workspec WHERE \" +\n            \"last_enqueue_time >= :startingAt\" +\n            \" AND state IN \" + COMPLETED_STATES +\n            \" ORDER BY last_enqueue_time DESC\"\n    )\n    fun getRecentlyCompletedWork(startingAt: Long): List<WorkSpec>","prompt":""},{"id":341,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"/**\n     * Immediately prunes eligible work from the database meeting the following criteria:\n     * - Is finished (succeeded, failed, or cancelled)\n     * - Has zero unfinished dependents\n     */\n    @Query(\n        \"DELETE FROM workspec WHERE \" +\n            \"state IN \" + COMPLETED_STATES +\n            \" AND (SELECT COUNT(*)=0 FROM dependency WHERE \" +\n            \"    prerequisite_id=id AND \" +\n            \"    work_spec_id NOT IN \" +\n            \"        (SELECT id FROM workspec WHERE state IN \" + COMPLETED_STATES + \"))\"\n    )\n    fun pruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast()","prompt":""},{"id":342,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"@Query(\"UPDATE workspec SET generation=generation+1 WHERE id=:id\")\n    fun incrementGeneration(id: String)","prompt":""},{"id":343,"identifierName":"androidx.work.impl.model.WorkSpecDao","requiredType":[],"content":"@Update\n    fun updateWorkSpec(workSpec: WorkSpec)","prompt":""},{"id":344,"identifierName":"com.waz.zclient.storage.db.accountdata.ActiveAccountsDao","requiredType":[],"content":"@Query(\"SELECT access_token from ActiveAccounts WHERE _id = :userId\")\n    suspend fun accessToken(userId: String): AccessTokenEntity?","prompt":""},{"id":345,"identifierName":"com.waz.zclient.storage.db.accountdata.ActiveAccountsDao","requiredType":[],"content":"@Query(\"UPDATE ActiveAccounts SET access_token = :accessToken WHERE _id = :userId\")\n    suspend fun updateAccessToken(userId: String, accessToken: AccessTokenEntity)","prompt":""},{"id":346,"identifierName":"com.waz.zclient.storage.db.accountdata.ActiveAccountsDao","requiredType":[],"content":"@Query(\"SELECT cookie from ActiveAccounts WHERE _id = :userId\")\n    suspend fun refreshToken(userId: String): String?","prompt":""},{"id":347,"identifierName":"com.waz.zclient.storage.db.accountdata.ActiveAccountsDao","requiredType":[],"content":"@Query(\"UPDATE ActiveAccounts SET cookie = :refreshToken WHERE _id = :userId\")\n    suspend fun updateRefreshToken(userId: String, refreshToken: String)","prompt":""},{"id":348,"identifierName":"com.waz.zclient.storage.db.accountdata.ActiveAccountsDao","requiredType":[],"content":"@Query(\"SELECT * from ActiveAccounts\")\n    suspend fun activeAccounts(): List<ActiveAccountsEntity>","prompt":""},{"id":349,"identifierName":"com.waz.zclient.storage.db.accountdata.ActiveAccountsDao","requiredType":[],"content":"@Query(\"SELECT * from ActiveAccounts WHERE _id = :id LIMIT 1\")\n    suspend fun activeAccountById(id: String): ActiveAccountsEntity?","prompt":""},{"id":350,"identifierName":"com.waz.zclient.storage.db.accountdata.ActiveAccountsDao","requiredType":[],"content":"@Insert\n    suspend fun insertActiveAccount(activeAccountsEntity: ActiveAccountsEntity)","prompt":""},{"id":351,"identifierName":"com.waz.zclient.storage.db.accountdata.ActiveAccountsDao","requiredType":[],"content":"@Query(\"DELETE from ActiveAccounts WHERE _id = :id\")\n    suspend fun removeAccount(id: String)","prompt":""},{"id":352,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Observes list of tasks.\n     *\n     * @return all tasks.\n     */\n    @Query(\"SELECT * FROM Tasks\")\n    fun observeTasks(): LiveData<List<Task>>","prompt":""},{"id":353,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Observes a single task.\n     *\n     * @param taskId the task id.\n     * @return the task with taskId.\n     */\n    @Query(\"SELECT * FROM Tasks WHERE entryid = :taskId\")\n    fun observeTaskById(taskId: String): LiveData<Task>","prompt":""},{"id":354,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Select all tasks from the tasks table.\n     *\n     * @return all tasks.\n     */\n    @Query(\"SELECT * FROM Tasks\")\n    suspend fun getTasks(): List<Task>","prompt":""},{"id":355,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Select a task by id.\n     *\n     * @param taskId the task id.\n     * @return the task with taskId.\n     */\n    @Query(\"SELECT * FROM Tasks WHERE entryid = :taskId\")\n    suspend fun getTaskById(taskId: String): Task?","prompt":""},{"id":356,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Insert a task in the database. If the task already exists, replace it.\n     *\n     * @param task the task to be inserted.\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertTask(task: Task)","prompt":""},{"id":357,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Update a task.\n     *\n     * @param task task to be updated\n     * @return the number of tasks updated. This should always be 1.\n     */\n    @Update\n    suspend fun updateTask(task: Task): Int","prompt":""},{"id":358,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Update the complete status of a task\n     *\n     * @param taskId id of the task\n     * @param completed status to be updated\n     */\n    @Query(\"UPDATE tasks SET completed = :completed WHERE entryid = :taskId\")\n    suspend fun updateCompleted(taskId: String, completed: Boolean)","prompt":""},{"id":359,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Delete a task by id.\n     *\n     * @return the number of tasks deleted. This should always be 1.\n     */\n    @Query(\"DELETE FROM Tasks WHERE entryid = :taskId\")\n    suspend fun deleteTaskById(taskId: String): Int","prompt":""},{"id":360,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Delete all tasks.\n     */\n    @Query(\"DELETE FROM Tasks\")\n    suspend fun deleteTasks()","prompt":""},{"id":361,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Delete all completed tasks from the table.\n     *\n     * @return the number of tasks deleted.\n     */\n    @Query(\"DELETE FROM Tasks WHERE completed = 1\")\n    suspend fun deleteCompletedTasks(): Int","prompt":""},{"id":362,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `StandardRound`\")\n    abstract fun loadStandardRounds(): List<StandardRound>","prompt":""},{"id":363,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `StandardRound` WHERE `id` = :id\")\n    abstract fun loadStandardRound(id: Long): StandardRound","prompt":""},{"id":364,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Transaction\n    open fun loadAugmentedStandardRound(id: Long): AugmentedStandardRound =\n        AugmentedStandardRound(loadStandardRound(id), loadRoundTemplates(id).toMutableList())","prompt":""},{"id":365,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `StandardRound` WHERE `id` = :id\")\n    abstract fun loadStandardRoundOrNull(id: Long): StandardRound?","prompt":""},{"id":366,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `StandardRound` WHERE `name` LIKE :query AND `club` != 512\")\n    abstract fun getAllSearch(query: String): List<StandardRound>","prompt":""},{"id":367,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `RoundTemplate` WHERE `standardRoundId` = :id ORDER BY `index`\")\n    abstract fun loadRoundTemplates(id: Long): List<RoundTemplate>","prompt":""},{"id":368,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Insert\n    abstract fun insertStandardRound(round: StandardRound): Long","prompt":""},{"id":369,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Update\n    abstract fun updateStandardRound(round: StandardRound)","prompt":""},{"id":370,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Insert\n    abstract fun insertRoundTemplate(round: RoundTemplate): Long","prompt":""},{"id":371,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Query(\"DELETE FROM `RoundTemplate` WHERE `standardRoundId` = (:id)\")\n    abstract fun deleteRoundTemplates(id: Long)","prompt":""},{"id":372,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Transaction\n    open fun saveStandardRound(standardRound: StandardRound, roundTemplates: List<RoundTemplate>) {\n        if(standardRound.id == 0L) {\n            standardRound.id = insertStandardRound(standardRound)\n        } else {\n            updateStandardRound(standardRound)\n        }\n        deleteRoundTemplates(standardRound.id)\n        for (roundTemplate in roundTemplates) {\n            roundTemplate.standardRoundId = standardRound.id\n            roundTemplate.id = insertRoundTemplate(roundTemplate)\n        }\n    }","prompt":""},{"id":373,"identifierName":"de.dreier.mytargets.base.db.dao.StandardRoundDAO","requiredType":[],"content":"@Delete\n    abstract fun deleteStandardRound(standardRound: StandardRound)","prompt":""},{"id":374,"identifierName":"org.tasks.data.TaskListMetadataDao","requiredType":[],"content":"@Query(\"SELECT * from task_list_metadata where tag_uuid = :tagUuid OR filter = :tagUuid LIMIT 1\")\n    abstract suspend fun fetchByTagOrFilter(tagUuid: String): TaskListMetadata?","prompt":""},{"id":375,"identifierName":"org.tasks.data.TaskListMetadataDao","requiredType":[],"content":"@Query(\"SELECT * FROM task_list_metadata\")\n    abstract suspend fun getAll(): List<TaskListMetadata>","prompt":""},{"id":376,"identifierName":"org.tasks.data.TaskListMetadataDao","requiredType":[],"content":"@Update\n    abstract suspend fun update(taskListMetadata: TaskListMetadata)","prompt":""},{"id":377,"identifierName":"org.tasks.data.TaskListMetadataDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insert(taskListMetadata: TaskListMetadata): Long","prompt":""},{"id":378,"identifierName":"org.tasks.data.TaskListMetadataDao","requiredType":[],"content":"suspend fun createNew(taskListMetadata: TaskListMetadata) {\n        taskListMetadata.id = insert(taskListMetadata)\n    }","prompt":""},{"id":379,"identifierName":"us.mikeandwan.photos.database.PhotoPreferenceDao","requiredType":[],"content":"@Query(\"SELECT * FROM photo_preference WHERE id = :id\")\n    fun getPhotoPreference(id: Int): Flow<PhotoPreference>","prompt":""},{"id":380,"identifierName":"us.mikeandwan.photos.database.PhotoPreferenceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun setPhotoPreference(preference: PhotoPreference)","prompt":""},{"id":381,"identifierName":"com.keylesspalace.tusky.db.InstanceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertOrReplace(instance: InstanceEntity)","prompt":""},{"id":382,"identifierName":"com.keylesspalace.tusky.db.InstanceDao","requiredType":[],"content":"@Query(\"SELECT * FROM InstanceEntity WHERE instance = :instance LIMIT 1\")\n    fun loadMetadataForInstance(instance: String): InstanceEntity?","prompt":""},{"id":383,"identifierName":"fr.vbastien.mycoincollector.db.CountryDao","requiredType":[],"content":"@Query(\"SELECT Country.* FROM Country JOIN Coin ON Coin.country_id = Country.country_id GROUP BY Country.country_id\")\n    fun findCountriesWithCoin() : Maybe<List<Country>>","prompt":""},{"id":384,"identifierName":"fr.vbastien.mycoincollector.db.CountryDao","requiredType":[],"content":"@Query(\"SELECT Country.* FROM Country\")\n    fun findCountries() : Maybe<List<Country>>","prompt":""},{"id":385,"identifierName":"fr.vbastien.mycoincollector.db.CountryDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insertCountry(country : Country)","prompt":""},{"id":386,"identifierName":"fr.vbastien.mycoincollector.db.CountryDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM Country \")\n    fun countCountries() : Single<Int>","prompt":""},{"id":387,"identifierName":"info.nightscout.androidaps.database.daos.MultiwaveBolusLinkDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_MULTIWAVE_BOLUS_LINKS WHERE id = :id\")\n    override fun findById(id: Long): MultiwaveBolusLink?","prompt":""},{"id":388,"identifierName":"info.nightscout.androidaps.database.daos.MultiwaveBolusLinkDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_MULTIWAVE_BOLUS_LINKS\")\n    override fun deleteAllEntries()","prompt":""},{"id":389,"identifierName":"info.nightscout.androidaps.database.daos.MultiwaveBolusLinkDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_MULTIWAVE_BOLUS_LINKS WHERE dateCreated > :since AND dateCreated <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<MultiwaveBolusLink>","prompt":""},{"id":390,"identifierName":"com.google.android.apps.muzei.legacy.SourceDao","requiredType":[],"content":"@Query(\"SELECT * FROM sources\")\n    abstract suspend fun getSources(): List<Source>","prompt":""},{"id":391,"identifierName":"com.google.android.apps.muzei.legacy.SourceDao","requiredType":[],"content":"@TypeConverters(ComponentNameTypeConverter::class)\n    @Query(\"SELECT component_name FROM sources\")\n    abstract suspend fun getSourceComponentNames(): List<ComponentName>","prompt":""},{"id":392,"identifierName":"com.google.android.apps.muzei.legacy.SourceDao","requiredType":[],"content":"@Query(\"SELECT * FROM sources WHERE selected=1 ORDER BY component_name\")\n    abstract suspend fun getCurrentSource(): Source?","prompt":""},{"id":393,"identifierName":"com.google.android.apps.muzei.legacy.SourceDao","requiredType":[],"content":"@Query(\"SELECT * FROM sources WHERE selected=1 AND wantsNetworkAvailable=1\")\n    abstract suspend fun getCurrentSourcesThatWantNetwork(): List<Source>","prompt":""},{"id":394,"identifierName":"com.google.android.apps.muzei.legacy.SourceDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insert(source: Source)","prompt":""},{"id":395,"identifierName":"com.google.android.apps.muzei.legacy.SourceDao","requiredType":[],"content":"@TypeConverters(ComponentNameTypeConverter::class)\n    @Query(\"SELECT component_name FROM sources WHERE component_name LIKE :packageName || '%'\")\n    abstract suspend fun getSourcesComponentNamesByPackageName(packageName: String): List<ComponentName>","prompt":""},{"id":396,"identifierName":"com.google.android.apps.muzei.legacy.SourceDao","requiredType":[],"content":"@TypeConverters(ComponentNameTypeConverter::class)\n    @Query(\"SELECT * FROM sources WHERE component_name = :componentName\")\n    abstract suspend fun getSourceByComponentName(componentName: ComponentName): Source?","prompt":""},{"id":397,"identifierName":"com.google.android.apps.muzei.legacy.SourceDao","requiredType":[],"content":"@Update\n    abstract suspend fun update(source: Source)","prompt":""},{"id":398,"identifierName":"com.google.android.apps.muzei.legacy.SourceDao","requiredType":[],"content":"@Delete\n    abstract suspend fun delete(source: Source)","prompt":""},{"id":399,"identifierName":"com.google.android.apps.muzei.legacy.SourceDao","requiredType":[],"content":"@TypeConverters(ComponentNameTypeConverter::class)\n    @Query(\"DELETE FROM sources WHERE component_name IN (:componentNames)\")\n    abstract suspend fun deleteAll(componentNames: Array<ComponentName>)","prompt":""},{"id":400,"identifierName":"six.ca.droiddailyproject.arch.db.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user\")\n    fun getUserList(): List<User>","prompt":""},{"id":401,"identifierName":"six.ca.droiddailyproject.arch.db.UserDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertUser(newUser: User): Long","prompt":""},{"id":402,"identifierName":"six.ca.droiddailyproject.arch.db.UserDao","requiredType":[],"content":"@Update\n    fun updateUser(user: User): Int","prompt":""},{"id":403,"identifierName":"six.ca.droiddailyproject.arch.db.UserDao","requiredType":[],"content":"@Delete\n    fun deleteUser(user: User): Int","prompt":""},{"id":404,"identifierName":"io.mgba.data.local.daos.GameDAO","requiredType":["data class Gamenull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    @Transaction\n    fun insert(game: Game)","prompt":""},{"id":405,"identifierName":"io.mgba.data.local.daos.GameDAO","requiredType":["data class Gamenull"],"content":"@Update\n    @Transaction\n    fun update(game: Game)","prompt":""},{"id":406,"identifierName":"io.mgba.data.local.daos.GameDAO","requiredType":["data class Gamenull"],"content":"@Delete\n    @Transaction\n    fun delete(games: Game)","prompt":""},{"id":407,"identifierName":"io.mgba.data.local.daos.GameDAO","requiredType":["data class Gamenull"],"content":"@Query(\"SELECT * FROM Games WHERE id = :game\")\n    fun get(game: String): Game","prompt":""},{"id":408,"identifierName":"io.mgba.data.local.daos.GameDAO","requiredType":[],"content":"@Query(\"DELETE FROM Games\")\n    @Transaction\n    fun clearLibrary()","prompt":""},{"id":409,"identifierName":"io.mgba.data.local.daos.GameDAO","requiredType":[],"content":"@Query(\"SELECT * FROM Games WHERE name LIKE :query ORDER BY name\")\n    fun query(query: String): LiveData<List<Game>>","prompt":""},{"id":410,"identifierName":"io.mgba.data.local.daos.GameDAO","requiredType":[],"content":"@Query(\"SELECT * FROM Games WHERE favourite = 1 ORDER BY name\")\n    fun monitorFavouriteGames(): LiveData<List<Game>>","prompt":""},{"id":411,"identifierName":"io.mgba.data.local.daos.GameDAO","requiredType":[],"content":"@Query(\"SELECT * FROM Games WHERE platform = 1 ORDER BY name\")\n    fun monitorGameboyColorGames(): LiveData<List<Game>>","prompt":""},{"id":412,"identifierName":"io.mgba.data.local.daos.GameDAO","requiredType":[],"content":"@Query(\"SELECT * FROM Games WHERE platform = 2 ORDER BY name\")\n    fun monitorGameboyAdvancedGames(): LiveData<List<Game>>","prompt":""},{"id":413,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT news.id, news.feed_id, news.title, text, author, pub_date, news.url, upd_date, news_state.is_read, news_state.is_starred, feeds.title AS feed_title FROM news LEFT OUTER JOIN news_state ON news.id = news_state.id AND news.feed_id = news_state.feed_id LEFT OUTER JOIN feeds ON news.feed_id = feeds.id WHERE news_state.is_starred ORDER BY pub_date DESC\")\n    protected abstract fun queryStarred(): LiveData<List<News>>","prompt":""},{"id":414,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT news.id, news.feed_id, news.title, text, author, pub_date, news.url, upd_date, news_state.is_read, news_state.is_starred, feeds.title AS feed_title FROM news LEFT OUTER JOIN news_state ON news.id = news_state.id AND news.feed_id = news_state.feed_id LEFT OUTER JOIN feeds ON news.feed_id = feeds.id WHERE feeds.is_starred ORDER BY pub_date DESC\")\n    protected abstract fun query(): LiveData<List<News>>","prompt":""},{"id":415,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT news.id, news.feed_id, news.title, text, author, pub_date, news.url, upd_date, news_state.is_read, news_state.is_starred, feeds.title AS feed_title FROM news LEFT OUTER JOIN news_state ON news.id = news_state.id AND news.feed_id = news_state.feed_id LEFT OUTER JOIN feeds ON news.feed_id = feeds.id WHERE news.feed_id = :feedId ORDER BY pub_date DESC\")\n    protected abstract fun query(feedId: Int): LiveData<List<News>>","prompt":""},{"id":416,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":["data class DbNews( @PrimaryKey val id: Int, @ColumnInfo(name = \"feed_id\") val feedId: Int, val title: String, val text: String, val author: String?, @ColumnInfo(name = \"pub_date\") val pubDate: Long, @ColumnInfo(name = \"upd_date\") val updDate: Long, val url: String? )"],"content":"/**\n     * Get info for the specified news id.\n     *\n     * @param newsId news id\n     */\n    @Query(\"SELECT news.id, news.feed_id, news.title, text, author, pub_date, news.url, upd_date, news_state.is_read, news_state.is_starred, feeds.title AS feed_title FROM news LEFT OUTER JOIN news_state ON news.id = news_state.id AND news.feed_id = news_state.feed_id LEFT OUTER JOIN feeds ON news.feed_id = feeds.id WHERE news.id = :newsId\")\n    abstract fun getInfo(newsId: Int): LiveData<News>","prompt":""},{"id":417,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":[],"content":"/**\n     * Get my news only for all feeds.\n     */\n    fun getMyNews(): LiveData<List<News>> = queryStarred().getDistinct()","prompt":""},{"id":418,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":[],"content":"/**\n     * Get all news for my feeds only.\n     */\n    fun getNews(): LiveData<List<News>> = query().getDistinct()","prompt":""},{"id":419,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":[],"content":"/**\n     * Get all news for the specified feed.\n     *\n     * @param feedId feed id\n     */\n    fun getNews(feedId: Int): LiveData<List<News>> = query(feedId).getDistinct()","prompt":""},{"id":420,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM news\")\n    abstract fun deleteAll()","prompt":""},{"id":421,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM news WHERE feed_id = :feedId\")\n    abstract fun deleteAll(feedId: Int)","prompt":""},{"id":422,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM news WHERE feed_id = :feedId AND upd_date < :untilDate AND id NOT IN (SELECT id FROM news_state WHERE feed_id = :feedId AND is_starred = 1)\")\n    abstract fun deleteOlder(feedId: Int, untilDate: Long)","prompt":""},{"id":423,"identifierName":"ro.edi.novelty.data.db.dao.NewsDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM news WHERE feed_id = :feedId AND id NOT IN (SELECT id FROM news_state WHERE feed_id = :feedId AND is_starred = 1) AND pub_date NOT IN (SELECT pub_date FROM news LEFT OUTER JOIN news_state ON news.id = news_state.id AND news.feed_id = news_state.feed_id WHERE news.feed_id = :feedId AND news_state.is_starred == 0 ORDER BY pub_date DESC LIMIT :keepCount)\")\n    abstract fun deleteAllButLatest(feedId: Int, keepCount: Int)","prompt":""},{"id":424,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.ABORT)\n    fun insert(downloadInfo: DownloadInfo): Long","prompt":""},{"id":425,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.ABORT)\n    fun insert(downloadInfoList: List<DownloadInfo>): List<Long>","prompt":""},{"id":426,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Delete\n    fun delete(downloadInfo: DownloadInfo)","prompt":""},{"id":427,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Delete\n    fun delete(downloadInfoList: List<DownloadInfo>)","prompt":""},{"id":428,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_NAME\")\n    fun deleteAll()","prompt":""},{"id":429,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun update(download: DownloadInfo)","prompt":""},{"id":430,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun update(downloadInfoList: List<DownloadInfo>)","prompt":""},{"id":431,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_NAME\")\n    fun get(): List<DownloadInfo>","prompt":""},{"id":432,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_ID = :id\")\n    fun get(id: Int): DownloadInfo?","prompt":""},{"id":433,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_ID IN (:ids)\")\n    fun get(ids: List<Int>): List<DownloadInfo>","prompt":""},{"id":434,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_FILE = :file\")\n    fun getByFile(file: String): DownloadInfo?","prompt":""},{"id":435,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":["data class Statusconstructor(val value: Int)"],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_STATUS = :status\")\n    fun getByStatus(status: Status): List<DownloadInfo>","prompt":""},{"id":436,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_STATUS IN (:statuses)\")\n    fun getByStatus(statuses: List<@JvmSuppressWildcards Status>): List<DownloadInfo>","prompt":""},{"id":437,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_GROUP = :group\")\n    fun getByGroup(group: Int): List<DownloadInfo>","prompt":""},{"id":438,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_GROUP = :group AND $COLUMN_STATUS IN (:statuses)\")\n    fun getByGroupWithStatus(group: Int, statuses: List<@JvmSuppressWildcards Status>): List<DownloadInfo>","prompt":""},{"id":439,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":["data class Statusconstructor(val value: Int)"],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_STATUS = :status ORDER BY $COLUMN_PRIORITY DESC, $COLUMN_CREATED ASC\")\n    fun getPendingDownloadsSorted(status: Status): List<DownloadInfo>","prompt":""},{"id":440,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":["data class Statusconstructor(val value: Int)"],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_STATUS = :status ORDER BY $COLUMN_PRIORITY DESC, $COLUMN_CREATED DESC\")\n    fun getPendingDownloadsSortedDesc(status: Status): List<DownloadInfo>","prompt":""},{"id":441,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_IDENTIFIER = :identifier\")\n    fun getDownloadsByRequestIdentifier(identifier: Long): List<DownloadInfo>","prompt":""},{"id":442,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_NAME WHERE $COLUMN_TAG = :tag\")\n    fun getDownloadsByTag(tag: String): List<DownloadInfo>","prompt":""},{"id":443,"identifierName":"com.tonyodev.fetch2.database.DownloadDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT $COLUMN_GROUP from $TABLE_NAME\")\n    fun getAllGroupIds(): List<Int>","prompt":""},{"id":444,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.DatabaseHelper","requiredType":[],"content":"fun getContactById(id:Long) = this.contactDao.findContactById(id)","prompt":""},{"id":445,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.DatabaseHelper","requiredType":[],"content":"fun getAllContacts() = this.contactDao.findAllContacts()","prompt":""},{"id":446,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.DatabaseHelper","requiredType":[],"content":"fun addContacts(vararg contact:Contact) = this.contactDao.insertContacts(*contact)","prompt":""},{"id":447,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.DatabaseHelper","requiredType":[],"content":"fun modifyContacts(vararg contact:Contact) = this.contactDao.updateContacts(*contact)","prompt":""},{"id":448,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.DatabaseHelper","requiredType":[],"content":"fun removeContacts(vararg contact:Contact) = this.contactDao.deleteContacts(*contact)","prompt":""},{"id":449,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.Contact","requiredType":[],"content":"override fun writeToParcel(parcel: Parcel, flags: Int)\n    {\n        parcel.writeLong(this.id)\n        parcel.writeString(this.name)\n        parcel.writeString(this.phone)\n        parcel.writeLong(this.birthday)\n        parcel.writeString(this.address)\n        parcel.writeString(this.profile)\n        parcel.writeByte(if (this.isStarContact) 1 else 0)\n        parcel.writeString(this.info)\n    }","prompt":""},{"id":450,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.Contact","requiredType":[],"content":"override fun describeContents(): Int = 0","prompt":""},{"id":451,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.ContactDao","requiredType":[],"content":"@Query(\"SELECT * FROM contact WHERE id = :arg0\")\n    fun findContactById(id:Long):Contact?","prompt":""},{"id":452,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.ContactDao","requiredType":[],"content":"@Query(\"SELECT * FROM contact\")\n    fun findAllContacts():List<Contact>","prompt":""},{"id":453,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.ContactDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertContacts(vararg contact:Contact)","prompt":""},{"id":454,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.ContactDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.ABORT)\n    fun updateContacts(vararg contact:Contact)","prompt":""},{"id":455,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.ContactDao","requiredType":[],"content":"@Delete\n    fun deleteContacts(vararg contact:Contact)","prompt":""},{"id":456,"identifierName":"me.liuqingwen.android.projectbetterpracticefragment.AppDatabase","requiredType":[],"content":"abstract fun contactDao():ContactDao","prompt":""},{"id":457,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM subscriptions\")\n    abstract fun rowCount(): Flowable<Long>","prompt":""},{"id":458,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM subscriptions WHERE service_id = :serviceId\")\n    abstract override fun listByService(serviceId: Int): Flowable<List<SubscriptionEntity>>","prompt":""},{"id":459,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM subscriptions ORDER BY name COLLATE NOCASE ASC\")\n    abstract override fun getAll(): Flowable<List<SubscriptionEntity>>","prompt":""},{"id":460,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT * FROM subscriptions\n\n        WHERE name LIKE '%' || :filter || '%'\n\n        ORDER BY name COLLATE NOCASE ASC\n        \"\"\"\n    )\n    abstract fun getSubscriptionsFiltered(filter: String): Flowable<List<SubscriptionEntity>>","prompt":""},{"id":461,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT * FROM subscriptions s\n\n        LEFT JOIN feed_group_subscription_join fgs\n        ON s.uid = fgs.subscription_id\n\n        WHERE (fgs.subscription_id IS NULL OR fgs.group_id = :currentGroupId)\n\n        ORDER BY name COLLATE NOCASE ASC\n        \"\"\"\n    )\n    abstract fun getSubscriptionsOnlyUngrouped(\n        currentGroupId: Long\n    ): Flowable<List<SubscriptionEntity>>","prompt":""},{"id":462,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT * FROM subscriptions s\n\n        LEFT JOIN feed_group_subscription_join fgs\n        ON s.uid = fgs.subscription_id\n\n        WHERE (fgs.subscription_id IS NULL OR fgs.group_id = :currentGroupId)\n        AND s.name LIKE '%' || :filter || '%'\n\n        ORDER BY name COLLATE NOCASE ASC\n        \"\"\"\n    )\n    abstract fun getSubscriptionsOnlyUngroupedFiltered(\n        currentGroupId: Long,\n        filter: String\n    ): Flowable<List<SubscriptionEntity>>","prompt":""},{"id":463,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM subscriptions WHERE url LIKE :url AND service_id = :serviceId\")\n    abstract fun getSubscriptionFlowable(serviceId: Int, url: String): Flowable<List<SubscriptionEntity>>","prompt":""},{"id":464,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM subscriptions WHERE url LIKE :url AND service_id = :serviceId\")\n    abstract fun getSubscription(serviceId: Int, url: String): Maybe<SubscriptionEntity>","prompt":""},{"id":465,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM subscriptions WHERE uid = :subscriptionId\")\n    abstract fun getSubscription(subscriptionId: Long): SubscriptionEntity","prompt":""},{"id":466,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\"DELETE FROM subscriptions\")\n    abstract override fun deleteAll(): Int","prompt":""},{"id":467,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\"DELETE FROM subscriptions WHERE url LIKE :url AND service_id = :serviceId\")\n    abstract fun deleteSubscription(serviceId: Int, url: String): Int","prompt":""},{"id":468,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Query(\"SELECT uid FROM subscriptions WHERE url LIKE :url AND service_id = :serviceId\")\n    internal abstract fun getSubscriptionIdInternal(serviceId: Int, url: String): Long?","prompt":""},{"id":469,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    internal abstract fun silentInsertAllInternal(entities: List<SubscriptionEntity>): List<Long>","prompt":""},{"id":470,"identifierName":"org.schabi.newpipe.database.subscription.SubscriptionDAO","requiredType":[],"content":"@Transaction\n    open fun upsertAll(entities: List<SubscriptionEntity>): List<SubscriptionEntity> {\n        val insertUidList = silentInsertAllInternal(entities)\n\n        insertUidList.forEachIndexed { index: Int, uidFromInsert: Long ->\n            val entity = entities[index]\n\n            if (uidFromInsert != -1L) {\n                entity.uid = uidFromInsert\n            } else {\n                val subscriptionIdFromDb = getSubscriptionIdInternal(entity.serviceId, entity.url)\n                    ?: throw IllegalStateException(\"Subscription cannot be null just after insertion.\")\n                entity.uid = subscriptionIdFromDb\n\n                update(entity)\n            }\n        }\n\n        return entities\n    }","prompt":""},{"id":471,"identifierName":"org.xwiki.android.sync.contactdb.dao.AllUsersCacheDao","requiredType":[],"content":"@Query(\"SELECT * from $ALL_USERS_LIST_TABLE WHERE $UserAccountIdColumn LIKE :id\")\n    operator fun get(id: UserAccountId): AccountAllUsersEntity?","prompt":""},{"id":472,"identifierName":"org.xwiki.android.sync.contactdb.dao.AllUsersCacheDao","requiredType":["data class AccountAllUsersEntity( @PrimaryKey @ColumnInfo(name = UserAccountIdColumn) val id: UserAccountId, @ColumnInfo(name = AllUsersListColumn) var allUsersList: List<ObjectSummary> )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun set(syncTypeAccountAllUsersTable: AccountAllUsersEntity)","prompt":""},{"id":473,"identifierName":"org.xwiki.android.sync.contactdb.dao.AllUsersCacheDao","requiredType":[],"content":"@Query (\"DELETE FROM $ALL_USERS_LIST_TABLE WHERE $UserAccountIdColumn = :id\")\n    fun remove(id: UserAccountId)","prompt":""},{"id":474,"identifierName":"uk.colessoft.android.hilllist.dao.BaggingDao","requiredType":["data class Bagging(@PrimaryKey val b_id: Long, val dateClimbed: Date, val notes: String = \"\")"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertBagging(vararg baggings: Bagging)","prompt":""},{"id":475,"identifierName":"uk.colessoft.android.hilllist.dao.BaggingDao","requiredType":[],"content":"@Query(\"DELETE FROM bagging WHERE b_id = :id\")\n    fun deleteByHillId(id: Long)","prompt":""},{"id":476,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"@Query(\"select Novel.* from BookListItem left join Novel on BookListItem.novelId = Novel.id where BookListItem.bookListId = :bookListId order by pinnedTime desc, max(receiveUpdateTime, readTime) desc\")\n    abstract fun queryNovel(bookListId: Long): List<Novel>","prompt":""},{"id":477,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":["data class NovelMinimal( /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String )"],"content":"// 小数点.开头的是本地小说，不要，\n    @Query(\"select Novel.site, Novel.author, Novel.name, Novel.detail  from BookListItem left join Novel on BookListItem.novelId = Novel.id where BookListItem.bookListId = :bookListId and Novel.site not like '.%'\")\n    abstract fun queryNovelMinimal(bookListId: Long): List<NovelMinimal>","prompt":""},{"id":478,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":[],"content":"@Query(\"update Novel set bookshelf = 0 where id in (select novelId from BookListItem where bookListId = :bookListId)\")\n    abstract fun removeBookshelf(bookListId: Long)","prompt":""},{"id":479,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":[],"content":"@Query(\"update Novel set bookshelf = 1 where id in (select novelId from BookListItem where bookListId = :bookListId)\")\n    abstract fun addBookshelf(bookListId: Long)","prompt":""},{"id":480,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":[],"content":"@Query(\"select 1 from BookListItem where bookListId = :bookListId and novelId = :novelId\")\n    abstract fun contains(bookListId: Long, novelId: Long): Boolean","prompt":""},{"id":481,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":[],"content":"@Query(\"select id from BookList where name = :name\")\n    abstract fun queryBookListId(name: String): Long","prompt":""},{"id":482,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":[],"content":"@Query(\"delete from BookListItem where bookListId = :bookListId and novelId = :novelId\")\n    abstract fun deleteIfExists(bookListId: Long, novelId: Long)","prompt":""},{"id":483,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":[],"content":"@Query(\"delete from BookListItem where bookListId = :bookListId\")\n    abstract fun resetBookList(bookListId: Long)","prompt":""},{"id":484,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":["data class BookListItem( /** * 书单的名字，建个索引，同名的认为是同一个书单， */ val bookListId: Long, /** * 外键id, 对应小说表中的id, */ val novelId: Long )"],"content":"/**\n     * 操作太快可能重复，无视，\n     */\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    abstract fun insert(bookListItem: BookListItem)","prompt":""},{"id":485,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":["data class BookList( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) val id: Long? = null, val name: String, /** * 创建书单的时间，用于展示时排序， */ val createTime: Date = Date(), /** * 唯一的uuid, 为了避免重复导入同一个书单造成重复， */ val uuid: String = UUID.randomUUID().toString() )"],"content":"/**\n     * 插入的只能是不带有主键id的，不可能重复，\n     * 返回插入的书单id,\n     */\n    @Insert\n    abstract fun insert(bookList: BookList): Long","prompt":""},{"id":486,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":["data class BookListItem( /** * 书单的名字，建个索引，同名的认为是同一个书单， */ val bookListId: Long, /** * 外键id, 对应小说表中的id, */ val novelId: Long )"],"content":"@Delete\n    abstract fun deleteItem(bookListItem: BookListItem)","prompt":""},{"id":487,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":["data class BookList( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) val id: Long? = null, val name: String, /** * 创建书单的时间，用于展示时排序， */ val createTime: Date = Date(), /** * 唯一的uuid, 为了避免重复导入同一个书单造成重复， */ val uuid: String = UUID.randomUUID().toString() )"],"content":"@Delete\n    abstract fun deleteList(bookList: BookList)","prompt":""},{"id":488,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":["data class BookList( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) val id: Long? = null, val name: String, /** * 创建书单的时间，用于展示时排序， */ val createTime: Date = Date(), /** * 唯一的uuid, 为了避免重复导入同一个书单造成重复， */ val uuid: String = UUID.randomUUID().toString() )"],"content":"@Query(\"select * from BookList where id = :id\")\n    abstract fun queryBookList(id: Long): BookList","prompt":""},{"id":489,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":[],"content":"@Query(\"select * from BookList where uuid = :uuid\")\n    abstract fun queryBookListByUuid(uuid: String): BookList?","prompt":""},{"id":490,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":["data class BookList( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) val id: Long? = null, val name: String, /** * 创建书单的时间，用于展示时排序， */ val createTime: Date = Date(), /** * 唯一的uuid, 为了避免重复导入同一个书单造成重复， */ val uuid: String = UUID.randomUUID().toString() )"],"content":"@Query(\"select * from BookList\")\n    abstract fun list(): List<BookList>","prompt":""},{"id":491,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":[],"content":"@Query(\"update BookList set name = :name where id = :id\")\n    abstract fun updateBookListName(id: Long, name: String)","prompt":""},{"id":492,"identifierName":"cc.aoeiuv020.panovel.data.dao.BookListDao","requiredType":[],"content":"@Query(\"delete from BookList\")\n    abstract fun cleanBookList()","prompt":""},{"id":493,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.THREAD_ID} = :threadId AND ${History.BOARD_NAME} = :boardName\")\n    abstract fun getHistoryByThread(boardName: String, threadId: Long): Flowable<History>","prompt":""},{"id":494,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE}\")\n    abstract fun getAll(): Flowable<List<History>>","prompt":""},{"id":495,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.THREAD_REMOVED} = 0 AND ${History.WATCHED} = 1 ORDER BY ${History.LAST_ACCESS} ASC LIMIT 1\")\n    abstract fun oldestActiveBookmark(): Single<History>","prompt":""},{"id":496,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.WATCHED} = 0 ORDER BY ${History.ORDER_ID} LIMIT :count\")\n    abstract fun getHistory(count: Int): Flowable<List<History>>","prompt":""},{"id":497,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.WATCHED} = 1 ORDER BY ${History.ORDER_ID} LIMIT :count\")\n    abstract fun getBookmarks(count: Int): Flowable<List<History>>","prompt":""},{"id":498,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.WATCHED} = 0 ORDER BY ${History.ORDER_ID}\")\n    abstract fun getHistory(): Flowable<List<History>>","prompt":""},{"id":499,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.WATCHED} = 1 ORDER BY ${History.ORDER_ID}\")\n    abstract fun getBookmarks(): Flowable<List<History>>","prompt":""},{"id":500,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.THREAD_REMOVED} = 0 LIMIT :count\")\n    abstract fun getAllActive(count: Int = 9999): Flowable<List<History>>","prompt":""},{"id":501,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.WATCHED} = 0 AND ${History.THREAD_REMOVED} = 0 ORDER BY ${History.ORDER_ID} LIMIT :count\")\n    abstract fun getActiveHistory(count: Int = 9999): Flowable<List<History>>","prompt":""},{"id":502,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.WATCHED} = 0 AND ${History.THREAD_REMOVED} = 0 ORDER BY ${History.ORDER_ID}\")\n    abstract fun getActiveHistory(): Flowable<List<History>>","prompt":""},{"id":503,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.WATCHED} = 1 AND ${History.THREAD_REMOVED} = 0 ORDER BY ${History.ORDER_ID} LIMIT :count\")\n    abstract fun getActiveBookmarks(count: Int): Flowable<List<History>>","prompt":""},{"id":504,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.WATCHED} = 1 AND ${History.THREAD_REMOVED} = 0 ORDER BY ${History.ORDER_ID}\")\n    abstract fun getActiveBookmarks(): Flowable<List<History>>","prompt":""},{"id":505,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} ORDER BY ${History.LAST_ACCESS} DESC\")\n    abstract fun getAllByLastAccess(): Flowable<List<History>>","prompt":""},{"id":506,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.LAST_ACCESS} < :timestamp AND ${History.WATCHED} = :watched ORDER BY ${History.LAST_ACCESS} DESC\")\n    abstract fun getOldHistory(timestamp: Long, watched: Boolean): Single<List<History>>","prompt":""},{"id":507,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"UPDATE ${MimiDatabase.HISTORY_TABLE} SET ${History.WATCHED} = :watched WHERE ${History.THREAD_ID} = :threadId AND ${History.BOARD_NAME} = :boardName\")\n    abstract fun watched(boardName: String, threadId: Long, watched: Boolean): Single<Int>","prompt":""},{"id":508,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"UPDATE ${MimiDatabase.HISTORY_TABLE} SET ${History.UNREAD_COUNT} = :count WHERE ${History.THREAD_ID} = :threadId AND ${History.BOARD_NAME} = :boardName\")\n    abstract fun unreadCount(boardName: String, threadId: Long, count: Int): Single<Int>","prompt":""},{"id":509,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"UPDATE ${MimiDatabase.HISTORY_TABLE} SET ${History.LAST_ACCESS} = :timestamp WHERE ${History.THREAD_ID} = :threadId AND ${History.BOARD_NAME} = :boardName\")\n    abstract fun lastAccessed(boardName: String, threadId: Long, timestamp: Long): Single<Int>","prompt":""},{"id":510,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"UPDATE ${MimiDatabase.HISTORY_TABLE} SET ${History.LAST_READ_POS} = :position WHERE ${History.THREAD_ID} = :threadId AND ${History.BOARD_NAME} = :boardName\")\n    abstract fun lastReadPos(boardName: String, threadId: Long, position: Int): Single<Int>","prompt":""},{"id":511,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"UPDATE ${MimiDatabase.HISTORY_TABLE} SET ${History.THREAD_REMOVED} = :removed WHERE ${History.BOARD_NAME} = :boardName AND ${History.THREAD_ID} = :threadId\")\n    abstract fun threadRemoved(boardName: String, threadId: Long, removed: Boolean): Single<Int>","prompt":""},{"id":512,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"UPDATE ${MimiDatabase.HISTORY_TABLE} SET ${History.SIZE} = :size WHERE ${History.BOARD_NAME} = :boardName AND ${History.THREAD_ID} = :threadId\")\n    abstract fun threadSize(boardName: String, threadId: Long, size: Int): Single<Int>","prompt":""},{"id":513,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"UPDATE ${MimiDatabase.HISTORY_TABLE} SET ${History.ORDER_ID} = :order WHERE ${History.BOARD_NAME} = :boardName AND ${History.THREAD_ID} = :threadId\")\n    abstract fun order(boardName: String, threadId: Long, order: Int): Single<Int>","prompt":""},{"id":514,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.LAST_ACCESS} < :timestamp AND ${History.WATCHED} = :watched\")\n    abstract fun prune(timestamp: Long, watched: Boolean)","prompt":""},{"id":515,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.HISTORY_TABLE} WHERE ${History.BOARD_NAME} = :boardName AND ${History.THREAD_ID} = :threadId\")\n    abstract fun removeThread(boardName: String, threadId: Long)","prompt":""},{"id":516,"identifierName":"com.emogoth.android.phone.mimi.db.dao.HistoryAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.HISTORY_TABLE}\")\n    abstract fun clear()","prompt":""},{"id":517,"identifierName":"com.vmenon.mpo.persistence.room.dao.DownloadDao","requiredType":["data class DownloadEntity( @PrimaryKey(autoGenerate = true) val downloadId: Long, val requesterId: Long, val downloadRequestType: String, val downloadQueueId: Long, val downloadUrl: String, val name: String, val imageUrl: String?, @ColumnInfo(defaultValue = \"0\") val downloadAttempt: Int )"],"content":"@Query(\n        \"\"\"\n        SELECT * from downloads\n        WHERE downloadQueueId = :id\n        \"\"\"\n    )\n    abstract suspend fun getByDownloadManagerId(id: Long): DownloadEntity","prompt":""},{"id":518,"identifierName":"com.vmenon.mpo.persistence.room.dao.DownloadDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT * from downloads\n        WHERE requesterId = :id\n        \"\"\"\n    )\n    abstract suspend fun getByRequesterId(id: Long): DownloadEntity?","prompt":""},{"id":519,"identifierName":"com.vmenon.mpo.persistence.room.dao.DownloadDao","requiredType":["data class DownloadEntity( @PrimaryKey(autoGenerate = true) val downloadId: Long, val requesterId: Long, val downloadRequestType: String, val downloadQueueId: Long, val downloadUrl: String, val name: String, val imageUrl: String?, @ColumnInfo(defaultValue = \"0\") val downloadAttempt: Int )"],"content":"@Query(\n        \"\"\"\n        SELECT * from downloads\n        \"\"\"\n    )\n    abstract suspend fun getAll(): List<DownloadEntity>","prompt":""},{"id":520,"identifierName":"com.vmenon.mpo.persistence.room.dao.DownloadDao","requiredType":[],"content":"@Query(\"DELETE FROM downloads WHERE downloadId = :id\")\n    abstract suspend fun delete(id: Long)","prompt":""},{"id":521,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.TopicDao","requiredType":["data class TopicEntity( @PrimaryKey val id: String, val name: String, val shortDescription: String, @ColumnInfo(defaultValue = \"\") val longDescription: String, @ColumnInfo(defaultValue = \"\") val url: String, @ColumnInfo(defaultValue = \"\") val imageUrl: String, )"],"content":"@Query(\n        value = \"\"\"\n        SELECT * FROM topics\n        WHERE id = :topicId\n    \"\"\"\n    )\n    fun getTopicEntity(topicId: String): Flow<TopicEntity>","prompt":""},{"id":522,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.TopicDao","requiredType":[],"content":"@Query(value = \"SELECT * FROM topics\")\n    fun getTopicEntitiesStream(): Flow<List<TopicEntity>>","prompt":""},{"id":523,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.TopicDao","requiredType":[],"content":"@Query(\n        value = \"\"\"\n        SELECT * FROM topics\n        WHERE id IN (:ids)\n    \"\"\"\n    )\n    fun getTopicEntitiesStream(ids: Set<String>): Flow<List<TopicEntity>>","prompt":""},{"id":524,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.TopicDao","requiredType":[],"content":"/**\n     * Inserts [topicEntities] into the db if they don't exist, and ignores those that do\n     */\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insertOrIgnoreTopics(topicEntities: List<TopicEntity>): List<Long>","prompt":""},{"id":525,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.TopicDao","requiredType":[],"content":"/**\n     * Updates [entities] in the db that match the primary key, and no-ops if they don't\n     */\n    @Update\n    suspend fun updateTopics(entities: List<TopicEntity>)","prompt":""},{"id":526,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.TopicDao","requiredType":[],"content":"/**\n     * Inserts or updates [entities] in the db under the specified primary keys\n     */\n    @Upsert\n    suspend fun upsertTopics(entities: List<TopicEntity>)","prompt":""},{"id":527,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.TopicDao","requiredType":[],"content":"/**\n     * Deletes rows in the db matching the specified [ids]\n     */\n    @Query(\n        value = \"\"\"\n            DELETE FROM topics\n            WHERE id in (:ids)\n        \"\"\"\n    )\n    suspend fun deleteTopics(ids: List<String>)","prompt":""},{"id":528,"identifierName":"org.fossasia.openevent.general.sessions.SessionDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertSessions(sessions: List<Session>)","prompt":""},{"id":529,"identifierName":"org.fossasia.openevent.general.sessions.SessionDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertSession(session: Session)","prompt":""},{"id":530,"identifierName":"org.fossasia.openevent.general.sessions.SessionDao","requiredType":[],"content":"@Query(\"SELECT * FROM Session WHERE id =:id\")\n    fun getSessionById(id: Long): Flowable<Session>","prompt":""},{"id":531,"identifierName":"org.fossasia.openevent.general.sessions.SessionDao","requiredType":[],"content":"@Query(\"SELECT * FROM Session\")\n    fun getAllSessions(): LiveData<List<Session>>","prompt":""},{"id":532,"identifierName":"org.fossasia.openevent.general.sessions.SessionDao","requiredType":[],"content":"@Query(\"DELETE FROM Session\")\n    fun deleteCurrentSessions()","prompt":""},{"id":533,"identifierName":"jp.hazuki.yuzubrowser.download.repository.DownloadsDao","requiredType":["data class DownloadFileInfo( @PrimaryKey(autoGenerate = true) var id: Long, val url: String, val mimeType: String, var root: Uri, val name: String, var size: Long, var resumable: Boolean = false, var startTime: Long = System.currentTimeMillis(), var state: Int )"],"content":"@Insert\n    fun insert(info: DownloadFileInfo): Long","prompt":""},{"id":534,"identifierName":"jp.hazuki.yuzubrowser.download.repository.DownloadsDao","requiredType":["data class DownloadFileInfo( @PrimaryKey(autoGenerate = true) var id: Long, val url: String, val mimeType: String, var root: Uri, val name: String, var size: Long, var resumable: Boolean = false, var startTime: Long = System.currentTimeMillis(), var state: Int )"],"content":"@Insert\n    suspend fun insertAsync(info: DownloadFileInfo): Long","prompt":""},{"id":535,"identifierName":"jp.hazuki.yuzubrowser.download.repository.DownloadsDao","requiredType":["data class DownloadFileInfo( @PrimaryKey(autoGenerate = true) var id: Long, val url: String, val mimeType: String, var root: Uri, val name: String, var size: Long, var resumable: Boolean = false, var startTime: Long = System.currentTimeMillis(), var state: Int )"],"content":"@Update\n    fun update(info: DownloadFileInfo)","prompt":""},{"id":536,"identifierName":"jp.hazuki.yuzubrowser.download.repository.DownloadsDao","requiredType":["data class DownloadFileInfo( @PrimaryKey(autoGenerate = true) var id: Long, val url: String, val mimeType: String, var root: Uri, val name: String, var size: Long, var resumable: Boolean = false, var startTime: Long = System.currentTimeMillis(), var state: Int )"],"content":"fun updateWithEmptyRoot(info: DownloadFileInfo) {\n        update(info.copy(root = Uri.parse(\"\")))\n    }","prompt":""},{"id":537,"identifierName":"jp.hazuki.yuzubrowser.download.repository.DownloadsDao","requiredType":["data class DownloadFileInfo( @PrimaryKey(autoGenerate = true) var id: Long, val url: String, val mimeType: String, var root: Uri, val name: String, var size: Long, var resumable: Boolean = false, var startTime: Long = System.currentTimeMillis(), var state: Int )"],"content":"@Query(\"select * from downloads where id = :id\")\n    operator fun get(id: Long): DownloadFileInfo","prompt":""},{"id":538,"identifierName":"jp.hazuki.yuzubrowser.download.repository.DownloadsDao","requiredType":["data class DownloadFileInfo( @PrimaryKey(autoGenerate = true) var id: Long, val url: String, val mimeType: String, var root: Uri, val name: String, var size: Long, var resumable: Boolean = false, var startTime: Long = System.currentTimeMillis(), var state: Int )"],"content":"@Query(\"select * from downloads order by startTime desc limit :count offset :offset\")\n    suspend fun getList(offset: Int, count: Int): List<DownloadFileInfo>","prompt":""},{"id":539,"identifierName":"jp.hazuki.yuzubrowser.download.repository.DownloadsDao","requiredType":["data class DownloadFileInfo( @PrimaryKey(autoGenerate = true) var id: Long, val url: String, val mimeType: String, var root: Uri, val name: String, var size: Long, var resumable: Boolean = false, var startTime: Long = System.currentTimeMillis(), var state: Int )"],"content":"@Delete\n    suspend fun delete(info: DownloadFileInfo)","prompt":""},{"id":540,"identifierName":"jp.hazuki.yuzubrowser.download.repository.DownloadsDao","requiredType":[],"content":"@Delete\n    suspend fun delete(list: List<DownloadFileInfo>)","prompt":""},{"id":541,"identifierName":"jp.hazuki.yuzubrowser.download.repository.DownloadsDao","requiredType":[],"content":"@Query(\"update downloads set state = ${(DownloadFileInfo.STATE_UNKNOWN_ERROR or DownloadFileInfo.STATE_PAUSED)} where state = ${DownloadFileInfo.STATE_DOWNLOADING}\")\n    fun cleanUp()","prompt":""},{"id":542,"identifierName":"org.acme.HelloGraphQLResource","requiredType":[],"content":"@Query\n    @Description(\"Say hello\")\n    fun sayHello(@DefaultValue(\"World\") name: String): String = \"Hello $name\"","prompt":""},{"id":543,"identifierName":"de.dreier.mytargets.base.db.dao.DimensionDAO","requiredType":[],"content":"/**\n     * Returns a list of all distances that are either default values or used somewhere in the app\n     *\n     * @param unit     Distances are only returned which match the specified unit\n     * @return List of distances\n     */\n    @Query(\n        \"SELECT distance FROM `SightMark` WHERE `distance` LIKE ('% ' || :unit)\" +\n                \"UNION SELECT distance FROM `RoundTemplate` WHERE `distance` LIKE ('% ' || :unit)\" +\n                \"UNION SELECT distance FROM `Round` WHERE `distance` LIKE ('% ' || :unit)\"\n    )\n    fun getAll(unit: Dimension.Unit): LiveData<List<Dimension>>","prompt":""},{"id":544,"identifierName":"com.voipgrid.vialer.callrecord.database.CallRecordDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Insert\n    fun insert(callRecord: CallRecordEntity)","prompt":""},{"id":545,"identifierName":"com.voipgrid.vialer.callrecord.database.CallRecordDao","requiredType":[],"content":"@Query(\"SELECT * FROM call_records WHERE was_personal = :personalCalls ORDER BY call_time DESC LIMIT 1\")\n    fun getMostRecentCallRecord(personalCalls: Boolean): CallRecordEntity?","prompt":""},{"id":546,"identifierName":"com.voipgrid.vialer.callrecord.database.CallRecordDao","requiredType":[],"content":"@Query(\"SELECT * FROM call_records WHERE was_personal IN (:wasPersonal) AND was_missed IN (:wasMissed) ORDER BY call_time DESC\")\n    fun callRecordsByDate(wasPersonal: BooleanArray, wasMissed : BooleanArray): DataSource.Factory<Int, CallRecordEntity>","prompt":""},{"id":547,"identifierName":"com.voipgrid.vialer.callrecord.database.CallRecordDao","requiredType":[],"content":"@Query(\"SELECT * FROM call_records WHERE id = :id\")\n    fun findCallRecordById(id: Long)  : CallRecordEntity?","prompt":""},{"id":548,"identifierName":"com.voipgrid.vialer.callrecord.database.CallRecordDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"UPDATE call_records SET was_personal = 1 WHERE id = :id\")\n    fun flagCallAsPersonal(id: Long)","prompt":""},{"id":549,"identifierName":"com.voipgrid.vialer.callrecord.database.CallRecordDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"DELETE FROM call_records\")\n    suspend fun truncate()","prompt":""},{"id":550,"identifierName":"com.uncmorfi.models.DayMenuDao","requiredType":[],"content":"@Query(\"SELECT * FROM menu ORDER BY datetime(date)\")\n    suspend fun getAll(): List<DayMenu>","prompt":""},{"id":551,"identifierName":"com.uncmorfi.models.DayMenuDao","requiredType":[],"content":"@Query(\"SELECT * FROM menu ORDER BY datetime(date) DESC LIMIT 1\")\n    suspend fun getLast(): DayMenu?","prompt":""},{"id":552,"identifierName":"com.uncmorfi.models.DayMenuDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insert(vararg menus: DayMenu): List<Long>","prompt":""},{"id":553,"identifierName":"com.uncmorfi.models.DayMenuDao","requiredType":[],"content":"@Query(\"DELETE FROM menu WHERE datetime(date) <= date('now','-15 day')\")\n    suspend fun clearOld()","prompt":""},{"id":554,"identifierName":"com.uncmorfi.models.DayMenuDao","requiredType":[],"content":"@Query(\"DELETE FROM menu\")\n    suspend fun clearAll()","prompt":""},{"id":555,"identifierName":"be.florien.anyflow.data.local.dao.AlarmDao","requiredType":[],"content":"@Query(\"SELECT * FROM alarm\")\n    fun all(): LiveData<List<DbAlarm>>","prompt":""},{"id":556,"identifierName":"be.florien.anyflow.data.local.dao.AlarmDao","requiredType":[],"content":"@Query(\"SELECT * FROM alarm\")\n    suspend fun list(): List<DbAlarm>","prompt":""},{"id":557,"identifierName":"androidx.room.paging.TestItemDao","requiredType":[],"content":"@Insert\n    fun addAllItems(testItems: List<TestItem>)","prompt":""},{"id":558,"identifierName":"androidx.room.paging.TestItemDao","requiredType":[],"content":"@Insert\n    fun addTestItem(testItem: TestItem): Long","prompt":""},{"id":559,"identifierName":"androidx.room.paging.TestItemDao","requiredType":[],"content":"@Delete\n    fun deleteTestItem(testItem: TestItem): Int","prompt":""},{"id":560,"identifierName":"androidx.room.paging.TestItemDao","requiredType":[],"content":"@Query(\"DELETE FROM TestItem WHERE id >= :start AND id <= :end\")\n    fun deleteTestItems(start: Int, end: Int): Int","prompt":""},{"id":561,"identifierName":"com.leaguechampions.features.champions.data.local.ChampionDao","requiredType":[],"content":"@Query(value = \"SELECT * FROM Champions ORDER BY name ASC\")\n    suspend fun getChampions(): List<ChampionEntity>","prompt":""},{"id":562,"identifierName":"com.leaguechampions.features.champions.data.local.ChampionDao","requiredType":[],"content":"@Query(value = \"SELECT * FROM ChampionDetails WHERE id = :championId\")\n    suspend fun getChampion(championId: String): ChampionDetailsEntity?","prompt":""},{"id":563,"identifierName":"com.leaguechampions.features.champions.data.local.ChampionDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun saveChampions(champions: List<ChampionEntity>)","prompt":""},{"id":564,"identifierName":"com.leaguechampions.features.champions.data.local.ChampionDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun saveChampionDetails(championDetails: ChampionDetailsEntity)","prompt":""},{"id":565,"identifierName":"backend.model.event.TeamRepository","requiredType":[],"content":"fun findById(id: Long): Team?","prompt":""},{"id":566,"identifierName":"backend.model.event.TeamRepository","requiredType":[],"content":"@Query(\"Select p from Posting p where p.team.id = :teamId order by p.id desc\")\n    fun findPostingsByTeamId(@Param(\"teamId\") id: Long, pageable: Pageable): List<Posting>","prompt":""},{"id":567,"identifierName":"backend.model.event.TeamRepository","requiredType":["data class Locationnull"],"content":"@Query(\"Select l from Location l inner join l.team t where t.id = :id order by l.date asc\")\n    fun findLocationByTeamId(@Param(\"id\") id: Long): List<Location>","prompt":""},{"id":568,"identifierName":"backend.model.event.TeamRepository","requiredType":[],"content":"@Query(\"Select i from Invitation i where i.invitee.value = :email\")\n    fun findInvitationsWithEmail(@Param(\"email\") email: String): List<Invitation>","prompt":""},{"id":569,"identifierName":"backend.model.event.TeamRepository","requiredType":[],"content":"@Query(\"Select i from Invitation i inner join i.team t where t.id = :id order by i.updatedAt desc\")\n    fun findInvitationsByTeamId(@Param(\"id\") id: Long): List<Invitation>","prompt":""},{"id":570,"identifierName":"backend.model.event.TeamRepository","requiredType":[],"content":"@Query(\"Select i from Invitation i where i.invitee.value = :email and i.team.event.id = :eventId\")\n    fun findInvitationsWithEmailAndEventId(@Param(\"email\") email: String, @Param(\"eventId\") eventId: Long): List<Invitation>","prompt":""},{"id":571,"identifierName":"backend.model.event.TeamRepository","requiredType":[],"content":"@Query(\"Select i from Invitation i where i.invitationToken = :code\")\n    fun findInvitationsByInviteCode(@Param(\"code\") code: String): Invitation?","prompt":""},{"id":572,"identifierName":"backend.model.event.TeamRepository","requiredType":[],"content":"fun findByEventId(eventId: Long): List<Team>","prompt":""},{"id":573,"identifierName":"backend.model.event.TeamRepository","requiredType":[],"content":"@Query(\"from Team t where t.name like concat('%',:search,'%')\")\n    fun searchByString(@Param(\"search\") search: String): List<Team>","prompt":""},{"id":574,"identifierName":"backend.model.event.TeamRepository","requiredType":[],"content":"fun findAllByEventIsCurrentTrueAndHasStartedTrue(): Iterable<TeamOverview>","prompt":""},{"id":575,"identifierName":"backend.model.event.TeamRepository","requiredType":[],"content":"fun findAllByEventIsCurrentTrueOrderByName(): Iterable<TeamSummaryProjection>","prompt":""},{"id":576,"identifierName":"androidx.work.impl.model.DependencyDao","requiredType":[],"content":"/**\n     * Attempts to insert a [Dependency] into the database.\n     *\n     * @param dependency The [Dependency]s to insert\n     */\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insertDependency(dependency: Dependency)","prompt":""},{"id":577,"identifierName":"androidx.work.impl.model.DependencyDao","requiredType":[],"content":"/**\n     * Determines if a [WorkSpec] has completed all prerequisites.\n     *\n     * @param id The identifier for the [WorkSpec]\n     * @return `true` if the [WorkSpec] has no pending prerequisites.\n     */\n    @Query(\n        \"SELECT COUNT(*)=0 FROM dependency WHERE work_spec_id=:id AND prerequisite_id IN \" +\n            \"(SELECT id FROM workspec WHERE state!=\" +\n            WorkTypeConverters.StateIds.SUCCEEDED + \")\"\n    )\n    fun hasCompletedAllPrerequisites(id: String): Boolean","prompt":""},{"id":578,"identifierName":"androidx.work.impl.model.DependencyDao","requiredType":[],"content":"/**\n     * Gets all the direct prerequisites for a particular [WorkSpec].\n     *\n     * @param id The [WorkSpec] identifier\n     * @return A list of all prerequisites for `id`\n     */\n    @Query(\"SELECT prerequisite_id FROM dependency WHERE work_spec_id=:id\")\n    fun getPrerequisites(id: String): List<String>","prompt":""},{"id":579,"identifierName":"androidx.work.impl.model.DependencyDao","requiredType":[],"content":"/**\n     * Gets all [WorkSpec] id's dependent on a given id\n     *\n     * @param id A [WorkSpec] identifier\n     * @return A list of all identifiers that depend on the input\n     */\n    @Query(\"SELECT work_spec_id FROM dependency WHERE prerequisite_id=:id\")\n    fun getDependentWorkIds(id: String): List<String>","prompt":""},{"id":580,"identifierName":"androidx.work.impl.model.DependencyDao","requiredType":[],"content":"/**\n     * Determines if a [WorkSpec] has any dependents.\n     *\n     * @param id A [WorkSpec] identifier\n     * @return `true` if the [WorkSpec] has WorkSpecs that depend on it\n     */\n    @Query(\"SELECT COUNT(*)>0 FROM dependency WHERE prerequisite_id=:id\")\n    fun hasDependents(id: String): Boolean","prompt":""},{"id":581,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"fun getEnabledCalendarRules(): List<CalendarRule> =\n        getEnabledCalendarRulesEntries().map(CalendarRuleEntry::asCalendarRule)","prompt":""},{"id":582,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"fun getEnabledScheduleRules(): List<ScheduleRule> =\n        getEnabledScheduleRuleEntries().map(ScheduleRuleEntry::asScheduleRule)","prompt":""},{"id":583,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"@Query(\n        \"\"\"select exists(\n             select 1 from rule join calendar_rule on rule.id = calendar_rule.id where enabled = 1\n           )\"\"\"\n    )\n    abstract fun getEnabledCalendarRulesExist(): Boolean","prompt":""},{"id":584,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"@Query(\n        \"\"\"select exists(\n             select 1 from rule join calendar_rule on rule.id = calendar_rule.id where enabled = 1\n           )\"\"\"\n    )\n    abstract fun getEnabledCalendarRulesExistLive(): LiveData<Boolean>","prompt":""},{"id":585,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"fun calendarRulesSortedByNameLive(): LiveData<List<CalendarRule>> {\n        return Transformations.map(calendarRuleEntriesSortedByNameLive()) { entries ->\n            entries.map(CalendarRuleEntry::asCalendarRule)\n        }\n    }","prompt":""},{"id":586,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"fun calendarRulesSortedByName(): List<CalendarRule> {\n        return calendarRuleEntriesSortedByName().map(CalendarRuleEntry::asCalendarRule)\n    }","prompt":""},{"id":587,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"fun scheduleRulesSortedByName(): List<ScheduleRule> {\n        return scheduleRuleEntriesSortedByName().map(ScheduleRuleEntry::asScheduleRule)\n    }","prompt":""},{"id":588,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"fun scheduleRulesSortedByNameLive(): LiveData<List<ScheduleRule>> {\n        return Transformations.map(scheduleRuleEntriesSortedByNameLive()) { entries ->\n            entries.map(ScheduleRuleEntry::asScheduleRule)\n        }\n    }","prompt":""},{"id":589,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"@Query(\"delete from rule where id = :id\")\n    abstract fun deleteRule(id: Long): Int","prompt":""},{"id":590,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"@Query(\n        \"\"\"update rule set enabled = :enabled\n           where id in (select id from calendar_rule) and enabled != :enabled\"\"\"\n    )\n    abstract fun updateCalendarRulesEnabled(enabled: Boolean): Int","prompt":""},{"id":591,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"@Query(\"update rule set name = :name where id = :id\")\n    abstract fun updateRuleName(id: Long, name: String): Int","prompt":""},{"id":592,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"@Query(\"update rule set enabled = :enabled where id = :id\")\n    abstract fun updateRuleEnabled(id: Long, enabled: Boolean): Int","prompt":""},{"id":593,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"@Transaction\n    open fun saveRule(rule: Rule) {\n        if (rule.id != 0L) {\n            deleteRule(rule.id)\n        }\n        val id = insertRuleEntity(rule.asRuleEntity())\n        when (rule) {\n            is CalendarRule -> {\n                val ruleWithId = rule.copy(id = id)\n                insertCalendarRule(ruleWithId.asCalendarRuleEntity())\n                insertCalendarRuleCalendars(*ruleWithId.calendarRuleCalendars().toTypedArray())\n                insertCalendarRuleKeywords(*ruleWithId.calendarRuleKeywords().toTypedArray())\n            }\n            is ScheduleRule -> {\n                insertScheduleRule(rule.copy(id = id).asScheduleRuleEntity())\n            }\n        }\n    }","prompt":""},{"id":594,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":["data class CalendarRuleEntity( @PrimaryKey val id: Long, @ColumnInfo(name = \"busy_only\") val busyOnly: Boolean, @Embedded(prefix = \"match_\") val matchBy: CalendarEventMatchByEntity, @ColumnInfo(name = \"inverse_match\") val inverseMatch: Boolean )"],"content":"@Insert\n    protected abstract fun insertRuleEntity(ruleEntity: RuleEntity): Long","prompt":""},{"id":595,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":["data class CalendarRuleCalendar( @PrimaryKey(autoGenerate = true) val id: Long, @ColumnInfo(name = \"rule_id\", index = true) val ruleId: Long, @ColumnInfo(name = \"calendar_id\") val calendarId: Long )"],"content":"@Insert\n    protected abstract fun insertCalendarRuleCalendars(\n        vararg calendarRuleCalendars: CalendarRuleCalendar\n    )","prompt":""},{"id":596,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":["data class CalendarRuleEntry( @Embedded val ruleBase: RuleEntity, @ColumnInfo(name = \"busy_only\") val busyOnly: Boolean, @Embedded(prefix = \"match_\") val matchBy: CalendarEventMatchByEntity, @ColumnInfo(name = \"inverse_match\") val inverseMatch: Boolean, @Relation( entity = CalendarRuleCalendar::class, entityColumn = \"rule_id\", parentColumn = \"id\", projection = [\"calendar_id\"] ) val calendarIds: Set<Long>, @Relation( entity = CalendarRuleKeyword::class, entityColumn = \"rule_id\", parentColumn = \"id\", projection = [\"keyword\"] ) val keywords: Set<String> )"],"content":"@Transaction\n    @Query(\"select * from calendar_rule join rule on calendar_rule.id = rule.id where enabled = 1\")\n    protected abstract fun getEnabledCalendarRulesEntries(): List<CalendarRuleEntry>","prompt":""},{"id":597,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":["data class ScheduleRuleEntry( @Embedded val ruleBase: RuleEntity, @ColumnInfo(name = \"begin_time\") val beginTime: LocalTime, @ColumnInfo(name = \"end_time\") val endTime: LocalTime, @Embedded val days: DaysOfWeekEntity )"],"content":"@Transaction\n    @Query(\"select * from schedule_rule join rule on schedule_rule.id = rule.id where enabled = 1\")\n    protected abstract fun getEnabledScheduleRuleEntries(): List<ScheduleRuleEntry>","prompt":""},{"id":598,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":["data class CalendarRuleEntry( @Embedded val ruleBase: RuleEntity, @ColumnInfo(name = \"busy_only\") val busyOnly: Boolean, @Embedded(prefix = \"match_\") val matchBy: CalendarEventMatchByEntity, @ColumnInfo(name = \"inverse_match\") val inverseMatch: Boolean, @Relation( entity = CalendarRuleCalendar::class, entityColumn = \"rule_id\", parentColumn = \"id\", projection = [\"calendar_id\"] ) val calendarIds: Set<Long>, @Relation( entity = CalendarRuleKeyword::class, entityColumn = \"rule_id\", parentColumn = \"id\", projection = [\"keyword\"] ) val keywords: Set<String> )"],"content":"@Transaction\n    @Query(\"select * from calendar_rule join rule on calendar_rule.id = rule.id order by name asc\")\n    protected abstract fun calendarRuleEntriesSortedByName(): List<CalendarRuleEntry>","prompt":""},{"id":599,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"@Transaction\n    @Query(\"select * from calendar_rule join rule on calendar_rule.id = rule.id order by name asc\")\n    protected abstract fun calendarRuleEntriesSortedByNameLive(): LiveData<List<CalendarRuleEntry>>","prompt":""},{"id":600,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":["data class ScheduleRuleEntry( @Embedded val ruleBase: RuleEntity, @ColumnInfo(name = \"begin_time\") val beginTime: LocalTime, @ColumnInfo(name = \"end_time\") val endTime: LocalTime, @Embedded val days: DaysOfWeekEntity )"],"content":"@Transaction\n    @Query(\"select * from schedule_rule join rule on schedule_rule.id = rule.id order by name asc\")\n    protected abstract fun scheduleRuleEntriesSortedByName(): List<ScheduleRuleEntry>","prompt":""},{"id":601,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"@Transaction\n    @Query(\"select * from schedule_rule join rule on schedule_rule.id = rule.id order by name asc\")\n    protected abstract fun scheduleRuleEntriesSortedByNameLive(): LiveData<List<ScheduleRuleEntry>>","prompt":""},{"id":602,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":["data class CalendarRuleEntity( @PrimaryKey val id: Long, @ColumnInfo(name = \"busy_only\") val busyOnly: Boolean, @Embedded(prefix = \"match_\") val matchBy: CalendarEventMatchByEntity, @ColumnInfo(name = \"inverse_match\") val inverseMatch: Boolean )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    protected abstract fun insertCalendarRule(rule: CalendarRuleEntity): Long","prompt":""},{"id":603,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":["data class ScheduleRuleEntity( @PrimaryKey val id: Long, @ColumnInfo(name = \"begin_time\") val beginTime: LocalTime, @ColumnInfo(name = \"end_time\") val endTime: LocalTime, @Embedded val daysOfWeek: DaysOfWeekEntity )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    protected abstract fun insertScheduleRule(rule: ScheduleRuleEntity): Long","prompt":""},{"id":604,"identifierName":"me.camsteffen.polite.db.RuleDao","requiredType":[],"content":"@Insert\n    protected abstract fun insertCalendarRuleKeywords(\n        vararg calendarRuleKeyword: CalendarRuleKeyword\n    )","prompt":""},{"id":605,"identifierName":"backend.model.messaging.GroupMessageRepository","requiredType":[],"content":"fun findById(id: Long): GroupMessage","prompt":""},{"id":606,"identifierName":"backend.model.messaging.GroupMessageRepository","requiredType":[],"content":"@Query(\"select distinct g from GroupMessage g inner join g.messages m where m.creator.id = :userId\")\n    fun findWhereUserHasSentMessages(@Param(\"userId\") userId: Long): List<GroupMessage>","prompt":""},{"id":607,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"fun onFetchForm(projectId: Long, datasetId: Long) {\n        processor.onNext(projectId.to(datasetId))\n    }","prompt":""},{"id":608,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"private fun fetchUser(): Single<UserModel> = rest.fetchUser().doOnSuccess { this.user.set(it) }","prompt":""},{"id":609,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"private fun fetchForm(): Single<FormModel> = rest.fetchForms(project.get().id, dataset.get().id)","prompt":""},{"id":610,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"private fun fetchHistoryDataset(): Single<List<DatasetModel>> =\n            rest.fetchDatasets(project.get().id)\n                    .flatMapObservable { Observable.fromIterable(it.results) }\n                    .filter { it.type == \"r_history\" && it.name == \"record_history\" }\n                    .toList()","prompt":""},{"id":611,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"fun isSupportFilesHashChanged(project: ProjectModel): Boolean =\n            (project.support_files_hash != config.supportFilesHash.value)","prompt":""},{"id":612,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"private fun fetchSupportFiles(): Single<File> =\n            rest.fetchSupportFiles(project.get())\n                    .flatMap { downloadSupportFiles(it.zip) }\n                    .flatMap { unzipSupportFiles() }\n                    .doOnSuccess {\n                        config.supportFilesHash.value = project.get().support_files_hash\n                    }","prompt":""},{"id":613,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"private fun fetchRelatedTables(): Single<List<RelatedTableModel>> =\n            rest.fetchRelatedTables(project.get().id, dataset.get().id)\n                    .flatMapObservable { Observable.fromIterable(it.results) }\n                    .toList()","prompt":""},{"id":614,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"private fun fetchSchema(): Single<List<SchemaItem>> =\n            rest.fetchSchema(project.get().id, dataset.get().id)\n                    .flatMapObservable {\n                        Observable.fromIterable(it.schema)\n                    }\n                    .toList()","prompt":""},{"id":615,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"private fun loadProjectAndDataset(projectId: Long, datasetId: Long): Single<Pair<ProjectModel, DatasetModel>> =\n            rest.fetchProject(projectId).zipWith(rest.fetchDataset(projectId, datasetId), BiFunction { project, dataset ->\n                project.to(dataset)\n            })","prompt":""},{"id":616,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"private fun unzipSupportFiles() =\n            unzipFile(config.webFormDir + supportFname, config.webFormDir)","prompt":""},{"id":617,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"private fun downloadSupportFiles(url: String) = rest.downloadFile(url)\n            .flatMap { it.writeToDisk(config.webFormDir + supportFname) }","prompt":""},{"id":618,"identifierName":"com.amigocloud.amigosurvey.form.FormViewModel","requiredType":[],"content":"fun getCustomFieldName(custom_type: String): Observable<String> {\n        return rest.fetchSchema(project.get().id, dataset.get().id)\n                .flatMapObservable { Observable.fromIterable(it.schema) }\n                .filter { (it.custom_type == custom_type) }\n                .flatMap { Observable.just(it.name) }\n    }","prompt":""},{"id":619,"identifierName":"com.amigocloud.amigosurvey.form.FormRecordDao","requiredType":[],"content":"@Query(\"DELETE FROM FormRecord\")\n    fun deleteAll()","prompt":""},{"id":620,"identifierName":"com.amigocloud.amigosurvey.form.FormRecordDao","requiredType":[],"content":"@Insert\n    fun insert(record: FormRecord)","prompt":""},{"id":621,"identifierName":"com.amigocloud.amigosurvey.form.FormRecordDao","requiredType":[],"content":"@Delete\n    fun delete(record: FormRecord)","prompt":""},{"id":622,"identifierName":"com.google.android.ground.persistence.local.room.dao.JobDao","requiredType":[],"content":"@Query(\"DELETE FROM job WHERE survey_id = :surveyId\")\n  fun deleteBySurveyId(surveyId: String): Completable","prompt":""},{"id":623,"identifierName":"org.springframework.samples.petclinic.owner.PetRepository","requiredType":[],"content":"/**\n     * Retrieve all {@link PetType}s from the data store.\n     * @return a Collection of {@link PetType}s.\n     */\n    @Query(\"SELECT ptype FROM PetType ptype ORDER BY ptype.name\")\n    @Transactional(readOnly = true)\n    fun findPetTypes() :  List<PetType>","prompt":""},{"id":624,"identifierName":"org.springframework.samples.petclinic.owner.PetRepository","requiredType":[],"content":"/**\n     * Retrieve a {@link Pet} from the data store by id.\n     * @param id the id to search for\n     * @return the {@link Pet} if found\n     */\n    @Transactional(readOnly = true)\n    fun findById(id : Int) : Pet","prompt":""},{"id":625,"identifierName":"org.springframework.samples.petclinic.owner.PetRepository","requiredType":[],"content":"/**\n     * Save a {@link Pet} to the data store, either inserting or updating it.\n     * @param pet the {@link Pet} to save\n     */\n    fun save(pet : Pet);","prompt":""},{"id":626,"identifierName":"nl.mpcjanssen.simpletask.dao.TodoFileDao","requiredType":[],"content":"@Query(\"SELECT * FROM TodoFile\")\n    fun getAll(): List<TodoFile>","prompt":""},{"id":627,"identifierName":"nl.mpcjanssen.simpletask.dao.TodoFileDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(contents: TodoFile) : Long","prompt":""},{"id":628,"identifierName":"nl.mpcjanssen.simpletask.dao.TodoFileDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.IGNORE)\n    fun update(contents: TodoFile)","prompt":""},{"id":629,"identifierName":"nl.mpcjanssen.simpletask.dao.TodoFileDao","requiredType":[],"content":"@Query (\"DELETE from TodoFile where date < :timestamp\")\n    fun removeBefore(timestamp: Long)","prompt":""},{"id":630,"identifierName":"nl.mpcjanssen.simpletask.dao.TodoFileDao","requiredType":[],"content":"@Query (\"DELETE from TodoFile\")\n    fun deleteAll()","prompt":""},{"id":631,"identifierName":"nl.mpcjanssen.simpletask.dao.AppDatabase","requiredType":[],"content":"abstract fun todoFileDao(): TodoFileDao","prompt":""},{"id":632,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class User( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"name\") @SerializedName(\"name\") var name: String = \"\", @ColumnInfo(name = \"email\") @SerializedName(\"email\") var email: String = \"\", @ColumnInfo(name = \"api_key\") @SerializedName(\"api_key\") var apiKey: String?, @Ignore @SerializedName(\"password\") var password: String = \"\" )"],"content":"@Insert\n    suspend fun insertUser(user: User): Long","prompt":""},{"id":633,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT * FROM user ORDER BY _id DESC LIMIT 1\")\n    suspend fun getCurrentUser(): User?","prompt":""},{"id":634,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT user_online_id FROM user ORDER BY _id DESC LIMIT 1\")\n    suspend fun getCurrentUserOnlineId(): String?","prompt":""},{"id":635,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT api_key FROM user ORDER BY _id DESC LIMIT 1\")\n    suspend fun getCurrentApiKey(): String?","prompt":""},{"id":636,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Insert\n    suspend fun insertTodoInner(todo: Todo): Long","prompt":""},{"id":637,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun insertTodo(todo: Todo): Long\n    {\n        val _id = insertTodoInner(todo)\n        fixTodoPositions()\n\n        return _id\n    }","prompt":""},{"id":638,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun updateTodo(todo: Todo) {\n        if (todo._id != null && todo._id!! > 0) {\n            // The Todo has been modified offline, therefore todo_online_id is null in the local\n            // database yet\n            updateTodoByIdInner(todo)\n        } else {\n            // The Todo has been modified online, therefore _id is unknown yet\n            updateTodoByTodoOnlineIdInner(todo._id, todo.userOnlineId, todo.listOnlineId,\n                    todo.title, todo.priority, todo.dueDate, todo.reminderDateTime, todo.description,\n                    todo.completed, todo.rowVersion, todo.deleted, todo.dirty, todo.position,\n                    todo.todoOnlineId)\n        }\n    }","prompt":""},{"id":639,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getTodos(wherePrefix: String): ArrayList<Todo> {\n        val standardWherePostfix: String = prepareStandardWherePostfix()\n        val where = wherePrefix + standardWherePostfix\n\n        val queryStringBuilder = StringBuilder(\n                \"SELECT \" +\n                        \"   * \" +\n                        \"FROM \" +\n                        \"   todo \" +\n                        \"WHERE \" +\n                        where + \" \" +\n                        \"ORDER BY \" +\n                        \"   position;\")\n\n        val query = SimpleSQLiteQuery(queryStringBuilder.toString())\n\n        return getTodosArrayList(getTodosInner(query))\n    }","prompt":""},{"id":640,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getTodosByWhereCondition(where: String?): ArrayList<Todo> {\n        val queryStringBuilder = StringBuilder(\n                \"SELECT \" +\n                        \"  * \" +\n                        \"FROM \" +\n                        \"   todo \" +\n                        \"WHERE \" +\n                        (where ?: \"\") + \" \" +\n                        \"ORDER BY \" +\n                        \"   position;\")\n\n        val query = SimpleSQLiteQuery(queryStringBuilder.toString())\n\n        return getTodosArrayList(getTodosByWhereConditionInner(query))\n    }","prompt":""},{"id":641,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   positions.position \" +\n            \"FROM \" +\n            \"   (SELECT \" +\n            \"       position, \" +\n            \"       COUNT(*) c \" +\n            \"   FROM \" +\n            \"       todo \" +\n            \"   GROUP BY \" +\n            \"       position \" +\n            \"   HAVING \" +\n            \"       c > 1 \" +\n            \"   ORDER BY \" +\n            \"       position) AS positions\")\n    suspend fun getDuplicatePositionValuesForTodos(): kotlin.collections.List<Double>","prompt":""},{"id":642,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"/**\n     * Get the ids for the duplicated positions.\n     * return A HashMap that has positions as keys and _ids as values.\n     */\n    suspend fun get_IdForDuplicatePositionValues(): HashMap<Double, kotlin.collections.List<Int>>? {\n        val duplicatePositionValuesForTodos = getDuplicatePositionValuesForTodos()\n        val _IdForDuplicatePositionValues = HashMap<Double, kotlin.collections.List<Int>>()\n        for (nextPositionValue in duplicatePositionValuesForTodos) {\n            _IdForDuplicatePositionValues[nextPositionValue] =\n                    get_IdForDuplicatePositionValuesInner(nextPositionValue)\n        }\n\n        return _IdForDuplicatePositionValues\n    }","prompt":""},{"id":643,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"/**\n     * Get the next first todo position from the database. If the local todo table is empty, this\n     * value will be half of the biggest double number. Otherwise this position value will be in\n     * between the smallest position value in the todo table and the smallest double value.\n     * @return\n     */\n    suspend fun getNextFirstTodoPosition(): Double {\n        val firstTodoPosition = getFirstTodoPosition()\n        return if (firstTodoPosition != null)\n        {\n            getPositionBetween(1.0, firstTodoPosition)\n        }\n        else\n        {\n            Double.MAX_VALUE / 2\n        }\n    }","prompt":""},{"id":644,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"/**\n     * An interval/range for today in long representation LocalDateTime\n     * @return\n     */\n    fun today(): DateTimeRange {\n        val startOfToday: LocalDateTime\n        val endOfToday: LocalDateTime\n        val zdtStartOfToday: ZonedDateTime\n        val zdtEndOfToday: ZonedDateTime\n\n        val today: LocalDate = LocalDate.now()\n        startOfToday = today.atStartOfDay()\n        endOfToday = startOfToday.plusDays(1).minusNanos(1)\n        zdtStartOfToday = startOfToday.atZone(ZoneId.systemDefault())\n        zdtEndOfToday = endOfToday.atZone(ZoneId.systemDefault())\n\n        return DateTimeRange(\n                zdtStartOfToday.toInstant().toEpochMilli(),\n                zdtEndOfToday.toInstant().toEpochMilli()\n        )\n    }","prompt":""},{"id":645,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"/**\n     * An interval/range for the next 7 days in long representation LocalDateTime\n     * @return\n     */\n    fun next7Days(): DateTimeRange {\n        val startOf7Days: LocalDateTime\n        val endOf7Days: LocalDateTime\n        val zdtStartOf7Days: ZonedDateTime\n        val zdtEndOf7Days: ZonedDateTime\n\n        val today: LocalDate = LocalDate.now()\n        startOf7Days = today.atStartOfDay()\n        endOf7Days = startOf7Days.plusDays(8).minusNanos(1)\n        zdtStartOf7Days = startOf7Days.atZone(ZoneId.systemDefault())\n        zdtEndOf7Days = endOf7Days.atZone(ZoneId.systemDefault())\n\n        return DateTimeRange(\n                zdtStartOf7Days.toInstant().toEpochMilli(),\n                zdtEndOf7Days.toInstant().toEpochMilli()\n        )\n    }","prompt":""},{"id":646,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"fun prepareTodayPredefinedListWherePrefix(): String {\n        val todayDateTimeRange = today()\n        return (\"   due_date \"\n                + \"BETWEEN \"\n                    + todayDateTimeRange.startOfRangeLong + \" AND \" +\n                    + todayDateTimeRange.endOfRangeLong + \" \")\n    }","prompt":""},{"id":647,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun prepareTodayPredefinedListWhere(): String {\n        val todayPredefinedListWherePrefix = prepareTodayPredefinedListWherePrefix()\n        val standardWherePostfix = prepareStandardWherePostfix()\n        return (todayPredefinedListWherePrefix + standardWherePostfix)\n    }","prompt":""},{"id":648,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"fun prepareNext7DaysPredefinedListWherePrefix(): String {\n        val next7DaysDateTimeRange = next7Days()\n        return (\"   due_date \"\n                + \"BETWEEN \"\n                    + next7DaysDateTimeRange.startOfRangeLong + \" AND \"\n                + next7DaysDateTimeRange.endOfRangeLong + \" \")\n    }","prompt":""},{"id":649,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun prepareNext7DaysPredefinedListWhere(): String {\n        val next7DaysPredefinedListWherePrefix = prepareNext7DaysPredefinedListWherePrefix()\n        val standardWherePostfix = prepareStandardWherePostfix()\n        return (next7DaysPredefinedListWherePrefix + standardWherePostfix)\n    }","prompt":""},{"id":650,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun prepareAllPredefinedListWhere(): String =\n            \"completed = 0 AND \" +\n            \"user_online_id = '\" + getCurrentUserOnlineId() + \"' AND \" +\n            \"deleted = 0\"","prompt":""},{"id":651,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun prepareCompletedPredefinedListWhere(): String =\n            \"completed = 1 AND \" +\n            \"user_online_id = '\" + getCurrentUserOnlineId() + \"' AND \" +\n            \"deleted = 0\"","prompt":""},{"id":652,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun prepareSearchWhereCondition(queryText: String): String =\n            prepareSearchWherePrefix(queryText) + prepareStandardWherePostfix()","prompt":""},{"id":653,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getTodosWithReminder(): ArrayList<Todo> {\n        val where = \"reminder_date_time IS NOT NULL AND \" +\n                           \"reminder_date_time <> ''\"\n        return getTodos(where)\n    }","prompt":""},{"id":654,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"fun getTodosWithReminderJava(): CompletableFuture<ArrayList<Todo>> =\n        GlobalScope.future {\n            val where = \"reminder_date_time IS NOT NULL AND \" +\n                    \"reminder_date_time <> ''\"\n            getTodos(where)\n        }","prompt":""},{"id":655,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getTodosByListOnlineId(listOnlineId: String): ArrayList<Todo> {\n        val where = \"list_online_id = '$listOnlineId'\"\n        return getTodos(where)\n    }","prompt":""},{"id":656,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   todo_online_id \" +\n            \"FROM \" +\n            \"   todo \" +\n            \"WHERE \" +\n            \"   list_online_id = :list_online_id;\")\n    suspend fun getTodoOnlineIdsByListOnlineId(list_online_id: String?): kotlin.collections.List<String>","prompt":""},{"id":657,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getTodosToUpdate(): ArrayList<Todo> =\n            getTodosArrayList(getTodosToUpdateInner(getCurrentUserOnlineId()))","prompt":""},{"id":658,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getTodosToInsert(): ArrayList<Todo> =\n            getTodosArrayList(getTodosToInsertInner(getCurrentUserOnlineId()))","prompt":""},{"id":659,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun isTodoExists(todoOnlineId: String): Boolean =\n            !getTodoOnlineIdByTodoOnlineId(todoOnlineId).isNullOrBlank()","prompt":""},{"id":660,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun getLastTodoRowVersion(): Int = getLastTodoRowVersionInner() ?: 0","prompt":""},{"id":661,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   todo \" +\n            \"WHERE \" +\n            \"   todo_online_id = :todo_online_id;\")\n    suspend fun getTodo(todo_online_id: String?): Todo?","prompt":""},{"id":662,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   todo \" +\n            \"WHERE \" +\n            \"   _id = :id;\")\n    suspend fun getTodo(id: Long?): Todo?","prompt":""},{"id":663,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun softDeleteTodo(todoOnlineId: String) {\n        softDeleteTodoInner(todoOnlineId)\n        fixTodoPositions()\n    }","prompt":""},{"id":664,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun softDeleteTodo(todo: Todo) {\n        todo.todoOnlineId?.let { softDeleteTodo(it) }\n    }","prompt":""},{"id":665,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"/**\n     * @return the created List's _id, if List created successfully, -1 otherwise.\n     */\n    @Insert\n    suspend fun insertList(list: List): Long","prompt":""},{"id":666,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun updateList(list: List) {\n        return if (list._id != null && list._id != 0L) {\n            // The List has been modified offline, therefore list_online_id is null in the local\n            // database yet\n            updateListInner(list)\n        } else {\n            // The List has been modified online, therefore _id is unknown yet\n            updateListByListOnlineId(list._id, list.userOnlineId, list.categoryOnlineId,\n                    list.title, list.rowVersion, list.deleted, list.dirty, list.position,\n                    list.listOnlineId)\n        }\n    }","prompt":""},{"id":667,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"UPDATE \" +\n            \"   list \" +\n            \"SET \" +\n            \"   deleted = 1, \" +\n            \"   dirty = 1 \" +\n            \"WHERE \" +\n            \"   list_online_id = :list_online_id;\")\n    suspend fun softDeleteList(list_online_id: String?)","prompt":""},{"id":668,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun softDeleteListAndRelatedTodos(listOnlineId: String?) {\n        val todoOnlineIds = getTodoOnlineIdsByListOnlineId(listOnlineId)\n        val areRelatedTodos = todoOnlineIds.isNotEmpty()\n        if (areRelatedTodos) {\n            for (todoOnlineId in todoOnlineIds) {\n                softDeleteTodo(todoOnlineId)\n            }\n        }\n        softDeleteList(listOnlineId)\n    }","prompt":""},{"id":669,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getListsNotInCategory(): ArrayList<List> =\n            getListsArrayList(getListsNotInCategoryInner(getCurrentUserOnlineId()))","prompt":""},{"id":670,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getListsByCategoryOnlineId(categoryOnlineId: String): ArrayList<List> =\n            getListsArrayList(\n                    getListsByCategoryOnlineIdInner(getCurrentUserOnlineId(), categoryOnlineId))","prompt":""},{"id":671,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun isListExists(listOnlineId: String): Boolean =\n            !getListOnlineIdByListOnlineId(listOnlineId).isNullOrBlank()","prompt":""},{"id":672,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun getLastListRowVersion(): Int = getLastListRowVersionInner() ?: 0","prompt":""},{"id":673,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getListsToUpdate(): ArrayList<List> =\n            getListsArrayList(getListsToUpdateInner(getCurrentUserOnlineId()))","prompt":""},{"id":674,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getListsToInsert(): ArrayList<List> =\n            getListsArrayList(getListsToInsertInner(getCurrentUserOnlineId()))","prompt":""},{"id":675,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Category( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"/**\n     * @return the created Category's _id, if Category created successfully, -1 otherwise.\n     */\n    @Insert\n    suspend fun insertCategory(category: Category): Long","prompt":""},{"id":676,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"UPDATE \" +\n            \"   category \" +\n            \"SET \" +\n            \"   deleted = 1, \" +\n            \"   dirty = 1 \" +\n            \"WHERE \" +\n            \"   category_online_id = :category_online_id;\")\n    suspend fun softDeleteCategory(category_online_id: String?)","prompt":""},{"id":677,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun softDeleteCategoryAndListsAndTodos(categoryOnlineId: String) {\n        val lists = getListsByCategoryOnlineId(categoryOnlineId)\n        val areRelatedLists = lists.isNotEmpty()\n        if (areRelatedLists) {\n            for ((_, listOnlineId) in lists) {\n                softDeleteListAndRelatedTodos(listOnlineId)\n            }\n        }\n        softDeleteCategory(categoryOnlineId)\n    }","prompt":""},{"id":678,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Category( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun updateCategory(category: Category) {\n        if (category._id != 0L) {\n            // The Category has been modified offline, therefore category_online_id is null in the local\n            // database yet\n            updateCategoryInner(category)\n        } else {\n            // The Category has been modified online, therefore _id is unknown yet\n            updateCategoryByCategoryOnlineId(category._id, category.userOnlineId,\n                    category.title, category.rowVersion, category.deleted, category.dirty,\n                    category.position, category.categoryOnlineId)\n        }\n    }","prompt":""},{"id":679,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun getCategoryByCategoryOnlineId(categoryOnlineId: String): Category? =\n            getCategoryByCategoryOnlineIdInner(getCurrentUserOnlineId(), categoryOnlineId)","prompt":""},{"id":680,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Category( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getCategories(): ArrayList<Category> =\n            getCategoriesArrayList(getCategoriesInner(getCurrentUserOnlineId()))","prompt":""},{"id":681,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Category( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"/**\n     * Get all of the categories which are associated to the current user with all of the lists\n     * which are related to these categories in a HashMap from the local database.\n     * @return lhmCategories A HashMap containing all the categories and the related lists.\n     */\n    suspend fun getCategoriesAndLists(): LinkedHashMap<Category, kotlin.collections.List<List>> {\n        val categories: kotlin.collections.List<Category> = getCategories()\n        val lhmCategories = LinkedHashMap<Category, kotlin.collections.List<List>>()\n        for (category in categories) {\n            category.categoryOnlineId?.let {\n                val listData: kotlin.collections.List<List> = getListsByCategoryOnlineId(it)\n                lhmCategories[category] = listData\n            }\n        }\n\n        return lhmCategories\n    }","prompt":""},{"id":682,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Category( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getCategoriesToUpdate(): ArrayList<Category> =\n            getCategoriesArrayList(getCategoriesToUpdateInner(getCurrentUserOnlineId()))","prompt":""},{"id":683,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Category( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"suspend fun getCategoriesToInsert(): ArrayList<Category> =\n            getCategoriesArrayList(getCategoriesToInsertInner(getCurrentUserOnlineId()))","prompt":""},{"id":684,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun isCategoryExists(categoryOnlineId: String): Boolean =\n            !getCategoryOnlineIdByCategoryOnlineId(categoryOnlineId).isNullOrBlank()","prompt":""},{"id":685,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun getLastCategoryRowVersion(): Int = getLastCategoryRowVersionInner() ?: 0","prompt":""},{"id":686,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   row_version \" +\n            \"FROM \" +\n            \"   category \" +\n            \"ORDER BY \" +\n            \"   row_version DESC \" +\n            \"LIMIT 1;\")\n    suspend fun getLastCategoryRowVersionInner(): Int?","prompt":""},{"id":687,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   category_online_id \" +\n            \"FROM \" +\n            \"   category \" +\n            \"WHERE \" +\n            \"   category_online_id = :category_online_id;\")\n    suspend fun getCategoryOnlineIdByCategoryOnlineId(category_online_id: String?): String?","prompt":""},{"id":688,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Category( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   category \" +\n            \"WHERE \" +\n            \"   user_online_id = :user_online_id AND \" +\n            \"   dirty = 1 AND \" +\n            \"   row_version = 0;\")\n    suspend fun getCategoriesToInsertInner(user_online_id: String?): kotlin.collections.List<Category>","prompt":""},{"id":689,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Category( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   category \" +\n            \"WHERE \" +\n            \"   user_online_id = :user_online_id AND \" +\n            \"   dirty = 1 AND \" +\n            \"   row_version > 0;\")\n    suspend fun getCategoriesToUpdateInner(user_online_id: String?): kotlin.collections.List<Category>","prompt":""},{"id":690,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Category( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   category \" +\n            \"WHERE \" +\n            \"   user_online_id = :user_online_id AND \" +\n            \"   deleted = 0 \" +\n            \"ORDER BY \" +\n            \"   title;\")\n    suspend fun getCategoriesInner(user_online_id: String?): kotlin.collections.List<Category>","prompt":""},{"id":691,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   category \" +\n            \"WHERE \" +\n            \"   user_online_id = :user_online_id AND \" +\n            \"   deleted = 0 AND \" +\n            \"   category_online_id = :category_online_id;\")\n    suspend fun getCategoryByCategoryOnlineIdInner(user_online_id: String?,\n                                           category_online_id: String?): Category?","prompt":""},{"id":692,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Category( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Update\n    suspend fun updateCategoryInner(category: Category)","prompt":""},{"id":693,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"UPDATE \" +\n            \"   category \" +\n            \"SET \" +\n            \"   _id = :id, \" +\n            \"   user_online_id = :user_online_id, \" +\n            \"   title = :title, \" +\n            \"   row_version = :row_version, \" +\n            \"   deleted = :deleted, \" +\n            \"   dirty = :dirty, \" +\n            \"   position = :position \" +\n            \"WHERE \" +\n            \"   category_online_id = :category_online_id;\")\n    suspend fun updateCategoryByCategoryOnlineId(id: Long?, user_online_id: String?, title: String,\n                                         row_version: Int, deleted: Boolean?, dirty: Boolean,\n                                         position: Double, category_online_id: String?)","prompt":""},{"id":694,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   list \" +\n            \"WHERE \" +\n            \"   user_online_id = :user_online_id AND \" +\n            \"   dirty = 1 AND \" +\n            \"   row_version = 0;\")\n    suspend fun getListsToInsertInner(user_online_id: String?): kotlin.collections.List<List>","prompt":""},{"id":695,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   list \" +\n            \"WHERE \" +\n            \"   user_online_id = :user_online_id AND \" +\n            \"   dirty = 1 AND \" +\n            \"   row_version > 0;\")\n    suspend fun getListsToUpdateInner(user_online_id: String?): kotlin.collections.List<List>","prompt":""},{"id":696,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   row_version \" +\n            \"FROM \" +\n            \"   list \" +\n            \"ORDER BY \" +\n            \"   row_version DESC \" +\n            \"LIMIT 1;\")\n    suspend fun getLastListRowVersionInner(): Int?","prompt":""},{"id":697,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   list_online_id \" +\n            \"FROM \" +\n            \"   list \" +\n            \"WHERE \" +\n            \"   list_online_id = :list_online_id;\")\n    suspend fun getListOnlineIdByListOnlineId(list_online_id: String?): String?","prompt":""},{"id":698,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   list \" +\n            \"WHERE \" +\n            \"   user_online_id = :user_online_id AND \" +\n            \"   category_online_id = :category_online_id AND \" +\n            \"   deleted = 0 \" +\n            \"ORDER BY \" +\n            \"   title;\")\n    suspend fun getListsByCategoryOnlineIdInner(user_online_id: String?,\n                                        category_online_id: String?): kotlin.collections.List<List>","prompt":""},{"id":699,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   list \" +\n            \"WHERE \" +\n            \"   user_online_id = :user_online_id AND \" +\n            \"   (category_online_id IS NULL OR category_online_id = '') AND \" +\n            \"   deleted = 0 \" +\n            \"ORDER BY \" +\n            \"   title;\")\n    suspend fun getListsNotInCategoryInner(user_online_id: String?): kotlin.collections.List<List>","prompt":""},{"id":700,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"UPDATE \" +\n            \"   list \" +\n            \"SET \" +\n            \"   _id = :id, \" +\n            \"   user_online_id = :user_online_id, \" +\n            \"   category_online_id = :category_online_id, \" +\n            \"   title = :title, \" +\n            \"   row_version = :row_version, \" +\n            \"   deleted = :deleted, \" +\n            \"   dirty = :dirty, \" +\n            \"   position = :position \" +\n            \"WHERE \" +\n            \"   list_online_id = :list_online_id;\")\n    suspend fun updateListByListOnlineId(id: Long?, user_online_id: String?, category_online_id: String?,\n                                 title: String, row_version: Int, deleted: Boolean?, dirty: Boolean,\n                                 position: Double, list_online_id: String?)","prompt":""},{"id":701,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class List( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"category_online_id\") @SerializedName(\"category_online_id\") var categoryOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String = \"\", @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Update\n    suspend fun updateListInner(list: List)","prompt":""},{"id":702,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"UPDATE \" +\n            \"   todo \" +\n            \"SET \" +\n            \"   deleted = 1, \" +\n            \"   dirty = 1 \" +\n            \"WHERE \" +\n            \"   todo_online_id = :todo_online_id;\")\n    suspend fun softDeleteTodoInner(todo_online_id: String?)","prompt":""},{"id":703,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   row_version \" +\n            \"FROM \" +\n            \"   todo \" +\n            \"ORDER BY \" +\n            \"   row_version DESC \" +\n            \"LIMIT 1;\")\n    suspend fun getLastTodoRowVersionInner(): Int?","prompt":""},{"id":704,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   todo_online_id \" +\n            \"FROM \" +\n            \"   todo \" +\n            \"WHERE \" +\n            \"   todo_online_id = :todo_online_id;\")\n    suspend fun getTodoOnlineIdByTodoOnlineId(todo_online_id: String?): String?","prompt":""},{"id":705,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   todo \" +\n            \"WHERE \" +\n            \"   user_online_id = :user_online_id AND \" +\n            \"dirty = 1 AND \" +\n            \"row_version = 0;\")\n    suspend fun getTodosToInsertInner(user_online_id: String?): kotlin.collections.List<Todo>","prompt":""},{"id":706,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Query(\"SELECT \" +\n            \"   * \" +\n            \"FROM \" +\n            \"   todo \" +\n            \"WHERE \" +\n            \"   user_online_id = :user_online_id AND \" +\n            \"   dirty = 1 AND \" +\n            \"   row_version > 0;\")\n    suspend fun getTodosToUpdateInner(user_online_id: String?): kotlin.collections.List<Todo>","prompt":""},{"id":707,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"fun prepareSearchWherePrefix(queryText: String): String =\n            \"(title LIKE '%\" + queryText + \"%' OR \" +\n            \"description LIKE '%\" + queryText + \"%')\"","prompt":""},{"id":708,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   position \" +\n            \"FROM \" +\n            \"   todo \" +\n            \"ORDER BY \" +\n            \"   position \" +\n            \"LIMIT 1;\")\n    suspend fun getFirstTodoPosition(): Double?","prompt":""},{"id":709,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"SELECT \" +\n            \"   _id \" +\n            \"FROM \" +\n            \"   todo \" +\n            \"WHERE \" +\n            \"   position = :position \" +\n            \"ORDER BY \" +\n            \"   _id;\")\n    suspend fun get_IdForDuplicatePositionValuesInner(position: Double): kotlin.collections.List<Int>","prompt":""},{"id":710,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class SupportSQLiteQuerynull","data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@RawQuery\n    suspend fun getTodosByWhereConditionInner(query: SupportSQLiteQuery): kotlin.collections.List<Todo>","prompt":""},{"id":711,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun prepareStandardWherePostfix(): String =\n            \" AND \" +\n            \"completed = 0 AND \" +\n            \"user_online_id = '\" + getCurrentUserOnlineId() + \"' AND \" +\n            \"deleted = 0 \"","prompt":""},{"id":712,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class SupportSQLiteQuerynull","data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@RawQuery\n    suspend fun getTodosInner(query: SupportSQLiteQuery): kotlin.collections.List<Todo>","prompt":""},{"id":713,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Update\n    suspend fun updateTodoByIdInner(todo: Todo)","prompt":""},{"id":714,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"@Query(\"UPDATE \" +\n            \"   todo \" +\n            \"SET \" +\n            \"   _id = :id, \" +\n            \"   user_online_id = :user_online_id, \" +\n            \"   list_online_id = :list_online_id, \" +\n            \"   title = :title, \" +\n            \"   priority = :priority, \" +\n            \"   due_date = :due_date, \" +\n            \"   reminder_date_time = :reminder_date_time, \" +\n            \"   description = :description, \" +\n            \"   completed = :completed, \" +\n            \"   row_version = :row_version, \" +\n            \"   deleted = :deleted, \" +\n            \"   dirty = :dirty, \" +\n            \"   position = :position \" +\n            \"WHERE \" +\n            \"   todo_online_id = :todo_online_id;\")\n    suspend fun updateTodoByTodoOnlineIdInner(id: Long?, user_online_id: String?, list_online_id: String?,\n                                      title: String?, priority: Boolean?, due_date: Long,\n                                      reminder_date_time: Long, description: String?,\n                                      completed: Boolean?, row_version: Int, deleted: Boolean?,\n                                      dirty: Boolean, position: Double, todo_online_id: String?)","prompt":""},{"id":715,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"/**\n     * Fix the duplicated position field value of the all the todos in the database. We use this\n     * method to prevent the duplication of the position values when using multiple devices\n     * simultaneously. The fixed position value will be right between the previous and the next\n     * position.\n     */\n    suspend fun fixTodoPositions() {\n        var duplicatePositionTodos: kotlin.collections.MutableList<Todo> = mutableListOf()\n        duplicatePositionTodos.addAll(getDuplicatePositionTodosForASinglePosition())\n        while (duplicatePositionTodos.isNotEmpty()) {\n            for (i in 0 until duplicatePositionTodos.size - 1) {\n                val todoToBeFixed = duplicatePositionTodos[i + 1]\n                val previousPosition = duplicatePositionTodos[i].position\n                val nextPosition: Double = getNextTodoPosition(todoToBeFixed.position)\n                fixTodoPosition(todoToBeFixed._id, previousPosition, nextPosition)\n            }\n            duplicatePositionTodos.clear()\n            duplicatePositionTodos.addAll(getDuplicatePositionTodosForASinglePosition())\n        }\n    }","prompt":""},{"id":716,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":["data class Todo( @PrimaryKey(autoGenerate = true) var _id: Long?, @ColumnInfo(name = \"todo_online_id\") @SerializedName(\"todo_online_id\") var todoOnlineId: String?, @ColumnInfo(name = \"user_online_id\") @SerializedName(\"user_online_id\") var userOnlineId: String?, @ColumnInfo(name = \"list_online_id\") @SerializedName(\"list_online_id\") var listOnlineId: String?, @ColumnInfo(name = \"title\") @SerializedName(\"title\") var title: String?, @ColumnInfo(name = \"priority\") @SerializedName(\"priority\") var priority: Boolean? = false, @ColumnInfo(name = \"due_date\") @SerializedName(\"due_date\") var dueDate: Long = 0, @ColumnInfo(name = \"reminder_date_time\") @SerializedName(\"reminder_date_time\") var reminderDateTime: Long = 0, @ColumnInfo(name = \"description\") @SerializedName(\"description\") var description: String?, @ColumnInfo(name = \"completed\") @SerializedName(\"completed\") var completed: Boolean? = false, @ColumnInfo(name = \"row_version\") @SerializedName(\"row_version\") var rowVersion: Int = 0, @ColumnInfo(name = \"deleted\") @SerializedName(\"deleted\") var deleted: Boolean? = false, @ColumnInfo(name = \"dirty\") var dirty: Boolean = false, @ColumnInfo(name = \"position\") @SerializedName(\"position\") var position: Double = 5.0, @Ignore var isSelected: Boolean = false )"],"content":"@Query(\"SELECT \" +\n            \"   t.* \" +\n            \"FROM \" +\n            \"   todo t \" +\n            \"JOIN \" +\n            \"   (SELECT \" +\n            \"       position \" +\n            \"   FROM \" +\n            \"       todo \" +\n            \"   GROUP BY \" +\n            \"       position \" +\n            \"   HAVING \" +\n            \"       COUNT(*) > 1 \" +\n            \"   LIMIT 1 \" +\n            \"   ) p \" +\n            \"   ON t.position = p.position \" +\n            \"   ORDER BY \" +\n            \"       row_version;\")\n    suspend fun getDuplicatePositionTodosForASinglePosition(): kotlin.collections.List<Todo>","prompt":""},{"id":717,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"suspend fun getNextTodoPosition(position: Double): Double {\n        var nextTodoPosition = getNextTodoPositionInner(position)\n        if (nextTodoPosition == null)\n            nextTodoPosition = getPositionBetween(position, Double.MAX_VALUE)\n\n        return nextTodoPosition\n    }","prompt":""},{"id":718,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"/**\n     * Get the position value of the next todo from the local database. If the position parameter\n     * has the value of the last todo position, the returned position value will be between the last\n     * todo position value and the biggest double value.\n     * @param position The previous todo position value.\n     * @return The next todo position value.\n     */\n    @Query(\"SELECT \" +\n            \"   position \" +\n            \"FROM \" +\n            \"   todo \" +\n            \"WHERE \" +\n            \"   position > :position \" +\n            \"ORDER BY \" +\n            \"   position ASC \" +\n            \"LIMIT 1;\")\n    suspend fun getNextTodoPositionInner(position: Double): Double?","prompt":""},{"id":719,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"/**\n     * Return a position value between the given position values.\n     * @param previousPosition\n     * @param nextPosition\n     * @return\n     */\n    private fun getPositionBetween(previousPosition: Double, nextPosition: Double): Double =\n            (nextPosition - previousPosition) / 2 + previousPosition","prompt":""},{"id":720,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"/**\n     * Fix the duplicated position field value of the todo in the database. We use this method to\n     * prevent the duplication of the position values when using multiple devices simultaneously.\n     * The fixed position value will be right between the previous and the next position.\n     * @param todoToBeFixed The todo which has the duplicated position value.\n     * @param previousPosition The position of the todo which is right before the todo which's\n     * position should be fixed.\n     * @param nextPosition The position of the todo which is right after the todo which's\n     * position should be fixed.\n     */\n    @Query(\"UPDATE \" +\n            \"   todo \" +\n            \"SET \" +\n            \"   position = :fixedPosition, \" +\n            \"   dirty = 1 \" +\n            \"WHERE \" +\n            \"   _id = :id;\")\n    suspend fun fixTodoPositionInner(id: Long?, fixedPosition: Double)","prompt":""},{"id":721,"identifierName":"com.rolandvitezhu.todocloud.database.TodoCloudDatabaseDao","requiredType":[],"content":"/**\n     * Fix the duplicated position field value of the todo in the database. We use this method to\n     * prevent the duplication of the position values when using multiple devices simultaneously.\n     * The fixed position value will be right between the previous and the next position.\n     * @param todoToBeFixed The todo which has the duplicated position value.\n     * @param previousPosition The position of the todo which is right before the todo which's\n     * position should be fixed.\n     * @param nextPosition The position of the todo which is right after the todo which's\n     * position should be fixed.\n     */\n    suspend fun fixTodoPosition(_id: Long?, previousPosition: Double, nextPosition: Double) {\n        if (_id != null) {\n            val fixedPosition = getPositionBetween(previousPosition, nextPosition)\n            fixTodoPositionInner(_id, fixedPosition)\n        }\n    }","prompt":""},{"id":722,"identifierName":"com.mikepenz.fastadapter.app.paged.DemoEntityLocalDAO","requiredType":[],"content":"//to fetch data required to display in each page\n    @Query(\"SELECT * FROM DemoEntity\")\n    fun getAll(): DataSource.Factory<Int, DemoEntity>","prompt":""},{"id":723,"identifierName":"com.mikepenz.fastadapter.app.paged.DemoEntityLocalDAO","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"//this is used to populate db\n    @Insert\n    fun insertDemoEntities(demoEntities: List<DemoEntity>)","prompt":""},{"id":724,"identifierName":"com.mikepenz.fastadapter.app.paged.DemoEntityLocalDAO","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"UPDATE DemoEntity SET data1 = -data1\")\n    fun updateDemoEntities()","prompt":""},{"id":725,"identifierName":"fr.smarquis.fcm.data.db.MessageDao","requiredType":[],"content":"@Query(\"SELECT * FROM message ORDER BY sentTime DESC\")\n    fun get(): LiveData<List<Message>>","prompt":""},{"id":726,"identifierName":"fr.smarquis.fcm.data.db.MessageDao","requiredType":["data class Message( @PrimaryKey @ColumnInfo(name = \"messageId\") val messageId: String, @ColumnInfo(name = \"from\") val from: String?, @ColumnInfo(name = \"to\") val to: String?, @ColumnInfo(name = \"data\") val data: Map<String, String>, @ColumnInfo(name = \"collapseKey\") val collapseKey: String?, @ColumnInfo(name = \"messageType\") val messageType: String?, @ColumnInfo(name = \"sentTime\") val sentTime: Long, @ColumnInfo(name = \"ttl\") val ttl: Int, @ColumnInfo(name = \"priority\") val priority: Int, @ColumnInfo(name = \"originalPriority\") val originalPriority: Int, @ColumnInfo(name = \"payload\") val payload: Payload? = null)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(vararg messages: Message)","prompt":""},{"id":727,"identifierName":"fr.smarquis.fcm.data.db.MessageDao","requiredType":["data class Message( @PrimaryKey @ColumnInfo(name = \"messageId\") val messageId: String, @ColumnInfo(name = \"from\") val from: String?, @ColumnInfo(name = \"to\") val to: String?, @ColumnInfo(name = \"data\") val data: Map<String, String>, @ColumnInfo(name = \"collapseKey\") val collapseKey: String?, @ColumnInfo(name = \"messageType\") val messageType: String?, @ColumnInfo(name = \"sentTime\") val sentTime: Long, @ColumnInfo(name = \"ttl\") val ttl: Int, @ColumnInfo(name = \"priority\") val priority: Int, @ColumnInfo(name = \"originalPriority\") val originalPriority: Int, @ColumnInfo(name = \"payload\") val payload: Payload? = null)"],"content":"@Delete\n    suspend fun delete(vararg messages: Message)","prompt":""},{"id":728,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.image.RoomGameImagesService","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(data: RoomGameImage): Long","prompt":""},{"id":729,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.image.RoomGameImagesService","requiredType":[],"content":"@Query(\"select * from game_screenshots where gameId = :gameId\")\n    fun findForGame(gameId: Int): Flowable<List<RoomGameImage>>","prompt":""},{"id":730,"identifierName":"backend.model.location.LocationRepository","requiredType":[],"content":"@Query(\"SELECT * FROM location WHERE id IN (SELECT id FROM (SELECT id, @rownum \\\\:= @rownum + 1 AS number FROM location JOIN (SELECT @rownum \\\\:= 0) R WHERE team_id = ?1) a WHERE a.id = ?2 OR a.id = ?3 OR a.number mod (ceil(?4/?5)) = 0 ORDER BY a.id DESC)\", nativeQuery = true)\n    fun findByTeamId(id: Long, maxId: Long, minId: Long, modSelector: Long, perTeam: Int): Iterable<Location>","prompt":""},{"id":731,"identifierName":"backend.model.location.LocationRepository","requiredType":[],"content":"@Query(\"Select floor(max(a.id)) as maxId, floor(min(a.id)) as minId, floor(max(a.number)) as modSelector from (Select id, @rownum \\\\:= @rownum + 1 as number from location join (Select @rownum \\\\:= 0) r where is_during_event and team_id = ?1) a\", nativeQuery = true)\n    fun findTeamLocationBounds(id: Long): List<Any>","prompt":""},{"id":732,"identifierName":"backend.model.location.LocationRepository","requiredType":[],"content":"fun findBySpeedToLocationAndIsDuringEvent(speedToLocation: Double?, isDuringEvent: Boolean): List<Location>","prompt":""},{"id":733,"identifierName":"backend.model.location.LocationRepository","requiredType":[],"content":"@Query(\"Select l from Location l WHERE l.team.id = :id AND l.date <= :date AND l.id != :locationId order by l.date desc\")\n    fun findByTeamIdAndPriorOrderByDateDesc(@Param(\"id\") id: Long?, @Param(\"locationId\") locationId: Long?, @Param(\"date\") date: LocalDateTime): List<Location>","prompt":""},{"id":734,"identifierName":"backend.model.location.LocationRepository","requiredType":[],"content":"@Query(\"\"\"\n        select *\n        from location\n        where team_id = :id\n        order by id desc\n        limit 1\n    \"\"\", nativeQuery = true)\n    fun findLastLocationByTeamId(@Param(\"id\") id: Long): Location?","prompt":""},{"id":735,"identifierName":"backend.model.location.LocationRepository","requiredType":[],"content":"fun findAllByUploaderId(uploaderId: Long): List<Location>","prompt":""},{"id":736,"identifierName":"de.stefanmedack.ccctv.persistence.daos.ConferenceDao","requiredType":[],"content":"@Query(\"SELECT * FROM Conferences\")\n    fun getConferences(): Flowable<List<Conference>>","prompt":""},{"id":737,"identifierName":"de.stefanmedack.ccctv.persistence.daos.ConferenceDao","requiredType":[],"content":"@Query(\"SELECT * FROM Conferences WHERE c_group LIKE :conferenceGroupName\")\n    fun getConferences(conferenceGroupName: String): Flowable<List<Conference>>","prompt":""},{"id":738,"identifierName":"de.stefanmedack.ccctv.persistence.daos.ConferenceDao","requiredType":[],"content":"@Query(\"SELECT * FROM Conferences WHERE acronym = :acronym\")\n    fun getConferenceByAcronym(acronym: String): Flowable<Conference>","prompt":""},{"id":739,"identifierName":"de.stefanmedack.ccctv.persistence.daos.ConferenceDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM Conferences\")\n    fun getConferencesWithEvents(): Flowable<List<ConferenceWithEvents>>","prompt":""},{"id":740,"identifierName":"de.stefanmedack.ccctv.persistence.daos.ConferenceDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM Conferences WHERE c_group LIKE :conferenceGroupName\")\n    fun getConferencesWithEvents(conferenceGroupName: String): Flowable<List<ConferenceWithEvents>>","prompt":""},{"id":741,"identifierName":"de.stefanmedack.ccctv.persistence.daos.ConferenceDao","requiredType":["data class ConferenceWithEvents@JvmOverloads constructor( @Embedded val conference: Conference, @Relation(parentColumn = \"acronym\", entityColumn = \"conference_acronym\", entity = Event::class) var events: List<Event> = listOf() )"],"content":"@Transaction\n    @Query(\"SELECT * FROM Conferences WHERE acronym = :acronym\")\n    fun getConferenceWithEventsByAcronym(acronym: String): Flowable<ConferenceWithEvents>","prompt":""},{"id":742,"identifierName":"de.stefanmedack.ccctv.persistence.daos.ConferenceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(conference: Conference)","prompt":""},{"id":743,"identifierName":"de.stefanmedack.ccctv.persistence.daos.ConferenceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(conferences: List<Conference>)","prompt":""},{"id":744,"identifierName":"de.stefanmedack.ccctv.persistence.daos.ConferenceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertConferencesWithEvents(conferences: List<Conference>, events: List<Event>)","prompt":""},{"id":745,"identifierName":"com.amigocloud.amigosurvey.models.RelatedRecordDao","requiredType":[],"content":"@Query(\"SELECT * FROM RelatedRecord WHERE source_amigo_id = :source_amigo_id\")\n    fun findRecords(source_amigo_id: String): List<RelatedRecord>","prompt":""},{"id":746,"identifierName":"com.amigocloud.amigosurvey.models.RelatedRecordDao","requiredType":[],"content":"@Insert\n    fun insert(record: RelatedRecord)","prompt":""},{"id":747,"identifierName":"com.amigocloud.amigosurvey.models.RelatedRecordDao","requiredType":[],"content":"@Delete\n    fun delete(record: RelatedRecord)","prompt":""},{"id":748,"identifierName":"com.google.android.fhir.db.impl.dao.SyncedResourceDao","requiredType":["data class SyncedResourceEntity( /** Resource synced */ @PrimaryKey val resourceType: ResourceType, /** The highest `_lastUpdate` value of the resources synced of a specific type */ val lastUpdate: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE) suspend fun insert(entity: SyncedResourceEntity)","prompt":""},{"id":749,"identifierName":"com.google.android.fhir.db.impl.dao.SyncedResourceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  suspend fun insertAll(resources: List<SyncedResourceEntity>)","prompt":""},{"id":750,"identifierName":"com.google.android.fhir.db.impl.dao.SyncedResourceDao","requiredType":[],"content":"/**\n   * We will always have 1 entry for each [ResourceType] as it's the primary key, so we can limit\n   * the result to 1. If there is no entry for that [ResourceType] then `null` will be returned.\n   */\n  @Query(\n    \"\"\"SELECT lastUpdate FROM SyncedResourceEntity \n        WHERE resourceType = :resourceType LIMIT 1\"\"\"\n  )\n  suspend fun getLastUpdate(resourceType: ResourceType): String?","prompt":""},{"id":751,"identifierName":"com.awscherb.cardkeeper.data.dao.ScannedCodeDao","requiredType":["data class ScannedCode( @PrimaryKey(autoGenerate = true) var id: Int = 0, var format: BarcodeFormat, var text: String, var title: String, var created: Long = 0 )"],"content":"@Query(\"SELECT * FROM scannedCode WHERE id = :id LIMIT 1\")\n    fun getScannedCode(id: Int): Flow<ScannedCode>","prompt":""},{"id":752,"identifierName":"com.awscherb.cardkeeper.data.dao.ScannedCodeDao","requiredType":[],"content":"@Query(\"SELECT * FROM scannedCode\")\n    fun listScannedCodes(): Flow<List<ScannedCode>>","prompt":""},{"id":753,"identifierName":"com.awscherb.cardkeeper.data.dao.ScannedCodeDao","requiredType":[],"content":"@Query(\"SELECT * FROM scannedCode WHERE title LIKE '%' || :query || '%'\")\n    fun listScannedCodes(query: String): Flow<List<ScannedCode>>","prompt":""},{"id":754,"identifierName":"com.awscherb.cardkeeper.data.dao.ScannedCodeDao","requiredType":["data class ScannedCode( @PrimaryKey(autoGenerate = true) var id: Int = 0, var format: BarcodeFormat, var text: String, var title: String, var created: Long = 0 )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertCode(code: ScannedCode): Long","prompt":""},{"id":755,"identifierName":"com.awscherb.cardkeeper.data.dao.ScannedCodeDao","requiredType":["data class ScannedCode( @PrimaryKey(autoGenerate = true) var id: Int = 0, var format: BarcodeFormat, var text: String, var title: String, var created: Long = 0 )"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun updateCode(code: ScannedCode)","prompt":""},{"id":756,"identifierName":"com.awscherb.cardkeeper.data.dao.ScannedCodeDao","requiredType":["data class ScannedCode( @PrimaryKey(autoGenerate = true) var id: Int = 0, var format: BarcodeFormat, var text: String, var title: String, var created: Long = 0 )"],"content":"@Delete\n    suspend fun deleteCode(code: ScannedCode)","prompt":""},{"id":757,"identifierName":"jp.toastkid.yobidashi.browser.history.ViewHistoryRepository","requiredType":[],"content":"@Query(\"SELECT * FROM ViewHistory WHERE url LIKE :query OR title LIKE :query ORDER BY _id DESC\")\n    fun search(query: String): List<ViewHistory>","prompt":""},{"id":758,"identifierName":"jp.toastkid.yobidashi.browser.history.ViewHistoryRepository","requiredType":[],"content":"@Query(\"SELECT * FROM ViewHistory WHERE url LIKE :query ORDER BY _id DESC LIMIT :limit\")\n    fun search(query: String, limit: Int): List<ViewHistory>","prompt":""},{"id":759,"identifierName":"jp.toastkid.yobidashi.browser.history.ViewHistoryRepository","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun add(viewHistory: ViewHistory)","prompt":""},{"id":760,"identifierName":"jp.toastkid.yobidashi.browser.history.ViewHistoryRepository","requiredType":[],"content":"@Delete\n    fun delete(viewHistory: ViewHistory)","prompt":""},{"id":761,"identifierName":"jp.toastkid.yobidashi.browser.history.ViewHistoryRepository","requiredType":[],"content":"@Query(\"DELETE FROM ViewHistory\")\n    fun deleteAll()","prompt":""},{"id":762,"identifierName":"jp.toastkid.yobidashi.browser.history.ViewHistoryRepository","requiredType":[],"content":"@Query(\"SELECT * FROM ViewHistory ORDER BY _id DESC\")\n    fun reversed(): List<ViewHistory>","prompt":""},{"id":763,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.EntitlementsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(goldStatus: GoldStatus)","prompt":""},{"id":764,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.EntitlementsDao","requiredType":[],"content":"@Update\n    fun update(goldStatus: GoldStatus)","prompt":""},{"id":765,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.EntitlementsDao","requiredType":[],"content":"@Query(\"SELECT * FROM gold_status LIMIT 1\")\n    fun getGoldStatus(): GoldStatus?","prompt":""},{"id":766,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.EntitlementsDao","requiredType":[],"content":"@Query(\"SELECT * FROM gold_status LIMIT 1\")\n    fun getGoldStatusLiveData(): LiveData<GoldStatus>","prompt":""},{"id":767,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.EntitlementsDao","requiredType":[],"content":"@Delete\n    fun delete(goldStatus: GoldStatus)","prompt":""},{"id":768,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.EntitlementsDao","requiredType":[],"content":"/**\n     * This is purely for convenience. The clients of this DAO\n     * can simply send in a list of [entitlements][Entitlement].\n     */\n    @Transaction\n    fun insert(vararg entitlements: Entitlement) {\n        entitlements.forEach {\n            when (it) {\n                is GoldStatus -> insert(it)\n            }\n        }\n    }","prompt":""},{"id":769,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.EntitlementsDao","requiredType":[],"content":"@Transaction\n    fun update(vararg entitlements: Entitlement) {\n        entitlements.forEach {\n            when (it) {\n                is GoldStatus -> update(it)\n            }\n        }\n    }","prompt":""},{"id":770,"identifierName":"com.nytclient.data.db.NewsDao","requiredType":[],"content":"/**\n     * @Insert a list of NewsItems to database. If the news already exists, replaces it.\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertNews(news: List<NewsItem>)","prompt":""},{"id":771,"identifierName":"com.nytclient.data.db.NewsDao","requiredType":[],"content":"/**\n     * @return all news in the database\n     */\n    @Query(\"SELECT * FROM news\")\n    fun getAllNews(): LiveData<List<NewsItem>>","prompt":""},{"id":772,"identifierName":"com.vmenon.mpo.persistence.room.dao.ShowSearchResultDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT showSearchResults.* \n        FROM showSearchResults \n        INNER JOIN showSearch ON showSearchResults.showSearchResultsSearchId = showSearch.showSearchId \n        WHERE showSearch.searchTerm = :searchTerm\n        ORDER BY showSearchResults.showName\n        \"\"\"\n    )\n    suspend fun getBySearchTerm(searchTerm: String): List<ShowSearchResultsEntity>?","prompt":""},{"id":773,"identifierName":"com.vmenon.mpo.persistence.room.dao.ShowSearchResultDao","requiredType":["data class ShowSearchEntity( @PrimaryKey(autoGenerate = true) val showSearchId: Long, val searchTerm: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun save(search: ShowSearchEntity): Long","prompt":""},{"id":774,"identifierName":"com.vmenon.mpo.persistence.room.dao.ShowSearchResultDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun save(searchResults: List<ShowSearchResultsEntity>): List<Long>","prompt":""},{"id":775,"identifierName":"com.vmenon.mpo.persistence.room.dao.ShowSearchResultDao","requiredType":[],"content":"@Query(\"SELECT * FROM showSearch WHERE searchTerm=:searchTerm\")\n    suspend fun getSearchForTerm(searchTerm: String): ShowSearchEntity?","prompt":""},{"id":776,"identifierName":"com.vmenon.mpo.persistence.room.dao.ShowSearchResultDao","requiredType":[],"content":"@Query(\"SELECT * FROM showSearchResults WHERE showSearchResultsId = :id\")\n    suspend fun getSearchResultById(id: Long): ShowSearchResultsEntity?","prompt":""},{"id":777,"identifierName":"com.vmenon.mpo.persistence.room.dao.ShowSearchResultDao","requiredType":[],"content":"@Query(\"DELETE FROM showSearchResults where showSearchResultsSearchId=:searchId\")\n    suspend fun deleteResultsForSearch(searchId: Long)","prompt":""},{"id":778,"identifierName":"org.monora.uprotocol.client.android.database.WebClientDao","requiredType":[],"content":"@Query(\"SELECT * FROM webClient WHERE address = :address\")\n    suspend fun get(address: String): WebClient?","prompt":""},{"id":779,"identifierName":"org.monora.uprotocol.client.android.database.WebClientDao","requiredType":[],"content":"@Insert\n    suspend fun insert(webClient: WebClient)","prompt":""},{"id":780,"identifierName":"org.stepik.android.cache.rubric.dao.RubricDao","requiredType":["data class Rubric( @PrimaryKey @SerializedName(\"id\") val id: Long, @SerializedName(\"instruction\") val instruction: Long, @SerializedName(\"text\") val text: String, @SerializedName(\"cost\") val cost: Int, @SerializedName(\"position\") val position: Int )"],"content":"@Query(\"SELECT * FROM Rubric WHERE id IN (:ids)\")\n    fun getRubrics(ids: List<Long>): List<Rubric>","prompt":""},{"id":781,"identifierName":"org.stepik.android.cache.rubric.dao.RubricDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun saveRubrics(items: List<Rubric>)","prompt":""},{"id":782,"identifierName":"com.google.android.ground.persistence.local.room.dao.TileSetDao","requiredType":[],"content":"@Query(\"SELECT * FROM tile_sources\") fun findAllOnceAndStream(): Flowable<List<TileSetEntity>>","prompt":""},{"id":783,"identifierName":"com.google.android.ground.persistence.local.room.dao.TileSetDao","requiredType":[],"content":"@Query(\"SELECT * FROM tile_sources WHERE state = :state\")\n  fun findByState(state: Int): Single<List<TileSetEntity>>","prompt":""},{"id":784,"identifierName":"com.google.android.ground.persistence.local.room.dao.TileSetDao","requiredType":["data class TileSetEntity( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"path\") val path: String, @ColumnInfo(name = \"url\") val url: String, @ColumnInfo(name = \"state\") val state: TileSetEntityState, @ColumnInfo(name = \"basemap_count\") val offlineAreaReferenceCount: Int )"],"content":"@Query(\"SELECT * FROM tile_sources WHERE id = :id\") fun findById(id: String): Maybe<TileSetEntity>","prompt":""},{"id":785,"identifierName":"com.google.android.ground.persistence.local.room.dao.TileSetDao","requiredType":["data class TileSetEntity( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"path\") val path: String, @ColumnInfo(name = \"url\") val url: String, @ColumnInfo(name = \"state\") val state: TileSetEntityState, @ColumnInfo(name = \"basemap_count\") val offlineAreaReferenceCount: Int )"],"content":"@Query(\"SELECT * FROM tile_sources WHERE url = :url\")\n  fun findByUrl(url: String): Maybe<TileSetEntity>","prompt":""},{"id":786,"identifierName":"com.google.android.ground.persistence.local.room.dao.TileSetDao","requiredType":["data class TileSetEntity( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"path\") val path: String, @ColumnInfo(name = \"url\") val url: String, @ColumnInfo(name = \"state\") val state: TileSetEntityState, @ColumnInfo(name = \"basemap_count\") val offlineAreaReferenceCount: Int )"],"content":"@Query(\"SELECT * FROM tile_sources WHERE path = :path\")\n  fun findByPath(path: String): Maybe<TileSetEntity>","prompt":""},{"id":787,"identifierName":"com.google.android.ground.persistence.local.room.dao.TileSetDao","requiredType":[],"content":"@Query(\"UPDATE tile_sources SET basemap_count=:newCount WHERE url = :url\")\n  fun updateBasemapReferenceCount(newCount: Int, url: String): Single<Int>","prompt":""},{"id":788,"identifierName":"com.google.android.ground.persistence.local.room.dao.TileSetDao","requiredType":[],"content":"@Query(\"DELETE FROM tile_sources WHERE url = :url\") fun deleteByUrl(url: String): Maybe<Int>","prompt":""},{"id":789,"identifierName":"info.nightscout.androidaps.database.daos.DeviceStatusDao","requiredType":["data class DeviceStatus( @PrimaryKey(autoGenerate = true) var id: Long = 0, @Embedded var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var device: String? = null, var pump: String? = null, var enacted: String? = null, var suggested: String? = null, var iob: String? = null, var uploaderBattery: Int = 0, var configuration: String? = null )"],"content":"@Insert\n    fun insert(entry: DeviceStatus): Long","prompt":""},{"id":790,"identifierName":"info.nightscout.androidaps.database.daos.DeviceStatusDao","requiredType":["data class DeviceStatus( @PrimaryKey(autoGenerate = true) var id: Long = 0, @Embedded var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var device: String? = null, var pump: String? = null, var enacted: String? = null, var suggested: String? = null, var iob: String? = null, var uploaderBattery: Int = 0, var configuration: String? = null )"],"content":"@Update\n    fun update(entry: DeviceStatus)","prompt":""},{"id":791,"identifierName":"info.nightscout.androidaps.database.daos.DeviceStatusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_DEVICE_STATUS WHERE id = :id\")\n    fun findById(id: Long): DeviceStatus?","prompt":""},{"id":792,"identifierName":"info.nightscout.androidaps.database.daos.DeviceStatusDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_DEVICE_STATUS\")\n    fun deleteAllEntries()","prompt":""},{"id":793,"identifierName":"info.nightscout.androidaps.database.daos.DeviceStatusDao","requiredType":[],"content":"@Query(\"SELECT id FROM $TABLE_DEVICE_STATUS ORDER BY id DESC limit 1\")\n    fun getLastId(): Maybe<Long>","prompt":""},{"id":794,"identifierName":"info.nightscout.androidaps.database.daos.DeviceStatusDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_DEVICE_STATUS WHERE id NOT IN (SELECT MAX(id) FROM $TABLE_DEVICE_STATUS)\")\n    fun deleteAllEntriesExceptLast()","prompt":""},{"id":795,"identifierName":"info.nightscout.androidaps.database.daos.DeviceStatusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_DEVICE_STATUS WHERE nightscoutId = :nsId\")\n    fun findByNSId(nsId: String): DeviceStatus?","prompt":""},{"id":796,"identifierName":"info.nightscout.androidaps.database.daos.DeviceStatusDao","requiredType":[],"content":"// This query will be used with v3 to get all changed records\n    @Query(\"SELECT * FROM $TABLE_DEVICE_STATUS WHERE id > :id AND nightscoutId IS NULL ORDER BY id ASC\")\n    fun getModifiedFrom(id: Long): Single<List<DeviceStatus>>","prompt":""},{"id":797,"identifierName":"info.nightscout.androidaps.database.daos.DeviceStatusDao","requiredType":["data class DeviceStatus( @PrimaryKey(autoGenerate = true) var id: Long = 0, @Embedded var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var device: String? = null, var pump: String? = null, var enacted: String? = null, var suggested: String? = null, var iob: String? = null, var uploaderBattery: Int = 0, var configuration: String? = null )"],"content":"// for WS we need 1 record only\n    @Query(\"SELECT * FROM $TABLE_DEVICE_STATUS WHERE id > :id AND nightscoutId IS NULL ORDER BY id ASC limit 1\")\n    fun getNextModifiedOrNewAfter(id: Long): Maybe<DeviceStatus>","prompt":""},{"id":798,"identifierName":"androidx.work.impl.model.WorkNameDao","requiredType":[],"content":"/**\n     * Inserts a [WorkName] into the table.\n     *\n     * @param workName The [WorkName] to insert\n     */\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(workName: WorkName)","prompt":""},{"id":799,"identifierName":"androidx.work.impl.model.WorkNameDao","requiredType":[],"content":"/**\n     * Retrieves all [WorkSpec] ids in the given named graph.\n     *\n     * @param name The matching name\n     * @return All [WorkSpec] ids in the given named graph\n     */\n    @Query(\"SELECT work_spec_id FROM workname WHERE name=:name\")\n    fun getWorkSpecIdsWithName(name: String): List<String>","prompt":""},{"id":800,"identifierName":"androidx.work.impl.model.WorkNameDao","requiredType":[],"content":"/**\n     * @param workSpecId The [WorkSpec] id\n     * @return All the names associated to the [WorkSpec] id\n     */\n    @Query(\"SELECT name FROM workname WHERE work_spec_id=:workSpecId\")\n    fun getNamesForWorkSpecId(workSpecId: String): List<String>","prompt":""},{"id":801,"identifierName":"com.owncloud.android.data.sharing.shares.db.OCShareDao","requiredType":[],"content":"@Query(\n        \"SELECT * from \" + ProviderTableMeta.OCSHARES_TABLE_NAME + \" WHERE \" +\n                ProviderTableMeta.OCSHARES_ID_REMOTE_SHARED + \" = :remoteId\"\n    )\n    abstract fun getShareAsLiveData(\n        remoteId: String\n    ): LiveData<OCShareEntity>","prompt":""},{"id":802,"identifierName":"com.owncloud.android.data.sharing.shares.db.OCShareDao","requiredType":[],"content":"@Query(\n        \"SELECT * from \" + ProviderTableMeta.OCSHARES_TABLE_NAME + \" WHERE \" +\n                ProviderTableMeta.OCSHARES_PATH + \" = :filePath AND \" +\n                ProviderTableMeta.OCSHARES_ACCOUNT_OWNER + \" = :accountOwner AND \" +\n                ProviderTableMeta.OCSHARES_SHARE_TYPE + \" IN (:shareTypes)\"\n    )\n    abstract fun getSharesAsLiveData(\n        filePath: String, accountOwner: String, shareTypes: List<Int>\n    ): LiveData<List<OCShareEntity>>","prompt":""},{"id":803,"identifierName":"com.owncloud.android.data.sharing.shares.db.OCShareDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insert(ocShare: OCShareEntity): Long","prompt":""},{"id":804,"identifierName":"com.owncloud.android.data.sharing.shares.db.OCShareDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insert(ocShares: List<OCShareEntity>): List<Long>","prompt":""},{"id":805,"identifierName":"com.owncloud.android.data.sharing.shares.db.OCShareDao","requiredType":[],"content":"@Transaction\n    open fun update(ocShare: OCShareEntity): Long {\n        deleteShare(ocShare.remoteId)\n        return insert(ocShare)\n    }","prompt":""},{"id":806,"identifierName":"com.owncloud.android.data.sharing.shares.db.OCShareDao","requiredType":[],"content":"@Transaction\n    open fun replaceShares(ocShares: List<OCShareEntity>): List<Long> {\n        for (ocShare in ocShares) {\n            deleteSharesForFile(ocShare.path, ocShare.accountOwner)\n        }\n        return insert(ocShares)\n    }","prompt":""},{"id":807,"identifierName":"com.owncloud.android.data.sharing.shares.db.OCShareDao","requiredType":[],"content":"@Query(\n        \"DELETE from \" + ProviderTableMeta.OCSHARES_TABLE_NAME + \" WHERE \" +\n                ProviderTableMeta.OCSHARES_ID_REMOTE_SHARED + \" = :remoteId\"\n    )\n    abstract fun deleteShare(remoteId: String): Int","prompt":""},{"id":808,"identifierName":"com.owncloud.android.data.sharing.shares.db.OCShareDao","requiredType":[],"content":"@Query(\n        \"DELETE from \" + ProviderTableMeta.OCSHARES_TABLE_NAME + \" WHERE \" +\n                ProviderTableMeta.OCSHARES_PATH + \" = :filePath AND \" +\n                ProviderTableMeta.OCSHARES_ACCOUNT_OWNER + \" = :accountOwner\"\n    )\n    abstract fun deleteSharesForFile(filePath: String, accountOwner: String)","prompt":""},{"id":809,"identifierName":"com.waz.zclient.storage.db.receipts.ReadReceiptsDao","requiredType":[],"content":"@Query(\"SELECT * FROM ReadReceipts\")\n    suspend fun allReceipts(): List<ReadReceiptsEntity>","prompt":""},{"id":810,"identifierName":"com.waz.zclient.storage.db.receipts.ReadReceiptsDao","requiredType":[],"content":"@Query(\"SELECT * FROM ReadReceipts ORDER BY message_id, user_id LIMIT :batchSize OFFSET :start\")\n    override suspend fun nextBatch(start: Int, batchSize: Int): List<ReadReceiptsEntity>?","prompt":""},{"id":811,"identifierName":"com.waz.zclient.storage.db.receipts.ReadReceiptsDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM ReadReceipts\")\n    override suspend fun count(): Int","prompt":""},{"id":812,"identifierName":"org.moire.ultrasonic.data.ServerSettingDao","requiredType":[],"content":"/**\n     *Inserts a new Server Setting to the table\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(vararg serverSetting: ServerSetting)","prompt":""},{"id":813,"identifierName":"org.moire.ultrasonic.data.ServerSettingDao","requiredType":[],"content":"/**\n     * Deletes a Server Setting from the table\n     */\n    @Delete\n    suspend fun delete(serverSetting: ServerSetting)","prompt":""},{"id":814,"identifierName":"org.moire.ultrasonic.data.ServerSettingDao","requiredType":[],"content":"/**\n     * Updates an existing Server Setting in the table\n     */\n    @Update\n    suspend fun update(vararg serverSetting: ServerSetting)","prompt":""},{"id":815,"identifierName":"org.moire.ultrasonic.data.ServerSettingDao","requiredType":[],"content":"/**\n     * Loads all Server Settings from the table\n     */\n    @Query(\"SELECT * FROM serverSetting\")\n    fun loadAllServerSettings(): LiveData<List<ServerSetting>>","prompt":""},{"id":816,"identifierName":"org.moire.ultrasonic.data.ServerSettingDao","requiredType":[],"content":"/**\n     * Finds a Server Setting by its unique Id\n     */\n    @Query(\"SELECT * FROM serverSetting WHERE [id] = :id\")\n    suspend fun findById(id: Int): ServerSetting?","prompt":""},{"id":817,"identifierName":"org.moire.ultrasonic.data.ServerSettingDao","requiredType":[],"content":"/**\n     * Finds a Server Setting by its Index in the Select List\n     */\n    @Query(\"SELECT * FROM serverSetting WHERE [index] = :index\")\n    suspend fun findByIndex(index: Int): ServerSetting?","prompt":""},{"id":818,"identifierName":"org.moire.ultrasonic.data.ServerSettingDao","requiredType":[],"content":"/**\n     * Finds a Server Setting by its Index in the Select List\n     * @return LiveData of the ServerSetting\n     */\n    @Query(\"SELECT * FROM serverSetting WHERE [index] = :index\")\n    fun getLiveServerSettingByIndex(index: Int): LiveData<ServerSetting?>","prompt":""},{"id":819,"identifierName":"org.moire.ultrasonic.data.ServerSettingDao","requiredType":[],"content":"/**\n     * Retrieves the count of rows in the table\n     */\n    @Query(\"SELECT COUNT(*) FROM serverSetting\")\n    suspend fun count(): Int?","prompt":""},{"id":820,"identifierName":"org.moire.ultrasonic.data.ServerSettingDao","requiredType":[],"content":"/**\n     * Retrieves the greatest value of the Id column in the table\n     */\n    @Query(\"SELECT MAX([id]) FROM serverSetting\")\n    suspend fun getMaxId(): Int?","prompt":""},{"id":821,"identifierName":"org.moire.ultrasonic.data.ServerSettingDao","requiredType":[],"content":"/**\n     * Retrieves the greatest value of the Index column in the table\n     */\n    @Query(\"SELECT MAX([index]) FROM serverSetting\")\n    suspend fun getMaxIndex(): Int?","prompt":""},{"id":822,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Insert\n    fun insertSeason(season: SgSeason2): Long","prompt":""},{"id":823,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Insert\n    fun insertSeasons(seasons: List<SgSeason2>): LongArray","prompt":""},{"id":824,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Update(entity = SgSeason2::class)\n    fun updateSeasons(seasons: List<SgSeason2Update>): Int","prompt":""},{"id":825,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Update(entity = SgSeason2::class)\n    fun updateTmdbIds(seasons: List<SgSeason2TmdbIdUpdate>): Int","prompt":""},{"id":826,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Query(\"DELETE FROM sg_season\")\n    fun deleteAllSeasons()","prompt":""},{"id":827,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Query(\"DELETE FROM sg_season WHERE _id = :seasonId\")\n    fun deleteSeason(seasonId: Long)","prompt":""},{"id":828,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Transaction\n    fun deleteSeasons(seasonIds: List<Long>) {\n        seasonIds.forEach {\n            deleteSeason(it)\n        }\n    }","prompt":""},{"id":829,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Query(\"DELETE FROM sg_season WHERE series_id = :showId AND season_tmdb_id IS NULL\")\n    fun deleteSeasonsWithoutTmdbId(showId: Long)","prompt":""},{"id":830,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Query(\"SELECT * FROM sg_season WHERE _id = :seasonId\")\n    fun getSeason(seasonId: Long): SgSeason2?","prompt":""},{"id":831,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"/**\n     * Get IDs of seasons of a show, sorted by most recent one.\n     */\n    @Query(\"SELECT _id FROM sg_season WHERE series_id = :showId ORDER BY season_number DESC\")\n    fun getSeasonIdsOfShow(showId: Long): List<Long>","prompt":""},{"id":832,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Query(\"SELECT _id, series_id, season_tmdb_id, season_tvdb_id, season_number FROM sg_season WHERE _id = :seasonId\")\n    fun getSeasonNumbers(seasonId: Long): SgSeason2Numbers?","prompt":""},{"id":833,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Query(\"SELECT _id, series_id, season_tmdb_id, season_tvdb_id, season_number FROM sg_season WHERE season_tvdb_id = :seasonTvdbId\")\n    fun getSeasonNumbersByTvdbId(seasonTvdbId: Int): SgSeason2Numbers?","prompt":""},{"id":834,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Query(\"SELECT _id, series_id, season_tmdb_id, season_tvdb_id, season_number FROM sg_season WHERE series_id = :showId ORDER BY season_number\")\n    fun getSeasonNumbersOfShow(showId: Long): List<SgSeason2Numbers>","prompt":""},{"id":835,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"/**\n     * Excludes seasons where total episode count is 0.\n     */\n    @Query(\"SELECT * FROM sg_season WHERE series_id = :showId AND season_totalcount != 0 ORDER BY season_number DESC\")\n    fun getSeasonsOfShowLatestFirst(showId: Long): LiveData<List<SgSeason2>>","prompt":""},{"id":836,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"/**\n     * Excludes seasons where total episode count is 0.\n     */\n    @Query(\"SELECT * FROM sg_season WHERE series_id = :showId AND season_totalcount != 0 ORDER BY season_number ASC\")\n    fun getSeasonsOfShowOldestFirst(showId: Long): LiveData<List<SgSeason2>>","prompt":""},{"id":837,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"/**\n     * Note: does not exclude seasons based on season_totalcount because it might not be up-to-date.\n     */\n    @Query(\"SELECT * FROM sg_season WHERE series_id = :showId ORDER BY season_number ASC\")\n    fun getSeasonsForExport(showId: Long): List<SgSeason2>","prompt":""},{"id":838,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Update(entity = SgSeason2::class)\n    fun updateSeasonCounters(seasonCountUpdate: SgSeason2CountUpdate)","prompt":""},{"id":839,"identifierName":"com.battlelancer.seriesguide.shows.database.SgSeason2Helper","requiredType":[],"content":"@Query(\"DELETE FROM sg_season WHERE series_id = :showId\")\n    fun deleteSeasonsOfShow(showId: Long): Int","prompt":""},{"id":840,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE uid = :id\")\n    fun getNote(id: Int): LiveData<NoteEntity>","prompt":""},{"id":841,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE folderName = :folderName\")\n    fun getNoteByFolderName(folderName: String): LiveData<List<NoteEntity>>","prompt":""},{"id":842,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE folderName = :folderName ORDER BY pinned DESC\")\n    fun getNoteByFolderNameOrdered(folderName: String): LiveData<List<NoteEntity>>","prompt":""},{"id":843,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE folderName = :folderName ORDER BY locked DESC\")\n    fun getNoteByFolderNameOrderedLock(folderName: String): LiveData<List<NoteEntity>>","prompt":""},{"id":844,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE folderName = :folderName AND locked = 0 And pinned = 0\")\n    fun getNotesByFolderNameNotPinnedNotLocked(folderName: String): LiveData<List<NoteEntity>>","prompt":""},{"id":845,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE folderName = :folderName AND locked = 0 And pinned = 1\")\n    fun getNotesByFolderNamePinnedNotLocked(folderName: String): LiveData<List<NoteEntity>>","prompt":""},{"id":846,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE folderName = :folderName AND locked = 1 And pinned = 0\")\n    fun getNotesByFolderNameNotPinnedLocked(folderName: String): LiveData<List<NoteEntity>>","prompt":""},{"id":847,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE folderName = :folderName AND locked = 1 And pinned = 1\")\n    fun getNotesByFolderNamePinnedLocked(folderName: String): LiveData<List<NoteEntity>>","prompt":""},{"id":848,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE title LIKE :query|| '%'\")\n    fun getNoteByQuery(query: String): LiveData<List<NoteEntity>>","prompt":""},{"id":849,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE pinned = :isPinned\")\n    fun getNoteByPin(isPinned: Int): LiveData<List<NoteEntity>>","prompt":""},{"id":850,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE locked = :isLocked\")\n    fun getNoteByLock(isLocked: Int): LiveData<List<NoteEntity>>","prompt":""},{"id":851,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM NoteEntity WHERE color = :color\")\n    fun getNoteByColor(color: String): LiveData<List<NoteEntity>>","prompt":""},{"id":852,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertNotes(vararg noteEntity: NoteEntity): LongArray","prompt":""},{"id":853,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Delete\n    fun deleteNotes(vararg noteEntities: NoteEntity)","prompt":""},{"id":854,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"DELETE FROM NoteEntity WHERE folderName = :folderName\")\n    fun deleteNoteByFolderName(folderName: String)","prompt":""},{"id":855,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updateNote(vararg noteEntities: NoteEntity): Int","prompt":""},{"id":856,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"UPDATE NoteEntity SET pinned = :pin WHERE uid = :id\")\n    fun changeNotePinStatus(id: Int, pin: Int)","prompt":""},{"id":857,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"UPDATE NoteEntity SET locked = :lock WHERE uid = :id\")\n    fun changeNoteLockStatus(id: Int, lock: Int)","prompt":""},{"id":858,"identifierName":"com.nrs.nsnik.notes.data.NoteDao","requiredType":[],"content":"@Query(\"UPDATE NoteEntity SET folderName = :folderName WHERE uid = :id\")\n    fun changeNoteFolder(id: Int, folderName: String)","prompt":""},{"id":859,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.FavoritesDao","requiredType":["data class Favorite( @PrimaryKey(autoGenerate = true) var id: Int?, @ColumnInfo(name = \"full_path\") var fullPath: String, @ColumnInfo(name = \"filename\") var filename: String, @ColumnInfo(name = \"parent_path\") var parentPath: String)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(favorite: Favorite)","prompt":""},{"id":860,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.FavoritesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(favorites: List<Favorite>)","prompt":""},{"id":861,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.FavoritesDao","requiredType":[],"content":"@Query(\"SELECT favorites.full_path FROM favorites INNER JOIN media ON favorites.full_path = media.full_path WHERE media.deleted_ts = 0\")\n    fun getValidFavoritePaths(): List<String>","prompt":""},{"id":862,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.FavoritesDao","requiredType":[],"content":"@Query(\"SELECT id FROM favorites WHERE full_path = :path COLLATE NOCASE\")\n    fun isFavorite(path: String): Boolean","prompt":""},{"id":863,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.FavoritesDao","requiredType":[],"content":"@Query(\"UPDATE OR REPLACE favorites SET filename = :newFilename, full_path = :newFullPath, parent_path = :newParentPath WHERE full_path = :oldPath COLLATE NOCASE\")\n    fun updateFavorite(newFilename: String, newFullPath: String, newParentPath: String, oldPath: String)","prompt":""},{"id":864,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.FavoritesDao","requiredType":[],"content":"@Query(\"DELETE FROM favorites WHERE full_path = :path COLLATE NOCASE\")\n    fun deleteFavoritePath(path: String)","prompt":""},{"id":865,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.FavoritesDao","requiredType":[],"content":"@Query(\"DELETE FROM favorites\")\n    fun clearFavorites()","prompt":""},{"id":866,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Insert\n    fun addPublishers(vararg publishers: Publisher)","prompt":""},{"id":867,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Delete\n    fun deletePublishers(vararg publishers: Publisher)","prompt":""},{"id":868,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Insert\n    fun addAuthors(vararg authors: Author)","prompt":""},{"id":869,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Query(\"SELECT * FROM author WHERE authorId = :authorId\")\n    fun getAuthor(authorId: String): Author","prompt":""},{"id":870,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Insert\n    fun addBooks(vararg books: Book)","prompt":""},{"id":871,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookAuthor(val bookId: String, val authorId: String)"],"content":"@Insert\n    fun addBookAuthors(vararg bookAuthors: BookAuthor)","prompt":""},{"id":872,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBook(bookId: String): Book","prompt":""},{"id":873,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"\"\"SELECT * FROM book WHERE\n            bookId IN(:bookIds)\n            order by bookId DESC\"\"\")\n    fun getBooksMultiLineQuery(bookIds: List<String>): List<Book>","prompt":""},{"id":874,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookLiveData(bookId: String): LiveData<Book>","prompt":""},{"id":875,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookFlowable(bookId: String): Flowable<Book>","prompt":""},{"id":876,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookJavaOptional(bookId: String): java.util.Optional<Book>","prompt":""},{"id":877,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookListenableFuture(bookId: String): ListenableFuture<Book>","prompt":""},{"id":878,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookOptional(bookId: String): Optional<Book>","prompt":""},{"id":879,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookOptionalFlowable(bookId: String): Flowable<Optional<Book>>","prompt":""},{"id":880,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookOptionalListenableFuture(bookId: String): ListenableFuture<Optional<Book>>","prompt":""},{"id":881,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookSingle(bookId: String): Single<Book>","prompt":""},{"id":882,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookMaybe(bookId: String): Maybe<Book>","prompt":""},{"id":883,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Query(\"SELECT * FROM book INNER JOIN publisher \" +\n            \"ON book.bookPublisherId = publisher.publisherId \")\n    fun getBooksWithPublisher(): List<BookWithPublisher>","prompt":""},{"id":884,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book INNER JOIN publisher \" +\n            \"ON book.bookPublisherId = publisher.publisherId \")\n    fun getBooksWithPublisherLiveData(): LiveData<List<BookWithPublisher>>","prompt":""},{"id":885,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book INNER JOIN publisher \" +\n            \"ON book.bookPublisherId = publisher.publisherId \")\n    fun getBooksWithPublisherFlowable(): Flowable<List<BookWithPublisher>>","prompt":""},{"id":886,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book INNER JOIN publisher \" +\n            \"ON book.bookPublisherId = publisher.publisherId \")\n    fun getBooksWithPublisherListenableFuture(): ListenableFuture<List<BookWithPublisher>>","prompt":""},{"id":887,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class PublisherWithBooksnull"],"content":"@Query(\"SELECT * FROM publisher WHERE publisherId = :publisherId\")\n    fun getPublisherWithBooks(publisherId: String): PublisherWithBooks","prompt":""},{"id":888,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM publisher WHERE publisherId = :publisherId\")\n    fun getPublisherWithBookSales(publisherId: String): PublisherWithBookSales","prompt":""},{"id":889,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class PublisherWithBooksnull"],"content":"@Query(\"SELECT * FROM publisher WHERE publisherId = :publisherId\")\n    fun getPublisherWithBooksLiveData(publisherId: String): LiveData<PublisherWithBooks>","prompt":""},{"id":890,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class PublisherWithBooksnull"],"content":"@Query(\"SELECT * FROM publisher WHERE publisherId = :publisherId\")\n    fun getPublisherWithBooksFlowable(publisherId: String): Flowable<PublisherWithBooks>","prompt":""},{"id":891,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"UPDATE book SET title = :title WHERE bookId = :bookId\")\n    fun updateBookTitle(bookId: String, title: String?)","prompt":""},{"id":892,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE languages & :langs != 0 ORDER BY bookId ASC\")\n    @TypeConverters(Lang::class)\n    fun findByLanguages(langs: Set<Lang>): List<Book>","prompt":""},{"id":893,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithJavaEntitynull"],"content":"// see: b/78199923 just a compilation test to ensure we can generate proper code.\n    @Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getWithJavaEntities(bookId: String): BookWithJavaEntity","prompt":""},{"id":894,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Transaction\n    fun deleteAndAddPublisher(oldPublisher: Publisher, newPublisher: Publisher,\n            fail: Boolean = false) {\n        deletePublishers(oldPublisher)\n        if (fail) {\n            throw RuntimeException()\n        }\n        addPublishers(newPublisher)\n    }","prompt":""},{"id":895,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Query(\"SELECT * FROM Publisher\")\n    fun getPublishers(): List<Publisher>","prompt":""},{"id":896,"identifierName":"org.stepik.android.cache.catalog.dao.CatalogBlockDao","requiredType":[],"content":"@Query(\"SELECT * FROM CatalogBlock WHERE language = :language\")\n    fun getCatalogBlocks(language: String): Maybe<List<CatalogBlock>>","prompt":""},{"id":897,"identifierName":"org.stepik.android.cache.catalog.dao.CatalogBlockDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertCatalogBlocks(catalogBlocks: List<CatalogBlock>): Completable","prompt":""},{"id":898,"identifierName":"org.stepik.android.cache.catalog.dao.CatalogBlockDao","requiredType":[],"content":"@Query(\"DELETE FROM CatalogBlock\")\n    fun clearCatalogBlocks(): Completable","prompt":""},{"id":899,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.watchlist.WatchlistItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM  watchlist_item\")\n    abstract fun getAll(): LiveData<List<WatchlistItem>>","prompt":""},{"id":900,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.watchlist.WatchlistItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM  watchlist_item\")\n    abstract fun getAllSync(): List<WatchlistItem>","prompt":""},{"id":901,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.watchlist.WatchlistItemDao","requiredType":[],"content":"@Query(\"\"\"SELECT event.*, conference.acronym as conference FROM watchlist_item \n        JOIN event ON watchlist_item.event_guid=event.guid \n        JOIN conference ON event.conferenceId = conference.id\"\"\")\n    abstract fun getWatchlistEvents(): LiveData<List<Event>>","prompt":""},{"id":902,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.watchlist.WatchlistItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM  watchlist_item WHERE event_guid = :guid LIMIT 1\")\n    abstract fun getItemForEvent(guid: String): LiveData<WatchlistItem?>","prompt":""},{"id":903,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.watchlist.WatchlistItemDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun saveItem(item: WatchlistItem)","prompt":""},{"id":904,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.watchlist.WatchlistItemDao","requiredType":[],"content":"@Delete\n    abstract fun deleteItem(item: WatchlistItem)","prompt":""},{"id":905,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.watchlist.WatchlistItemDao","requiredType":[],"content":"@Query(\"DELETE from watchlist_item WHERE event_guid = :guid\")\n    abstract fun deleteItem(guid: String)","prompt":""},{"id":906,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.watchlist.WatchlistItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM  watchlist_item WHERE event_guid = :guid LIMIT 1\")\n    abstract suspend fun getItemForGuid(guid: String): WatchlistItem?","prompt":""},{"id":907,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.watchlist.WatchlistItemDao","requiredType":[],"content":"override suspend fun updateOrInsertInternal(item: WatchlistItem): Long {\n        if (item.id != 0L) {\n            update(item)\n        } else {\n            val existingEvent = getItemForGuid(item.eventGuid)\n            if (existingEvent != null) {\n                item.id = existingEvent.id\n                update(item)\n            } else {\n                item.id = insert(item)\n            }\n        }\n        return item.id\n    }","prompt":""},{"id":908,"identifierName":"jp.toastkid.article_viewer.bookmark.repository.BookmarkRepository","requiredType":[],"content":"@Query(\"SELECT id FROM bookmark\")\n    fun allArticleIds(): List<Int>","prompt":""},{"id":909,"identifierName":"jp.toastkid.article_viewer.bookmark.repository.BookmarkRepository","requiredType":["data class Bookmark(@PrimaryKey(autoGenerate = false) var id: Int)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun add(articleId: Bookmark)","prompt":""},{"id":910,"identifierName":"jp.toastkid.article_viewer.bookmark.repository.BookmarkRepository","requiredType":[],"content":"@Query(\"SELECT COUNT(id) FROM bookmark\")\n    fun count(): Int","prompt":""},{"id":911,"identifierName":"jp.toastkid.article_viewer.bookmark.repository.BookmarkRepository","requiredType":[],"content":"@Query(\"DELETE FROM bookmark WHERE id = :articleId\")\n    fun delete(articleId: Int)","prompt":""},{"id":912,"identifierName":"net.kourlas.voipms_sms.database.daos.DeletedDao","requiredType":[],"content":"@Query(\n        \"DELETE FROM ${Deleted.TABLE_NAME} WHERE ${Deleted.COLUMN_DID} NOT IN(:dids) AND ${Deleted.COLUMN_VOIP_ID} = :voipId\"\n    )\n    suspend fun delete(dids: Set<String>, voipId: Long)","prompt":""},{"id":913,"identifierName":"net.kourlas.voipms_sms.database.daos.DeletedDao","requiredType":[],"content":"@Query(\"DELETE FROM ${Deleted.TABLE_NAME}\")\n    suspend fun deleteAll()","prompt":""},{"id":914,"identifierName":"net.kourlas.voipms_sms.database.daos.DeletedDao","requiredType":[],"content":"@Query(\n        \"DELETE FROM ${Deleted.TABLE_NAME} WHERE ${Deleted.COLUMN_DID} NOT IN(:dids)\"\n    )\n    suspend fun deleteWithoutDids(dids: Set<String>)","prompt":""},{"id":915,"identifierName":"net.kourlas.voipms_sms.database.daos.DeletedDao","requiredType":[],"content":"@Query(\n        \"SELECT * FROM ${Deleted.TABLE_NAME} WHERE ${Deleted.COLUMN_DID} = :did AND ${Deleted.COLUMN_VOIP_ID} = :voipId LIMIT 1\"\n    )\n    suspend fun get(did: String, voipId: Long): Deleted?","prompt":""},{"id":916,"identifierName":"net.kourlas.voipms_sms.database.daos.DeletedDao","requiredType":["data class Deleted( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0, @ColumnInfo(name = COLUMN_VOIP_ID) val voipId: Long, @ColumnInfo(name = COLUMN_DID) val did: String )"],"content":"@Insert\n    suspend fun insert(deleted: Deleted): Long","prompt":""},{"id":917,"identifierName":"com.example.data.datasources.ImagesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(images: List<ImageEntity>)","prompt":""},{"id":918,"identifierName":"com.example.data.datasources.ImagesDao","requiredType":["data class ImageEntity(@ColumnInfo(name = \"url\") val url: String, @ColumnInfo(name = \"comicId\") val id: Int)"],"content":"@Query(\"SELECT * FROM images WHERE comicId= (:id)\")\n    fun loadImagesById(id: Int): List<ImageEntity>","prompt":""},{"id":919,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Query(\"SELECT * FROM reviews WHERE id=:key\")\n    abstract suspend fun get(key: Int): ReviewEntity?","prompt":""},{"id":920,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Transaction\n    open suspend fun get(keys: List<Int>): List<ReviewEntity> {\n        return getBatch(keys, ::getList)\n    }","prompt":""},{"id":921,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Query(\"SELECT * FROM reviews WHERE id IN (:keys)\")\n    abstract suspend fun getList(keys: List<Int>): List<ReviewEntity>","prompt":""},{"id":922,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Query(\"SELECT * FROM reviews WHERE id=:key\")\n    abstract fun getStream(key: Int): Flow<ReviewEntity?>","prompt":""},{"id":923,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Query(\"SELECT * FROM reviews\")\n    abstract suspend fun getAll(): List<ReviewEntity>","prompt":""},{"id":924,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Query(\"SELECT * FROM reviews\")\n    abstract fun getAllStream(): Flow<List<ReviewEntity>>","prompt":""},{"id":925,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Query(\"SELECT id FROM reviews\")\n    abstract fun getKeys(): List<Int>","prompt":""},{"id":926,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Query(\"SELECT id FROM reviews\")\n    abstract fun getKeysStream(): Flow<List<Int>>","prompt":""},{"id":927,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Transaction\n    open suspend fun put(value: ReviewEntity): ReviewEntity? {\n        return putMerged(value, ::get)\n    }","prompt":""},{"id":928,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Transaction\n    open suspend fun put(values: List<ReviewEntity>): List<ReviewEntity> {\n        return putBatch(values, ::get)\n    }","prompt":""},{"id":929,"identifierName":"quickbeer.android.domain.review.store.ReviewDao","requiredType":[],"content":"@Query(\"DELETE FROM reviews WHERE id=:key\")\n    abstract suspend fun delete(key: Int): Int","prompt":""},{"id":930,"identifierName":"pl.org.seva.events.message.MessagesDao","requiredType":[],"content":"@Query(\"select * from ${EventsDb.MESSAGE_TABLE}\")\n    suspend fun getAll(): List<Message.Entity>","prompt":""},{"id":931,"identifierName":"pl.org.seva.events.message.MessagesDao","requiredType":[],"content":"@Insert\n    suspend fun insert(messages: Collection<Message.Entity>)","prompt":""},{"id":932,"identifierName":"pl.org.seva.events.message.MessagesDao","requiredType":[],"content":"@Insert\n    suspend fun insert(message: Message.Entity)","prompt":""},{"id":933,"identifierName":"pl.org.seva.events.message.MessagesDao","requiredType":[],"content":"@Delete\n    suspend fun delete(message: Message.Entity)","prompt":""},{"id":934,"identifierName":"com.talentica.androidkotlin.db.dao.ProductDao","requiredType":[],"content":"@Query(\"SELECT * FROM products\")\n    fun loadAllProducts(): LiveData<List<ProductEntity?>?>?","prompt":""},{"id":935,"identifierName":"com.talentica.androidkotlin.db.dao.ProductDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(products: List<ProductEntity>?)","prompt":""},{"id":936,"identifierName":"com.talentica.androidkotlin.db.dao.ProductDao","requiredType":[],"content":"@Query(\"select * from products where id = :productId\")\n    fun loadProduct(productId: Int): LiveData<ProductEntity?>?","prompt":""},{"id":937,"identifierName":"com.talentica.androidkotlin.db.dao.ProductDao","requiredType":[],"content":"@Query(\"select * from products where id = :productId\")\n    fun loadProductSync(productId: Int): ProductEntity?","prompt":""},{"id":938,"identifierName":"com.github.bumblebee.command.statistics.dao.StatisticsRepository","requiredType":["data class Statisticnull"],"content":"fun findStatisticByPostedDate(postedDate: LocalDate): List<Statistic>","prompt":""},{"id":939,"identifierName":"com.github.bumblebee.command.statistics.dao.StatisticsRepository","requiredType":["data class Statisticnull"],"content":"fun findStatisticByChatId(chatId: Long): List<Statistic>","prompt":""},{"id":940,"identifierName":"com.github.bumblebee.command.statistics.dao.StatisticsRepository","requiredType":["data class Statisticnull"],"content":"@Query(\"select s from Statistic s where chatId = ?1 and postedDate >= ?2 and postedDate <= ?3 \" +\n            \"order by postedDate, messageCount desc\")\n    fun findStatisticsBetweenDateRange(chatId: Long, since: LocalDate, until: LocalDate): List<Statistic>","prompt":""},{"id":941,"identifierName":"com.github.vhromada.catalog.repository.ProgramRepository","requiredType":["data class Program( /** * ID */ @Id @SequenceGenerator(name = \"program_generator\", sequenceName = \"programs_sq\", allocationSize = 1) @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"program_generator\") var id: Int?, /** * UUID */ val uuid: String, /** * Name */ @Column(name = \"program_name\") var name: String, /** * Normalized name */ @Column(name = \"normalized_program_name\") var normalizedName: String, /** * URL to english Wikipedia page about program */ @Column(name = \"wiki_en\") var wikiEn: String?, /** * URL to czech Wikipedia page about program */ @Column(name = \"wiki_cz\") var wikiCz: String?, /** * Count of media */ @Column(name = \"media_count\") var mediaCount: Int, /** * Format */ var format: String, /** * True if there is crack */ var crack: Boolean, /** * True if there is serial key */ @Column(name = \"serial_key\") var serialKey: Boolean, /** * Other data */ @Column(name = \"other_data\") var otherData: String?, /** * Note */ var note: String?, )"],"content":"/**\n     * Finds program by UUID.\n     *\n     * @param uuid UUID\n     * @return program\n     */\n    fun findByUuid(uuid: String): Optional<Program>","prompt":""},{"id":942,"identifierName":"com.github.vhromada.catalog.repository.ProgramRepository","requiredType":["data class ProgramStatistics( /** * Count of programs */ val count: Long, /** * Count of media */ val mediaCount: Long? )"],"content":"/**\n     * Returns statistics.\n     *\n     * @return statistics\n     */\n    @Query(\"SELECT new com.github.vhromada.catalog.domain.io.ProgramStatistics(COUNT(p.id), SUM(p.mediaCount)) FROM Program p\")\n    fun getStatistics(): ProgramStatistics","prompt":""},{"id":943,"identifierName":"us.mikeandwan.photos.database.NotificationPreferenceDao","requiredType":[],"content":"@Query(\"SELECT * FROM notification_preference WHERE id = :id\")\n    fun getNotificationPreference(id: Int): Flow<NotificationPreference>","prompt":""},{"id":944,"identifierName":"us.mikeandwan.photos.database.NotificationPreferenceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun setNotificationPreference(preference: NotificationPreference)","prompt":""},{"id":945,"identifierName":"me.proxer.app.media.TagDao","requiredType":[],"content":"@Transaction\n    open fun replaceTags(tags: List<LocalTag>): List<Long> {\n        clear()\n\n        return insertTags(tags)\n    }","prompt":""},{"id":946,"identifierName":"me.proxer.app.media.TagDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertTags(tags: List<LocalTag>): List<Long>","prompt":""},{"id":947,"identifierName":"me.proxer.app.media.TagDao","requiredType":[],"content":"@Query(\"SELECT * FROM tags\")\n    abstract fun getTags(): List<LocalTag>","prompt":""},{"id":948,"identifierName":"me.proxer.app.media.TagDao","requiredType":[],"content":"@Query(\"DELETE FROM tags\")\n    abstract fun clear()","prompt":""},{"id":949,"identifierName":"com.czbix.v2ex.db.TopicRecordDao","requiredType":[],"content":"@Query(\"SELECT * FROM TopicRecord WHERE id = :id\")\n    suspend fun getRecordById(id: Int): TopicRecord?","prompt":""},{"id":950,"identifierName":"com.czbix.v2ex.db.TopicRecordDao","requiredType":[],"content":"@Query(\"SELECT lastReadComment FROM TopicRecord WHERE id = :id\")\n    fun getLastReadComment(id: Int): Int?","prompt":""},{"id":951,"identifierName":"com.czbix.v2ex.db.TopicRecordDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun updateRecord(record: TopicRecord)","prompt":""},{"id":952,"identifierName":"data.tinder.recommendation.RecommendationUserInstagramPhotoDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertInstagramPhoto(photo: RecommendationUserInstagramPhotoEntity)","prompt":""},{"id":953,"identifierName":"data.tinder.recommendation.RecommendationUserInstagramPhotoDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserInstagramPhotoEntity WHERE link=:link\")\n  fun selectInstagramPhotoByLink(link: String): List<RecommendationUserInstagramPhotoEntity>","prompt":""},{"id":954,"identifierName":"com.phapps.elitedangerous.companion.data.doa.CommanderDao","requiredType":["data class CommanderProfilenull"],"content":"@Query(\"SELECT * FROM commander_profile\")\n    fun getCommanderProfiles(): List<CommanderProfile>","prompt":""},{"id":955,"identifierName":"com.phapps.elitedangerous.companion.data.doa.CommanderDao","requiredType":["data class CommanderProfilenull"],"content":"@Query(\"SELECT * FROM commander_profile WHERE name LIKE :name LIMIT 1\")\n    fun getCommanderByName(name: String): LiveData<CommanderProfile>","prompt":""},{"id":956,"identifierName":"com.phapps.elitedangerous.companion.data.doa.CommanderDao","requiredType":["data class CommanderProfilenull"],"content":"@Query(\"SELECT * FROM commander_profile WHERE name LIKE :name LIMIT 1\")\n    fun getCommanderByNameSync(name: String): CommanderProfile","prompt":""},{"id":957,"identifierName":"com.phapps.elitedangerous.companion.data.doa.CommanderDao","requiredType":["data class CommanderProfilenull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(commanderProfile: CommanderProfile)","prompt":""},{"id":958,"identifierName":"com.phapps.elitedangerous.companion.data.doa.CommanderDao","requiredType":["data class CommanderProfilenull"],"content":"@Delete\n    fun delete(commanderProfile: CommanderProfile)","prompt":""},{"id":959,"identifierName":"app.tivi.data.daos.RecommendedDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM recommended_entries WHERE page = :page ORDER BY id ASC\")\n    abstract fun entriesForPage(page: Int): Flow<List<RecommendedShowEntry>>","prompt":""},{"id":960,"identifierName":"app.tivi.data.daos.RecommendedDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM recommended_entries ORDER BY page ASC, id ASC LIMIT :count OFFSET :offset\")\n    abstract fun entriesObservable(count: Int, offset: Int): Flow<List<RecommendedEntryWithShow>>","prompt":""},{"id":961,"identifierName":"app.tivi.data.daos.RecommendedDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM recommended_entries ORDER BY page ASC, id ASC\")\n    abstract fun entriesPagingSource(): PagingSource<Int, RecommendedEntryWithShow>","prompt":""},{"id":962,"identifierName":"app.tivi.data.daos.RecommendedDao","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM recommended_entries WHERE page = :page\")\n    abstract override suspend fun deletePage(page: Int)","prompt":""},{"id":963,"identifierName":"app.tivi.data.daos.RecommendedDao","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM recommended_entries\")\n    abstract override suspend fun deleteAll()","prompt":""},{"id":964,"identifierName":"app.tivi.data.daos.RecommendedDao","requiredType":[],"content":"@Query(\"SELECT MAX(page) from recommended_entries\")\n    abstract override suspend fun getLastPage(): Int?","prompt":""},{"id":965,"identifierName":"com.orgzly.android.db.dao.SavedSearchDao","requiredType":[],"content":"@Query(\"SELECT * FROM searches WHERE id = :id\")\n    fun get(id: Long): SavedSearch?","prompt":""},{"id":966,"identifierName":"com.orgzly.android.db.dao.SavedSearchDao","requiredType":[],"content":"@Query(\"SELECT * FROM searches ORDER BY position, id\")\n    fun getLiveData(): LiveData<List<SavedSearch>>","prompt":""},{"id":967,"identifierName":"com.orgzly.android.db.dao.SavedSearchDao","requiredType":[],"content":"@Query(\"SELECT * FROM searches ORDER BY position, id\")\n    fun getAll(): List<SavedSearch>","prompt":""},{"id":968,"identifierName":"com.orgzly.android.db.dao.SavedSearchDao","requiredType":[],"content":"@Query(\"SELECT * FROM searches WHERE name LIKE :name ORDER BY position, id\")\n    fun getAllByNameIgnoreCase(name: String): List<SavedSearch>","prompt":""},{"id":969,"identifierName":"com.orgzly.android.db.dao.SavedSearchDao","requiredType":[],"content":"@Query(\"SELECT * FROM searches WHERE position > :position ORDER BY position LIMIT 1\")\n    fun getFirstBelow(position: Int): SavedSearch?","prompt":""},{"id":970,"identifierName":"com.orgzly.android.db.dao.SavedSearchDao","requiredType":[],"content":"@Query(\"SELECT * FROM searches WHERE position < :position ORDER BY position DESC LIMIT 1\")\n    fun getFirstAbove(position: Int): SavedSearch?","prompt":""},{"id":971,"identifierName":"com.orgzly.android.db.dao.SavedSearchDao","requiredType":[],"content":"@Query(\"SELECT MAX(position) + 1 FROM searches\")\n    fun getNextAvailablePosition(): Int","prompt":""},{"id":972,"identifierName":"com.orgzly.android.db.dao.SavedSearchDao","requiredType":[],"content":"@Query(\"DELETE FROM searches\")\n    fun deleteAll()","prompt":""},{"id":973,"identifierName":"com.orgzly.android.db.dao.SavedSearchDao","requiredType":[],"content":"@Query(\"DELETE FROM searches WHERE id IN (:ids)\")\n    fun delete(ids: Set<Long>)","prompt":""},{"id":974,"identifierName":"org.monora.uprotocol.client.android.database.TransferDao","requiredType":[],"content":"@Query(\"SELECT EXISTS(SELECT * FROM transfer WHERE id = :groupId)\")\n    suspend fun contains(groupId: Long): Boolean","prompt":""},{"id":975,"identifierName":"org.monora.uprotocol.client.android.database.TransferDao","requiredType":[],"content":"@Delete\n    suspend fun delete(transfer: Transfer)","prompt":""},{"id":976,"identifierName":"org.monora.uprotocol.client.android.database.TransferDao","requiredType":[],"content":"@Query(\"SELECT * FROM transfer WHERE id = :groupId\")\n    suspend fun get(groupId: Long): Transfer?","prompt":""},{"id":977,"identifierName":"org.monora.uprotocol.client.android.database.TransferDao","requiredType":[],"content":"@Query(\"SELECT * FROM transferDetail WHERE id = :groupId\")\n    fun getDetail(groupId: Long): LiveData<TransferDetail>","prompt":""},{"id":978,"identifierName":"org.monora.uprotocol.client.android.database.TransferDao","requiredType":[],"content":"@Query(\"SELECT * FROM transferDetail WHERE id = :groupId\")\n    fun getDetailDirect(groupId: Long): TransferDetail?","prompt":""},{"id":979,"identifierName":"org.monora.uprotocol.client.android.database.TransferDao","requiredType":[],"content":"@Query(\"SELECT * FROM transferDetail ORDER BY dateCreated DESC\")\n    fun getDetails(): LiveData<List<TransferDetail>>","prompt":""},{"id":980,"identifierName":"org.monora.uprotocol.client.android.database.TransferDao","requiredType":[],"content":"@Insert\n    suspend fun insert(transfer: Transfer)","prompt":""},{"id":981,"identifierName":"org.monora.uprotocol.client.android.database.TransferDao","requiredType":[],"content":"@Update\n    suspend fun update(transfer: Transfer)","prompt":""},{"id":982,"identifierName":"com.anothermovieapp.repository.DaoMovie","requiredType":[],"content":"@Query(\"SELECT * from movies\")\n    suspend fun get(): List<EntityDBMovie>","prompt":""},{"id":983,"identifierName":"com.anothermovieapp.repository.DaoMovie","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(item: EntityDBMovie)","prompt":""},{"id":984,"identifierName":"com.emogoth.android.phone.mimi.db.dao.RefreshQueueAccess","requiredType":["data class QueueItemnull"],"content":"@Query(\"SELECT ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.ID} as queue_id, ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.THREAD_SIZE} as old_thread_size, ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.REPLY_COUNT}, ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.LAST_REFRESH}, ${MimiDatabase.HISTORY_TABLE}.${History.ID} as history_id, ${MimiDatabase.HISTORY_TABLE}.${History.BOARD_NAME}, ${MimiDatabase.HISTORY_TABLE}.${History.THREAD_ID}, ${MimiDatabase.HISTORY_TABLE}.${History.THREAD_REMOVED}, ${MimiDatabase.HISTORY_TABLE}.${History.SIZE}, ${MimiDatabase.HISTORY_TABLE}.${History.UNREAD_COUNT} FROM ${MimiDatabase.REFRESH_QUEUE_TABLE} INNER JOIN ${MimiDatabase.HISTORY_TABLE} ON ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.HISTORY_ID} = ${MimiDatabase.HISTORY_TABLE}.${History.ID} WHERE ${MimiDatabase.HISTORY_TABLE}.${History.BOARD_NAME} = :boardName AND ${MimiDatabase.HISTORY_TABLE}.${History.THREAD_ID} = :threadId ORDER BY ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.LAST_REFRESH} ASC LIMIT 1\")\n    abstract fun getQueueItem(boardName: String, threadId: Long): Single<QueueItem>","prompt":""},{"id":985,"identifierName":"com.emogoth.android.phone.mimi.db.dao.RefreshQueueAccess","requiredType":[],"content":"@Query(\"SELECT ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.ID} as queue_id, ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.THREAD_SIZE} as old_thread_size, ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.REPLY_COUNT}, ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.LAST_REFRESH}, ${MimiDatabase.HISTORY_TABLE}.${History.ID} as history_id, ${MimiDatabase.HISTORY_TABLE}.${History.BOARD_NAME}, ${MimiDatabase.HISTORY_TABLE}.${History.THREAD_ID}, ${MimiDatabase.HISTORY_TABLE}.${History.THREAD_REMOVED}, ${MimiDatabase.HISTORY_TABLE}.${History.SIZE}, ${MimiDatabase.HISTORY_TABLE}.${History.UNREAD_COUNT} FROM ${MimiDatabase.REFRESH_QUEUE_TABLE} INNER JOIN ${MimiDatabase.HISTORY_TABLE} ON ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.HISTORY_ID} = ${MimiDatabase.HISTORY_TABLE}.${History.ID} ORDER BY ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.ID} ASC\")\n    abstract fun getAllQueueItems(): Single<List<QueueItem>>","prompt":""},{"id":986,"identifierName":"com.emogoth.android.phone.mimi.db.dao.RefreshQueueAccess","requiredType":["data class QueueItemnull"],"content":"@Query(\"SELECT ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.ID} as queue_id, ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.THREAD_SIZE} as old_thread_size, ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.REPLY_COUNT}, ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.LAST_REFRESH}, ${MimiDatabase.HISTORY_TABLE}.${History.ID} as history_id, ${MimiDatabase.HISTORY_TABLE}.${History.BOARD_NAME}, ${MimiDatabase.HISTORY_TABLE}.${History.THREAD_ID}, ${MimiDatabase.HISTORY_TABLE}.${History.THREAD_REMOVED}, ${MimiDatabase.HISTORY_TABLE}.${History.SIZE}, ${MimiDatabase.HISTORY_TABLE}.${History.UNREAD_COUNT} FROM ${MimiDatabase.REFRESH_QUEUE_TABLE} INNER JOIN ${MimiDatabase.HISTORY_TABLE} ON ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.HISTORY_ID} = ${MimiDatabase.HISTORY_TABLE}.${History.ID} WHERE ${MimiDatabase.HISTORY_TABLE}.${History.THREAD_REMOVED} = 0 ORDER BY ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.LAST_REFRESH} ASC LIMIT 1\")\n    abstract fun nextItem(): Maybe<QueueItem>","prompt":""},{"id":987,"identifierName":"com.emogoth.android.phone.mimi.db.dao.RefreshQueueAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.REFRESH_QUEUE_TABLE} WHERE ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.ID} IN (SELECT ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.ID} FROM ${MimiDatabase.REFRESH_QUEUE_TABLE} INNER JOIN ${MimiDatabase.HISTORY_TABLE} ON ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.HISTORY_ID} = ${MimiDatabase.HISTORY_TABLE}.${History.ID} WHERE ${History.BOARD_NAME} = :boardName AND ${History.THREAD_ID} = :threadId)\")\n    abstract fun removeItem(boardName: String, threadId: Long): Single<Int>","prompt":""},{"id":988,"identifierName":"com.emogoth.android.phone.mimi.db.dao.RefreshQueueAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.REFRESH_QUEUE_TABLE} WHERE ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.ID} IN (SELECT ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.ID} FROM ${MimiDatabase.REFRESH_QUEUE_TABLE} INNER JOIN ${MimiDatabase.HISTORY_TABLE} ON ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.HISTORY_ID} = ${MimiDatabase.HISTORY_TABLE}.${History.ID} WHERE ${History.WATCHED} = 0)\")\n    abstract fun removeUnwatched(): Single<Int>","prompt":""},{"id":989,"identifierName":"com.emogoth.android.phone.mimi.db.dao.RefreshQueueAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.REFRESH_QUEUE_TABLE} WHERE ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.ID} IN (SELECT ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.ID} FROM ${MimiDatabase.REFRESH_QUEUE_TABLE} INNER JOIN ${MimiDatabase.HISTORY_TABLE} ON ${MimiDatabase.REFRESH_QUEUE_TABLE}.${RefreshQueue.HISTORY_ID} = ${MimiDatabase.HISTORY_TABLE}.${History.ID} WHERE ${History.THREAD_REMOVED} = 1)\")\n    abstract fun removeComplete(): Single<Int>","prompt":""},{"id":990,"identifierName":"com.cn29.aac.datasource.itunes.db.AlbumDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg artists: Album?)","prompt":""},{"id":991,"identifierName":"com.cn29.aac.datasource.itunes.db.AlbumDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(artists: List<Album>)","prompt":""},{"id":992,"identifierName":"com.cn29.aac.datasource.itunes.db.AlbumDao","requiredType":[],"content":"@Query(\"SELECT * FROM album\")\n    fun getAll(): LiveData<List<Album>>","prompt":""},{"id":993,"identifierName":"com.cn29.aac.datasource.itunes.db.AlbumDao","requiredType":[],"content":"@Query(\"SELECT * FROM album WHERE artistId = :artistId \")\n    fun getAlbum(artistId: Long): LiveData<List<Album>>","prompt":""},{"id":994,"identifierName":"com.cn29.aac.datasource.itunes.db.AlbumDao","requiredType":["data class Album(var artistId: Long = 0, var collectionName: String = \"\", var collectionPrice: Double = 0.0, var primaryGenreName: String? = null, var releaseDate: String? = null, var artworkUrl100: String? = null, var collectionViewUrl: String? = null)"],"content":"@Update\n    fun update(artist: Album): Int","prompt":""},{"id":995,"identifierName":"com.reindeercrafts.hackernews.data.ArticleDao","requiredType":[],"content":"@Query(\"select * from Article where id = :p0\")\n    fun findById(id: String): Flowable<Article>","prompt":""},{"id":996,"identifierName":"com.reindeercrafts.hackernews.data.ArticleDao","requiredType":[],"content":"@Query(\"select * from Article where id = :p0\")\n    fun findByIdSync(id: String): Article","prompt":""},{"id":997,"identifierName":"com.reindeercrafts.hackernews.data.ArticleDao","requiredType":[],"content":"@Query(\"select * from Article where type = :p0\")\n    fun findByType(type: String): Flowable<List<Article>>","prompt":""},{"id":998,"identifierName":"com.reindeercrafts.hackernews.data.ArticleDao","requiredType":[],"content":"@Query(\"select * from Article where id in (:p0)\")\n    fun findByIds(ids: Array<String>): Flowable<List<Article>>","prompt":""},{"id":999,"identifierName":"com.reindeercrafts.hackernews.data.ArticleDao","requiredType":[],"content":"@Query(\"select * from Article\")\n    fun findAll(): Flowable<List<Article>>","prompt":""},{"id":1000,"identifierName":"com.reindeercrafts.hackernews.data.ArticleDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun saveArticle(article: Article)","prompt":""},{"id":1001,"identifierName":"com.reindeercrafts.hackernews.data.ArticleDao","requiredType":[],"content":"@Delete\n    fun deleteArticle(article: Article)","prompt":""},{"id":1002,"identifierName":"app.tivi.data.daos.TrendingDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM trending_shows WHERE page = :page ORDER BY watchers DESC, id ASC\")\n    abstract fun entriesObservable(page: Int): Flow<List<TrendingShowEntry>>","prompt":""},{"id":1003,"identifierName":"app.tivi.data.daos.TrendingDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM trending_shows ORDER BY page ASC, watchers DESC, id ASC LIMIT :count OFFSET :offset\")\n    abstract fun entriesObservable(count: Int, offset: Int): Flow<List<TrendingEntryWithShow>>","prompt":""},{"id":1004,"identifierName":"app.tivi.data.daos.TrendingDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM trending_shows ORDER BY page ASC, watchers DESC, id ASC\")\n    abstract fun entriesPagingSource(): PagingSource<Int, TrendingEntryWithShow>","prompt":""},{"id":1005,"identifierName":"app.tivi.data.daos.TrendingDao","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM trending_shows WHERE page = :page\")\n    abstract override suspend fun deletePage(page: Int)","prompt":""},{"id":1006,"identifierName":"app.tivi.data.daos.TrendingDao","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM trending_shows\")\n    abstract override suspend fun deleteAll()","prompt":""},{"id":1007,"identifierName":"app.tivi.data.daos.TrendingDao","requiredType":[],"content":"@Query(\"SELECT MAX(page) from trending_shows\")\n    abstract override suspend fun getLastPage(): Int?","prompt":""},{"id":1008,"identifierName":"info.nightscout.androidaps.database.daos.PreferenceChangeDao","requiredType":["data class PreferenceChange( @PrimaryKey(autoGenerate = true) override var id: Long = 0L, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var key: String, var value: Any? )"],"content":"@Insert\n    fun insert(preferenceChange: PreferenceChange)","prompt":""},{"id":1009,"identifierName":"info.nightscout.androidaps.database.daos.PreferenceChangeDao","requiredType":["data class PreferenceChange( @PrimaryKey(autoGenerate = true) override var id: Long = 0L, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var key: String, var value: Any? )"],"content":"@Query(\"SELECT * FROM $TABLE_PREFERENCE_CHANGES WHERE timestamp > :since AND timestamp <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<PreferenceChange>","prompt":""},{"id":1010,"identifierName":"org.wordpress.android.fluxc.persistence.dashboard.CardsDao","requiredType":[],"content":"@Query(\"SELECT * FROM DashboardCards WHERE siteLocalId = :siteLocalId AND type IN (:cardTypes)\")\n    abstract fun get(siteLocalId: Int, cardTypes: List<CardModel.Type>): Flow<List<CardEntity>>","prompt":""},{"id":1011,"identifierName":"org.wordpress.android.fluxc.persistence.dashboard.CardsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insert(card: List<CardEntity>)","prompt":""},{"id":1012,"identifierName":"org.wordpress.android.fluxc.persistence.dashboard.CardsDao","requiredType":[],"content":"suspend fun insertWithDate(siteLocalId: Int, cards: List<CardModel>) {\n        val insertDate = CardsUtils.getInsertDate()\n        insert(cards.map { CardEntity.from(siteLocalId, it, insertDate) })\n    }","prompt":""},{"id":1013,"identifierName":"org.wordpress.android.fluxc.persistence.dashboard.CardsDao","requiredType":[],"content":"@Query(\"DELETE FROM DashboardCards\")\n    abstract fun clear()","prompt":""},{"id":1014,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.CafeteriaMenuDao","requiredType":[],"content":"@Query(\"DELETE FROM cafeteriaMenu\")\n    fun removeCache()","prompt":""},{"id":1015,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.CafeteriaMenuDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(cafeteriaMenus: List<CafeteriaMenu>)","prompt":""},{"id":1016,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.CafeteriaMenuDao","requiredType":[],"content":"@Query(\"SELECT strftime('%d-%m-%Y', date) FROM cafeteriaMenu \" +\n            \"WHERE date > date('now','localtime') AND cafeteriaId=:cafeteriaId AND name=:dishName \" +\n            \"ORDER BY date ASC\")\n    fun getNextDatesForDish(cafeteriaId: Int, dishName: String): Flowable<List<String>>","prompt":""},{"id":1017,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.CafeteriaMenuDao","requiredType":[],"content":"@Query(\"SELECT id, cafeteriaId, date, typeShort, typeLong, 0 AS typeNr, group_concat(name, '\\n') AS name FROM cafeteriaMenu \" +\n            \"WHERE cafeteriaId = :cafeteriaId AND date = :date \" +\n            \"GROUP BY typeLong ORDER BY typeShort=\\\"tg\\\" DESC, typeShort ASC, typeNr\")\n    fun getCafeteriaMenus(cafeteriaId: Int, date: DateTime): List<CafeteriaMenu>","prompt":""},{"id":1018,"identifierName":"im.fdx.v2ex.ui.topic.MyReplyDao","requiredType":[],"content":"@Query(\"SELECT * FROM my_reply WHERE topic_id = (:topicId)\")\n    suspend fun getMyReplyById(topicId: String) : MyReply?","prompt":""},{"id":1019,"identifierName":"im.fdx.v2ex.ui.topic.MyReplyDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(myReply: MyReply): Long","prompt":""},{"id":1020,"identifierName":"expo.modules.updates.db.dao.JSONDataDao","requiredType":[],"content":"/**\n   * for private use only\n   * must be marked public for Room\n   * so we use the underscore to discourage use\n   */\n  @Query(\"SELECT * FROM json_data WHERE `key` = :key AND scope_key = :scopeKey ORDER BY last_updated DESC LIMIT 1;\")\n  abstract fun _loadJSONDataForKey(key: String, scopeKey: String): List<JSONDataEntity>","prompt":""},{"id":1021,"identifierName":"expo.modules.updates.db.dao.JSONDataDao","requiredType":[],"content":"@Insert\n  abstract fun _insertJSONData(jsonDataEntity: JSONDataEntity)","prompt":""},{"id":1022,"identifierName":"expo.modules.updates.db.dao.JSONDataDao","requiredType":[],"content":"@Query(\"DELETE FROM json_data WHERE `key` = :key AND scope_key = :scopeKey;\")\n  abstract fun _deleteJSONDataForKey(key: String, scopeKey: String)","prompt":""},{"id":1023,"identifierName":"expo.modules.updates.db.dao.JSONDataDao","requiredType":[],"content":"/**\n   * for public use\n   */\n  fun loadJSONStringForKey(key: String, scopeKey: String): String? {\n    val rows = _loadJSONDataForKey(key, scopeKey)\n    return if (rows.isEmpty()) {\n      null\n    } else rows[0].value\n  }","prompt":""},{"id":1024,"identifierName":"expo.modules.updates.db.dao.JSONDataDao","requiredType":[],"content":"@Transaction\n  open fun setJSONStringForKey(key: String, value: String, scopeKey: String) {\n    _deleteJSONDataForKey(key, scopeKey)\n    _insertJSONData(JSONDataEntity(key, value, Date(), scopeKey))\n  }","prompt":""},{"id":1025,"identifierName":"expo.modules.updates.db.dao.JSONDataDao","requiredType":[],"content":"@Transaction\n  open fun setMultipleFields(fields: Map<String, String>, scopeKey: String) {\n    val iterator = fields.entries.iterator()\n    while (iterator.hasNext()) {\n      val entry = iterator.next()\n      _deleteJSONDataForKey(entry.key, scopeKey)\n      _insertJSONData(JSONDataEntity(entry.key, entry.value, Date(), scopeKey))\n    }\n  }","prompt":""},{"id":1026,"identifierName":"org.monora.uprotocol.client.android.database.SafFolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM safFolder ORDER BY name ASC\")\n    fun getAll(): LiveData<List<SafFolder>>","prompt":""},{"id":1027,"identifierName":"org.monora.uprotocol.client.android.database.SafFolderDao","requiredType":[],"content":"@Insert\n    suspend fun insert(folder: SafFolder)","prompt":""},{"id":1028,"identifierName":"org.monora.uprotocol.client.android.database.SafFolderDao","requiredType":[],"content":"@Query(\"DELETE FROM safFolder\")\n    suspend fun removeAll()","prompt":""},{"id":1029,"identifierName":"org.jraf.android.cinetoday.database.KnownMovieDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(movies: List<KnownMovie>)","prompt":""},{"id":1030,"identifierName":"org.jraf.android.cinetoday.database.KnownMovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM KnownMovie where id = :id\")\n    fun knownMovieById(id: String): KnownMovie?","prompt":""},{"id":1031,"identifierName":"com.petukhovsky.jvaluer.queue.queue.QueueRepository","requiredType":[],"content":"fun findFirstByOrderByIndexDesc(): QueueElement?","prompt":""},{"id":1032,"identifierName":"com.petukhovsky.jvaluer.queue.queue.QueueRepository","requiredType":[],"content":"@Query(\"{ 'info.status' : { \\$ne : 2 } }\")\n    fun findUncompletedElements(): List<QueueElement>","prompt":""},{"id":1033,"identifierName":"com.keylesspalace.tusky.db.ConversationsDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(conversations: List<ConversationEntity>)","prompt":""},{"id":1034,"identifierName":"com.keylesspalace.tusky.db.ConversationsDao","requiredType":["data class ConversationEntity( val accountId: Long, val id: String, val accounts: List<ConversationAccountEntity>, val unread: Boolean, @Embedded(prefix = \"s_\") val lastStatus: ConversationStatusEntity )","data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(conversation: ConversationEntity)","prompt":""},{"id":1035,"identifierName":"com.keylesspalace.tusky.db.ConversationsDao","requiredType":["data class ConversationEntity( val accountId: Long, val id: String, val accounts: List<ConversationAccountEntity>, val unread: Boolean, @Embedded(prefix = \"s_\") val lastStatus: ConversationStatusEntity )","data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Delete\n    fun delete(conversation: ConversationEntity)","prompt":""},{"id":1036,"identifierName":"com.keylesspalace.tusky.db.ConversationsDao","requiredType":[],"content":"@Query(\"SELECT * FROM ConversationEntity WHERE accountId = :accountId ORDER BY s_createdAt DESC\")\n    fun conversationsForAccount(accountId: Long) : DataSource.Factory<Int, ConversationEntity>","prompt":""},{"id":1037,"identifierName":"com.keylesspalace.tusky.db.ConversationsDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"DELETE FROM ConversationEntity WHERE accountId = :accountId\")\n    fun deleteForAccount(accountId: Long)","prompt":""},{"id":1038,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"@Query(\"SELECT * FROM tasks WHERE completed = 0 AND deleted = 0 AND (hideUntil > :now OR dueDate > :now)\")\n    internal abstract suspend fun needsRefresh(now: Long = now()): List<Task>","prompt":""},{"id":1039,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM tasks WHERE _id = :id LIMIT 1\")\n    abstract suspend fun fetch(id: Long): Task?","prompt":""},{"id":1040,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"suspend fun fetch(ids: List<Long>): List<Task> = ids.chunkedMap(this::fetchInternal)","prompt":""},{"id":1041,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"@Query(\"SELECT * FROM tasks WHERE _id IN (:ids)\")\n    internal abstract suspend fun fetchInternal(ids: List<Long>): List<Task>","prompt":""},{"id":1042,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"SELECT COUNT(1) FROM tasks WHERE timerStart > 0 AND deleted = 0\")\n    abstract suspend fun activeTimers(): Int","prompt":""},{"id":1043,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"SELECT COUNT(1) FROM tasks INNER JOIN alarms ON tasks._id = alarms.task WHERE type = $TYPE_SNOOZE\")\n    abstract suspend fun snoozedReminders(): Int","prompt":""},{"id":1044,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"SELECT COUNT(1) FROM tasks INNER JOIN notification ON tasks._id = notification.task\")\n    abstract suspend fun hasNotifications(): Int","prompt":""},{"id":1045,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"@Query(\"SELECT tasks.* FROM tasks INNER JOIN notification ON tasks._id = notification.task\")\n    abstract suspend fun activeNotifications(): List<Task>","prompt":""},{"id":1046,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM tasks WHERE remoteId = :remoteId\")\n    abstract suspend fun fetch(remoteId: String): Task?","prompt":""},{"id":1047,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"@Query(\"SELECT * FROM tasks WHERE completed = 0 AND deleted = 0\")\n    abstract suspend fun getActiveTasks(): List<Task>","prompt":""},{"id":1048,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"@Query(\"SELECT * FROM tasks WHERE remoteId IN (:remoteIds) \"\n            + \"AND recurrence IS NOT NULL AND LENGTH(recurrence) > 0\")\n    abstract suspend fun getRecurringTasks(remoteIds: List<String>): List<Task>","prompt":""},{"id":1049,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"UPDATE tasks SET completed = :completionDate, modified = :updateTime WHERE remoteId IN (:remoteIds)\")\n    abstract suspend fun setCompletionDate(remoteIds: List<String>, completionDate: Long, updateTime: Long = now())","prompt":""},{"id":1050,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"@Query(\"SELECT tasks.* FROM tasks \"\n            + \"LEFT JOIN google_tasks ON tasks._id = google_tasks.gt_task \"\n            + \"WHERE gt_list_id IN (SELECT gtl_remote_id FROM google_task_lists WHERE gtl_account = :account)\"\n            + \"AND (tasks.modified > google_tasks.gt_last_sync OR google_tasks.gt_remote_id = '' OR google_tasks.gt_deleted > 0) \"\n            + \"ORDER BY CASE WHEN gt_parent = 0 THEN 0 ELSE 1 END, gt_order ASC\")\n    abstract suspend fun getGoogleTasksToPush(account: String): List<Task>","prompt":""},{"id":1051,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"@Query(\"\"\"\n        SELECT tasks.*\n        FROM tasks\n                 INNER JOIN caldav_tasks ON tasks._id = caldav_tasks.cd_task\n        WHERE caldav_tasks.cd_calendar = :calendar\n          AND cd_deleted = 0\n          AND (tasks.modified > caldav_tasks.cd_last_sync OR caldav_tasks.cd_last_sync = 0)\n        ORDER BY created\"\"\")\n    abstract suspend fun getCaldavTasksToPush(calendar: String): List<Task>","prompt":""},{"id":1052,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"// --- SQL clause generators\n    @Query(\"SELECT * FROM tasks\")\n    abstract suspend fun getAll(): List<Task>","prompt":""},{"id":1053,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"SELECT calendarUri FROM tasks \" + \"WHERE calendarUri IS NOT NULL AND calendarUri != ''\")\n    abstract suspend fun getAllCalendarEvents(): List<String>","prompt":""},{"id":1054,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"UPDATE tasks SET calendarUri = '' \" + \"WHERE calendarUri IS NOT NULL AND calendarUri != ''\")\n    abstract suspend fun clearAllCalendarEvents(): Int","prompt":""},{"id":1055,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"SELECT calendarUri FROM tasks \"\n            + \"WHERE completed > 0 AND calendarUri IS NOT NULL AND calendarUri != ''\")\n    abstract suspend fun getCompletedCalendarEvents(): List<String>","prompt":""},{"id":1056,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"UPDATE tasks SET calendarUri = '' \"\n            + \"WHERE completed > 0 AND calendarUri IS NOT NULL AND calendarUri != ''\")\n    abstract suspend fun clearCompletedCalendarEvents(): Int","prompt":""},{"id":1057,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"open suspend fun fetchTasks(callback: suspend (SubtaskInfo) -> List<String>): List<TaskContainer> {\n        return fetchTasks(getSubtaskInfo(), callback)\n    }","prompt":""},{"id":1058,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"open suspend fun fetchTasks(subtasks: SubtaskInfo, callback: suspend (SubtaskInfo) -> List<String>): List<TaskContainer> =\n            database.withTransaction {\n                val start = if (BuildConfig.DEBUG) now() else 0\n                val queries = callback(subtasks)\n                val last = queries.size - 1\n                for (i in 0 until last) {\n                    query(SimpleSQLiteQuery(queries[i]))\n                }\n                val result = fetchTasks(SimpleSQLiteQuery(queries[last]))\n                Timber.v(\"%sms: %s\", now() - start, queries.joinToString(\";\\n\"))\n                result\n            }","prompt":""},{"id":1059,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Preferences@JvmOverloads constructor( private val context: Context, name: String? = getSharedPreferencesName(context) )"],"content":"suspend fun fetchTasks(preferences: Preferences, filter: Filter): List<TaskContainer> =\n            fetchTasks {\n                TaskListQuery.getQuery(preferences, filter, it)\n            }","prompt":""},{"id":1060,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class SimpleSQLiteQuery( private val query: String, @Suppress(\"ArrayReturn\") // Due to legacy API private val bindArgs: Array<out Any?>? )"],"content":"@RawQuery\n    internal abstract suspend fun query(query: SimpleSQLiteQuery): Int","prompt":""},{"id":1061,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class SimpleSQLiteQuery( private val query: String, @Suppress(\"ArrayReturn\") // Due to legacy API private val bindArgs: Array<out Any?>? )"],"content":"@RawQuery\n    internal abstract suspend fun fetchTasks(query: SimpleSQLiteQuery): List<TaskContainer>","prompt":""},{"id":1062,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class SimpleSQLiteQuery( private val query: String, @Suppress(\"ArrayReturn\") // Due to legacy API private val bindArgs: Array<out Any?>? )"],"content":"@RawQuery\n    abstract suspend fun count(query: SimpleSQLiteQuery): Int","prompt":""},{"id":1063,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"\"\"\nSELECT EXISTS(SELECT 1 FROM tasks WHERE parent > 0 AND deleted = 0) AS hasSubtasks,\n       EXISTS(SELECT 1\n              FROM google_tasks\n                       INNER JOIN tasks ON gt_task = _id\n              WHERE deleted = 0\n                AND gt_parent > 0\n                AND gt_deleted = 0)                                 AS hasGoogleSubtasks\n    \"\"\")\n    abstract suspend fun getSubtaskInfo(): SubtaskInfo","prompt":""},{"id":1064,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class SimpleSQLiteQuery( private val query: String, @Suppress(\"ArrayReturn\") // Due to legacy API private val bindArgs: Array<out Any?>? )"],"content":"@RawQuery(observedEntities = [Place::class])\n    abstract fun getTaskFactory(query: SimpleSQLiteQuery): DataSource.Factory<Int, TaskContainer>","prompt":""},{"id":1065,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"suspend fun touch(ids: List<Long>, now: Long = currentTimeMillis()) =\n        ids.eachChunk { internalTouch(it, now) }","prompt":""},{"id":1066,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"UPDATE tasks SET modified = :now WHERE _id in (:ids)\")\n    internal abstract suspend fun internalTouch(ids: List<Long>, now: Long = currentTimeMillis())","prompt":""},{"id":1067,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"suspend fun setParent(parent: Long, tasks: List<Long>) =\n            tasks.eachChunk { setParentInternal(parent, it) }","prompt":""},{"id":1068,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"UPDATE tasks SET parent = :parent WHERE _id IN (:children) AND _id != :parent\")\n    internal abstract suspend fun setParentInternal(parent: Long, children: List<Long>)","prompt":""},{"id":1069,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"UPDATE tasks SET lastNotified = :timestamp WHERE _id = :id AND lastNotified != :timestamp\")\n    abstract suspend fun setLastNotified(id: Long, timestamp: Long)","prompt":""},{"id":1070,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"suspend fun getChildren(id: Long): List<Long> = getChildren(listOf(id))","prompt":""},{"id":1071,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"\"\"\nWITH RECURSIVE recursive_tasks (task) AS (\n    SELECT _id\n    FROM tasks\n    WHERE parent IN (:ids)\n    UNION ALL\n    SELECT _id\n    FROM tasks\n             INNER JOIN recursive_tasks ON recursive_tasks.task = tasks.parent\n    WHERE tasks.deleted = 0)\nSELECT task\nFROM recursive_tasks\n    \"\"\")\n    abstract suspend fun getChildren(ids: List<Long>): List<Long>","prompt":""},{"id":1072,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"\"\"\nWITH RECURSIVE recursive_tasks (task, parent) AS (\n    SELECT _id, parent FROM tasks WHERE _id = :parent\n    UNION ALL\n    SELECT _id, tasks.parent FROM tasks\n        INNER JOIN recursive_tasks ON recursive_tasks.parent = tasks._id\n    WHERE tasks.deleted = 0\n)\nSELECT task\nFROM recursive_tasks\n\"\"\")\n    abstract suspend fun getParents(parent: Long): List<Long>","prompt":""},{"id":1073,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Preferences@JvmOverloads constructor( private val context: Context, name: String? = getSharedPreferencesName(context) )","data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"internal suspend fun setCollapsed(preferences: Preferences, filter: Filter, collapsed: Boolean) {\n        fetchTasks(preferences, filter)\n                .filter(TaskContainer::hasChildren)\n                .map(TaskContainer::getId)\n                .eachChunk { setCollapsed(it, collapsed) }\n    }","prompt":""},{"id":1074,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"UPDATE tasks SET collapsed = :collapsed, modified = :now WHERE _id IN (:ids)\")\n    internal abstract suspend fun setCollapsed(ids: List<Long>, collapsed: Boolean, now: Long = now())","prompt":""},{"id":1075,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"@Insert\n    abstract suspend fun insert(task: Task): Long","prompt":""},{"id":1076,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"suspend fun update(task: Task, original: Task? = null): Boolean {\n        if (!task.insignificantChange(original)) {\n            task.modificationDate = now()\n        }\n        return updateInternal(task) == 1\n    }","prompt":""},{"id":1077,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"@Update\n    internal abstract suspend fun updateInternal(task: Task): Int","prompt":""},{"id":1078,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"suspend fun createNew(task: Task): Long {\n        task.id = NO_ID\n        if (task.creationDate == 0L) {\n            task.creationDate = now()\n        }\n        if (Task.isUuidEmpty(task.remoteId)) {\n            task.remoteId = UUIDHelper.newUUID()\n        }\n        if (BuildConfig.DEBUG) {\n            require(task.remoteId?.isNotBlank() == true && task.remoteId != \"0\")\n        }\n        val insert = insert(task)\n        task.id = insert\n        return task.id\n    }","prompt":""},{"id":1079,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"suspend fun count(filter: Filter): Int {\n        val query = getQuery(filter.sqlQuery, Field.COUNT)\n        val start = if (BuildConfig.DEBUG) now() else 0\n        val count = count(query)\n        Timber.v(\"%sms: %s\", now() - start, query.sql)\n        return count\n    }","prompt":""},{"id":1080,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"suspend fun fetchFiltered(filter: Filter): List<Task> = fetchFiltered(filter.getSqlQuery())","prompt":""},{"id":1081,"identifierName":"org.tasks.data.TaskDao","requiredType":["data class Tasknull"],"content":"suspend fun fetchFiltered(queryTemplate: String): List<Task> {\n        val query = getQuery(queryTemplate, Task.FIELDS)\n        val start = if (BuildConfig.DEBUG) now() else 0\n        val tasks = fetchTasks(query)\n        Timber.v(\"%sms: %s\", now() - start, query.sql)\n        return tasks.map(TaskContainer::getTask)\n    }","prompt":""},{"id":1082,"identifierName":"org.tasks.data.TaskDao","requiredType":[],"content":"@Query(\"\"\"\nSELECT _id\nFROM tasks\n         LEFT JOIN google_tasks ON _id = gt_task AND gt_deleted = 0\n         LEFT JOIN caldav_tasks ON _id = cd_task AND cd_deleted = 0\nWHERE gt_id IS NULL\n  AND cd_id IS NULL\n  AND parent = 0\n    \"\"\")\n    abstract suspend fun getLocalTasks(): List<Long>","prompt":""},{"id":1083,"identifierName":"io.github.gumil.data.persistence.dao.LinkDao","requiredType":[],"content":"@Query(\"SELECT * FROM Link\" +\n            \" WHERE subreddit = :subreddit\" +\n            \" ORDER BY createdUtc DESC\"+\n            \" LIMIT :limit\" +\n            \" OFFSET :offset\")\n    fun getFrom(subreddit: String, offset: Int = 0, limit: Int = 10): Single<List<Link>>","prompt":""},{"id":1084,"identifierName":"io.github.gumil.data.persistence.dao.LinkDao","requiredType":[],"content":"@Query(\"SELECT * FROM Link\" +\n            \" ORDER BY createdUtc DESC\"+\n            \" LIMIT :limit\" +\n            \" OFFSET :offset\")\n    fun getAll(offset: Int = 0, limit: Int = 10): Single<List<Link>>","prompt":""},{"id":1085,"identifierName":"io.github.gumil.data.persistence.dao.LinkDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg link: Link)","prompt":""},{"id":1086,"identifierName":"com.aman_arora.multi_thread_downloader.db.DownloadsDao","requiredType":[],"content":"@Query(\"SELECT * FROM download\")\n    fun getDownloads(): List<Download>","prompt":""},{"id":1087,"identifierName":"com.aman_arora.multi_thread_downloader.db.DownloadsDao","requiredType":[],"content":"@Query(\"SELECT * FROM download WHERE id = :arg0 LIMIT 1\")\n    fun getDownloadDetails(id: Int): Download","prompt":""},{"id":1088,"identifierName":"com.aman_arora.multi_thread_downloader.db.DownloadsDao","requiredType":[],"content":"@Insert\n    fun addDownload(download: Download)","prompt":""},{"id":1089,"identifierName":"data.tinder.recommendation.RecommendationSpotifyArtistDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertArtist(artist: RecommendationUserSpotifyThemeTrackArtistEntity)","prompt":""},{"id":1090,"identifierName":"data.tinder.recommendation.RecommendationSpotifyArtistDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserSpotifyThemeTrackArtistEntity WHERE id=:id\")\n  fun selectArtistById(id: String): List<RecommendationUserSpotifyThemeTrackArtistEntity>","prompt":""},{"id":1091,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"/**\n     * Inserts an app into the DB.\n     * This is usually from a full index v2 via [MetadataV2].\n     *\n     * Note: The app is considered to be not compatible until [Version]s are added\n     * and [updateCompatibility] was called.\n     *\n     * @param locales supported by the current system configuration.\n     */\n    public fun insert(\n        repoId: Long,\n        packageName: String,\n        app: MetadataV2,\n        locales: LocaleListCompat = getLocales(Resources.getSystem().configuration),\n    )","prompt":""},{"id":1092,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"/**\n     * Updates the [AppMetadata.isCompatible] flag\n     * based on whether at least one [AppVersion] is compatible.\n     * This needs to run within the transaction that adds [AppMetadata] to the DB (e.g. [insert]).\n     * Otherwise the compatibility is wrong.\n     */\n    public fun updateCompatibility(repoId: Long)","prompt":""},{"id":1093,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"/**\n     * Gets the app from the DB. If more than one app with this [packageName] exists,\n     * the one from the repository with the highest weight is returned.\n     */\n    public fun getApp(packageName: String): LiveData<App?>","prompt":""},{"id":1094,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"/**\n     * Gets an app from a specific [Repository] or null,\n     * if none is found with the given [packageName],\n     */\n    public fun getApp(repoId: Long, packageName: String): App?","prompt":""},{"id":1095,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"/**\n     * Returns a limited number of apps with limited data.\n     * Apps without name, icon or summary are at the end (or excluded if limit is too small).\n     * Includes anti-features from the version with the highest version code.\n     */\n    public fun getAppOverviewItems(limit: Int = 200): LiveData<List<AppOverviewItem>>","prompt":""},{"id":1096,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"/**\n     * Returns a limited number of apps with limited data within the given [category].\n     */\n    public fun getAppOverviewItems(\n        category: String,\n        limit: Int = 50,\n    ): LiveData<List<AppOverviewItem>>","prompt":""},{"id":1097,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"/**\n     * Returns a list of all [AppListItem] sorted by the given [sortOrder],\n     * or a subset of [AppListItem]s filtered by the given [searchQuery] if it is non-null.\n     * In the later case, the [sortOrder] gets ignored.\n     */\n    public fun getAppListItems(\n        packageManager: PackageManager,\n        searchQuery: String?,\n        sortOrder: AppListSortOrder,\n    ): LiveData<List<AppListItem>>","prompt":""},{"id":1098,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"/**\n     * Like [getAppListItems], but further filter items by the given [category].\n     */\n    public fun getAppListItems(\n        packageManager: PackageManager,\n        category: String,\n        searchQuery: String?,\n        sortOrder: AppListSortOrder,\n    ): LiveData<List<AppListItem>>","prompt":""},{"id":1099,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"public fun getInstalledAppListItems(packageManager: PackageManager): LiveData<List<AppListItem>>","prompt":""},{"id":1100,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"public fun getNumberOfAppsInCategory(category: String): Int","prompt":""},{"id":1101,"identifierName":"org.fdroid.database.AppDao","requiredType":[],"content":"public fun getNumberOfAppsInRepository(repoId: Long): Int","prompt":""},{"id":1102,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    override fun insert(\n        repoId: Long,\n        packageName: String,\n        app: MetadataV2,\n        locales: LocaleListCompat,\n    ) {\n        insert(app.toAppMetadata(repoId, packageName, false, locales))\n        app.icon.insert(repoId, packageName, \"icon\")\n        app.featureGraphic.insert(repoId, packageName, \"featureGraphic\")\n        app.promoGraphic.insert(repoId, packageName, \"promoGraphic\")\n        app.tvBanner.insert(repoId, packageName, \"tvBanner\")\n        app.screenshots?.let {\n            it.phone.insert(repoId, packageName, \"phone\")\n            it.sevenInch.insert(repoId, packageName, \"sevenInch\")\n            it.tenInch.insert(repoId, packageName, \"tenInch\")\n            it.wear.insert(repoId, packageName, \"wear\")\n            it.tv.insert(repoId, packageName, \"tv\")\n        }\n    }","prompt":""},{"id":1103,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"private fun LocalizedFileV2?.insert(repoId: Long, packageName: String, type: String) {\n        this?.toLocalizedFile(repoId, packageName, type)?.let { files ->\n            insert(files)\n        }\n    }","prompt":""},{"id":1104,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@JvmName(\"insertLocalizedFileListV2\")\n    private fun LocalizedFileListV2?.insert(repoId: Long, packageName: String, type: String) {\n        this?.toLocalizedFileList(repoId, packageName, type)?.let { files ->\n            insertLocalizedFileLists(files)\n        }\n    }","prompt":""},{"id":1105,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insert(appMetadata: AppMetadata)","prompt":""},{"id":1106,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insert(localizedFiles: List<LocalizedFile>)","prompt":""},{"id":1107,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertLocalizedFileLists(localizedFiles: List<LocalizedFileList>)","prompt":""},{"id":1108,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"private fun List<LocalizedFile>.diffAndUpdate(\n        repoId: Long,\n        packageName: String,\n        type: String,\n        jsonObject: JsonObject,\n    ) = diffAndUpdateTable(\n        jsonObject = jsonObject,\n        jsonObjectKey = type,\n        itemList = filter { it.type == type },\n        itemFinder = { locale, item -> item.locale == locale },\n        newItem = { locale -> LocalizedFile(repoId, packageName, type, locale, \"\") },\n        deleteAll = { deleteLocalizedFiles(repoId, packageName, type) },\n        deleteOne = { locale -> deleteLocalizedFile(repoId, packageName, type, locale) },\n        insertReplace = { list -> insert(list) },\n        isNewItemValid = { it.name.isNotEmpty() },\n        keyDenyList = DENY_FILE_LIST,\n    )","prompt":""},{"id":1109,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"private fun diffAndUpdateLocalizedFileList(\n        repoId: Long,\n        packageName: String,\n        type: String,\n        jsonObject: JsonObject,\n    ) {\n        diffAndUpdateListTable(\n            jsonObject = jsonObject,\n            jsonObjectKey = type,\n            listParser = { locale, jsonArray ->\n                json.decodeFromJsonElement<List<FileV2>>(jsonArray).map {\n                    it.toLocalizedFileList(repoId, packageName, type, locale)\n                }\n            },\n            deleteAll = { deleteLocalizedFileLists(repoId, packageName, type) },\n            deleteList = { locale -> deleteLocalizedFileList(repoId, packageName, type, locale) },\n            insertNewList = { _, fileLists -> insertLocalizedFileLists(fileLists) },\n        )\n    }","prompt":""},{"id":1110,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"/**\n     * This is needed to support v1 streaming and shouldn't be used for something else.\n     */\n    @Deprecated(\"Only for v1 index\")\n    @Query(\"\"\"UPDATE ${AppMetadata.TABLE} SET preferredSigner = :preferredSigner\n        WHERE repoId = :repoId AND packageName = :packageName\"\"\")\n    fun updatePreferredSigner(repoId: Long, packageName: String, preferredSigner: String?)","prompt":""},{"id":1111,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Query(\"\"\"UPDATE ${AppMetadata.TABLE} \n        SET isCompatible = (\n            SELECT TOTAL(isCompatible) > 0 FROM ${Version.TABLE}\n            WHERE repoId = :repoId AND ${AppMetadata.TABLE}.packageName = ${Version.TABLE}.packageName\n        )\n        WHERE repoId = :repoId\"\"\")\n    override fun updateCompatibility(repoId: Long)","prompt":""},{"id":1112,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Query(\"\"\"UPDATE ${AppMetadata.TABLE} SET localizedName = :name, localizedSummary = :summary\n        WHERE repoId = :repoId AND packageName = :packageName\"\"\")\n    fun updateAppMetadata(repoId: Long, packageName: String, name: String?, summary: String?)","prompt":""},{"id":1113,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Update\n    fun updateAppMetadata(appMetadata: AppMetadata): Int","prompt":""},{"id":1114,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"SELECT ${AppMetadata.TABLE}.* FROM ${AppMetadata.TABLE}\n        JOIN RepositoryPreferences AS pref USING (repoId)\n        WHERE packageName = :packageName\n        ORDER BY pref.weight DESC LIMIT 1\"\"\")\n    override fun getApp(packageName: String): LiveData<App?>","prompt":""},{"id":1115,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"SELECT * FROM ${AppMetadata.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName\"\"\")\n    override fun getApp(repoId: Long, packageName: String): App?","prompt":""},{"id":1116,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"/**\n     * Used for diffing.\n     */\n    @Query(\"\"\"SELECT * FROM ${AppMetadata.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName\"\"\")\n    fun getAppMetadata(repoId: Long, packageName: String): AppMetadata?","prompt":""},{"id":1117,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"/**\n     * Used for updating best locales.\n     */\n    @Query(\"SELECT * FROM ${AppMetadata.TABLE}\")\n    fun getAppMetadata(): List<AppMetadata>","prompt":""},{"id":1118,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"/**\n     * used for diffing\n     */\n    @Query(\"\"\"SELECT * FROM ${LocalizedFile.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName\"\"\")\n    fun getLocalizedFiles(repoId: Long, packageName: String): List<LocalizedFile>","prompt":""},{"id":1119,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"SELECT repoId, packageName, app.added, app.lastUpdated, localizedName,\n            localizedSummary, version.antiFeatures\n        FROM ${AppMetadata.TABLE} AS app\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        LEFT JOIN ${HighestVersion.TABLE} AS version USING (repoId, packageName)\n        LEFT JOIN ${LocalizedIcon.TABLE} AS icon USING (repoId, packageName)\n        WHERE pref.enabled = 1\n        GROUP BY packageName HAVING MAX(pref.weight)\n        ORDER BY localizedName IS NULL ASC, icon.packageName IS NULL ASC,\n            localizedSummary IS NULL ASC, app.lastUpdated DESC\n        LIMIT :limit\"\"\")\n    override fun getAppOverviewItems(limit: Int): LiveData<List<AppOverviewItem>>","prompt":""},{"id":1120,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"SELECT repoId, packageName, app.added, app.lastUpdated, localizedName,\n             localizedSummary, version.antiFeatures\n        FROM ${AppMetadata.TABLE} AS app\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        LEFT JOIN ${HighestVersion.TABLE} AS version USING (repoId, packageName)\n        LEFT JOIN ${LocalizedIcon.TABLE} AS icon USING (repoId, packageName)\n        WHERE pref.enabled = 1 AND categories  LIKE '%,' || :category || ',%'\n        GROUP BY packageName HAVING MAX(pref.weight)\n        ORDER BY localizedName IS NULL ASC, icon.packageName IS NULL ASC,\n            localizedSummary IS NULL ASC, app.lastUpdated DESC\n        LIMIT :limit\"\"\")\n    override fun getAppOverviewItems(category: String, limit: Int): LiveData<List<AppOverviewItem>>","prompt":""},{"id":1121,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"/**\n     * Used by [DbUpdateChecker] to get specific apps with available updates.\n     */\n    @Transaction\n    @SuppressWarnings(CURSOR_MISMATCH) // no anti-features needed here\n    @Query(\"\"\"SELECT repoId, packageName, added, app.lastUpdated, localizedName,\n             localizedSummary\n        FROM ${AppMetadata.TABLE} AS app WHERE repoId = :repoId AND packageName = :packageName\"\"\")\n    fun getAppOverviewItem(repoId: Long, packageName: String): AppOverviewItem?","prompt":""},{"id":1122,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"override fun getAppListItems(\n        packageManager: PackageManager,\n        searchQuery: String?,\n        sortOrder: AppListSortOrder,\n    ): LiveData<List<AppListItem>> {\n        return if (searchQuery.isNullOrEmpty()) when (sortOrder) {\n            LAST_UPDATED -> getAppListItemsByLastUpdated().map(packageManager)\n            NAME -> getAppListItemsByName().map(packageManager)\n        } else getAppListItems(searchQuery)\n    }","prompt":""},{"id":1123,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"override fun getAppListItems(\n        packageManager: PackageManager,\n        category: String,\n        searchQuery: String?,\n        sortOrder: AppListSortOrder,\n    ): LiveData<List<AppListItem>> {\n        return if (searchQuery.isNullOrEmpty()) when (sortOrder) {\n            LAST_UPDATED -> getAppListItemsByLastUpdated(category).map(packageManager)\n            NAME -> getAppListItemsByName(category).map(packageManager)\n        } else getAppListItems(category, searchQuery)\n    }","prompt":""},{"id":1124,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"private fun LiveData<List<AppListItem>>.map(\n        packageManager: PackageManager,\n        installedPackages: Map<String, PackageInfo> = packageManager.getInstalledPackages(0)\n            .associateBy { packageInfo -> packageInfo.packageName },\n    ) = map { items ->\n        items.map { item ->\n            val packageInfo = installedPackages[item.packageName]\n            if (packageInfo == null) item else item.copy(\n                installedVersionName = packageInfo.versionName,\n                installedVersionCode = packageInfo.getVersionCode(),\n            )\n        }\n    }","prompt":""},{"id":1125,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"\n        SELECT repoId, packageName, app.localizedName, app.localizedSummary, version.antiFeatures,\n               app.isCompatible\n        FROM ${AppMetadata.TABLE} AS app\n        JOIN ${AppMetadataFts.TABLE} USING (repoId, packageName)\n        LEFT JOIN ${HighestVersion.TABLE} AS version USING (repoId, packageName)\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        WHERE pref.enabled = 1 AND ${AppMetadataFts.TABLE} MATCH '\"*' || :searchQuery || '*\"'\n        GROUP BY packageName HAVING MAX(pref.weight)\"\"\")\n    fun getAppListItems(searchQuery: String): LiveData<List<AppListItem>>","prompt":""},{"id":1126,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"\n        SELECT repoId, packageName, app.localizedName, app.localizedSummary, version.antiFeatures,\n               app.isCompatible\n        FROM ${AppMetadata.TABLE} AS app\n        JOIN ${AppMetadataFts.TABLE} USING (repoId, packageName)\n        LEFT JOIN ${HighestVersion.TABLE} AS version USING (repoId, packageName)\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        WHERE pref.enabled = 1 AND categories LIKE '%,' || :category || ',%' AND\n              ${AppMetadataFts.TABLE} MATCH '\"*' || :searchQuery || '*\"'\n        GROUP BY packageName HAVING MAX(pref.weight)\"\"\")\n    fun getAppListItems(category: String, searchQuery: String): LiveData<List<AppListItem>>","prompt":""},{"id":1127,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"\n        SELECT repoId, packageName, localizedName, localizedSummary, version.antiFeatures,\n               app.isCompatible\n        FROM ${AppMetadata.TABLE} AS app\n        LEFT JOIN ${HighestVersion.TABLE} AS version USING (repoId, packageName)\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        WHERE pref.enabled = 1\n        GROUP BY packageName HAVING MAX(pref.weight)\n        ORDER BY localizedName COLLATE NOCASE ASC\"\"\")\n    fun getAppListItemsByName(): LiveData<List<AppListItem>>","prompt":""},{"id":1128,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"\n        SELECT repoId, packageName, localizedName, localizedSummary, version.antiFeatures,\n               app.isCompatible\n        FROM ${AppMetadata.TABLE} AS app\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        LEFT JOIN ${HighestVersion.TABLE} AS version USING (repoId, packageName)\n        WHERE pref.enabled = 1\n        GROUP BY packageName HAVING MAX(pref.weight)\n        ORDER BY app.lastUpdated DESC\"\"\")\n    fun getAppListItemsByLastUpdated(): LiveData<List<AppListItem>>","prompt":""},{"id":1129,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"\n        SELECT repoId, packageName, localizedName, localizedSummary, version.antiFeatures,\n               app.isCompatible\n        FROM ${AppMetadata.TABLE} AS app\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        LEFT JOIN ${HighestVersion.TABLE} AS version USING (repoId, packageName)\n        WHERE pref.enabled = 1 AND categories LIKE '%,' || :category || ',%'\n        GROUP BY packageName HAVING MAX(pref.weight)\n        ORDER BY app.lastUpdated DESC\"\"\")\n    fun getAppListItemsByLastUpdated(category: String): LiveData<List<AppListItem>>","prompt":""},{"id":1130,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"\n        SELECT repoId, packageName, localizedName, localizedSummary, version.antiFeatures,\n               app.isCompatible\n        FROM ${AppMetadata.TABLE} AS app\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        LEFT JOIN ${HighestVersion.TABLE} AS version USING (repoId, packageName)\n        WHERE pref.enabled = 1 AND categories LIKE '%,' || :category || ',%'\n        GROUP BY packageName HAVING MAX(pref.weight)\n        ORDER BY localizedName COLLATE NOCASE ASC\"\"\")\n    fun getAppListItemsByName(category: String): LiveData<List<AppListItem>>","prompt":""},{"id":1131,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Transaction\n    @SuppressWarnings(CURSOR_MISMATCH) // no anti-features needed here\n    @Query(\"\"\"SELECT repoId, packageName, localizedName, localizedSummary, app.isCompatible\n        FROM ${AppMetadata.TABLE} AS app\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        WHERE pref.enabled = 1 AND packageName IN (:packageNames)\n        GROUP BY packageName HAVING MAX(pref.weight)\n        ORDER BY localizedName COLLATE NOCASE ASC\"\"\")\n    fun getAppListItems(packageNames: List<String>): LiveData<List<AppListItem>>","prompt":""},{"id":1132,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"override fun getInstalledAppListItems(\n        packageManager: PackageManager,\n    ): LiveData<List<AppListItem>> {\n        val installedPackages = packageManager.getInstalledPackages(0)\n            .associateBy { packageInfo -> packageInfo.packageName }\n        val packageNames = installedPackages.keys.toList()\n        return getAppListItems(packageNames).map(packageManager, installedPackages)\n    }","prompt":""},{"id":1133,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Query(\"\"\"SELECT COUNT(DISTINCT packageName) FROM ${AppMetadata.TABLE}\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        WHERE pref.enabled = 1 AND categories LIKE '%,' || :category || ',%'\"\"\")\n    override fun getNumberOfAppsInCategory(category: String): Int","prompt":""},{"id":1134,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM ${AppMetadata.TABLE} WHERE repoId = :repoId\")\n    override fun getNumberOfAppsInRepository(repoId: Long): Int","prompt":""},{"id":1135,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Query(\"DELETE FROM ${AppMetadata.TABLE} WHERE repoId = :repoId AND packageName = :packageName\")\n    fun deleteAppMetadata(repoId: Long, packageName: String)","prompt":""},{"id":1136,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Query(\"\"\"DELETE FROM ${LocalizedFile.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName AND type = :type\"\"\")\n    fun deleteLocalizedFiles(repoId: Long, packageName: String, type: String)","prompt":""},{"id":1137,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Query(\"\"\"DELETE FROM ${LocalizedFile.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName AND type = :type\n        AND locale = :locale\"\"\")\n    fun deleteLocalizedFile(repoId: Long, packageName: String, type: String, locale: String)","prompt":""},{"id":1138,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Query(\"\"\"DELETE FROM ${LocalizedFileList.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName\"\"\")\n    fun deleteLocalizedFileLists(repoId: Long, packageName: String)","prompt":""},{"id":1139,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Query(\"\"\"DELETE FROM ${LocalizedFileList.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName AND type = :type\"\"\")\n    fun deleteLocalizedFileLists(repoId: Long, packageName: String, type: String)","prompt":""},{"id":1140,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@Query(\"\"\"DELETE FROM ${LocalizedFileList.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName AND type = :type\n        AND locale = :locale\"\"\")\n    fun deleteLocalizedFileList(repoId: Long, packageName: String, type: String, locale: String)","prompt":""},{"id":1141,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@VisibleForTesting\n    @Query(\"SELECT COUNT(*) FROM ${AppMetadata.TABLE}\")\n    fun countApps(): Int","prompt":""},{"id":1142,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@VisibleForTesting\n    @Query(\"SELECT COUNT(*) FROM ${LocalizedFile.TABLE}\")\n    fun countLocalizedFiles(): Int","prompt":""},{"id":1143,"identifierName":"org.fdroid.database.AppDaoInt","requiredType":[],"content":"@VisibleForTesting\n    @Query(\"SELECT COUNT(*) FROM ${LocalizedFileList.TABLE}\")\n    fun countLocalizedFileLists(): Int","prompt":""},{"id":1144,"identifierName":"biz.eventually.atpl.data.dao.TopicDao","requiredType":[],"content":"@Query(\"SELECT * FROM topic\")\n    abstract fun getAll(): LiveData<List<Topic>>","prompt":""},{"id":1145,"identifierName":"biz.eventually.atpl.data.dao.TopicDao","requiredType":[],"content":"@Query(\"SELECT idWeb FROM topic\")\n    abstract fun getIds(): List<Long>","prompt":""},{"id":1146,"identifierName":"biz.eventually.atpl.data.dao.TopicDao","requiredType":[],"content":"@Query(\"SELECT * FROM topic WHERE idWeb = :idWeb\")\n    abstract fun findById(idWeb: Long): Topic?","prompt":""},{"id":1147,"identifierName":"biz.eventually.atpl.data.dao.TopicDao","requiredType":["data class Topic( @PrimaryKey @ColumnInfo(name = \"idWeb\") val idWeb: Long, @ColumnInfo(name = \"subject_id\") val subjectId: Long, var name: String = \"\", var questions: Int = 0, var follow: Int = 0, var focus: Int = 0 )"],"content":"@Query(\"SELECT * FROM topic WHERE subject_id = :idWeb\")\n    abstract fun findBySubjectId(idWeb: Long): List<Topic>","prompt":""},{"id":1148,"identifierName":"biz.eventually.atpl.data.dao.TopicDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertAll(type: List<Topic>)","prompt":""},{"id":1149,"identifierName":"biz.eventually.atpl.data.dao.TopicDao","requiredType":[],"content":"@Query(\"SELECT topic.idWeb \" +\n            \"FROM topic \" +\n            \"INNER JOIN question ON question.topic_id = topic.idWeb \" +\n            \"GROUP BY topic.idWeb\")\n    abstract fun getTopicIdWithQuestion() : List<Long>","prompt":""},{"id":1150,"identifierName":"io.github.matthewcmckenna.mileage.model.FillUpDao","requiredType":[],"content":"@Query(\"SELECT * FROM fillups\")\n    fun getAllFillUps(): Flowable<List<FillUp>>","prompt":""},{"id":1151,"identifierName":"io.github.matthewcmckenna.mileage.model.FillUpDao","requiredType":[],"content":"@Insert\n    fun insert(fillUp: FillUp)","prompt":""},{"id":1152,"identifierName":"app.ss.storage.db.dao.LessonsDao","requiredType":[],"content":"@Query(\"SELECT * FROM lessons WHERE `index` = :lessonIndex\")\n    fun get(lessonIndex: String): LessonEntity?","prompt":""},{"id":1153,"identifierName":"app.ss.storage.db.dao.LessonsDao","requiredType":[],"content":"@Query(\"UPDATE lessons SET days = :days, pdfs = :pdfs WHERE `index` = :lessonIndex\")\n    fun updateInfo(\n        lessonIndex: String,\n        days: List<SSDay>,\n        pdfs: List<LessonPdf>\n    )","prompt":""},{"id":1154,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadData","requiredType":["data class ColumnInfo( /** * Name of the column in the database. Defaults to the field name if not set. * * @return Name of the column in the database. */ val name: String = INHERIT_FIELD_NAME, /** * The type affinity for the column, which will be used when constructing the database. * * If it is not specified, the value defaults to [UNDEFINED] and Room resolves it based * on the field's type and available TypeConverters. * * See [SQLite types documentation](https://www.sqlite.org/datatype3.html) for details. * * @return The type affinity of the column. This is either [UNDEFINED], [TEXT], * [INTEGER], [REAL], or [BLOB]. */ @SuppressWarnings(\"unused\") @get:SQLiteTypeAffinity val typeAffinity: Int = UNDEFINED, /** * Convenience method to index the field. * * If you would like to create a composite index instead, see: [Index]. * * @return True if this field should be indexed, false otherwise. Defaults to false. */ val index: Boolean = false, /** * The collation sequence for the column, which will be used when constructing the database. * * The default value is [UNSPECIFIED]. In that case, Room does not add any * collation sequence to the column, and SQLite treats it like [BINARY]. * * @return The collation sequence of the column. This is either [UNSPECIFIED], * [BINARY], [NOCASE], [RTRIM], [LOCALIZED] or [UNICODE]. */ @get:Collate val collate: Int = UNSPECIFIED, /** * The default value for this column. * * ``` * @ColumnInfo(defaultValue = \"No name\") * public name: String * * @ColumnInfo(defaultValue = \"0\") * public flag: Int * ``` * * Note that the default value you specify here will _NOT_ be used if you simply * insert the [Entity] with [Insert]. In that case, any value assigned in * Java/Kotlin will be used. Use [Query] with an `INSERT` statement * and skip this column there in order to use this default value. * * NULL, CURRENT_TIMESTAMP and other SQLite constant values are interpreted as such. If you want * to use them as strings for some reason, surround them with single-quotes. * * ``` * @ColumnInfo(defaultValue = \"NULL\") * public description: String? * * @ColumnInfo(defaultValue = \"'NULL'\") * public name: String * ``` * * You can also use constant expressions by surrounding them with parentheses. * * ``` * @ColumnInfo(defaultValue = \"('Created at' || CURRENT_TIMESTAMP)\") * public notice: String * ``` * * @return The default value for this column. * @see [VALUE_UNSPECIFIED] */ val defaultValue: String = VALUE_UNSPECIFIED, )"],"content":"@Ignore\n  fun save(dao: RemoteUploadDataDao) {\n    if (uuid.isBlank() || type.isBlank()) {\n      maybeThrow(\"Invalid Dao\")\n      return\n    }\n\n    log(\"GDrive\", \"data = ${Gson().toJson(this)}\")\n    val id = dao.insert(this)\n    uid = if (uid == 0) id.toInt() else uid\n  }","prompt":""},{"id":1155,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadData","requiredType":[],"content":"@Ignore\n  fun unsaved(): Boolean {\n    return uid == 0\n  }","prompt":""},{"id":1156,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadDataDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insert(note: RemoteUploadData): Long","prompt":""},{"id":1157,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadDataDao","requiredType":["data class ColumnInfo( /** * Name of the column in the database. Defaults to the field name if not set. * * @return Name of the column in the database. */ val name: String = INHERIT_FIELD_NAME, /** * The type affinity for the column, which will be used when constructing the database. * * If it is not specified, the value defaults to [UNDEFINED] and Room resolves it based * on the field's type and available TypeConverters. * * See [SQLite types documentation](https://www.sqlite.org/datatype3.html) for details. * * @return The type affinity of the column. This is either [UNDEFINED], [TEXT], * [INTEGER], [REAL], or [BLOB]. */ @SuppressWarnings(\"unused\") @get:SQLiteTypeAffinity val typeAffinity: Int = UNDEFINED, /** * Convenience method to index the field. * * If you would like to create a composite index instead, see: [Index]. * * @return True if this field should be indexed, false otherwise. Defaults to false. */ val index: Boolean = false, /** * The collation sequence for the column, which will be used when constructing the database. * * The default value is [UNSPECIFIED]. In that case, Room does not add any * collation sequence to the column, and SQLite treats it like [BINARY]. * * @return The collation sequence of the column. This is either [UNSPECIFIED], * [BINARY], [NOCASE], [RTRIM], [LOCALIZED] or [UNICODE]. */ @get:Collate val collate: Int = UNSPECIFIED, /** * The default value for this column. * * ``` * @ColumnInfo(defaultValue = \"No name\") * public name: String * * @ColumnInfo(defaultValue = \"0\") * public flag: Int * ``` * * Note that the default value you specify here will _NOT_ be used if you simply * insert the [Entity] with [Insert]. In that case, any value assigned in * Java/Kotlin will be used. Use [Query] with an `INSERT` statement * and skip this column there in order to use this default value. * * NULL, CURRENT_TIMESTAMP and other SQLite constant values are interpreted as such. If you want * to use them as strings for some reason, surround them with single-quotes. * * ``` * @ColumnInfo(defaultValue = \"NULL\") * public description: String? * * @ColumnInfo(defaultValue = \"'NULL'\") * public name: String * ``` * * You can also use constant expressions by surrounding them with parentheses. * * ``` * @ColumnInfo(defaultValue = \"('Created at' || CURRENT_TIMESTAMP)\") * public notice: String * ``` * * @return The default value for this column. * @see [VALUE_UNSPECIFIED] */ val defaultValue: String = VALUE_UNSPECIFIED, )"],"content":"@Query(\"UPDATE gdrive_upload SET attempts = 0\")\n  fun resetAttempts()","prompt":""},{"id":1158,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadDataDao","requiredType":["data class ColumnInfo( /** * Name of the column in the database. Defaults to the field name if not set. * * @return Name of the column in the database. */ val name: String = INHERIT_FIELD_NAME, /** * The type affinity for the column, which will be used when constructing the database. * * If it is not specified, the value defaults to [UNDEFINED] and Room resolves it based * on the field's type and available TypeConverters. * * See [SQLite types documentation](https://www.sqlite.org/datatype3.html) for details. * * @return The type affinity of the column. This is either [UNDEFINED], [TEXT], * [INTEGER], [REAL], or [BLOB]. */ @SuppressWarnings(\"unused\") @get:SQLiteTypeAffinity val typeAffinity: Int = UNDEFINED, /** * Convenience method to index the field. * * If you would like to create a composite index instead, see: [Index]. * * @return True if this field should be indexed, false otherwise. Defaults to false. */ val index: Boolean = false, /** * The collation sequence for the column, which will be used when constructing the database. * * The default value is [UNSPECIFIED]. In that case, Room does not add any * collation sequence to the column, and SQLite treats it like [BINARY]. * * @return The collation sequence of the column. This is either [UNSPECIFIED], * [BINARY], [NOCASE], [RTRIM], [LOCALIZED] or [UNICODE]. */ @get:Collate val collate: Int = UNSPECIFIED, /** * The default value for this column. * * ``` * @ColumnInfo(defaultValue = \"No name\") * public name: String * * @ColumnInfo(defaultValue = \"0\") * public flag: Int * ``` * * Note that the default value you specify here will _NOT_ be used if you simply * insert the [Entity] with [Insert]. In that case, any value assigned in * Java/Kotlin will be used. Use [Query] with an `INSERT` statement * and skip this column there in order to use this default value. * * NULL, CURRENT_TIMESTAMP and other SQLite constant values are interpreted as such. If you want * to use them as strings for some reason, surround them with single-quotes. * * ``` * @ColumnInfo(defaultValue = \"NULL\") * public description: String? * * @ColumnInfo(defaultValue = \"'NULL'\") * public name: String * ``` * * You can also use constant expressions by surrounding them with parentheses. * * ``` * @ColumnInfo(defaultValue = \"('Created at' || CURRENT_TIMESTAMP)\") * public notice: String * ``` * * @return The default value for this column. * @see [VALUE_UNSPECIFIED] */ val defaultValue: String = VALUE_UNSPECIFIED, )"],"content":"@Delete\n  fun delete(note: RemoteUploadData)","prompt":""},{"id":1159,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadDataDao","requiredType":[],"content":"@Query(\n    \"SELECT * \" +\n      \"FROM gdrive_upload \" +\n      \"WHERE uid = :uid \" +\n      \"LIMIT 1\")\n  fun getByID(uid: Int): RemoteUploadData?","prompt":""},{"id":1160,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadDataDao","requiredType":[],"content":"@Query(\n    \"SELECT * \" +\n      \"FROM gdrive_upload \" +\n      \"WHERE uuid = :uuid AND type = :type \" +\n      \"LIMIT 1\")\n  fun getByUUID(type: String, uuid: String): RemoteUploadData?","prompt":""},{"id":1161,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadDataDao","requiredType":[],"content":"@Query(\n    \"SELECT * \" +\n      \"FROM gdrive_upload \" +\n      \"WHERE type = :type\")\n  fun getByType(type: String): List<RemoteUploadData>","prompt":""},{"id":1162,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadDataDao","requiredType":[],"content":"@Query(\n    \"SELECT COUNT(*) \" +\n      \"FROM gdrive_upload \" +\n      \"WHERE (lastUpdateTimestamp != gDriveUpdateTimestamp OR localStateDeleted != gDriveStateDeleted)\")\n  fun getPendingCount(): Int","prompt":""},{"id":1163,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadDataDao","requiredType":[],"content":"@Query(\n    \"SELECT * \" +\n      \"FROM gdrive_upload \" +\n      \"WHERE (lastUpdateTimestamp != gDriveUpdateTimestamp OR localStateDeleted != gDriveStateDeleted)\")\n  fun getAllPending(): List<RemoteUploadData>","prompt":""},{"id":1164,"identifierName":"com.bijoysingh.quicknote.database.RemoteUploadDataDao","requiredType":[],"content":"@Query(\n    \"SELECT * \" +\n      \"FROM gdrive_upload \" +\n      \"WHERE type = :type AND (lastUpdateTimestamp != gDriveUpdateTimestamp OR localStateDeleted != gDriveStateDeleted)\")\n  fun getPendingByType(type: String): List<RemoteUploadData>","prompt":""},{"id":1165,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Query(\"DELETE FROM tasks WHERE _id IN(:ids)\")\n    internal abstract suspend fun deleteTasks(ids: List<Long>)","prompt":""},{"id":1166,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"suspend fun hasRecurringAncestors(ids: List<Long>): List<Long> =\n            ids.chunkedMap { internalHasRecurringAncestors(it) }","prompt":""},{"id":1167,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Query(\"\"\"\nWITH RECURSIVE recursive_tasks (descendent, parent, recurring) AS (\n    SELECT _id, parent, 0\n    FROM tasks\n    WHERE _id IN (:ids)\n      AND parent > 0\n    UNION ALL\n    SELECT recursive_tasks.descendent,\n           tasks.parent,\n           CASE\n               WHEN recursive_tasks.recurring THEN 1\n               WHEN recurrence IS NOT NULL AND recurrence != '' AND completed = 0 THEN 1\n               ELSE 0\n               END\n    FROM tasks\n             INNER JOIN recursive_tasks ON recursive_tasks.parent = _id\n)\nSELECT DISTINCT(descendent)\nFROM recursive_tasks\nWHERE recurring = 1\n    \"\"\")\n    abstract suspend fun internalHasRecurringAncestors(ids: List<Long>): List<Long>","prompt":""},{"id":1168,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Transaction\n    open suspend fun delete(ids: List<Long>) {\n        ids.eachChunk {\n            deleteTasks(it)\n        }\n    }","prompt":""},{"id":1169,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Query(\"UPDATE tasks \"\n            + \"SET modified = (strftime('%s','now')*1000), deleted = (strftime('%s','now')*1000)\"\n            + \"WHERE _id IN(:ids)\")\n    internal abstract suspend fun markDeletedInternal(ids: List<Long>)","prompt":""},{"id":1170,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"suspend fun markDeleted(ids: Iterable<Long>) {\n        ids.eachChunk(this::markDeletedInternal)\n    }","prompt":""},{"id":1171,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Query(\"SELECT gt_task FROM google_tasks WHERE gt_deleted = 0 AND gt_list_id = :listId\")\n    internal abstract suspend fun getActiveGoogleTasks(listId: String): List<Long>","prompt":""},{"id":1172,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Delete\n    internal abstract suspend fun deleteGoogleTaskList(googleTaskList: GoogleTaskList)","prompt":""},{"id":1173,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Transaction\n    open suspend fun delete(googleTaskList: GoogleTaskList): List<Long> {\n        val tasks = getActiveGoogleTasks(googleTaskList.remoteId!!)\n        delete(tasks)\n        deleteGoogleTaskList(googleTaskList)\n        return tasks\n    }","prompt":""},{"id":1174,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Delete\n    internal abstract suspend fun deleteGoogleTaskAccount(googleTaskAccount: GoogleTaskAccount)","prompt":""},{"id":1175,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Query(\"SELECT * FROM google_task_lists WHERE gtl_account = :account ORDER BY gtl_title ASC\")\n    abstract suspend fun getLists(account: String): List<GoogleTaskList>","prompt":""},{"id":1176,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Transaction\n    open suspend fun delete(googleTaskAccount: GoogleTaskAccount): List<Long> {\n        val deleted = ArrayList<Long>()\n        for (list in getLists(googleTaskAccount.account!!)) {\n            deleted.addAll(delete(list))\n        }\n        deleteGoogleTaskAccount(googleTaskAccount)\n        return deleted\n    }","prompt":""},{"id":1177,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Query(\"SELECT cd_task FROM caldav_tasks WHERE cd_calendar = :calendar AND cd_deleted = 0\")\n    internal abstract suspend fun getActiveCaldavTasks(calendar: String): List<Long>","prompt":""},{"id":1178,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Delete\n    internal abstract suspend fun deleteCaldavCalendar(caldavCalendar: CaldavCalendar)","prompt":""},{"id":1179,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Transaction\n    open suspend fun delete(caldavCalendar: CaldavCalendar): List<Long> {\n        val tasks = getActiveCaldavTasks(caldavCalendar.uuid!!)\n        delete(tasks)\n        deleteCaldavCalendar(caldavCalendar)\n        return tasks\n    }","prompt":""},{"id":1180,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Query(\"SELECT * FROM caldav_lists WHERE cdl_account = :account\")\n    abstract suspend fun getCalendars(account: String): List<CaldavCalendar>","prompt":""},{"id":1181,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Delete\n    internal abstract suspend fun deleteCaldavAccount(caldavAccount: CaldavAccount)","prompt":""},{"id":1182,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Query(\"DELETE FROM tasks WHERE _id IN (SELECT _id FROM tasks INNER JOIN caldav_tasks ON _id = cd_task INNER JOIN caldav_lists ON cdl_uuid = cd_calendar WHERE cdl_account = '$LOCAL' AND deleted > 0 AND cd_deleted = 0)\")\n    abstract suspend fun purgeDeleted()","prompt":""},{"id":1183,"identifierName":"org.tasks.data.DeletionDao","requiredType":[],"content":"@Transaction\n    open suspend fun delete(caldavAccount: CaldavAccount): List<Long> {\n        val deleted = ArrayList<Long>()\n        for (calendar in getCalendars(caldavAccount.uuid!!)) {\n            deleted.addAll(delete(calendar))\n        }\n        deleteCaldavAccount(caldavAccount)\n        return deleted\n    }","prompt":""},{"id":1184,"identifierName":"data.tinder.recommendation.RecommendationProcessedFileDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertProcessedFile(file: RecommendationUserPhotoProcessedFileEntity)","prompt":""},{"id":1185,"identifierName":"data.tinder.recommendation.RecommendationProcessedFileDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserPhotoProcessedFileEntity WHERE url=:url\")\n  fun selectProcessedFileByUrl(url: String): List<RecommendationUserPhotoProcessedFileEntity>","prompt":""},{"id":1186,"identifierName":"com.raywenderlich.android.cheesefinder.database.CheeseDao","requiredType":[],"content":"@Query(\"SELECT * FROM cheeses WHERE name LIKE :name\")\n  fun findCheese(name: String): List<Cheese>","prompt":""},{"id":1187,"identifierName":"com.raywenderlich.android.cheesefinder.database.CheeseDao","requiredType":[],"content":"@Query(\"SELECT favorite FROM cheeses WHERE :id LIMIT 1\")\n  fun isFavorite(id: Long): Int","prompt":""},{"id":1188,"identifierName":"com.raywenderlich.android.cheesefinder.database.CheeseDao","requiredType":[],"content":"@Update\n  fun favoriteCheese(cheese: Cheese): Int","prompt":""},{"id":1189,"identifierName":"com.raywenderlich.android.cheesefinder.database.CheeseDao","requiredType":[],"content":"@Insert(onConflict = IGNORE)\n  fun insertAll(cheeses: List<Cheese>): List<Long>","prompt":""},{"id":1190,"identifierName":"com.uncmorfi.models.ServingDao","requiredType":[],"content":"@Query(\"SELECT * FROM servings WHERE datetime(date) >= datetime('now', 'start of day') ORDER BY datetime(date)\")\n    suspend fun getToday(): List<Serving>","prompt":""},{"id":1191,"identifierName":"com.uncmorfi.models.ServingDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(vararg menus: Serving): List<Long>","prompt":""},{"id":1192,"identifierName":"com.uncmorfi.models.ServingDao","requiredType":[],"content":"@Query(\"DELETE FROM servings WHERE datetime(date) <= datetime('now','-2 day')\")\n    suspend fun clearOld()","prompt":""},{"id":1193,"identifierName":"dev.jriley.hackernews.data.AppDatabase","requiredType":[],"content":"abstract fun storyEntityDao(): StoryDao","prompt":""},{"id":1194,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"override fun isLoaded(): Single<Boolean> = Single.fromCallable { queryCount() > 0 }","prompt":""},{"id":1195,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"override fun insert(story: Story): Single<Long> =\n            Single.fromCallable { insertStory(story).apply { Timber.tag(\"@\").i(\"Insert complete : ${story.id}:${story.storyTypes} \") } }","prompt":""},{"id":1196,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"override fun update(story: Story): Single<Int> =\n            Single.fromCallable { updateStory(story.id, story.by, story.time!!, story.url, story.score!!, story.title, story.isBookmarked, story.storyTypes) }","prompt":""},{"id":1197,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"override fun isLoaded(id: Long): Boolean = getStoryCount(id) > 0","prompt":""},{"id":1198,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"override fun storyList(): Flowable<List<Story>> = observeStoryList()\n            .sample(800L, TimeUnit.MILLISECONDS)\n            .subscribeOn(Schedulers.io())\n            .scan { _, t2 -> Timber.tag(\"@@@\").d(\"T2 with size ${t2.size}\");t2 }","prompt":""},{"id":1199,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"@Query(\"SELECT * from $story\")\n    internal abstract fun getStory(): Story?","prompt":""},{"id":1200,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"@Query(\"SELECT *  FROM $story WHERE id=:id\")\n    internal abstract fun getStoryById(id: Long): Story?","prompt":""},{"id":1201,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) from $story WHERE id=:id\")\n    internal abstract fun getStoryCount(id: Long): Int","prompt":""},{"id":1202,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"@Query(\"DELETE FROM $story\")\n    internal abstract fun deleteStory(): Int","prompt":""},{"id":1203,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM $story\")\n    internal abstract fun queryCount(): Int","prompt":""},{"id":1204,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"/*where shoppingListId=:shoppingListId*/\n    @Query(\"SELECT * FROM $story  ORDER BY time DESC\")\n    abstract fun observeStoryList(): Flowable<List<Story>>","prompt":""},{"id":1205,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    internal abstract fun insertStory(storyEntity: Story): Long","prompt":""},{"id":1206,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"@Query(\"UPDATE $story SET `by` =:by, time =:time, url=:url, score=:score, title=:title, isBookmarked=:isBookmarked, storyTypes=:storyTypes WHERE id=:id\")\n    internal abstract fun updateStory(id: Long, by: String, time: Long, url: String, score: Long, title: String, isBookmarked: Boolean, storyTypes: Int): Int","prompt":""},{"id":1207,"identifierName":"dev.jriley.hackernews.data.StoryDao","requiredType":[],"content":"@Query(\"DELETE FROM $story WHERE id=:id\")\n    internal abstract fun deleteStoryById(id: Long): Int","prompt":""},{"id":1208,"identifierName":"dev.jriley.hackernews.data.StoryData","requiredType":[],"content":"fun isLoaded(): Single<Boolean>","prompt":""},{"id":1209,"identifierName":"dev.jriley.hackernews.data.StoryData","requiredType":[],"content":"fun insert(story: Story): Single<Long>","prompt":""},{"id":1210,"identifierName":"dev.jriley.hackernews.data.StoryData","requiredType":[],"content":"fun update(story: Story): Single<Int>","prompt":""},{"id":1211,"identifierName":"dev.jriley.hackernews.data.StoryData","requiredType":[],"content":"fun isLoaded(id: Long): Boolean","prompt":""},{"id":1212,"identifierName":"dev.jriley.hackernews.data.StoryData","requiredType":[],"content":"fun storyList(): Flowable<List<Story>>","prompt":""},{"id":1213,"identifierName":"io.petros.posts.kotlin.datastore.db.UserDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun save(users: List<User>)","prompt":""},{"id":1214,"identifierName":"io.petros.posts.kotlin.datastore.db.UserDao","requiredType":["data class User(@PrimaryKey val id: String, val name: String, val username: String, val email: String)"],"content":"@Query(\"SELECT * FROM user WHERE id = :id\")\n    fun get(id: String): Single<User>","prompt":""},{"id":1215,"identifierName":"jp.toastkid.yobidashi.settings.color.SavedColorRepository","requiredType":[],"content":"@Insert\n    fun add(item: SavedColor)","prompt":""},{"id":1216,"identifierName":"jp.toastkid.yobidashi.settings.color.SavedColorRepository","requiredType":[],"content":"@Query(\"SELECT * FROM SavedColor\")\n    fun findAll(): List<SavedColor>","prompt":""},{"id":1217,"identifierName":"jp.toastkid.yobidashi.settings.color.SavedColorRepository","requiredType":[],"content":"@Delete\n    fun delete(item: SavedColor)","prompt":""},{"id":1218,"identifierName":"jp.toastkid.yobidashi.settings.color.SavedColorRepository","requiredType":[],"content":"@Query(\"DELETE FROM SavedColor\")\n    fun deleteAll()","prompt":""},{"id":1219,"identifierName":"me.smr.weatherforecast.data.CityDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertCity(city: CityEntity)","prompt":""},{"id":1220,"identifierName":"me.smr.weatherforecast.data.CityDAO","requiredType":[],"content":"@Query(\"select * from cities\")\n    fun getAllCities() : Flow<List<CityEntity>>","prompt":""},{"id":1221,"identifierName":"me.smr.weatherforecast.data.CityDAO","requiredType":[],"content":"@Query(\"select id from cities\")\n    fun getAllCityIDs() : Flow<List<String>>","prompt":""},{"id":1222,"identifierName":"pl.org.seva.events.event.EventsDao","requiredType":[],"content":"open suspend infix fun add(event: Event) = insert(Event.Entity(event))","prompt":""},{"id":1223,"identifierName":"pl.org.seva.events.event.EventsDao","requiredType":[],"content":"suspend infix fun addAll(events: Collection<Event>) = insertAll(events.map { Event.Entity(it) })","prompt":""},{"id":1224,"identifierName":"pl.org.seva.events.event.EventsDao","requiredType":[],"content":"suspend infix fun delete(event: Event) = delete(Event.Entity(event))","prompt":""},{"id":1225,"identifierName":"pl.org.seva.events.event.EventsDao","requiredType":[],"content":"suspend inline fun getAllValues() = getAll().map { it.value() }","prompt":""},{"id":1226,"identifierName":"pl.org.seva.events.event.EventsDao","requiredType":[],"content":"@Query(\"select * from ${EventsDb.EVENT_TABLE}\")\n    abstract suspend fun getAll(): List<Event.Entity>","prompt":""},{"id":1227,"identifierName":"pl.org.seva.events.event.EventsDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertAll(events: Collection<Event.Entity>)","prompt":""},{"id":1228,"identifierName":"pl.org.seva.events.event.EventsDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insert(event: Event.Entity)","prompt":""},{"id":1229,"identifierName":"pl.org.seva.events.event.EventsDao","requiredType":[],"content":"@Delete\n    abstract suspend fun delete(event: Event.Entity)","prompt":""},{"id":1230,"identifierName":"pl.org.seva.events.event.EventsDao","requiredType":[],"content":"@Query(\"delete from ${EventsDb.EVENT_TABLE}\")\n    abstract suspend fun clear()","prompt":""},{"id":1231,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE id = :id\")\n    override fun findById(id: Long): Carbs?","prompt":""},{"id":1232,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_CARBS\")\n    override fun deleteAllEntries()","prompt":""},{"id":1233,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT id FROM $TABLE_CARBS ORDER BY id DESC limit 1\")\n    fun getLastId(): Maybe<Long>","prompt":""},{"id":1234,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE nightscoutId = :nsId AND referenceId IS NULL\")\n    fun findByNSId(nsId: String): Carbs?","prompt":""},{"id":1235,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE timestamp = :timestamp AND referenceId IS NULL\")\n    fun findByTimestamp(timestamp: Long): Carbs?","prompt":""},{"id":1236,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE isValid = 1 AND referenceId IS NULL ORDER BY id DESC LIMIT 1\")\n    fun getLastCarbsRecord(): Carbs?","prompt":""},{"id":1237,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE isValid = 1 AND referenceId IS NULL ORDER BY id DESC LIMIT 1\")\n    fun getLastCarbsRecordMaybe(): Maybe<Carbs>","prompt":""},{"id":1238,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE isValid = 1 AND referenceId IS NULL ORDER BY id ASC LIMIT 1\")\n    fun getOldestCarbsRecord(): Carbs?","prompt":""},{"id":1239,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE isValid = 1 AND timestamp >= :timestamp AND referenceId IS NULL ORDER BY id DESC\")\n    fun getCarbsFromTime(timestamp: Long): Single<List<Carbs>>","prompt":""},{"id":1240,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE isValid = 1 AND timestamp + duration >= :timestamp AND referenceId IS NULL ORDER BY id DESC\")\n    fun getCarbsFromTimeExpandable(timestamp: Long): Single<List<Carbs>>","prompt":""},{"id":1241,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE isValid = 1 AND timestamp >= :from AND timestamp <= :to AND referenceId IS NULL ORDER BY id DESC\")\n    fun getCarbsFromTimeToTime(from: Long, to: Long): Single<List<Carbs>>","prompt":""},{"id":1242,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE isValid = 1 AND timestamp + duration > :from AND timestamp <= :to AND referenceId IS NULL ORDER BY id DESC\")\n    fun getCarbsFromTimeToTimeExpandable(from: Long, to: Long): Single<List<Carbs>>","prompt":""},{"id":1243,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE timestamp >= :timestamp AND referenceId IS NULL ORDER BY id DESC\")\n    fun getCarbsIncludingInvalidFromTime(timestamp: Long): Single<List<Carbs>>","prompt":""},{"id":1244,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE timestamp + duration >= :timestamp AND referenceId IS NULL ORDER BY id DESC\")\n    fun getCarbsIncludingInvalidFromTimeExpandable(timestamp: Long): Single<List<Carbs>>","prompt":""},{"id":1245,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE timestamp >= :from AND timestamp <= :to AND referenceId IS NULL ORDER BY id DESC\")\n    fun getCarbsIncludingInvalidFromTimeToTime(from: Long, to: Long): Single<List<Carbs>>","prompt":""},{"id":1246,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE timestamp + duration >= :from AND timestamp <= :to AND referenceId IS NULL ORDER BY id DESC\")\n    fun getCarbsIncludingInvalidFromTimeToTimeExpandable(from: Long, to: Long): Single<List<Carbs>>","prompt":""},{"id":1247,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"// This query will be used with v3 to get all changed records\n    @Query(\"SELECT * FROM $TABLE_CARBS WHERE id > :id AND referenceId IS NULL OR id IN (SELECT DISTINCT referenceId FROM $TABLE_CARBS WHERE id > :id) ORDER BY id ASC\")\n    fun getModifiedFrom(id: Long): Single<List<Carbs>>","prompt":""},{"id":1248,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"// for WS we need 1 record only\n    @Query(\"SELECT * FROM $TABLE_CARBS WHERE id > :id ORDER BY id ASC limit 1\")\n    fun getNextModifiedOrNewAfter(id: Long): Maybe<Carbs>","prompt":""},{"id":1249,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE id = :referenceId\")\n    fun getCurrentFromHistoric(referenceId: Long): Maybe<Carbs>","prompt":""},{"id":1250,"identifierName":"info.nightscout.androidaps.database.daos.CarbsDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_CARBS WHERE dateCreated > :since AND dateCreated <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<Carbs>","prompt":""},{"id":1251,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":["data class QuoteWithHoldings( @Embedded val quote: QuoteRow, @Relation( parentColumn = \"symbol\", entityColumn = \"quote_symbol\" ) val holdings: List<HoldingRow>, @Relation( parentColumn = \"symbol\", entityColumn = \"properties_quote_symbol\" ) val properties: PropertiesRow? )"],"content":"@Transaction\n  @Query(\"SELECT * FROM QuoteRow\")\n  suspend fun getQuotesWithHoldings(): List<QuoteWithHoldings>","prompt":""},{"id":1252,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Transaction\n  @Query(\"SELECT * FROM QuoteRow where symbol = :symbol\")\n  suspend fun getQuoteWithHoldings(symbol: String): QuoteWithHoldings?","prompt":""},{"id":1253,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  @JvmSuppressWildcards\n  suspend fun upsertQuotes(quotes: List<QuoteRow>): LongArray","prompt":""},{"id":1254,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":["data class QuoteRow( @PrimaryKey @ColumnInfo(name = \"symbol\") val symbol: String, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"last_trade_price\") val lastTradePrice: Float, @ColumnInfo(name = \"change_percent\") val changeInPercent: Float, @ColumnInfo(name = \"change\") val change: Float, @ColumnInfo(name = \"exchange\") val stockExchange: String, @ColumnInfo(name = \"currency\") val currency: String, @ColumnInfo(name = \"is_post_market\") val isPostMarket: Boolean, @ColumnInfo(name = \"annual_dividend_rate\") val annualDividendRate: Float, @ColumnInfo(name = \"annual_dividend_yield\") val annualDividendYield: Float, @ColumnInfo(name = \"dayHigh\") val dayHigh: Float?, @ColumnInfo(name = \"dayLow\") val dayLow: Float?, @ColumnInfo(name = \"previousClose\") val previousClose: Float, @ColumnInfo(name = \"open\") val open: Float?, @ColumnInfo(name = \"regularMarketVolume\") val regularMarketVolume: Float?, @ColumnInfo(name = \"peRatio\") val peRatio: Float?, @ColumnInfo(name = \"fiftyTwoWeekLowChange\") val fiftyTwoWeekLowChange: Float?, @ColumnInfo(name = \"fiftyTwoWeekLowChangePercent\") val fiftyTwoWeekLowChangePercent: Float?, @ColumnInfo(name = \"fiftyTwoWeekHighChange\") val fiftyTwoWeekHighChange: Float?, @ColumnInfo(name = \"fiftyTwoWeekHighChangePercent\") val fiftyTwoWeekHighChangePercent: Float?, @ColumnInfo(name = \"fiftyTwoWeekLow\") val fiftyTwoWeekLow: Float?, @ColumnInfo(name = \"fiftyTwoWeekHigh\") val fiftyTwoWeekHigh: Float?, @ColumnInfo(name = \"dividendDate\") val dividendDate: Float?, @ColumnInfo(name = \"earningsDate\") val earningsDate: Float?, @ColumnInfo(name = \"marketCap\") val marketCap: Float?, @ColumnInfo(name = \"isTradeable\") val isTradeable: Boolean?, @ColumnInfo(name = \"isTriggerable\") val isTriggerable: Boolean?, @ColumnInfo(name = \"marketState\") val marketState: String? )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  @JvmSuppressWildcards\n  suspend fun upsertQuote(quote: QuoteRow): Long","prompt":""},{"id":1255,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":["data class QuoteRow( @PrimaryKey @ColumnInfo(name = \"symbol\") val symbol: String, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"last_trade_price\") val lastTradePrice: Float, @ColumnInfo(name = \"change_percent\") val changeInPercent: Float, @ColumnInfo(name = \"change\") val change: Float, @ColumnInfo(name = \"exchange\") val stockExchange: String, @ColumnInfo(name = \"currency\") val currency: String, @ColumnInfo(name = \"is_post_market\") val isPostMarket: Boolean, @ColumnInfo(name = \"annual_dividend_rate\") val annualDividendRate: Float, @ColumnInfo(name = \"annual_dividend_yield\") val annualDividendYield: Float, @ColumnInfo(name = \"dayHigh\") val dayHigh: Float?, @ColumnInfo(name = \"dayLow\") val dayLow: Float?, @ColumnInfo(name = \"previousClose\") val previousClose: Float, @ColumnInfo(name = \"open\") val open: Float?, @ColumnInfo(name = \"regularMarketVolume\") val regularMarketVolume: Float?, @ColumnInfo(name = \"peRatio\") val peRatio: Float?, @ColumnInfo(name = \"fiftyTwoWeekLowChange\") val fiftyTwoWeekLowChange: Float?, @ColumnInfo(name = \"fiftyTwoWeekLowChangePercent\") val fiftyTwoWeekLowChangePercent: Float?, @ColumnInfo(name = \"fiftyTwoWeekHighChange\") val fiftyTwoWeekHighChange: Float?, @ColumnInfo(name = \"fiftyTwoWeekHighChangePercent\") val fiftyTwoWeekHighChangePercent: Float?, @ColumnInfo(name = \"fiftyTwoWeekLow\") val fiftyTwoWeekLow: Float?, @ColumnInfo(name = \"fiftyTwoWeekHigh\") val fiftyTwoWeekHigh: Float?, @ColumnInfo(name = \"dividendDate\") val dividendDate: Float?, @ColumnInfo(name = \"earningsDate\") val earningsDate: Float?, @ColumnInfo(name = \"marketCap\") val marketCap: Float?, @ColumnInfo(name = \"isTradeable\") val isTradeable: Boolean?, @ColumnInfo(name = \"isTriggerable\") val isTriggerable: Boolean?, @ColumnInfo(name = \"marketState\") val marketState: String? )"],"content":"@Transaction\n  suspend fun upsertQuoteAndHolding(\n    quote: QuoteRow,\n    holdings: List<HoldingRow>?\n  ) {\n    upsertQuote(quote)\n    holdings?.let { upsertHoldings(quote.symbol, it) }\n  }","prompt":""},{"id":1256,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Transaction\n  suspend fun deleteQuoteAndHoldings(symbol: String) {\n    deleteQuoteById(symbol)\n    deleteHoldingsByQuoteId(symbol)\n  }","prompt":""},{"id":1257,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Transaction\n  suspend fun deleteQuotesAndHoldings(symbols: List<String>) {\n    deleteByQuotesId(symbols)\n    deleteHoldingsByQuoteIds(symbols)\n  }","prompt":""},{"id":1258,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Query(\"DELETE FROM QuoteRow WHERE symbol = :symbol\")\n  suspend fun deleteQuoteById(symbol: String)","prompt":""},{"id":1259,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Transaction\n  suspend fun upsertHoldings(\n    symbol: String,\n    holdings: List<HoldingRow>\n  ) {\n    deleteHoldingsByQuoteId(symbol)\n    insertHoldings(holdings)\n  }","prompt":""},{"id":1260,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Insert\n  @JvmSuppressWildcards\n  suspend fun insertHoldings(holdings: List<HoldingRow>): LongArray","prompt":""},{"id":1261,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":["data class HoldingRow( @PrimaryKey(autoGenerate = true) var id: Long? = null, @ColumnInfo(name = \"quote_symbol\") val quoteSymbol: String, @ColumnInfo(name = \"shares\") val shares: Float = 0.0f, @ColumnInfo(name = \"price\") val price: Float = 0.0f )"],"content":"@Insert\n  suspend fun insertHolding(holding: HoldingRow): Long","prompt":""},{"id":1262,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Query(\"DELETE FROM HoldingRow WHERE quote_symbol = :symbol\")\n  suspend fun deleteHoldingsByQuoteId(symbol: String)","prompt":""},{"id":1263,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Query(\"DELETE FROM QuoteRow WHERE symbol IN (:symbols)\")\n  suspend fun deleteByQuotesId(symbols: List<String>)","prompt":""},{"id":1264,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Query(\"DELETE FROM HoldingRow WHERE quote_symbol IN (:symbols)\")\n  suspend fun deleteHoldingsByQuoteIds(symbols: List<String>)","prompt":""},{"id":1265,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":["data class HoldingRow( @PrimaryKey(autoGenerate = true) var id: Long? = null, @ColumnInfo(name = \"quote_symbol\") val quoteSymbol: String, @ColumnInfo(name = \"shares\") val shares: Float = 0.0f, @ColumnInfo(name = \"price\") val price: Float = 0.0f )"],"content":"@Delete\n  suspend fun deleteHolding(holding: HoldingRow)","prompt":""},{"id":1266,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":["data class PropertiesRow( @PrimaryKey(autoGenerate = true) var id: Long? = null, @ColumnInfo(name = \"properties_quote_symbol\") val quoteSymbol: String, @ColumnInfo(name = \"notes\") val notes: String = \"\", @ColumnInfo(name = \"alert_above\") val alertAbove: Float = 0.0f, @ColumnInfo(name = \"alert_below\") val alertBelow: Float = 0.0f )"],"content":"@Transaction\n  suspend fun upsertProperties(\n    propertiesRow: PropertiesRow\n  ) {\n    if (propertiesRow.quoteSymbol.isNotEmpty()) {\n      deletePropertiesByQuoteId(propertiesRow.quoteSymbol)\n    }\n    if (propertiesRow.notes.isNotEmpty() || propertiesRow.alertAbove > 0.0f || propertiesRow.alertBelow > 0.0f) {\n      insertProperties(propertiesRow)\n    }\n  }","prompt":""},{"id":1267,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":["data class PropertiesRow( @PrimaryKey(autoGenerate = true) var id: Long? = null, @ColumnInfo(name = \"properties_quote_symbol\") val quoteSymbol: String, @ColumnInfo(name = \"notes\") val notes: String = \"\", @ColumnInfo(name = \"alert_above\") val alertAbove: Float = 0.0f, @ColumnInfo(name = \"alert_below\") val alertBelow: Float = 0.0f )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  @JvmSuppressWildcards\n  suspend fun insertProperties(quote: PropertiesRow)","prompt":""},{"id":1268,"identifierName":"com.github.premnirmal.ticker.repo.QuoteDao","requiredType":[],"content":"@Query(\"DELETE FROM PropertiesRow WHERE properties_quote_symbol = :symbol\")\n  suspend fun deletePropertiesByQuoteId(symbol: String)","prompt":""},{"id":1269,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM seasons WHERE show_id = :showId ORDER BY number=$NUMBER_SPECIALS, number\")\n    abstract fun seasonsWithEpisodesForShowId(showId: Long): Flow<List<SeasonWithEpisodesAndWatches>>","prompt":""},{"id":1270,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":[],"content":"@Query(\"SELECT * FROM seasons WHERE show_id = :showId ORDER BY number=$NUMBER_SPECIALS, number\")\n    abstract fun observeSeasonsForShowId(showId: Long): Flow<List<Season>>","prompt":""},{"id":1271,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":["data class Season( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") override val id: Long = 0, @ColumnInfo(name = \"show_id\") val showId: Long, @ColumnInfo(name = \"trakt_id\") override val traktId: Int? = null, @ColumnInfo(name = \"tmdb_id\") override val tmdbId: Int? = null, @ColumnInfo(name = \"title\") val title: String? = null, @ColumnInfo(name = \"overview\") val summary: String? = null, @ColumnInfo(name = \"number\") val number: Int? = null, @ColumnInfo(name = \"network\") val network: String? = null, @ColumnInfo(name = \"ep_count\") val episodeCount: Int? = null, @ColumnInfo(name = \"ep_aired\") val episodesAired: Int? = null, @ColumnInfo(name = \"trakt_rating\") val traktRating: Float? = null, @ColumnInfo(name = \"trakt_votes\") val traktRatingVotes: Int? = null, @ColumnInfo(name = \"tmdb_poster_path\") val tmdbPosterPath: String? = null, @ColumnInfo(name = \"tmdb_backdrop_path\") val tmdbBackdropPath: String? = null, @ColumnInfo(name = \"ignored\") val ignored: Boolean = false )"],"content":"@Query(\"SELECT * FROM seasons WHERE show_id = :showId ORDER BY number=$NUMBER_SPECIALS, number\")\n    abstract suspend fun seasonsForShowId(showId: Long): List<Season>","prompt":""},{"id":1272,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":["data class SeasonWithEpisodesAndWatchesnull"],"content":"@Transaction\n    @Query(\"SELECT * FROM seasons WHERE id = :seasonId\")\n    abstract fun seasonWithEpisodes(seasonId: Long): Flow<SeasonWithEpisodesAndWatches>","prompt":""},{"id":1273,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":[],"content":"@Query(\"DELETE FROM seasons WHERE show_id = :showId\")\n    abstract suspend fun deleteWithShowId(showId: Long)","prompt":""},{"id":1274,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":[],"content":"@Query(\"DELETE FROM seasons WHERE show_id = :showId\")\n    abstract suspend fun deleteSeasonsForShowId(showId: Long): Int","prompt":""},{"id":1275,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":[],"content":"@Query(\"SELECT * FROM seasons WHERE id = :id\")\n    abstract suspend fun seasonWithId(id: Long): Season?","prompt":""},{"id":1276,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":[],"content":"@Query(\"SELECT trakt_id FROM seasons WHERE id = :id\")\n    abstract suspend fun traktIdForId(id: Long): Int?","prompt":""},{"id":1277,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":[],"content":"@Query(\"SELECT * FROM seasons WHERE trakt_id = :traktId\")\n    abstract suspend fun seasonWithTraktId(traktId: Int): Season?","prompt":""},{"id":1278,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT id from seasons WHERE \n          show_id = (SELECT show_id from SEASONS WHERE id = :seasonId)\n          AND number != $NUMBER_SPECIALS\n          AND number < (SELECT number from SEASONS WHERE id = :seasonId)\n    \"\"\"\n    )\n    abstract suspend fun showPreviousSeasonIds(seasonId: Long): LongArray","prompt":""},{"id":1279,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":[],"content":"@Query(\"UPDATE seasons SET ignored = :ignored WHERE id = :seasonId\")\n    abstract suspend fun updateSeasonIgnoreFlag(seasonId: Long, ignored: Boolean)","prompt":""},{"id":1280,"identifierName":"app.tivi.data.daos.SeasonsDao","requiredType":[],"content":"@Query(\"SELECT * FROM seasons WHERE show_id = :showId AND number = :number\")\n    abstract suspend fun seasonWithShowIdAndNumber(showId: Long, number: Int): Season?","prompt":""},{"id":1281,"identifierName":"com.guerinet.mymartlet.util.room.daos.TranscriptCourseDao","requiredType":[],"content":"/**\n     * Returns the list of [TranscriptCourse]s for the [semesterId]\n     */\n    @Query(\"SELECT * FROM TranscriptCourse WHERE semesterId = :semesterId\")\n    abstract fun get(semesterId: Int): LiveData<List<TranscriptCourse>>","prompt":""},{"id":1282,"identifierName":"com.guerinet.mymartlet.util.room.daos.TranscriptCourseDao","requiredType":[],"content":"/**\n     * Deletes all of the stored [TranscriptCourse]s\n     */\n    @Query(\"DELETE FROM TranscriptCourse\")\n    abstract fun deleteAll()","prompt":""},{"id":1283,"identifierName":"com.guerinet.mymartlet.util.room.daos.TranscriptCourseDao","requiredType":[],"content":"/**\n     * Updates the stored [transcriptCourses]\n     */\n    @Transaction\n    open fun update(transcriptCourses: List<TranscriptCourse>) =\n        update(transcriptCourses, this::deleteAll)","prompt":""},{"id":1284,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DateTakensDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(dateTakens: List<DateTaken>)","prompt":""},{"id":1285,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DateTakensDao","requiredType":["data class DateTaken( @PrimaryKey(autoGenerate = true) var id: Int?, @ColumnInfo(name = \"full_path\") var fullPath: String, @ColumnInfo(name = \"filename\") var filename: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"last_fixed\") var lastFixed: Int, @ColumnInfo(name = \"last_modified\") var lastModified: Long)"],"content":"@Query(\"SELECT full_path, filename, parent_path, date_taken, last_fixed, last_modified FROM date_takens WHERE parent_path = :path COLLATE NOCASE\")\n    fun getDateTakensFromPath(path: String): List<DateTaken>","prompt":""},{"id":1286,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DateTakensDao","requiredType":["data class DateTaken( @PrimaryKey(autoGenerate = true) var id: Int?, @ColumnInfo(name = \"full_path\") var fullPath: String, @ColumnInfo(name = \"filename\") var filename: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"last_fixed\") var lastFixed: Int, @ColumnInfo(name = \"last_modified\") var lastModified: Long)"],"content":"@Query(\"SELECT full_path, filename, parent_path, date_taken, last_fixed, last_modified FROM date_takens\")\n    fun getAllDateTakens(): List<DateTaken>","prompt":""},{"id":1287,"identifierName":"com.cn29.aac.datasource.feedentry.db.FeedEntryDAO","requiredType":[],"content":"@Query(\"SELECT * FROM feedEntrys\")\n    fun getAll(): LiveData<List<FeedEntry>>","prompt":""},{"id":1288,"identifierName":"com.cn29.aac.datasource.feedentry.db.FeedEntryDAO","requiredType":[],"content":"@Query(\"SELECT * FROM feedEntrys WHERE uid = :uid LIMIT 1\")\n    fun findByUid(uid: Int): LiveData<FeedEntry>","prompt":""},{"id":1289,"identifierName":"com.cn29.aac.datasource.feedentry.db.FeedEntryDAO","requiredType":[],"content":"@Insert\n    fun insertAll(vararg feedEntries: FeedEntry?): List<Long>","prompt":""},{"id":1290,"identifierName":"com.cn29.aac.datasource.feedentry.db.FeedEntryDAO","requiredType":[],"content":"@Delete\n    fun delete(feedEntry: FeedEntry?): Int?","prompt":""},{"id":1291,"identifierName":"com.cn29.aac.datasource.feedentry.db.FeedEntryDAO","requiredType":[],"content":"@Update\n    fun update(feedEntry: FeedEntry?): Int?","prompt":""},{"id":1292,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.ExportFileDao","requiredType":["data class Keepnull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertExportFile(exportFile: ExportFile)","prompt":""},{"id":1293,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.ExportFileDao","requiredType":["data class Keepnull"],"content":"@Query(\"DELETE FROM ${ExportFile.TABLE_NAME_EXPORT_FILES} WHERE ${ExportFile.KEY_FILE_NAME} = :fileName\")\n    suspend fun deleteExportFileByFileName(fileName: String)","prompt":""},{"id":1294,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.ExportFileDao","requiredType":["data class Keepnull"],"content":"@Query(\"DELETE FROM ${ExportFile.TABLE_NAME_EXPORT_FILES}\")\n    suspend fun deleteAll()","prompt":""},{"id":1295,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.ExportFileDao","requiredType":["data class Keepnull"],"content":"@Delete\n    suspend fun delete(exportFiles: List<ExportFile>)","prompt":""},{"id":1296,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.ExportFileDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${ExportFile.TABLE_NAME_EXPORT_FILES} WHERE ${ExportFile.KEY_FILE_NAME} = :fileName\")\n    suspend fun getExportFileByFileName(fileName: String): List<ExportFile>","prompt":""},{"id":1297,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.ExportFileDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${ExportFile.TABLE_NAME_EXPORT_FILES}\")\n    suspend fun getExportFiles(): List<ExportFile>","prompt":""},{"id":1298,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.ExportFileDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${ExportFile.TABLE_NAME_EXPORT_FILES} WHERE ${ExportFile.KEY_DOC_ID} = :docId AND ${ExportFile.KEY_IS_PROCESSING} = 1\")\n    suspend fun getProcessingExportFiles(docId: UUID): List<ExportFile>","prompt":""},{"id":1299,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.ExportFileDao","requiredType":["data class Keepnull"],"content":"@Query(\"UPDATE ${ExportFile.TABLE_NAME_EXPORT_FILES} SET ${ExportFile.KEY_IS_PROCESSING}= :isProcessing WHERE ${ExportFile.KEY_FILE_NAME} = :id\")\n    suspend fun updateProcessingState(id: String, isProcessing: Boolean)","prompt":""},{"id":1300,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.ExportFileDao","requiredType":["data class Keepnull"],"content":"@Query(\"UPDATE ${ExportFile.TABLE_NAME_EXPORT_FILES} SET ${ExportFile.KEY_IS_PROCESSING} = 0\")\n    suspend fun updatesAllProcessingStatesToFalse()","prompt":""},{"id":1301,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.ExportFileDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM ${ExportFile.TABLE_NAME_EXPORT_FILES} WHERE ${ExportFile.KEY_IS_PROCESSING} = 0\")\n    fun getExportFileCount(): Flow<Long>","prompt":""},{"id":1302,"identifierName":"com.kamer.orny.data.room.ExpenseDao","requiredType":[],"content":"@Query(\"DELETE FROM expenses\")\n    fun deleteAllExpenses()","prompt":""},{"id":1303,"identifierName":"com.kamer.orny.data.room.ExpenseDao","requiredType":[],"content":"@Query(\"SELECT * FROM expenses\")\n    fun getAllExpenses(): Flowable<List<ExpenseWithEntities>>","prompt":""},{"id":1304,"identifierName":"com.kamer.orny.data.room.ExpenseDao","requiredType":[],"content":"@Insert\n    fun insertAll(expenses: List<ExpenseEntity>)","prompt":""},{"id":1305,"identifierName":"com.kamer.orny.data.room.ExpenseDao","requiredType":["data class ExpenseEntity( @PrimaryKey val id: String, val comment: String, val date: Date, @ColumnInfo(name = \"is_off_budget\") val isOffBudget: Boolean )"],"content":"@Insert\n    fun insert(expense: ExpenseEntity)","prompt":""},{"id":1306,"identifierName":"com.kamer.orny.data.room.ExpenseDao","requiredType":[],"content":"@Query(\"DELETE FROM expenses_entries\")\n    fun deleteAllEntries()","prompt":""},{"id":1307,"identifierName":"com.kamer.orny.data.room.ExpenseDao","requiredType":[],"content":"@Insert\n    fun insertAllEntries(entries: List<ExpenseEntryEntity>)","prompt":""},{"id":1308,"identifierName":"com.kamer.orny.data.room.ExpenseDao","requiredType":["data class ExpenseEntryEntity( @ColumnInfo(name = \"author_id\", index = true) val authorId: String, @ColumnInfo(name = \"expense_id\", index = true) val expenseId: String, val amount: Double )"],"content":"@Insert\n    fun insertEntry(entry: ExpenseEntryEntity)","prompt":""},{"id":1309,"identifierName":"org.fossasia.openevent.general.event.topic.EventTopicsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertEventTopics(eventTopic: List<EventTopic?>)","prompt":""},{"id":1310,"identifierName":"org.fossasia.openevent.general.event.topic.EventTopicsDao","requiredType":[],"content":"@Query(\"SELECT * from EventTopic\")\n    fun getAllEventTopics(): Flowable<List<EventTopic>>","prompt":""},{"id":1311,"identifierName":"org.fossasia.openevent.general.event.topic.EventTopicsDao","requiredType":[],"content":"@Query(\"DELETE FROM EventTopic\")\n    fun deleteAll()","prompt":""},{"id":1312,"identifierName":"com.lee.kotlin.room.UserDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertUsers(vararg user: User?)","prompt":""},{"id":1313,"identifierName":"com.lee.kotlin.room.UserDao","requiredType":[],"content":"@Delete\n    fun deleteUsers(vararg user: User?)","prompt":""},{"id":1314,"identifierName":"com.lee.kotlin.room.UserDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updateUsers(vararg user: User?): Int","prompt":""},{"id":1315,"identifierName":"com.lee.kotlin.room.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user\")\n    fun loadAllUsers(): Array<User?>?","prompt":""},{"id":1316,"identifierName":"com.lee.kotlin.room.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user WHERE firstName == :name\")\n    fun loadAllUsersByFirstName(name: String?): Array<User?>?","prompt":""},{"id":1317,"identifierName":"data.tinder.recommendation.RecommendationUserSpotifyThemeTrackDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertSpotifyThemeTrack(track: RecommendationUserSpotifyThemeTrackEntity)","prompt":""},{"id":1318,"identifierName":"data.tinder.recommendation.RecommendationUserSpotifyThemeTrackDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserSpotifyThemeTrackEntity WHERE id=:id\")\n  @Transaction\n  fun selectSpotifyThemeTrackById(id: String)\n      : List<RecommendationUserSpotifyThemeTrackWithRelatives>","prompt":""},{"id":1319,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Insert\n    fun insertEpisode(episode: SgEpisode2): Long","prompt":""},{"id":1320,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Insert\n    fun insertEpisodes(episodes: List<SgEpisode2>): LongArray","prompt":""},{"id":1321,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Update(entity = SgEpisode2::class)\n    fun updateEpisodes(episodes: List<SgEpisode2Update>): Int","prompt":""},{"id":1322,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Update(entity = SgEpisode2::class)\n    fun updateTmdbIds(episodes: List<SgEpisode2TmdbIdUpdate>): Int","prompt":""},{"id":1323,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_rating = :rating, episode_rating_votes = :votes WHERE _id = :episodeId\")\n    fun updateRating(episodeId: Long, rating: Double, votes: Int)","prompt":""},{"id":1324,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_rating_user = :userRating WHERE _id = :episodeId\")\n    fun updateUserRating(episodeId: Long, userRating: Int): Int","prompt":""},{"id":1325,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_rating_user = :userRating WHERE episode_tmdb_id = :tmdbId\")\n    fun updateUserRatingByTmdbId(tmdbId: Int, userRating: Int)","prompt":""},{"id":1326,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Transaction\n    fun updateUserRatings(tmdbIdsToRating: Map<Int, Int>) {\n        tmdbIdsToRating.forEach {\n            updateUserRatingByTmdbId(it.key, it.value)\n        }\n    }","prompt":""},{"id":1327,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_imdbid = :imdbId WHERE _id = :episodeId\")\n    fun updateImdbId(episodeId: Long, imdbId: String)","prompt":""},{"id":1328,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"DELETE FROM sg_episode\")\n    fun deleteAllEpisodes()","prompt":""},{"id":1329,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"DELETE FROM sg_episode WHERE _id = :episodeId\")\n    fun deleteEpisode(episodeId: Long)","prompt":""},{"id":1330,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Transaction\n    fun deleteEpisodes(episodeIds: List<Long>) {\n        episodeIds.forEach {\n            deleteEpisode(it)\n        }\n    }","prompt":""},{"id":1331,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"DELETE FROM sg_episode WHERE series_id = :showId AND episode_tmdb_id IS NULL\")\n    fun deleteEpisodesWithoutTmdbId(showId: Long)","prompt":""},{"id":1332,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT _id FROM sg_episode WHERE episode_tmdb_id = :tmdbId\")\n    fun getEpisodeIdByTmdbId(tmdbId: Int): Long","prompt":""},{"id":1333,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT _id FROM sg_episode WHERE episode_tvdb_id = :tvdbId\")\n    fun getEpisodeIdByTvdbId(tvdbId: Int): Long","prompt":""},{"id":1334,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT _id FROM sg_episode WHERE series_id = :showId AND episode_season_number = :season AND episode_number = :number\")\n    fun getEpisodeIdByNumber(showId: Long, season: Int, number: Int): Long","prompt":""},{"id":1335,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT episode_tvdb_id FROM sg_episode WHERE _id = :episodeId\")\n    fun getEpisodeTvdbId(episodeId: Long): Int","prompt":""},{"id":1336,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT episode_tmdb_id FROM sg_episode WHERE _id = :episodeId\")\n    fun getEpisodeTmdbId(episodeId: Long): Int","prompt":""},{"id":1337,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT _id, season_id, series_id, episode_number, episode_season_number, episode_plays FROM sg_episode WHERE _id = :episodeId\")\n    fun getEpisodeNumbers(episodeId: Long): SgEpisode2Numbers?","prompt":""},{"id":1338,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT _id, season_id, series_id, episode_tvdb_id, episode_title, episode_number, episode_absolute_number, episode_season_number, episode_dvd_number, episode_firstairedms, episode_watched, episode_collected FROM sg_episode WHERE _id = :episodeId\")\n    fun getEpisodeInfo(episodeId: Long): SgEpisode2Info?","prompt":""},{"id":1339,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery\n    fun getEpisodeInfo(query: SupportSQLiteQuery): SgEpisode2Info?","prompt":""},{"id":1340,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"fun getEpisodeInfo(\n        showId: Long,\n        nextEpisodeSelection: String,\n        sortClause: String,\n        selectionArgs: Array<Any>\n    ): SgEpisode2Info? {\n        return getEpisodeInfo(\n            SimpleSQLiteQuery(\n                \"SELECT * FROM \" + SeriesGuideDatabase.Tables.SG_EPISODE\n                        + \" WHERE \" + SgShow2Columns.REF_SHOW_ID + \" = \" + showId\n                        + \" AND \" + nextEpisodeSelection\n                        + \" ORDER BY \" + sortClause\n                        + \" LIMIT 1\",\n                selectionArgs\n            )\n        )\n    }","prompt":""},{"id":1341,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT * FROM sg_episode WHERE _id = :episodeId\")\n    fun getEpisode(episodeId: Long): SgEpisode2?","prompt":""},{"id":1342,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT * FROM sg_episode WHERE _id=:id\")\n    fun getEpisodeLiveData(id: Long): LiveData<SgEpisode2?>","prompt":""},{"id":1343,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Get the watched or skipped episode with the latest release date, if multiple highest season,\n     * if multiple highest number. Or null if none found.\n     */\n    @Query(\"SELECT _id, season_id, series_id, episode_tvdb_id, episode_title, episode_number, episode_absolute_number, episode_season_number, episode_dvd_number, episode_firstairedms, episode_watched, episode_collected FROM sg_episode WHERE series_id = :showId AND episode_watched != ${EpisodeFlags.UNWATCHED} ORDER BY episode_firstairedms DESC, episode_season_number DESC, episode_number DESC LIMIT 1\")\n    fun getNewestWatchedEpisodeOfShow(showId: Long): SgEpisode2Info?","prompt":""},{"id":1344,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\n        \"\"\"SELECT _id FROM sg_episode WHERE season_id = :seasonId \n        ORDER BY episode_number DESC, episode_firstairedms DESC\"\"\"\n    )\n    fun getHighestEpisodeOfSeason(seasonId: Long): Long","prompt":""},{"id":1345,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"\"\"SELECT _id FROM sg_episode WHERE series_id = :showId \n        AND episode_season_number > 0 AND episode_watched != ${EpisodeFlags.UNWATCHED} \n        AND (episode_season_number < :seasonNumber OR (episode_season_number = :seasonNumber AND episode_number < :episodeNumber))\n        ORDER BY episode_season_number DESC, episode_number DESC, episode_firstairedms DESC\"\"\")\n    fun getPreviousWatchedEpisodeOfShow(showId: Long, seasonNumber: Int, episodeNumber: Int): Long","prompt":""},{"id":1346,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Also used for compile time validation of [SgEpisode2WithShow.SELECT] (minus the WHERE clause).\n     */\n    @Query(\"SELECT sg_episode._id, episode_title, episode_number, episode_season_number, episode_firstairedms, episode_watched, episode_collected, episode_description, series_title, series_network, series_poster_small FROM sg_episode LEFT OUTER JOIN sg_show ON sg_episode.series_id=sg_show._id WHERE sg_episode._id = :episodeId\")\n    fun getEpisodeWithShow(episodeId: Long): SgEpisode2WithShow?","prompt":""},{"id":1347,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":["data class SupportSQLiteQuerynull"],"content":"/**\n     * See [SgEpisode2WithShow.buildEpisodesWithShowQuery].\n     */\n    @RawQuery(observedEntities = [SgEpisode2::class, SgShow2::class])\n    fun getEpisodesWithShow(query: SupportSQLiteQuery): List<SgEpisode2WithShow>","prompt":""},{"id":1348,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":["data class SupportSQLiteQuerynull"],"content":"/**\n     * See [SgEpisode2WithShow.buildEpisodesWithShowQuery].\n     */\n    @RawQuery(observedEntities = [SgEpisode2::class, SgShow2::class])\n    fun getEpisodesWithShowDataSource(query: SupportSQLiteQuery): PagingSource<Int, SgEpisode2WithShow>","prompt":""},{"id":1349,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT _id, episode_tmdb_id, episode_number FROM sg_episode WHERE season_id = :seasonId\")\n    fun getEpisodeIdsOfSeason(seasonId: Long): List<SgEpisode2Ids>","prompt":""},{"id":1350,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Also serves as compile time validation of [SgEpisode2Numbers.buildQuery]\n     */\n    @Query(\"SELECT _id, season_id, series_id, episode_number, episode_season_number, episode_plays FROM sg_episode WHERE season_id = :seasonId ORDER BY episode_season_number ASC, episode_number ASC\")\n    fun getEpisodeNumbersOfSeason(seasonId: Long): List<SgEpisode2Numbers>","prompt":""},{"id":1351,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery(observedEntities = [SgEpisode2::class])\n    fun getEpisodeNumbersOfSeason(query: SupportSQLiteQuery): List<SgEpisode2Numbers>","prompt":""},{"id":1352,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Excludes specials.\n     */\n    @Query(\"SELECT _id, season_id, series_id, episode_number, episode_season_number, episode_plays FROM sg_episode WHERE series_id = :showId AND episode_season_number != 0 ORDER BY episode_season_number ASC, episode_number ASC\")\n    fun getEpisodeNumbersOfShow(showId: Long): List<SgEpisode2Numbers>","prompt":""},{"id":1353,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT _id, episode_number, episode_season_number, episode_watched, episode_plays, episode_collected FROM sg_episode WHERE series_id = :showId AND episode_tmdb_id > 0 AND (episode_watched != ${EpisodeFlags.UNWATCHED} OR episode_collected = 1)\")\n    fun getEpisodesForHexagonSync(showId: Long): List<SgEpisode2ForSync>","prompt":""},{"id":1354,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT _id, episode_number, episode_season_number, episode_watched, episode_plays, episode_collected FROM sg_episode WHERE season_id=:seasonId\")\n    fun getEpisodesForTraktSync(seasonId: Long): List<SgEpisode2ForSync>","prompt":""},{"id":1355,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT _id, episode_number, episode_season_number, episode_watched, episode_plays, episode_collected FROM sg_episode WHERE season_id=:seasonId AND episode_watched = 1 ORDER BY episode_number ASC\")\n    fun getWatchedEpisodesForTraktSync(seasonId: Long): List<SgEpisode2ForSync>","prompt":""},{"id":1356,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT _id, episode_number, episode_season_number, episode_watched, episode_plays, episode_collected FROM sg_episode WHERE season_id=:seasonId AND episode_collected = 1 ORDER BY episode_number ASC\")\n    fun getCollectedEpisodesForTraktSync(seasonId: Long): List<SgEpisode2ForSync>","prompt":""},{"id":1357,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Gets episodes of season ordered by episode number.\n     */\n    @Query(\"SELECT * FROM sg_episode WHERE season_id = :seasonId ORDER BY episode_number ASC\")\n    fun getEpisodesForExport(seasonId: Long): List<SgEpisode2>","prompt":""},{"id":1358,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * WAIT, just for compile time validation of [SgEpisode2Info.buildQuery]\n     */\n    @Query(\"SELECT _id, season_id, series_id, episode_tvdb_id, episode_title, episode_number, episode_absolute_number, episode_season_number, episode_dvd_number, episode_firstairedms, episode_watched, episode_collected FROM sg_episode WHERE season_id = :seasonId\")\n    fun dummyToValidateSgEpisode2Info(seasonId: Long): List<SgEpisode2Info>","prompt":""},{"id":1359,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery(observedEntities = [SgEpisode2::class])\n    fun getEpisodeInfoOfSeasonLiveData(query: SupportSQLiteQuery): LiveData<List<SgEpisode2Info>>","prompt":""},{"id":1360,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":["data class SupportSQLiteQuerynull"],"content":"/**\n     * Note: make sure to limit the result set to avoid memory issues, otherwise this may return\n     * thousands of rows depending on how many shows are added.\n     *\n     * If no limit may cause \"RuntimeException: Exception while computing database live data.\"\n     * caused by \"IllegalStateException: Couldn't read row 2645, col 0 from CursorWindow.\n     * Make sure the Cursor is initialized correctly before accessing data from it.\"\n     */\n    @RawQuery(observedEntities = [SgEpisode2::class, SgShow2::class])\n    fun getEpisodeSearchResults(query: SupportSQLiteQuery): LiveData<List<SgEpisode2SearchResult>>","prompt":""},{"id":1361,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode\")\n    fun countEpisodes(): Int","prompt":""},{"id":1362,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE episode_season_number != 0\")\n    fun countEpisodesWithoutSpecials(): Int","prompt":""},{"id":1363,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE episode_watched == ${EpisodeFlags.WATCHED}\")\n    fun countWatchedEpisodes(): Int","prompt":""},{"id":1364,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE episode_watched == ${EpisodeFlags.WATCHED} AND episode_season_number != 0\")\n    fun countWatchedEpisodesWithoutSpecials(): Int","prompt":""},{"id":1365,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE series_id = :showId AND episode_watched = ${EpisodeFlags.WATCHED}\")\n    fun countWatchedEpisodesOfShow(showId: Long): Int","prompt":""},{"id":1366,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE series_id = :showId AND episode_watched = ${EpisodeFlags.WATCHED} AND episode_season_number != 0\")\n    fun countWatchedEpisodesOfShowWithoutSpecials(showId: Long): Int","prompt":""},{"id":1367,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Returns how many episodes of a show are left to collect. Only considers regular, released\n     * episodes (no specials, must have a release date in the past).\n     */\n    @Query(\"SELECT COUNT(_id) FROM sg_episode WHERE series_id = :showId AND episode_collected = 0 AND episode_season_number != 0 AND episode_firstairedms != ${SgEpisode2.EPISODE_UNKNOWN_RELEASE} AND episode_firstairedms <= :currentTimeToolsTime\")\n    fun countNotCollectedEpisodesOfShow(showId: Long, currentTimeToolsTime: Long): Int","prompt":""},{"id":1368,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Returns how many episodes of a show are left to watch (only aired and not watched, exclusive\n     * episodes with no air date and without specials).\n     */\n    @Query(\"SELECT COUNT(_id) FROM sg_episode WHERE series_id = :showId AND episode_watched = ${EpisodeFlags.UNWATCHED} AND episode_season_number != 0 AND episode_firstairedms != ${SgEpisode2.EPISODE_UNKNOWN_RELEASE} AND episode_firstairedms <= :currentTimeToolsTime\")\n    fun countNotWatchedEpisodesOfShow(showId: Long, currentTimeToolsTime: Long): Int","prompt":""},{"id":1369,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE season_id = :seasonId\")\n    fun countEpisodesOfSeason(seasonId: Long): Int","prompt":""},{"id":1370,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE season_id = :seasonId AND episode_watched = ${EpisodeFlags.UNWATCHED} AND episode_firstairedms != ${SgEpisode2.EPISODE_UNKNOWN_RELEASE} AND episode_firstairedms <= :currentTimeToolsTime\")\n    fun countNotWatchedReleasedEpisodesOfSeason(seasonId: Long, currentTimeToolsTime: Long): Int","prompt":""},{"id":1371,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE season_id = :seasonId AND episode_watched = ${EpisodeFlags.UNWATCHED} AND episode_firstairedms > :currentTimeToolsTime\")\n    fun countNotWatchedToBeReleasedEpisodesOfSeason(seasonId: Long, currentTimeToolsTime: Long): Int","prompt":""},{"id":1372,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE season_id = :seasonId AND episode_watched = ${EpisodeFlags.UNWATCHED} AND episode_firstairedms = ${SgEpisode2.EPISODE_UNKNOWN_RELEASE}\")\n    fun countNotWatchedNoReleaseEpisodesOfSeason(seasonId: Long): Int","prompt":""},{"id":1373,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE season_id = :seasonId AND episode_watched = ${EpisodeFlags.SKIPPED}\")\n    fun countSkippedEpisodesOfSeason(seasonId: Long): Int","prompt":""},{"id":1374,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM sg_episode WHERE season_id = :seasonId AND episode_collected = 0\")\n    fun countNotCollectedEpisodesOfSeason(seasonId: Long): Int","prompt":""},{"id":1375,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_watched = 0, episode_plays = 0 WHERE _id = :episodeId\")\n    fun setNotWatchedAndRemovePlays(episodeId: Long): Int","prompt":""},{"id":1376,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_watched = 1, episode_plays = episode_plays + 1 WHERE _id = :episodeId\")\n    fun setWatchedAndAddPlay(episodeId: Long): Int","prompt":""},{"id":1377,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_watched = 2 WHERE _id = :episodeId\")\n    fun setSkipped(episodeId: Long): Int","prompt":""},{"id":1378,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Sets not watched or skipped episodes, that have been released,\n     * as watched and adds play if these conditions are met:\n     *\n     * Must\n     * - be released before given episode release time,\n     * - OR at the same time, but with same (itself) or lower (others released at same time) number.\n     *\n     * Note: keep in sync with EpisodeWatchedUpToJob.\n     */\n    @Query(\n        \"\"\"UPDATE sg_episode SET episode_watched = 1, episode_plays = episode_plays + 1 WHERE series_id = :showId\n            AND (\n            episode_firstairedms < :episodeFirstAired\n            OR (episode_firstairedms = :episodeFirstAired AND episode_number <= :episodeNumber)\n            )\n            AND episode_firstairedms != -1\n            AND episode_watched != ${EpisodeFlags.WATCHED}\"\"\"\n    )\n    fun setWatchedUpToAndAddPlay(showId: Long, episodeFirstAired: Long, episodeNumber: Int): Int","prompt":""},{"id":1379,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * See [setWatchedUpToAndAddPlay] for which episodes are returned.\n     */\n    @Query(\"\"\"SELECT _id, season_id, series_id, episode_number, episode_season_number, episode_plays FROM sg_episode WHERE series_id = :showId \n            AND (\n            episode_firstairedms < :episodeFirstAired\n            OR (episode_firstairedms = :episodeFirstAired AND episode_number <= :episodeNumber)\n            )\n            AND episode_firstairedms != -1\n            AND episode_watched != ${EpisodeFlags.WATCHED}\n            ORDER BY episode_season_number ASC, episode_number ASC\"\"\")\n    fun getEpisodeNumbersForWatchedUpTo(showId: Long, episodeFirstAired: Long, episodeNumber: Int): List<SgEpisode2Numbers>","prompt":""},{"id":1380,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Note: keep in sync with [setSeasonNotWatchedAndRemovePlays].\n     */\n    @Query(\n        \"\"\"SELECT _id, season_id, series_id, episode_number, episode_season_number, episode_plays FROM sg_episode \n        WHERE season_id = :seasonId AND episode_watched != ${EpisodeFlags.UNWATCHED}\n        ORDER BY episode_season_number ASC, episode_number ASC\"\"\"\n    )\n    fun getWatchedOrSkippedEpisodeNumbersOfSeason(seasonId: Long): List<SgEpisode2Numbers>","prompt":""},{"id":1381,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Sets all watched or skipped as not watched and removes all plays.\n     *\n     * Note: keep in sync with [getWatchedOrSkippedEpisodeNumbersOfSeason].\n     */\n    @Query(\n        \"\"\"UPDATE sg_episode SET episode_watched = 0, episode_plays = 0\n        WHERE season_id = :seasonId AND episode_watched != ${EpisodeFlags.UNWATCHED}\"\"\"\n    )\n    fun setSeasonNotWatchedAndRemovePlays(seasonId: Long): Int","prompt":""},{"id":1382,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\n        \"\"\"UPDATE sg_episode SET episode_watched = 0, episode_plays = 0\n        WHERE season_id = :seasonId AND episode_watched == ${EpisodeFlags.WATCHED}\"\"\"\n    )\n    fun setSeasonNotWatchedExcludeSkipped(seasonId: Long): Int","prompt":""},{"id":1383,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Transaction\n    fun setSeasonsNotWatchedExcludeSkipped(seasonIds: List<Long>) {\n        for (seasonId in seasonIds) {\n            setSeasonNotWatchedExcludeSkipped(seasonId)\n        }\n    }","prompt":""},{"id":1384,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\n        \"\"\"UPDATE sg_episode SET episode_watched = 0, episode_plays = 0\n        WHERE series_id = :showId AND episode_watched == ${EpisodeFlags.WATCHED}\"\"\"\n    )\n    fun setShowNotWatchedExcludeSkipped(showId: Long): Int","prompt":""},{"id":1385,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Transaction\n    fun setShowsNotWatchedExcludeSkipped(showIds: List<Long>) {\n        for (seasonId in showIds) {\n            setShowNotWatchedExcludeSkipped(seasonId)\n        }\n    }","prompt":""},{"id":1386,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Does NOT include watched episodes to avoid Trakt adding a new play.\n     *\n     * Note: keep in sync with [setSeasonSkipped] and [setSeasonWatchedAndAddPlay].\n     */\n    @Query(\n        \"\"\"SELECT _id, season_id, series_id, episode_number, episode_season_number, episode_plays FROM sg_episode \n        WHERE season_id = :seasonId AND episode_watched != ${EpisodeFlags.WATCHED}\n        ORDER BY episode_season_number ASC, episode_number ASC\"\"\"\n    )\n    fun getNotWatchedOrSkippedEpisodeNumbersOfSeason(seasonId: Long): List<SgEpisode2Numbers>","prompt":""},{"id":1387,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_watched = 1, episode_plays = 1 WHERE season_id = :seasonId\")\n    fun setSeasonWatched(seasonId: Long): Int","prompt":""},{"id":1388,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Sets all not watched or skipped episodes of a season as watched and adds a play.\n     *\n     * Does NOT mark watched episodes again to avoid adding a new play (Trakt and local).\n     *\n     * Note: keep in sync with [getNotWatchedOrSkippedEpisodeNumbersOfSeason].\n     */\n    @Query(\n        \"\"\"UPDATE sg_episode SET episode_watched = 1, episode_plays = episode_plays + 1 \n            WHERE season_id = :seasonId AND episode_watched != ${EpisodeFlags.WATCHED}\"\"\"\n    )\n    fun setSeasonWatchedAndAddPlay(seasonId: Long): Int","prompt":""},{"id":1389,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Sets all not watched episodes of a season as skipped.\n     *\n     * Note: keep in sync with [getNotWatchedOrSkippedEpisodeNumbersOfSeason].\n     */\n    @Query(\n        \"\"\"UPDATE sg_episode SET episode_watched = 2 \n            WHERE season_id = :seasonId AND episode_watched = ${EpisodeFlags.UNWATCHED}\"\"\"\n    )\n    fun setSeasonSkipped(seasonId: Long): Int","prompt":""},{"id":1390,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Note: keep in sync with [setShowNotWatchedAndRemovePlays].\n     */\n    @Query(\n        \"\"\"SELECT _id, season_id, series_id, episode_number, episode_season_number, episode_plays FROM sg_episode \n        WHERE series_id = :showId AND episode_watched != ${EpisodeFlags.UNWATCHED}\n        AND episode_season_number != 0\n        ORDER BY episode_season_number ASC, episode_number ASC\"\"\"\n    )\n    fun getWatchedOrSkippedEpisodeNumbersOfShow(showId: Long): List<SgEpisode2Numbers>","prompt":""},{"id":1391,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Sets watched or skipped episodes, excluding specials, as not watched and removes all plays.\n     *\n     * Note: keep in sync with [getWatchedOrSkippedEpisodeNumbersOfShow].\n     */\n    @Query(\n        \"\"\"UPDATE sg_episode SET episode_watched = 0, episode_plays = 0\n            WHERE series_id = :showId AND episode_watched != ${EpisodeFlags.UNWATCHED}\n            AND episode_season_number != 0\"\"\"\n    )\n    fun setShowNotWatchedAndRemovePlays(showId: Long): Int","prompt":""},{"id":1392,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Note: keep in sync with [setShowWatchedAndAddPlay].\n     */\n    @Query(\n        \"\"\"SELECT _id, season_id, series_id, episode_number, episode_season_number, episode_plays FROM sg_episode \n        WHERE series_id = :showId AND episode_watched != ${EpisodeFlags.WATCHED}\n        AND episode_firstairedms <= :currentTimePlusOneHour AND episode_firstairedms != -1\n        AND episode_season_number != 0\n        ORDER BY episode_season_number ASC, episode_number ASC\"\"\"\n    )\n    fun getNotWatchedOrSkippedEpisodeNumbersOfShow(showId: Long, currentTimePlusOneHour: Long): List<SgEpisode2Numbers>","prompt":""},{"id":1393,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Sets not watched or skipped episodes, released until within the hour, excluding specials,\n     * as watched and adds play.\n     *\n     * Does NOT mark watched episodes again to avoid adding a new play (Trakt and local).\n     *\n     * Note: keep in sync with [getNotWatchedOrSkippedEpisodeNumbersOfShow].\n     */\n    @Query(\n        \"\"\"UPDATE sg_episode SET episode_watched = 1, episode_plays = episode_plays + 1\n            WHERE series_id = :showId AND episode_watched != ${EpisodeFlags.WATCHED}\n            AND episode_firstairedms <= :currentTimePlusOneHour AND episode_firstairedms != -1\n            AND episode_season_number != 0\"\"\"\n    )\n    fun setShowWatchedAndAddPlay(showId: Long, currentTimePlusOneHour: Long): Int","prompt":""},{"id":1394,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Update(entity = SgEpisode2::class)\n    fun updateEpisodesWatched(episodes: List<SgEpisode2WatchedUpdate>): Int","prompt":""},{"id":1395,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Update(entity = SgEpisode2::class)\n    fun updateEpisodesCollected(episodes: List<SgEpisode2CollectedUpdate>): Int","prompt":""},{"id":1396,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_collected = :isCollected WHERE _id = :episodeId\")\n    fun updateCollected(episodeId: Long, isCollected: Boolean): Int","prompt":""},{"id":1397,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_collected = :isCollected WHERE season_id = :seasonId\")\n    fun updateCollectedOfSeason(seasonId: Long, isCollected: Boolean): Int","prompt":""},{"id":1398,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Transaction\n    fun updateCollectedOfSeasons(seasonIds: List<Long>, isCollected: Boolean) {\n        for (seasonId in seasonIds) {\n            updateCollectedOfSeason(seasonId, isCollected)\n        }\n    }","prompt":""},{"id":1399,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_collected = :isCollected WHERE series_id = :showId\")\n    fun updateCollectedOfShow(showId: Long, isCollected: Boolean): Int","prompt":""},{"id":1400,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Transaction\n    fun updateCollectedOfShows(showIds: List<Long>, isCollected: Boolean) {\n        for (seasonId in showIds) {\n            updateCollectedOfShow(seasonId, isCollected)\n        }\n    }","prompt":""},{"id":1401,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_collected = :isCollected WHERE series_id = :showId AND episode_season_number != 0\")\n    fun updateCollectedOfShowExcludeSpecials(showId: Long, isCollected: Boolean): Int","prompt":""},{"id":1402,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_watched = :watched, episode_plays = :plays WHERE series_id = :showId AND episode_season_number = :seasonNumber AND episode_number = :episodeNumber\")\n    fun updateWatchedByNumber(showId: Long, seasonNumber: Int, episodeNumber: Int, watched: Int, plays: Int)","prompt":""},{"id":1403,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"UPDATE sg_episode SET episode_collected = :isCollected WHERE series_id = :showId AND episode_season_number = :seasonNumber AND episode_number = :episodeNumber\")\n    fun updateCollectedByNumber(showId: Long, seasonNumber: Int, episodeNumber: Int, isCollected: Boolean)","prompt":""},{"id":1404,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Transaction\n    fun updateWatchedAndCollectedByNumber(episodes: List<SgEpisode2UpdateByNumber>) {\n        for (episode in episodes) {\n            if (episode.watched != null && episode.plays != null) {\n                updateWatchedByNumber(\n                    episode.showId,\n                    episode.seasonNumber,\n                    episode.episodeNumber,\n                    episode.watched,\n                    episode.plays\n                )\n            }\n            if (episode.collected != null) {\n                updateCollectedByNumber(\n                    episode.showId,\n                    episode.seasonNumber,\n                    episode.episodeNumber,\n                    episode.collected\n                )\n            }\n        }\n    }","prompt":""},{"id":1405,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Note: currently last updated value is unused, all episodes are always updated.\n     * See [com.battlelancer.seriesguide.shows.tools.AddUpdateShowTools].\n     */\n    @Query(\"UPDATE sg_episode SET episode_lastupdate = 0\")\n    fun resetLastUpdatedForAll()","prompt":""},{"id":1406,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"/**\n     * Note: currently last updated value is unused, all episodes are always updated.\n     * See [com.battlelancer.seriesguide.shows.tools.AddUpdateShowTools].\n     */\n    @Query(\"UPDATE sg_episode SET episode_lastupdate = 0 WHERE series_id = :showId\")\n    fun resetLastUpdatedForShow(showId: Long)","prompt":""},{"id":1407,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"DELETE FROM sg_episode WHERE season_id = :seasonId\")\n    fun deleteEpisodesOfSeason(seasonId: Long): Int","prompt":""},{"id":1408,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Transaction\n    fun deleteEpisodesOfSeasons(seasonIds: List<Long>) {\n        seasonIds.forEach {\n            deleteEpisodesOfSeason(it)\n        }\n    }","prompt":""},{"id":1409,"identifierName":"com.battlelancer.seriesguide.shows.database.SgEpisode2Helper","requiredType":[],"content":"@Query(\"DELETE FROM sg_episode WHERE series_id = :showId\")\n    fun deleteEpisodesOfShow(showId: Long): Int","prompt":""},{"id":1410,"identifierName":"jp.toastkid.yobidashi.search.favorite.FavoriteSearchRepository","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(item: FavoriteSearch)","prompt":""},{"id":1411,"identifierName":"jp.toastkid.yobidashi.search.favorite.FavoriteSearchRepository","requiredType":[],"content":"@Query(\"SELECT * FROM FavoriteSearch WHERE `query` LIKE :keyword ORDER BY id DESC LIMIT 5\")\n    fun select(keyword: String): List<FavoriteSearch>","prompt":""},{"id":1412,"identifierName":"jp.toastkid.yobidashi.search.favorite.FavoriteSearchRepository","requiredType":[],"content":"@Query(\"SELECT * FROM FavoriteSearch\")\n    fun findAll(): List<FavoriteSearch>","prompt":""},{"id":1413,"identifierName":"jp.toastkid.yobidashi.search.favorite.FavoriteSearchRepository","requiredType":[],"content":"@Query(\"SELECT * FROM FavoriteSearch ORDER BY id DESC LIMIT :count\")\n    fun find(count: Int): List<FavoriteSearch>","prompt":""},{"id":1414,"identifierName":"jp.toastkid.yobidashi.search.favorite.FavoriteSearchRepository","requiredType":[],"content":"@Delete\n    fun delete(favoriteSearch: FavoriteSearch)","prompt":""},{"id":1415,"identifierName":"jp.toastkid.yobidashi.search.favorite.FavoriteSearchRepository","requiredType":[],"content":"@Query(\"DELETE FROM FavoriteSearch\")\n    fun deleteAll()","prompt":""},{"id":1416,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"// Room executes all queries on a separate thread. So there is no suspend.\n    @Query(\"SELECT a.*, b.url as imageUrl FROM note_table a LEFT JOIN image_table b ON b.id = (SELECT id FROM image_table WHERE note_id = a.id ORDER BY id ASC LIMIT 1) WHERE a.editing = 0 GROUP BY a.id ORDER BY a.`order` DESC, a.id DESC\")\n    fun getPagingAll(): DataSource.Factory<Int, NoteWithImageUrl>","prompt":""},{"id":1417,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\"SELECT a.*, b.url as imageUrl from note_table a LEFT JOIN image_table b ON b.id = (SELECT id FROM image_table WHERE note_id = a.id ORDER BY id ASC LIMIT 1) WHERE a.editing = 0 AND a.star == 1 GROUP BY a.id ORDER BY a.pinned DESC, a.`order` DESC, a.id DESC\")\n    fun getStar(): DataSource.Factory<Int, NoteWithImageUrl>","prompt":""},{"id":1418,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\"SELECT a.*, b.url as imageUrl from note_table a LEFT JOIN image_table b ON b.id = (SELECT id FROM image_table WHERE note_id = a.id ORDER BY id ASC LIMIT 1) WHERE editing = 0 AND color_tag_color = :color GROUP BY a.id ORDER BY pinned DESC, `order` DESC, id DESC\")\n    fun getByColorTag(color: String): DataSource.Factory<Int, NoteWithImageUrl>","prompt":""},{"id":1419,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\"SELECT a.*, c.url as imageUrl from note_table a INNER JOIN note_label_table b ON a.id = b.note_id LEFT JOIN image_table c ON c.id = (SELECT id FROM image_table WHERE note_id = a.id ORDER BY id ASC LIMIT 1) WHERE a.editing = 0 AND b.label_id = :id GROUP BY a.id ORDER BY a.pinned DESC, a.`order` DESC, a.id DESC\")\n    fun getByLabel(id: Int): DataSource.Factory<Int, NoteWithImageUrl>","prompt":""},{"id":1420,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"//\n    @Query(\"SELECT * from note_table WHERE editing = 0\")\n    suspend fun getAll(): List<Note>","prompt":""},{"id":1421,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\"SELECT * from note_table WHERE editing = 0 AND title NOT LIKE 'http%' ORDER BY RANDOM() LIMIT 1\")\n    suspend fun getRandom(): Note?","prompt":""},{"id":1422,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\"SELECT count(*) from note_table WHERE title = :title\")\n    suspend fun getCountByString(title: String): Int","prompt":""},{"id":1423,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Update\n    suspend fun updateNotes(notes: MutableList<Note>): Int","prompt":""},{"id":1424,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * from note_table WHERE id = :id\")\n    fun noteWithImages(id: Int): LiveData<NoteWithImages?>","prompt":""},{"id":1425,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * from note_table WHERE editing = 1 LIMIT 1\")\n    fun noteEditingWithImages(): LiveData<NoteWithImages?>","prompt":""},{"id":1426,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\"SELECT count(*) from note_table WHERE editing = 0\")\n    fun notesAllCount(): LiveData<Int>","prompt":""},{"id":1427,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\"SELECT count(*) from note_table WHERE editing = 0\")\n    suspend fun notesCount(): Int","prompt":""},{"id":1428,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\"SELECT MAX(`order`) from note_table WHERE editing = 0\")\n    suspend fun maxOrder(): Int?","prompt":""},{"id":1429,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\"SELECT count(*) from note_table WHERE editing = 0 AND star == 1\")\n    fun notesStarCount(): LiveData<Int>","prompt":""},{"id":1430,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\"UPDATE note_table set `order` = `order` + :delta WHERE editing = 0 AND id = :id\")\n    suspend fun updateOrder(id: Int, delta: Int)","prompt":""},{"id":1431,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Query(\n        \"UPDATE note_table set `order` = `order` + :delta WHERE editing = 0 AND `order` >= :min AND `order` <= :max AND id != :target\"\n    )\n    suspend fun moveNotes(target: Int, delta: Int, min: Int, max: Int)","prompt":""},{"id":1432,"identifierName":"tonnysunm.com.acornote.model.NoteDao","requiredType":[],"content":"@Transaction\n    suspend fun moveNote(target: Int, from: Int, to: Int) {\n        Timber.d(\"moveNote $target $from $to\")\n        moveNotes(\n            target,\n            if (from > to) 1 else -1,\n            min(from, to),\n            max(from, to)\n        )\n        updateOrder(target, to - from)\n    }","prompt":""},{"id":1433,"identifierName":"kaffe.repository.BryggRepository","requiredType":["data class Brygg( var _id: String?, var navn: String, var kaffeId: String, var brygger: String, var dato: Date, var liter: Float, var skjeer: Float, var vis: Boolean, var kommentar: String = \"\", var malthet: Malthet, var karakterer: MutableList<Karakter>)"],"content":"@Query(\"{'dato': {\\$gte: ?0, \\$lte: ?1}}\")\n    fun getBryggFraTilDato(fra: Date, til: Date) : MutableList<Brygg>","prompt":""},{"id":1434,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.dash.history.database.HistoryRecordDao","requiredType":[],"content":"@Query(\"SELECT * from historyrecords\")\n    abstract fun all(): Single<List<HistoryRecordEntity>>","prompt":""},{"id":1435,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.dash.history.database.HistoryRecordDao","requiredType":[],"content":"@Query(\"SELECT * from historyrecords ORDER BY id LIMIT 1\")\n    abstract fun first(): HistoryRecordEntity?","prompt":""},{"id":1436,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.dash.history.database.HistoryRecordDao","requiredType":[],"content":"@Query(\"SELECT * from historyrecords WHERE createdAt >= :since ORDER BY createdAt DESC\")\n    abstract fun allSince(since: Long): Single<List<HistoryRecordEntity>>","prompt":""},{"id":1437,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.dash.history.database.HistoryRecordDao","requiredType":[],"content":"@Query(\"SELECT * FROM historyrecords WHERE id = :id LIMIT 1\")\n    abstract fun byIdBlocking(id: Long): HistoryRecordEntity?","prompt":""},{"id":1438,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.dash.history.database.HistoryRecordDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun save(historyRecordEntity: HistoryRecordEntity): Single<Long>","prompt":""},{"id":1439,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.dash.history.database.HistoryRecordDao","requiredType":[],"content":"@Delete\n    abstract fun delete(historyRecordEntity: HistoryRecordEntity): Completable","prompt":""},{"id":1440,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.dash.history.database.HistoryRecordDao","requiredType":[],"content":"@Query(\"UPDATE historyrecords SET resolvedResult = :resolvedResult, resolvedAt = :resolvedAt WHERE id = :id \")\n    abstract fun markResolved(id: Long, resolvedResult: ResolvedResult, resolvedAt: Long): Completable","prompt":""},{"id":1441,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.dash.history.database.HistoryRecordDao","requiredType":[],"content":"@Query(\"UPDATE historyrecords SET initialResult = :initialResult  WHERE id = :id \")\n    abstract fun setInitialResult(id: Long, initialResult: InitialResult): Completable","prompt":""},{"id":1442,"identifierName":"com.jamieadkins.gwent.database.DeckDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertDeck(deck: DeckEntity): Long","prompt":""},{"id":1443,"identifierName":"com.jamieadkins.gwent.database.DeckDao","requiredType":[],"content":"@Query(\"UPDATE ${GwentDatabase.DECK_TABLE} SET leaderId = :leaderId WHERE id = :deckId\")\n    fun changeDeckLeader(deckId: String, leaderId: String?)","prompt":""},{"id":1444,"identifierName":"com.jamieadkins.gwent.database.DeckDao","requiredType":[],"content":"@Query(\"UPDATE ${GwentDatabase.DECK_TABLE} SET name = :name WHERE id = :deckId\")\n    fun changeDeckName(deckId: String, name: String)","prompt":""},{"id":1445,"identifierName":"com.jamieadkins.gwent.database.DeckDao","requiredType":[],"content":"@Query(\"UPDATE ${GwentDatabase.DECK_TABLE} SET deleted = 1 WHERE id = :deckId\")\n    fun deleteDeck(deckId: String)","prompt":""},{"id":1446,"identifierName":"com.jamieadkins.gwent.database.DeckDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM ${GwentDatabase.DECK_TABLE} WHERE deleted = 0\")\n    fun getDecksOnce(): Single<List<DeckWithCardsEntity>>","prompt":""},{"id":1447,"identifierName":"com.jamieadkins.gwent.database.DeckDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM ${GwentDatabase.DECK_TABLE} WHERE deleted = 0\")\n    fun getDecks(): Flowable<List<DeckWithCardsEntity>>","prompt":""},{"id":1448,"identifierName":"com.jamieadkins.gwent.database.DeckDao","requiredType":["data class DeckWithCardsEntitynull"],"content":"@Transaction\n    @Query(\"SELECT * FROM ${GwentDatabase.DECK_TABLE} WHERE id = :deckId\")\n    fun getDeckOnce(deckId: String): Single<DeckWithCardsEntity>","prompt":""},{"id":1449,"identifierName":"com.jamieadkins.gwent.database.DeckDao","requiredType":["data class DeckWithCardsEntitynull"],"content":"@Transaction\n    @Query(\"SELECT * FROM ${GwentDatabase.DECK_TABLE} WHERE id = :deckId\")\n    fun getDeck(deckId: String): Flowable<DeckWithCardsEntity>","prompt":""},{"id":1450,"identifierName":"com.jamieadkins.gwent.database.ArtDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + GwentDatabase.ART_TABLE + \" WHERE cardId=:cardId\")\n    fun getCardArt(cardId: String): Single<List<ArtEntity>>","prompt":""},{"id":1451,"identifierName":"com.jamieadkins.gwent.database.ArtDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + GwentDatabase.ART_TABLE + \"  WHERE cardId IN(:cardIds)\")\n    fun getCardArt(cardIds: List<String>): Single<List<ArtEntity>>","prompt":""},{"id":1452,"identifierName":"com.jamieadkins.gwent.database.ArtDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + GwentDatabase.ART_TABLE)\n    fun getCardArt(): Single<List<ArtEntity>>","prompt":""},{"id":1453,"identifierName":"com.jamieadkins.gwent.database.ArtDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertArt(items: Collection<ArtEntity>)","prompt":""},{"id":1454,"identifierName":"com.example.photolog_start.LogDao","requiredType":[],"content":"@Query(\"SELECT * FROM logs ORDER BY date DESC\")\n    suspend fun getAll(): List<LogEntry>","prompt":""},{"id":1455,"identifierName":"com.example.photolog_start.LogDao","requiredType":[],"content":"suspend fun getAllWithFiles(photoFolder: File): List<Log> {\n        return getAll().map { Log.fromLogEntry(it, photoFolder) }\n    }","prompt":""},{"id":1456,"identifierName":"com.example.photolog_start.LogDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(log: LogEntry)","prompt":""},{"id":1457,"identifierName":"com.example.photolog_start.LogDao","requiredType":[],"content":"@Delete\n    suspend fun delete(log: LogEntry)","prompt":""},{"id":1458,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":["data class OrderEntity( @ColumnInfo(name = \"localSiteId\") val localSiteId: LocalId, val orderId: Long, val number: String = \"\", val status: String = \"\", val currency: String = \"\", val orderKey: String = \"\", val dateCreated: String = \"\", val dateModified: String = \"\", val total: String = \"\", val totalTax: String = \"\", val shippingTotal: String = \"\", val paymentMethod: String = \"\", val paymentMethodTitle: String = \"\", val datePaid: String = \"\", val pricesIncludeTax: Boolean = false, val customerNote: String = \"\", val discountTotal: String = \"\", val discountCodes: String = \"\", val refundTotal: BigDecimal = BigDecimal.ZERO, val billingFirstName: String = \"\", val billingLastName: String = \"\", val billingCompany: String = \"\", val billingAddress1: String = \"\", val billingAddress2: String = \"\", val billingCity: String = \"\", val billingState: String = \"\", val billingPostcode: String = \"\", val billingCountry: String = \"\", val billingEmail: String = \"\", val billingPhone: String = \"\", val shippingFirstName: String = \"\", val shippingLastName: String = \"\", val shippingCompany: String = \"\", val shippingAddress1: String = \"\", val shippingAddress2: String = \"\", val shippingCity: String = \"\", val shippingState: String = \"\", val shippingPostcode: String = \"\", val shippingCountry: String = \"\", val shippingPhone: String = \"\", val lineItems: String = \"\", val shippingLines: String = \"\", val feeLines: String = \"\", val taxLines: String = \"\", val metaData: String = \"\", @ColumnInfo(name = \"paymentUrl\", defaultValue = \"\") val paymentUrl: String = \"\", @ColumnInfo(name = \"isEditable\", defaultValue = \"1\") val isEditable: Boolean = true )"],"content":"@Query(\"SELECT * FROM OrderEntity\")\n    abstract suspend fun getAllOrders(): List<OrderEntity>","prompt":""},{"id":1459,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":["data class OrderEntity( @ColumnInfo(name = \"localSiteId\") val localSiteId: LocalId, val orderId: Long, val number: String = \"\", val status: String = \"\", val currency: String = \"\", val orderKey: String = \"\", val dateCreated: String = \"\", val dateModified: String = \"\", val total: String = \"\", val totalTax: String = \"\", val shippingTotal: String = \"\", val paymentMethod: String = \"\", val paymentMethodTitle: String = \"\", val datePaid: String = \"\", val pricesIncludeTax: Boolean = false, val customerNote: String = \"\", val discountTotal: String = \"\", val discountCodes: String = \"\", val refundTotal: BigDecimal = BigDecimal.ZERO, val billingFirstName: String = \"\", val billingLastName: String = \"\", val billingCompany: String = \"\", val billingAddress1: String = \"\", val billingAddress2: String = \"\", val billingCity: String = \"\", val billingState: String = \"\", val billingPostcode: String = \"\", val billingCountry: String = \"\", val billingEmail: String = \"\", val billingPhone: String = \"\", val shippingFirstName: String = \"\", val shippingLastName: String = \"\", val shippingCompany: String = \"\", val shippingAddress1: String = \"\", val shippingAddress2: String = \"\", val shippingCity: String = \"\", val shippingState: String = \"\", val shippingPostcode: String = \"\", val shippingCountry: String = \"\", val shippingPhone: String = \"\", val lineItems: String = \"\", val shippingLines: String = \"\", val feeLines: String = \"\", val taxLines: String = \"\", val metaData: String = \"\", @ColumnInfo(name = \"paymentUrl\", defaultValue = \"\") val paymentUrl: String = \"\", @ColumnInfo(name = \"isEditable\", defaultValue = \"1\") val isEditable: Boolean = true )"],"content":"@Insert(onConflict = REPLACE)\n    abstract fun insertOrUpdateOrder(order: OrderEntity)","prompt":""},{"id":1460,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":[],"content":"@Query(\"SELECT * FROM OrderEntity WHERE orderId = :orderId AND localSiteId = :localSiteId\")\n    abstract suspend fun getOrder(orderId: Long, localSiteId: LocalId): OrderEntity?","prompt":""},{"id":1461,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":[],"content":"@Query(\"SELECT * FROM OrderEntity WHERE orderId = :orderId AND localSiteId = :localSiteId\")\n    abstract fun observeOrder(orderId: Long, localSiteId: LocalId): Flow<OrderEntity?>","prompt":""},{"id":1462,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":[],"content":"@Transaction\n    open suspend fun updateLocalOrder(\n        orderId: Long,\n        localSiteId: LocalId,\n        updateOrder: OrderEntity.() -> OrderEntity\n    ) {\n        getOrder(orderId, localSiteId)\n            ?.let(updateOrder)\n            ?.let { insertOrUpdateOrder(it) }\n    }","prompt":""},{"id":1463,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":["data class OrderEntity( @ColumnInfo(name = \"localSiteId\") val localSiteId: LocalId, val orderId: Long, val number: String = \"\", val status: String = \"\", val currency: String = \"\", val orderKey: String = \"\", val dateCreated: String = \"\", val dateModified: String = \"\", val total: String = \"\", val totalTax: String = \"\", val shippingTotal: String = \"\", val paymentMethod: String = \"\", val paymentMethodTitle: String = \"\", val datePaid: String = \"\", val pricesIncludeTax: Boolean = false, val customerNote: String = \"\", val discountTotal: String = \"\", val discountCodes: String = \"\", val refundTotal: BigDecimal = BigDecimal.ZERO, val billingFirstName: String = \"\", val billingLastName: String = \"\", val billingCompany: String = \"\", val billingAddress1: String = \"\", val billingAddress2: String = \"\", val billingCity: String = \"\", val billingState: String = \"\", val billingPostcode: String = \"\", val billingCountry: String = \"\", val billingEmail: String = \"\", val billingPhone: String = \"\", val shippingFirstName: String = \"\", val shippingLastName: String = \"\", val shippingCompany: String = \"\", val shippingAddress1: String = \"\", val shippingAddress2: String = \"\", val shippingCity: String = \"\", val shippingState: String = \"\", val shippingPostcode: String = \"\", val shippingCountry: String = \"\", val shippingPhone: String = \"\", val lineItems: String = \"\", val shippingLines: String = \"\", val feeLines: String = \"\", val taxLines: String = \"\", val metaData: String = \"\", @ColumnInfo(name = \"paymentUrl\", defaultValue = \"\") val paymentUrl: String = \"\", @ColumnInfo(name = \"isEditable\", defaultValue = \"1\") val isEditable: Boolean = true )"],"content":"@Query(\"SELECT * FROM OrderEntity WHERE localSiteId = :localSiteId AND status IN (:status)\")\n    abstract suspend fun getOrdersForSite(localSiteId: LocalId, status: List<String>): List<OrderEntity>","prompt":""},{"id":1464,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":["data class OrderEntity( @ColumnInfo(name = \"localSiteId\") val localSiteId: LocalId, val orderId: Long, val number: String = \"\", val status: String = \"\", val currency: String = \"\", val orderKey: String = \"\", val dateCreated: String = \"\", val dateModified: String = \"\", val total: String = \"\", val totalTax: String = \"\", val shippingTotal: String = \"\", val paymentMethod: String = \"\", val paymentMethodTitle: String = \"\", val datePaid: String = \"\", val pricesIncludeTax: Boolean = false, val customerNote: String = \"\", val discountTotal: String = \"\", val discountCodes: String = \"\", val refundTotal: BigDecimal = BigDecimal.ZERO, val billingFirstName: String = \"\", val billingLastName: String = \"\", val billingCompany: String = \"\", val billingAddress1: String = \"\", val billingAddress2: String = \"\", val billingCity: String = \"\", val billingState: String = \"\", val billingPostcode: String = \"\", val billingCountry: String = \"\", val billingEmail: String = \"\", val billingPhone: String = \"\", val shippingFirstName: String = \"\", val shippingLastName: String = \"\", val shippingCompany: String = \"\", val shippingAddress1: String = \"\", val shippingAddress2: String = \"\", val shippingCity: String = \"\", val shippingState: String = \"\", val shippingPostcode: String = \"\", val shippingCountry: String = \"\", val shippingPhone: String = \"\", val lineItems: String = \"\", val shippingLines: String = \"\", val feeLines: String = \"\", val taxLines: String = \"\", val metaData: String = \"\", @ColumnInfo(name = \"paymentUrl\", defaultValue = \"\") val paymentUrl: String = \"\", @ColumnInfo(name = \"isEditable\", defaultValue = \"1\") val isEditable: Boolean = true )"],"content":"@Query(\"SELECT * FROM OrderEntity WHERE localSiteId = :localSiteId\")\n    abstract suspend fun getOrdersForSite(localSiteId: LocalId): List<OrderEntity>","prompt":""},{"id":1465,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":[],"content":"@Query(\"SELECT * FROM OrderEntity WHERE localSiteId = :localSiteId\")\n    abstract fun observeOrdersForSite(localSiteId: LocalId): Flow<List<OrderEntity>>","prompt":""},{"id":1466,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":[],"content":"@Query(\"SELECT * FROM OrderEntity WHERE localSiteId = :localSiteId AND status IN (:status)\")\n    abstract fun observeOrdersForSite(localSiteId: LocalId, status: List<String>): Flow<List<OrderEntity>>","prompt":""},{"id":1467,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":["data class OrderEntity( @ColumnInfo(name = \"localSiteId\") val localSiteId: LocalId, val orderId: Long, val number: String = \"\", val status: String = \"\", val currency: String = \"\", val orderKey: String = \"\", val dateCreated: String = \"\", val dateModified: String = \"\", val total: String = \"\", val totalTax: String = \"\", val shippingTotal: String = \"\", val paymentMethod: String = \"\", val paymentMethodTitle: String = \"\", val datePaid: String = \"\", val pricesIncludeTax: Boolean = false, val customerNote: String = \"\", val discountTotal: String = \"\", val discountCodes: String = \"\", val refundTotal: BigDecimal = BigDecimal.ZERO, val billingFirstName: String = \"\", val billingLastName: String = \"\", val billingCompany: String = \"\", val billingAddress1: String = \"\", val billingAddress2: String = \"\", val billingCity: String = \"\", val billingState: String = \"\", val billingPostcode: String = \"\", val billingCountry: String = \"\", val billingEmail: String = \"\", val billingPhone: String = \"\", val shippingFirstName: String = \"\", val shippingLastName: String = \"\", val shippingCompany: String = \"\", val shippingAddress1: String = \"\", val shippingAddress2: String = \"\", val shippingCity: String = \"\", val shippingState: String = \"\", val shippingPostcode: String = \"\", val shippingCountry: String = \"\", val shippingPhone: String = \"\", val lineItems: String = \"\", val shippingLines: String = \"\", val feeLines: String = \"\", val taxLines: String = \"\", val metaData: String = \"\", @ColumnInfo(name = \"paymentUrl\", defaultValue = \"\") val paymentUrl: String = \"\", @ColumnInfo(name = \"isEditable\", defaultValue = \"1\") val isEditable: Boolean = true )"],"content":"@Query(\"SELECT * FROM OrderEntity WHERE localSiteId = :localSiteId AND orderId IN (:orderIds)\")\n    abstract fun getOrdersForSiteByRemoteIds(\n        localSiteId: LocalId,\n        orderIds: List<Long>\n    ): List<OrderEntity>","prompt":""},{"id":1468,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":[],"content":"@Query(\"DELETE FROM OrderEntity WHERE localSiteId = :localSiteId\")\n    abstract fun deleteOrdersForSite(localSiteId: LocalId)","prompt":""},{"id":1469,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM OrderEntity WHERE localSiteId = :localSiteId\")\n    abstract fun getOrderCountForSite(localSiteId: LocalId): Int","prompt":""},{"id":1470,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM OrderEntity WHERE localSiteId = :localSiteId AND status IN (:status)\")\n    abstract fun observeOrderCountForSite(localSiteId: LocalId, status: List<String>): Flow<Int>","prompt":""},{"id":1471,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrdersDao","requiredType":[],"content":"@Query(\"DELETE FROM OrderEntity WHERE localSiteId = :localSiteId AND orderId = :orderId\")\n    abstract suspend fun deleteOrder(localSiteId: LocalId, orderId: Long)","prompt":""},{"id":1472,"identifierName":"info.dvkr.switchmovie.data.repository.local.MovieDb","requiredType":[],"content":"fun toMovie(): Movie = Movie(id, posterPath, title, overview, releaseDate, voteAverage, popularity, isStar)","prompt":""},{"id":1473,"identifierName":"info.dvkr.switchmovie.data.repository.local.LocalDateConverter","requiredType":[],"content":"@TypeConverter\n    fun fromLocalDateToString(localDate: LocalDate): String = localDate.toString()","prompt":""},{"id":1474,"identifierName":"info.dvkr.switchmovie.data.repository.local.LocalDateConverter","requiredType":[],"content":"@TypeConverter\n    fun fromStringToLocalDate(localDateString: String): LocalDate = LocalDate.parse(localDateString)","prompt":""},{"id":1475,"identifierName":"info.dvkr.switchmovie.data.repository.local.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM movie_table where id = :movieId\")\n    suspend fun getMovieById(movieId: Long): MovieDb?","prompt":""},{"id":1476,"identifierName":"info.dvkr.switchmovie.data.repository.local.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM movie_table where id = :movieId\")\n    fun getMovieFlowById(movieId: Long): Flow<MovieDb>","prompt":""},{"id":1477,"identifierName":"info.dvkr.switchmovie.data.repository.local.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM movie_table ORDER BY popularity DESC\")\n    fun getAll(): Flow<List<MovieDb>>","prompt":""},{"id":1478,"identifierName":"info.dvkr.switchmovie.data.repository.local.MovieDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(movie: MovieDb)","prompt":""},{"id":1479,"identifierName":"info.dvkr.switchmovie.data.repository.local.MovieDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertAll(movies: List<MovieDb>)","prompt":""},{"id":1480,"identifierName":"info.dvkr.switchmovie.data.repository.local.MovieDao","requiredType":[],"content":"@Query(\"DELETE FROM movie_table\")\n    suspend fun deleteAll()","prompt":""},{"id":1481,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity\")\n    fun getFolders(): LiveData<List<FolderEntity>>","prompt":""},{"id":1482,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE uid = :id\")\n    fun getFolder(id: Int): LiveData<FolderEntity>","prompt":""},{"id":1483,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE folderName = :folderName\")\n    fun getFolderByName(folderName: String): LiveData<FolderEntity>","prompt":""},{"id":1484,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE folderName LIKE :query|| '%'\")\n    fun getFolderByQuery(query: String): LiveData<List<FolderEntity>>","prompt":""},{"id":1485,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE parentFolderName = :parentFolder\")\n    fun getFolderByParent(parentFolder: String): LiveData<List<FolderEntity>>","prompt":""},{"id":1486,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE parentFolderName = :parentFolder AND pinned = 0 AND locked = 0\")\n    fun getFolderByParentNoPinNoLock(parentFolder: String): LiveData<List<FolderEntity>>","prompt":""},{"id":1487,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE parentFolderName = :parentFolder AND pinned = 1 AND locked = 0\")\n    fun getFolderByParentPinNoLock(parentFolder: String): LiveData<List<FolderEntity>>","prompt":""},{"id":1488,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE parentFolderName = :parentFolder AND pinned = 0 AND locked = 1\")\n    fun getFolderByParentNoPinLock(parentFolder: String): LiveData<List<FolderEntity>>","prompt":""},{"id":1489,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE parentFolderName = :parentFolder AND pinned = 1 AND locked = 1\")\n    fun getFolderByParentPinLock(parentFolder: String): LiveData<List<FolderEntity>>","prompt":""},{"id":1490,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\" SELECT * FROM FolderEntity WHERE parentFolderName = :parentFolder ORDER BY pinned DESC\")\n    fun getFolderByParentOrdered(parentFolder: String): LiveData<List<FolderEntity>>","prompt":""},{"id":1491,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\" SELECT * FROM FolderEntity WHERE parentFolderName = :parentFolder ORDER BY locked DESC\")\n    fun getFolderByParentOrderedLock(parentFolder: String): LiveData<List<FolderEntity>>","prompt":""},{"id":1492,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE pinned = :isPinned\")\n    fun getFolderByPin(isPinned: Int): LiveData<List<FolderEntity>>","prompt":""},{"id":1493,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE locked = :isLocked\")\n    fun getFolderByLock(isLocked: Int): LiveData<List<FolderEntity>>","prompt":""},{"id":1494,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM FolderEntity WHERE color = :color\")\n    fun getFolderByColor(color: String): LiveData<List<FolderEntity>>","prompt":""},{"id":1495,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertFolders(vararg folderEntities: FolderEntity): LongArray","prompt":""},{"id":1496,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Delete\n    fun deleteFolders(vararg folderEntities: FolderEntity)","prompt":""},{"id":1497,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"DELETE FROM FolderEntity WHERE folderName = :folderName\")\n    fun deleteFolderByName(folderName: String)","prompt":""},{"id":1498,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"DELETE FROM FolderEntity WHERE parentFolderName = :parentFolderName\")\n    fun deleteFolderByParent(parentFolderName: String)","prompt":""},{"id":1499,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updateFolders(vararg folderEntities: FolderEntity): Int","prompt":""},{"id":1500,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"UPDATE FolderEntity SET pinned = :pin WHERE uid = :id\")\n    fun changeFolderPinStatus(id: Int, pin: Int)","prompt":""},{"id":1501,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"UPDATE FolderEntity SET locked = :lock WHERE uid = :id\")\n    fun changeFolderLockStatus(id: Int, lock: Int)","prompt":""},{"id":1502,"identifierName":"com.nrs.nsnik.notes.data.FolderDao","requiredType":[],"content":"@Query(\"UPDATE FolderEntity SET parentFolderName = :parentFolderName WHERE uid = :id\")\n    fun changeFolderParent(id: Int, parentFolderName: String)","prompt":""},{"id":1503,"identifierName":"io.tronalddump.app.quote.QuoteRepository","requiredType":["data class TagEntity( @get:Basic @get:Column(name = \"created_at\") open var createdAt: java.sql.Timestamp? = null, @get:JoinTable( name = \"quote_tag\", inverseJoinColumns = [JoinColumn(name = \"quote_id\")], joinColumns = [JoinColumn(name = \"tag_id\")] ) @get:OneToMany(fetch = FetchType.LAZY) open var quotes: List<QuoteEntity>? = emptyList(), @get:Id @get:Column(name = \"tag_id\", nullable = false, insertable = false, updatable = false) open var tagId: String? = null, @get:Basic @get:Column(name = \"updated_at\") open var updatedAt: java.sql.Timestamp? = null, @get:Basic @get:Column(name = \"value\") open var value: String? = null )"],"content":"fun findByTagsEquals(tag: TagEntity, pageable: Pageable): Page<QuoteEntity>","prompt":""},{"id":1504,"identifierName":"io.tronalddump.app.quote.QuoteRepository","requiredType":[],"content":"fun findByValueIgnoreCaseContaining(query: String, pageable: Pageable): Page<QuoteEntity>","prompt":""},{"id":1505,"identifierName":"io.tronalddump.app.quote.QuoteRepository","requiredType":[],"content":"@Query(\n            value = \"SELECT q.* FROM quote q ORDER BY RANDOM() LIMIT 1\",\n            nativeQuery = true\n    )\n    fun randomQuote(): Optional<QuoteEntity>","prompt":""},{"id":1506,"identifierName":"biz.eventually.atpl.data.dao.LastCallDao","requiredType":[],"content":"@Query(\"SELECT * FROM last_call WHERE type = :type\")\n    abstract fun findByType(type: String): LastCall?","prompt":""},{"id":1507,"identifierName":"biz.eventually.atpl.data.dao.LastCallDao","requiredType":["data class LastCall(@PrimaryKey val type: String)"],"content":"fun updateOrInsert(call: LastCall) {\n//        findByType(call.type)?.let {\n//            update(it)\n//        } ?: run {\n            insert(call)\n//        }\n    }","prompt":""},{"id":1508,"identifierName":"org.mtransit.android.datasource.ServiceUpdateProviderPropertiesDao","requiredType":[],"content":"@Query(\"SELECT * FROM service_update_provider_properties\")\n    fun getAllServiceUpdateProvider(): List<ServiceUpdateProviderProperties>","prompt":""},{"id":1509,"identifierName":"org.mtransit.android.datasource.ServiceUpdateProviderPropertiesDao","requiredType":[],"content":"@Query(\"SELECT * FROM service_update_provider_properties\")\n    fun readingAllServiceUpdateProvider(): LiveData<List<ServiceUpdateProviderProperties>>","prompt":""},{"id":1510,"identifierName":"org.mtransit.android.datasource.ServiceUpdateProviderPropertiesDao","requiredType":[],"content":"@Query(\"SELECT * FROM service_update_provider_properties WHERE authority = :authority\")\n    fun getServiceUpdateProvider(authority: String): ServiceUpdateProviderProperties","prompt":""},{"id":1511,"identifierName":"org.mtransit.android.datasource.ServiceUpdateProviderPropertiesDao","requiredType":[],"content":"@Query(\"SELECT * FROM service_update_provider_properties WHERE target_authority = :targetAuthority\")\n    fun getTargetAuthorityServiceUpdateProvider(targetAuthority: String): List<ServiceUpdateProviderProperties>","prompt":""},{"id":1512,"identifierName":"com.taylorsloan.jobseer.data.job.local.service.JobDao","requiredType":[],"content":"/**\n     * Insert Jobs into the local database\n     */\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insertJobs(jobs: List<LocalJob>)","prompt":""},{"id":1513,"identifierName":"com.taylorsloan.jobseer.data.job.local.service.JobDao","requiredType":["data class LocalJob(@PrimaryKey(autoGenerate = false) var id: String, var created_at: String?, var title: String?, var location: String?, var type: String?, var description: String?, var how_to_apply: String?, var company: String?, var company_url: String?, var company_logo: String?, var url: String?, var saved: Boolean? = false, val date_added: Long = System.currentTimeMillis())"],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insertJob(job: LocalJob)","prompt":""},{"id":1514,"identifierName":"com.taylorsloan.jobseer.data.job.local.service.JobDao","requiredType":[],"content":"@Query(\"SELECT * FROM jobs \" +\n            \"WHERE description LIKE :description \" +\n            \"AND saved = :saved \" +\n            \"AND location LIKE :location \" +\n            \"AND type = :type \" +\n            \"ORDER BY date_added ASC\")\n    fun loadJobs(description: String = \"%%\",\n                 saved: Int = 0,\n                 location: String = \"%%\",\n                 type: String = \"Full Time\") : Flowable<List<LocalJob>>","prompt":""},{"id":1515,"identifierName":"com.taylorsloan.jobseer.data.job.local.service.JobDao","requiredType":["data class LocalJob(@PrimaryKey(autoGenerate = false) var id: String, var created_at: String?, var title: String?, var location: String?, var type: String?, var description: String?, var how_to_apply: String?, var company: String?, var company_url: String?, var company_logo: String?, var url: String?, var saved: Boolean? = false, val date_added: Long = System.currentTimeMillis())"],"content":"@Query(\"SELECT * FROM jobs WHERE id = :id\")\n    fun loadJob(id: String) : Flowable<LocalJob>","prompt":""},{"id":1516,"identifierName":"com.taylorsloan.jobseer.data.job.local.service.JobDao","requiredType":[],"content":"@Query(\"UPDATE jobs SET saved = :saved WHERE id = :id\")\n    fun saveJob(saved: Int = 1, id: String) : Int","prompt":""},{"id":1517,"identifierName":"com.taylorsloan.jobseer.data.job.local.service.JobDao","requiredType":[],"content":"@Query(\"DELETE FROM jobs WHERE saved = 0\")\n    fun clearJobs()","prompt":""},{"id":1518,"identifierName":"com.nicoladefiorenze.room.database.dao.EmailDao","requiredType":[],"content":"@Query(\"SELECT * FROM email\")\n    fun getAllWithObservables(): Flowable<Email>","prompt":""},{"id":1519,"identifierName":"com.nicoladefiorenze.room.database.dao.EmailDao","requiredType":[],"content":"@Query(\"SELECT * FROM email \"\n            + \"INNER JOIN user ON user.id = email.user_id \"\n            + \"WHERE user.id = :arg0\")\n    fun getEmailsForUserWithObservables(userId: Int): Flowable<Email>","prompt":""},{"id":1520,"identifierName":"com.nicoladefiorenze.room.database.dao.EmailDao","requiredType":[],"content":"@Query(\"SELECT * FROM email\")\n    fun getAll(): List<Email>","prompt":""},{"id":1521,"identifierName":"com.nicoladefiorenze.room.database.dao.EmailDao","requiredType":[],"content":"@Query(\"SELECT * FROM email \"\n            + \"INNER JOIN user ON user.id = email.user_id \"\n            + \"WHERE user.id = :arg0\")\n    fun getEmailsForUser(userId: Int): List<Email>","prompt":""},{"id":1522,"identifierName":"com.nicoladefiorenze.room.database.dao.EmailDao","requiredType":[],"content":"@Insert\n    fun insertAll(vararg emails: Email)","prompt":""},{"id":1523,"identifierName":"com.nicoladefiorenze.room.database.dao.EmailDao","requiredType":[],"content":"@Delete\n    fun delete(email: Email)","prompt":""},{"id":1524,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.FavoriteDishDao","requiredType":[],"content":"@Query(\"SELECT * FROM favoriteDish WHERE tag = :tag\")\n    fun checkIfFavoriteDish(tag: String): List<FavoriteDish>","prompt":""},{"id":1525,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.FavoriteDishDao","requiredType":[],"content":"@Insert\n    fun insertFavouriteDish(favoriteDish: FavoriteDish)","prompt":""},{"id":1526,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.FavoriteDishDao","requiredType":[],"content":"@Query(\"DELETE FROM favoriteDish WHERE cafeteriaId = :cafeteriaId AND dishName = :dishName\")\n    fun deleteFavoriteDish(cafeteriaId: Int, dishName: String)","prompt":""},{"id":1527,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.FavoriteDishDao","requiredType":[],"content":"@Query(\"SELECT cafeteriaMenu.* FROM favoriteDish \" +\n            \"INNER JOIN cafeteriaMenu ON cafeteriaMenu.cafeteriaId = favoriteDish.cafeteriaId \" +\n            \"AND favoriteDish.dishName = cafeteriaMenu.name WHERE cafeteriaMenu.date = :dayMonthYear\")\n    fun getFavouritedCafeteriaMenuOnDate(dayMonthYear: String): List<CafeteriaMenu>","prompt":""},{"id":1528,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.FavoriteDishDao","requiredType":[],"content":"@Query(\"DELETE FROM favoriteDish\")\n    fun removeCache()","prompt":""},{"id":1529,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"SELECT * FROM movies WHERE movies_tmdbid=:tmdbId\")\n    fun getMovie(tmdbId: Int): SgMovie?","prompt":""},{"id":1530,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"SELECT * FROM movies ORDER BY movies_title COLLATE UNICODE ASC\")\n    fun getMoviesForExport(): List<SgMovie>","prompt":""},{"id":1531,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"SELECT COUNT(movies_tmdbid) FROM movies WHERE movies_tmdbid=:tmdbId\")\n    fun getCount(tmdbId: Int): Int","prompt":""},{"id":1532,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\n        \"\"\"SELECT movies_tmdbid FROM movies WHERE\n            (movies_incollection=1 OR movies_inwatchlist=1 OR movies_watched=1)\n            AND (\n            movies_last_updated IS NULL\n            OR (movies_released > :releasedAfter AND movies_last_updated < :updatedBeforeForReleasedAfter)\n            OR \n            movies_last_updated < :updatedBeforeAllOthers\n            )\"\"\"\n    )\n    fun getMoviesToUpdate(\n        releasedAfter: Long,\n        updatedBeforeForReleasedAfter: Long,\n        updatedBeforeAllOthers: Long\n    ): List<SgMovieTmdbId>","prompt":""},{"id":1533,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery(observedEntities = [SgMovie::class])\n    fun getWatchedMovies(query: SupportSQLiteQuery): PagingSource<Int, SgMovie>","prompt":""},{"id":1534,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\n        \"\"\"SELECT movies_tmdbid, movies_incollection, movies_inwatchlist, movies_watched, movies_plays\n            FROM movies WHERE movies_incollection=1 OR movies_inwatchlist=1 OR movies_watched=1\"\"\"\n    )\n    fun getMoviesOnListsOrWatched(): List<SgMovieFlags>","prompt":""},{"id":1535,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"SELECT movies_tmdbid, movies_incollection, movies_inwatchlist, movies_watched, movies_plays FROM movies\")\n    fun getMovieFlags(): List<SgMovieFlags>","prompt":""},{"id":1536,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\n        \"\"\"SELECT movies_tmdbid, movies_incollection, movies_inwatchlist, movies_watched, movies_plays\n            FROM movies WHERE movies_tmdbid=:tmdbId\"\"\"\n    )\n    fun getMovieFlags(tmdbId: Int): SgMovieFlags?","prompt":""},{"id":1537,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) FROM movies\")\n    fun countMovies(): Int","prompt":""},{"id":1538,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) as count, SUM(movies_runtime) as runtime FROM movies WHERE movies_inwatchlist = 1\")\n    fun getStatsInWatchlist(): MovieStats?","prompt":""},{"id":1539,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) as count, SUM(movies_runtime) as runtime FROM movies WHERE movies_incollection = 1\")\n    fun getStatsInCollection(): MovieStats?","prompt":""},{"id":1540,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"SELECT COUNT(_id) as count, SUM(movies_runtime) as runtime FROM movies WHERE movies_watched = 1\")\n    fun getStatsWatched(): MovieStats?","prompt":""},{"id":1541,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"SELECT movies_title FROM movies WHERE movies_tmdbid=:tmdbId\")\n    fun getMovieTitle(tmdbId: Int): String?","prompt":""},{"id":1542,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"UPDATE movies SET movies_watched = 0, movies_plays = 0 WHERE movies_tmdbid=:tmdbId\")\n    fun setNotWatchedAndRemovePlays(tmdbId: Int): Int","prompt":""},{"id":1543,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"UPDATE movies SET movies_watched = 1, movies_plays = movies_plays + 1 WHERE movies_tmdbid=:tmdbId\")\n    fun setWatchedAndAddPlay(tmdbId: Int): Int","prompt":""},{"id":1544,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"UPDATE movies SET movies_incollection = :inCollection WHERE movies_tmdbid=:tmdbId\")\n    fun updateInCollection(tmdbId: Int, inCollection: Boolean): Int","prompt":""},{"id":1545,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"UPDATE movies SET movies_inwatchlist = :inWatchlist WHERE movies_tmdbid=:tmdbId\")\n    fun updateInWatchlist(tmdbId: Int, inWatchlist: Boolean): Int","prompt":""},{"id":1546,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"@Query(\"DELETE FROM movies WHERE movies_tmdbid=:tmdbId\")\n    fun deleteMovie(tmdbId: Int): Int","prompt":""},{"id":1547,"identifierName":"com.battlelancer.seriesguide.movies.database.MovieHelper","requiredType":[],"content":"/**\n     * For testing.\n     */\n    @Query(\"SELECT * FROM movies\")\n    fun getAllMovies(): List<SgMovie>","prompt":""},{"id":1548,"identifierName":"org.fossasia.openevent.general.event.tax.TaxDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertTax(tax: Tax)","prompt":""},{"id":1549,"identifierName":"org.fossasia.openevent.general.event.tax.TaxDao","requiredType":[],"content":"@Query(\"SELECT * from Tax WHERE eventId = :eventId\")\n    fun getTaxDetails(eventId: Long): Single<Tax>","prompt":""},{"id":1550,"identifierName":"com.ridocula.restdroid.persistence.dao.HeaderDao","requiredType":[],"content":"@Query(\"SELECT * FROM header WHERE parent_Id = :requestId\")\n    fun getHeadersForRequest(requestId: String): Maybe<List<HeaderEntity>>","prompt":""},{"id":1551,"identifierName":"com.ridocula.restdroid.persistence.dao.HeaderDao","requiredType":[],"content":"@Query(\"SELECT * FROM header WHERE parent_Id = :responseId\")\n    fun getHeadersForResponse(responseId: String): Maybe<List<HeaderEntity>>","prompt":""},{"id":1552,"identifierName":"com.ridocula.restdroid.persistence.dao.HeaderDao","requiredType":["data class HeaderEntityconstructor( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"parent_id\") val parentId: String, @ColumnInfo(name = \"type\") val type: String, @ColumnInfo(name = \"key\") val key: String, @ColumnInfo(name = \"value\") val value: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(header: HeaderEntity)","prompt":""},{"id":1553,"identifierName":"com.ridocula.restdroid.persistence.dao.HeaderDao","requiredType":["data class HeaderEntityconstructor( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"parent_id\") val parentId: String, @ColumnInfo(name = \"type\") val type: String, @ColumnInfo(name = \"key\") val key: String, @ColumnInfo(name = \"value\") val value: String )"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun update(header: HeaderEntity)","prompt":""},{"id":1554,"identifierName":"com.ridocula.restdroid.persistence.dao.HeaderDao","requiredType":["data class HeaderEntityconstructor( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"parent_id\") val parentId: String, @ColumnInfo(name = \"type\") val type: String, @ColumnInfo(name = \"key\") val key: String, @ColumnInfo(name = \"value\") val value: String )"],"content":"@Delete\n    fun delete(header: HeaderEntity)","prompt":""},{"id":1555,"identifierName":"fi.lasicaine.nutritionalvalue.data.db.FavoritesDao","requiredType":[],"content":"@Query(\"SELECT * FROM favorites\")\n    fun loadAll(): LiveData<List<Food>>","prompt":""},{"id":1556,"identifierName":"fi.lasicaine.nutritionalvalue.data.db.FavoritesDao","requiredType":[],"content":"@Query(\"SELECT id FROM favorites\")\n    fun loadAllIds(): List<String>","prompt":""},{"id":1557,"identifierName":"fi.lasicaine.nutritionalvalue.data.db.FavoritesDao","requiredType":["data class Food( @PrimaryKey val id: String, val name: String, val type: String, var isFavorite: Boolean = false )"],"content":"@Insert(onConflict = IGNORE)\n    fun insert(food: Food)","prompt":""},{"id":1558,"identifierName":"fi.lasicaine.nutritionalvalue.data.db.FavoritesDao","requiredType":["data class Food( @PrimaryKey val id: String, val name: String, val type: String, var isFavorite: Boolean = false )"],"content":"@Delete\n    fun delete(food: Food)","prompt":""},{"id":1559,"identifierName":"com.searene.repository.Ip2LocationDb34Repository","requiredType":[],"content":"@Query(\"select location from Ip2LocationDb34 location where ?1 between location.ipFrom and location.ipTo\")\n    fun findLocation(ipv4: Long): Ip2LocationDb34","prompt":""},{"id":1560,"identifierName":"app.tivi.data.daos.LastRequestDao","requiredType":["data class LastRequest( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") override val id: Long = 0, @ColumnInfo(name = \"request\") val request: Request, @ColumnInfo(name = \"entity_id\") val entityId: Long, @ColumnInfo(name = \"timestamp\") val timestamp: Instant )"],"content":"@Query(\"SELECT * FROM last_requests WHERE request = :request AND entity_id = :entityId\")\n    abstract suspend fun lastRequest(request: Request, entityId: Long): LastRequest?","prompt":""},{"id":1561,"identifierName":"app.tivi.data.daos.LastRequestDao","requiredType":["data class LastRequest( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") override val id: Long = 0, @ColumnInfo(name = \"request\") val request: Request, @ColumnInfo(name = \"entity_id\") val entityId: Long, @ColumnInfo(name = \"timestamp\") val timestamp: Instant )"],"content":"@Query(\"SELECT COUNT(*) FROM last_requests WHERE request = :request AND entity_id = :entityId\")\n    abstract suspend fun requestCount(request: Request, entityId: Long): Int","prompt":""},{"id":1562,"identifierName":"app.tivi.data.daos.LastRequestDao","requiredType":["data class LastRequest( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") override val id: Long = 0, @ColumnInfo(name = \"request\") val request: Request, @ColumnInfo(name = \"entity_id\") val entityId: Long, @ColumnInfo(name = \"timestamp\") val timestamp: Instant )"],"content":"@Transaction\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract override suspend fun insert(entity: LastRequest): Long","prompt":""},{"id":1563,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.eros.history.database.ErosHistoryRecordDao","requiredType":[],"content":"@Query(\"SELECT * from historyrecords WHERE date >= :since order by date asc\")\n    fun allSinceAsc(since: Long): Single<List<ErosHistoryRecordEntity>>","prompt":""},{"id":1564,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.eros.history.database.ErosHistoryRecordDao","requiredType":[],"content":"@Query(\"SELECT * FROM historyrecords WHERE pumpId = :id LIMIT 1\")\n    fun byId(id: Long): Maybe<ErosHistoryRecordEntity>","prompt":""},{"id":1565,"identifierName":"info.nightscout.androidaps.plugins.pump.omnipod.eros.history.database.ErosHistoryRecordDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(ErosHistoryRecordEntity: ErosHistoryRecordEntity): Long","prompt":""},{"id":1566,"identifierName":"com.ak47.cms.cms.dao.TechArticleRepository","requiredType":[],"content":"@Query(\"select count(*) from #{#entityName} a where a.url = :url\")\n    fun countByUrl(@Param(\"url\") url: String): Int","prompt":""},{"id":1567,"identifierName":"com.ak47.cms.cms.dao.TechArticleRepository","requiredType":["data class TechArticleDtonull"],"content":"@Query(\"select new com.ak47.cms.cms.dto.TechArticleDto( a.id, a.url, a.title, a.simpleContent, a.showContent , a.tagId, b.tagDetail , a.category, a.gmtCreate, a.gmtModified ) \" +\n            \"from TechArticle a, TechArticleTag b where a.tagId = b.tagId order by a.id desc\")\n    fun listTechArticleDto(page: Pageable): Page<TechArticleDto>","prompt":""},{"id":1568,"identifierName":"com.ak47.cms.cms.dao.TechArticleRepository","requiredType":["data class TechArticleDtonull"],"content":"@Query(\"select new com.ak47.cms.cms.dto.TechArticleDto( a.id, a.url, a.title, a.simpleContent, a.showContent , a.tagId, b.tagDetail , a.category, a.gmtCreate, a.gmtModified ) \" +\n            \"from TechArticle a left join TechArticleTag b on a.tagId = b.tagId where a.title like %:searchText% or a.showContent  like %:searchText%  order by a.id desc\")\n    fun searchTechArticleDto(page: Pageable, @Param(\"searchText\") searchText: String): Page<TechArticleDto>","prompt":""},{"id":1569,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.transportation.TransportDao","requiredType":[],"content":"@Query(\"SELECT EXISTS(SELECT * FROM transport_favorites WHERE symbol = :symbol)\")\n    fun isFavorite(symbol: String): Boolean","prompt":""},{"id":1570,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.transportation.TransportDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun addFavorite(transportFavorites: TransportFavorites)","prompt":""},{"id":1571,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.transportation.TransportDao","requiredType":[],"content":"@Query(\"DELETE FROM transport_favorites WHERE symbol = :symbol\")\n    fun deleteFavorite(symbol: String)","prompt":""},{"id":1572,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.transportation.TransportDao","requiredType":[],"content":"@Query(\"SELECT * FROM widgets_transport WHERE id = :id\")\n    fun getAllWithId(id: Int): WidgetsTransport?","prompt":""},{"id":1573,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.transportation.TransportDao","requiredType":[],"content":"@Query(\"DELETE FROM widgets_transport WHERE id = :id\")\n    fun deleteWidget(id: Int)","prompt":""},{"id":1574,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.transportation.TransportDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun replaceWidget(widgetsTransport: WidgetsTransport)","prompt":""},{"id":1575,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.transportation.TransportDao","requiredType":[],"content":"@Query(\"DELETE FROM transport_favorites\")\n    fun removeCache()","prompt":""},{"id":1576,"identifierName":"com.waz.zclient.storage.db.teams.TeamsDao","requiredType":[],"content":"@Query(\"SELECT * FROM Teams\")\n    suspend fun allTeams(): List<TeamsEntity>","prompt":""},{"id":1577,"identifierName":"com.waz.zclient.storage.db.teams.TeamsDao","requiredType":[],"content":"@Insert\n    suspend fun insertTeam(team: TeamsEntity)","prompt":""},{"id":1578,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE id = :id\")\n    override fun findById(id: Long): TherapyEvent?","prompt":""},{"id":1579,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_THERAPY_EVENTS\")\n    override fun deleteAllEntries()","prompt":""},{"id":1580,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"@Query(\"SELECT id FROM $TABLE_THERAPY_EVENTS ORDER BY id DESC limit 1\")\n    fun getLastId(): Maybe<Long>","prompt":""},{"id":1581,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE type = :type AND timestamp = :timestamp AND referenceId IS NULL\")\n    fun findByTimestamp(type: TherapyEvent.Type, timestamp: Long): TherapyEvent?","prompt":""},{"id":1582,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":["data class TherapyEvent( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), override var duration: Long = 0, var type: Type, var note: String? = null, var enteredBy: String? = null, var glucose: Double? = null, var glucoseType: MeterType? = null, var glucoseUnit: GlucoseUnit, )"],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE type = :type AND referenceId IS NULL\")\n    fun getValidByType(type: TherapyEvent.Type): List<TherapyEvent>","prompt":""},{"id":1583,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE nightscoutId = :nsId AND referenceId IS NULL\")\n    fun findByNSId(nsId: String): TherapyEvent?","prompt":""},{"id":1584,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE timestamp >= :timestamp AND isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTherapyEventDataFromTime(timestamp: Long): Single<List<TherapyEvent>>","prompt":""},{"id":1585,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE type = :type AND timestamp >= :timestamp AND isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTherapyEventDataFromTime(timestamp: Long, type: TherapyEvent.Type): Single<List<TherapyEvent>>","prompt":""},{"id":1586,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE timestamp >= :timestamp AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTherapyEventDataIncludingInvalidFromTime(timestamp: Long): Single<List<TherapyEvent>>","prompt":""},{"id":1587,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":["data class TherapyEvent( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), override var duration: Long = 0, var type: Type, var note: String? = null, var enteredBy: String? = null, var glucose: Double? = null, var glucoseType: MeterType? = null, var glucoseUnit: GlucoseUnit, )"],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE type = :type AND isValid = 1 AND timestamp <= :now ORDER BY id DESC LIMIT 1\")\n    fun getLastTherapyRecord(type: TherapyEvent.Type, now: Long): Maybe<TherapyEvent>","prompt":""},{"id":1588,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE timestamp >= :timestamp AND isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun compatGetTherapyEventDataFromTime(timestamp: Long): Single<List<TherapyEvent>>","prompt":""},{"id":1589,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE timestamp >= :from AND timestamp <= :to AND isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun compatGetTherapyEventDataFromToTime(from: Long, to: Long): Single<List<TherapyEvent>>","prompt":""},{"id":1590,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":[],"content":"// This query will be used with v3 to get all changed records\n    @Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE id > :id AND referenceId IS NULL OR id IN (SELECT DISTINCT referenceId FROM $TABLE_THERAPY_EVENTS WHERE id > :id) ORDER BY id ASC\")\n    fun getModifiedFrom(id: Long): Single<List<TherapyEvent>>","prompt":""},{"id":1591,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":["data class TherapyEvent( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), override var duration: Long = 0, var type: Type, var note: String? = null, var enteredBy: String? = null, var glucose: Double? = null, var glucoseType: MeterType? = null, var glucoseUnit: GlucoseUnit, )"],"content":"// for WS we need 1 record only\n    @Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE id > :id ORDER BY id ASC limit 1\")\n    fun getNextModifiedOrNewAfter(id: Long): Maybe<TherapyEvent>","prompt":""},{"id":1592,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":["data class TherapyEvent( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), override var duration: Long = 0, var type: Type, var note: String? = null, var enteredBy: String? = null, var glucose: Double? = null, var glucoseType: MeterType? = null, var glucoseUnit: GlucoseUnit, )"],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE id = :referenceId\")\n    fun getCurrentFromHistoric(referenceId: Long): Maybe<TherapyEvent>","prompt":""},{"id":1593,"identifierName":"info.nightscout.androidaps.database.daos.TherapyEventDao","requiredType":["data class TherapyEvent( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), override var duration: Long = 0, var type: Type, var note: String? = null, var enteredBy: String? = null, var glucose: Double? = null, var glucoseType: MeterType? = null, var glucoseUnit: GlucoseUnit, )"],"content":"@Query(\"SELECT * FROM $TABLE_THERAPY_EVENTS WHERE dateCreated > :since AND dateCreated <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<TherapyEvent>","prompt":""},{"id":1594,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) from bookMetaData\")\n  suspend fun bookMetaDataCount(): Int","prompt":""},{"id":1595,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookMetaData\")\n  suspend fun bookMetaData(): List<LegacyBookMetaData>","prompt":""},{"id":1596,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookSettings\")\n  suspend fun settings(): List<LegacyBookSettings>","prompt":""},{"id":1597,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookSettings WHERE id = :id\")\n  suspend fun settingsById(id: UUID): LegacyBookSettings?","prompt":""},{"id":1598,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"SELECT * FROM chapters\")\n  suspend fun chapters(): List<LegacyChapter>","prompt":""},{"id":1599,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark\")\n  suspend fun bookmarks(): List<LegacyBookmark>","prompt":""},{"id":1600,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark WHERE file IN(:chapters)\")\n  suspend fun bookmarksByFiles(chapters: List<@JvmSuppressWildcards File>): List<LegacyBookmark>","prompt":""},{"id":1601,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"DELETE FROM bookmark\")\n  suspend fun deleteBookmarks()","prompt":""},{"id":1602,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"DELETE FROM chapters\")\n  suspend fun deleteChapters()","prompt":""},{"id":1603,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"DELETE FROM bookSettings\")\n  suspend fun deleteSettings()","prompt":""},{"id":1604,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"@Query(\"DELETE FROM bookMetaData\")\n  suspend fun deleteBookMetaData()","prompt":""},{"id":1605,"identifierName":"voice.data.repo.internals.dao.LegacyBookDao","requiredType":[],"content":"suspend fun deleteAll() {\n    deleteBookMetaData()\n    deleteSettings()\n    deleteChapters()\n    deleteBookmarks()\n  }","prompt":""},{"id":1606,"identifierName":"com.setiawanpaiman.sunnyreader.data.db.ItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM item\")\n    fun getAll(): List<Item>","prompt":""},{"id":1607,"identifierName":"com.setiawanpaiman.sunnyreader.data.db.ItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM item WHERE id = :id\")\n    fun findById(id: Long): Item?","prompt":""},{"id":1608,"identifierName":"com.setiawanpaiman.sunnyreader.data.db.ItemDao","requiredType":[],"content":"@Insert\n    fun insertAll(vararg items: Item)","prompt":""},{"id":1609,"identifierName":"com.setiawanpaiman.sunnyreader.data.db.ItemDao","requiredType":[],"content":"@Delete\n    fun delete(item: Item)","prompt":""},{"id":1610,"identifierName":"com.setiawanpaiman.sunnyreader.data.db.ItemDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM item\")\n    fun getCount(): Long","prompt":""},{"id":1611,"identifierName":"com.setiawanpaiman.sunnyreader.data.db.ItemDao","requiredType":[],"content":"@Query(\"DELETE FROM item WHERE id IN (SELECT id FROM item ORDER BY last_update ASC LIMIT :n)\")\n    fun removeOldestNData(n: Long)","prompt":""},{"id":1612,"identifierName":"com.setiawanpaiman.sunnyreader.data.db.ApplicationDatabase","requiredType":[],"content":"abstract fun itemDao(): ItemDao","prompt":""},{"id":1613,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"// Dictionary\n    @Query(\"SELECT _id, word, stripword FROM dictionary ORDER BY stripword ASC LIMIT :suggestLimit\")\n    fun querySuggestWord(suggestLimit: Int = 100): LiveData<List<DictionaryItem>>","prompt":""},{"id":1614,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"SELECT _id, word, stripword FROM dictionary WHERE stripword LIKE :searchWord ORDER BY stripword ASC LIMIT :limit\")\n    fun query(searchWord: String, limit: Int = 1000): LiveData<List<DictionaryItem>>","prompt":""},{"id":1615,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"SELECT _id FROM dictionary WHERE stripword LIKE :searchWord LIMIT 1\")\n    suspend fun queryId(searchWord: String): Long","prompt":""},{"id":1616,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"SELECT _id FROM dictionary WHERE stripword IS :searchWord ORDER BY stripword ASC\")\n    suspend fun queryExacted(searchWord: String) : List<Long>","prompt":""},{"id":1617,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"\"\"SELECT dictionary.*, converted.value AS def_zawgyi, favorites._id AS favorite_id \n        FROM dictionary \n        LEFT JOIN converted ON dictionary._id = converted.refrence_id AND mode = 'zawgyi'\n        LEFT JOIN favorites ON dictionary._id = favorites.refrence_id\n        WHERE dictionary._id IS :id LIMIT 1\"\"\")\n    fun queryDefinition(id: Long): LiveData<DefinitionItem>","prompt":""},{"id":1618,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertConverted(value: ConvertedItem): Long","prompt":""},{"id":1619,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"// Favorite\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertFavorite(value: FavoriteItem): Long","prompt":""},{"id":1620,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"DELETE FROM favorites WHERE _id IS :id\")\n    suspend fun deleteFavorite(id: Long)","prompt":""},{"id":1621,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"DELETE FROM favorites WHERE refrence_id IS :refId\")\n    suspend fun deleteFavoriteByRef(refId: Long)","prompt":""},{"id":1622,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Transaction\n    suspend fun deleteFavoriteAll(ids: List<Long?>) {\n        ids.forEach { pid ->\n            if (pid != null) {\n                deleteFavoriteByRef(pid)\n            }\n        }\n    }","prompt":""},{"id":1623,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"SELECT * FROM favorites ORDER BY timestamp DESC\")\n    fun queryFavorites() : LiveData<List<FavoriteItem>>","prompt":""},{"id":1624,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"SELECT * FROM favorites ORDER BY timestamp DESC LIMIT 3\")\n    fun queryTopFavorites() : List<FavoriteItem>","prompt":""},{"id":1625,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"SELECT * FROM favorites WHERE refrence_id IS :refId LIMIT 1\")\n    fun queryFavoriteByRef(refId: Long) : FavoriteItem?","prompt":""},{"id":1626,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"// History\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertHistory(value: HistoryItem): Long","prompt":""},{"id":1627,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"DELETE FROM histories WHERE _id IS :id\")\n    suspend fun deleteHistory(id: Long)","prompt":""},{"id":1628,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"DELETE FROM histories\")\n    suspend fun deleteAllHistory()","prompt":""},{"id":1629,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"SELECT * FROM histories ORDER BY timestamp DESC\")\n    fun queryHistories() : LiveData<List<HistoryItem>>","prompt":""},{"id":1630,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Query(\"SELECT * FROM histories WHERE refrence_id IS :refId LIMIT 1\")\n    fun queryHistoryByRef(refId: Long) : HistoryItem?","prompt":""},{"id":1631,"identifierName":"com.s16.engmyan.data.DataAccess","requiredType":[],"content":"@Transaction\n    suspend fun createHistory(word: String, refId: Long) : Long {\n        val item = queryHistoryByRef(refId) ?: HistoryItem(word = word, refId = refId)\n        item.timestamp = System.currentTimeMillis()\n        return insertHistory(item)\n    }","prompt":""},{"id":1632,"identifierName":"com.waz.zclient.storage.db.assets.AssetsV1Dao","requiredType":[],"content":"@Query(\"SELECT * FROM Assets\")\n    suspend fun allAssets(): List<AssetsV1Entity>","prompt":""},{"id":1633,"identifierName":"com.waz.zclient.storage.db.assets.AssetsV1Dao","requiredType":[],"content":"@Insert\n    suspend fun insertAsset(asset: AssetsV1Entity)","prompt":""},{"id":1634,"identifierName":"science.apolline.service.database.SensorDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM Device ORDER BY date desc LIMIT :nbDevice\")\n    fun getLastEntries(nbDevice: Long): Flowable<List<Device>>","prompt":""},{"id":1635,"identifierName":"science.apolline.service.database.SensorDao","requiredType":["data class Device( @SerializedName(\"uuid\") @Expose var uuid: String, @SerializedName(\"device\") @Expose var device: String, @SerializedName(\"date\") @Expose var date: Long, @SerializedName(\"position\") @Expose @Embedded var position: Position?, @SerializedName(\"data\") @Expose var data: JsonObject?, /** * 0 if not sync, 1 if sync */ @SerializedName(\"isSync\") @Expose var isSync: Int )"],"content":"@Transaction\n    @Query(\"SELECT * FROM Device WHERE date <= :actualSyncDate AND date > :lastSyncDate ORDER BY date ASC LIMIT :nbDevice\")\n    fun getUnSyncByDate(actualSyncDate: Long, lastSyncDate: Long,nbDevice: Long): List<Device>","prompt":""},{"id":1636,"identifierName":"science.apolline.service.database.SensorDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM Device WHERE date > :lastSyncDate\")\n    fun getSensorNotSyncCountByDate(lastSyncDate: Long): Long","prompt":""},{"id":1637,"identifierName":"science.apolline.service.database.SensorDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM Device WHERE date <= :actualSyncDate AND date > :lastSyncDate\")\n    fun getSensorNotSyncCountByDate(actualSyncDate: Long, lastSyncDate: Long): Long","prompt":""},{"id":1638,"identifierName":"science.apolline.service.database.SensorDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM Device WHERE date <= :lastSyncDate\")\n    fun getSensorSyncCountByDate(lastSyncDate: Long): Long","prompt":""},{"id":1639,"identifierName":"science.apolline.service.database.SensorDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM Device\")\n    fun getSensorCount(): Long","prompt":""},{"id":1640,"identifierName":"science.apolline.service.database.SensorDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM Device\")\n    fun getCount(): Flowable<Long>","prompt":""},{"id":1641,"identifierName":"science.apolline.service.database.SensorDao","requiredType":[],"content":"@Query(\"SELECT * FROM Device WHERE :dateStart <= date AND date <= :dateEnd LIMIT :MAX_DEVICE\")\n    fun getEntriesByDate(dateStart: Long, dateEnd: Long, MAX_DEVICE: Long): Flowable<List<Device>>","prompt":""},{"id":1642,"identifierName":"science.apolline.service.database.SensorDao","requiredType":["data class Device( @SerializedName(\"uuid\") @Expose var uuid: String, @SerializedName(\"device\") @Expose var device: String, @SerializedName(\"date\") @Expose var date: Long, @SerializedName(\"position\") @Expose @Embedded var position: Position?, @SerializedName(\"data\") @Expose var data: JsonObject?, /** * 0 if not sync, 1 if sync */ @SerializedName(\"isSync\") @Expose var isSync: Int )"],"content":"@Transaction\n    @Query(\"SELECT * FROM Device WHERE id=:idDevice\")\n    fun getSensorById(idDevice: Long): LiveData<Device>","prompt":""},{"id":1643,"identifierName":"science.apolline.service.database.SensorDao","requiredType":[],"content":"@Query(\"DELETE FROM Device WHERE date <= :lastSyncDate\")\n    fun deleteDataSyncByDate(lastSyncDate: Long)","prompt":""},{"id":1644,"identifierName":"science.apolline.service.database.SensorDao","requiredType":["data class Device( @SerializedName(\"uuid\") @Expose var uuid: String, @SerializedName(\"device\") @Expose var device: String, @SerializedName(\"date\") @Expose var date: Long, @SerializedName(\"position\") @Expose @Embedded var position: Position?, @SerializedName(\"data\") @Expose var data: JsonObject?, /** * 0 if not sync, 1 if sync */ @SerializedName(\"isSync\") @Expose var isSync: Int )"],"content":"@Transaction\n    @Query(\"SELECT * FROM Device\")\n    fun dumpSensor(): List<Device>","prompt":""},{"id":1645,"identifierName":"science.apolline.service.database.SensorDao","requiredType":[],"content":"@Query(\"DELETE FROM Device\")\n    fun flushSensorData()","prompt":""},{"id":1646,"identifierName":"science.apolline.service.database.SensorDao","requiredType":["data class Device( @SerializedName(\"uuid\") @Expose var uuid: String, @SerializedName(\"device\") @Expose var device: String, @SerializedName(\"date\") @Expose var date: Long, @SerializedName(\"position\") @Expose @Embedded var position: Position?, @SerializedName(\"data\") @Expose var data: JsonObject?, /** * 0 if not sync, 1 if sync */ @SerializedName(\"isSync\") @Expose var isSync: Int )"],"content":"@Insert(onConflict = REPLACE)\n    fun insert(vararg device: Device)","prompt":""},{"id":1647,"identifierName":"science.apolline.service.database.SensorDao","requiredType":["data class Device( @SerializedName(\"uuid\") @Expose var uuid: String, @SerializedName(\"device\") @Expose var device: String, @SerializedName(\"date\") @Expose var date: Long, @SerializedName(\"position\") @Expose @Embedded var position: Position?, @SerializedName(\"data\") @Expose var data: JsonObject?, /** * 0 if not sync, 1 if sync */ @SerializedName(\"isSync\") @Expose var isSync: Int )"],"content":"@Update(onConflict = REPLACE)\n    fun update(vararg device: Device)","prompt":""},{"id":1648,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationsDao","requiredType":[],"content":"@Query(\"SELECT * FROM Conversations\")\n    suspend fun allConversations(): List<ConversationsEntity>","prompt":""},{"id":1649,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationsDao","requiredType":[],"content":"@Insert\n    suspend fun insertConversation(conversation: ConversationsEntity)","prompt":""},{"id":1650,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationsDao","requiredType":[],"content":"@Query(\"SELECT * FROM Conversations ORDER BY _id LIMIT :batchSize OFFSET :start\")\n    override suspend fun nextBatch(start: Int, batchSize: Int): List<ConversationsEntity>?","prompt":""},{"id":1651,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationsDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM Conversations\")\n    override suspend fun count(): Int","prompt":""},{"id":1652,"identifierName":"org.fdroid.database.AppPrefsDao","requiredType":[],"content":"public fun getAppPrefs(packageName: String): LiveData<AppPrefs>","prompt":""},{"id":1653,"identifierName":"org.fdroid.database.AppPrefsDao","requiredType":[],"content":"public fun update(appPrefs: AppPrefs)","prompt":""},{"id":1654,"identifierName":"org.fdroid.database.AppPrefsDaoInt","requiredType":[],"content":"override fun getAppPrefs(packageName: String): LiveData<AppPrefs> {\n        return getLiveAppPrefs(packageName).distinctUntilChanged().map { data ->\n            data ?: AppPrefs(packageName)\n        }\n    }","prompt":""},{"id":1655,"identifierName":"org.fdroid.database.AppPrefsDaoInt","requiredType":[],"content":"@Query(\"SELECT * FROM ${AppPrefs.TABLE} WHERE packageName = :packageName\")\n    fun getLiveAppPrefs(packageName: String): LiveData<AppPrefs?>","prompt":""},{"id":1656,"identifierName":"org.fdroid.database.AppPrefsDaoInt","requiredType":[],"content":"@Query(\"SELECT * FROM ${AppPrefs.TABLE} WHERE packageName = :packageName\")\n    fun getAppPrefsOrNull(packageName: String): AppPrefs?","prompt":""},{"id":1657,"identifierName":"org.fdroid.database.AppPrefsDaoInt","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    override fun update(appPrefs: AppPrefs)","prompt":""},{"id":1658,"identifierName":"im.fdx.v2ex.ui.main.TopicDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertTopic(vararg topics: Topic)","prompt":""},{"id":1659,"identifierName":"im.fdx.v2ex.ui.main.TopicDao","requiredType":[],"content":"@Insert\n    fun insertBothTopic(topic1: Topic, topic2: Topic)","prompt":""},{"id":1660,"identifierName":"im.fdx.v2ex.ui.main.TopicDao","requiredType":[],"content":"@Update\n    fun updateTopic(vararg topic: Topic)","prompt":""},{"id":1661,"identifierName":"im.fdx.v2ex.ui.main.TopicDao","requiredType":[],"content":"@Delete\n    fun deleteTopic(vararg topic: Topic)","prompt":""},{"id":1662,"identifierName":"im.fdx.v2ex.ui.main.TopicDao","requiredType":[],"content":"@Query(\"SELECT * FROM topic WHERE replies > :replyNum\")\n    fun loadAllUsersOlderThan(replyNum: Int): List<Topic>","prompt":""},{"id":1663,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.WidgetsDao","requiredType":["data class Widget( @PrimaryKey(autoGenerate = true) var id: Int?, @ColumnInfo(name = \"widget_id\") var widgetId: Int, @ColumnInfo(name = \"folder_path\") var folderPath: String)"],"content":"@Query(\"SELECT * FROM widgets\")\n    fun getWidgets(): List<Widget>","prompt":""},{"id":1664,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.WidgetsDao","requiredType":["data class Widget( @PrimaryKey(autoGenerate = true) var id: Int?, @ColumnInfo(name = \"widget_id\") var widgetId: Int, @ColumnInfo(name = \"folder_path\") var folderPath: String)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertOrUpdate(widget: Widget): Long","prompt":""},{"id":1665,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.WidgetsDao","requiredType":[],"content":"@Query(\"DELETE FROM widgets WHERE widget_id = :widgetId\")\n    fun deleteWidgetId(widgetId: Int)","prompt":""},{"id":1666,"identifierName":"com.example.jetcaster.data.room.EpisodesDao","requiredType":["data class Episode( @PrimaryKey @ColumnInfo(name = \"uri\") val uri: String, @ColumnInfo(name = \"podcast_uri\") val podcastUri: String, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"subtitle\") val subtitle: String? = null, @ColumnInfo(name = \"summary\") val summary: String? = null, @ColumnInfo(name = \"author\") val author: String? = null, @ColumnInfo(name = \"published\") val published: OffsetDateTime, @ColumnInfo(name = \"duration\") val duration: Duration? = null )"],"content":"@Query(\n        \"\"\"\n        SELECT * FROM episodes WHERE uri = :uri\n        \"\"\"\n    )\n    abstract fun episode(uri: String): Flow<Episode>","prompt":""},{"id":1667,"identifierName":"com.example.jetcaster.data.room.EpisodesDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT * FROM episodes WHERE podcast_uri = :podcastUri\n        ORDER BY datetime(published) DESC\n        LIMIT :limit\n        \"\"\"\n    )\n    abstract fun episodesForPodcastUri(\n        podcastUri: String,\n        limit: Int\n    ): Flow<List<Episode>>","prompt":""},{"id":1668,"identifierName":"com.example.jetcaster.data.room.EpisodesDao","requiredType":[],"content":"@Transaction\n    @Query(\n        \"\"\"\n        SELECT episodes.* FROM episodes\n        INNER JOIN podcast_category_entries ON episodes.podcast_uri = podcast_category_entries.podcast_uri\n        WHERE category_id = :categoryId\n        ORDER BY datetime(published) DESC\n        LIMIT :limit\n        \"\"\"\n    )\n    abstract fun episodesFromPodcastsInCategory(\n        categoryId: Long,\n        limit: Int\n    ): Flow<List<EpisodeToPodcast>>","prompt":""},{"id":1669,"identifierName":"com.example.jetcaster.data.room.EpisodesDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM episodes\")\n    abstract suspend fun count(): Int","prompt":""},{"id":1670,"identifierName":"com.example.jetcaster.data.room.EpisodesDao","requiredType":["data class Episode( @PrimaryKey @ColumnInfo(name = \"uri\") val uri: String, @ColumnInfo(name = \"podcast_uri\") val podcastUri: String, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"subtitle\") val subtitle: String? = null, @ColumnInfo(name = \"summary\") val summary: String? = null, @ColumnInfo(name = \"author\") val author: String? = null, @ColumnInfo(name = \"published\") val published: OffsetDateTime, @ColumnInfo(name = \"duration\") val duration: Duration? = null )"],"content":"/**\n     * The following methods should really live in a base interface. Unfortunately the Kotlin\n     * Compiler which we need to use for Compose doesn't work with that.\n     * TODO: remove this once we move to a more recent Kotlin compiler\n     */\n\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insert(entity: Episode): Long","prompt":""},{"id":1671,"identifierName":"com.example.jetcaster.data.room.EpisodesDao","requiredType":["data class Episode( @PrimaryKey @ColumnInfo(name = \"uri\") val uri: String, @ColumnInfo(name = \"podcast_uri\") val podcastUri: String, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"subtitle\") val subtitle: String? = null, @ColumnInfo(name = \"summary\") val summary: String? = null, @ColumnInfo(name = \"author\") val author: String? = null, @ColumnInfo(name = \"published\") val published: OffsetDateTime, @ColumnInfo(name = \"duration\") val duration: Duration? = null )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insertAll(vararg entity: Episode)","prompt":""},{"id":1672,"identifierName":"com.example.jetcaster.data.room.EpisodesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insertAll(entities: Collection<Episode>)","prompt":""},{"id":1673,"identifierName":"com.example.jetcaster.data.room.EpisodesDao","requiredType":["data class Episode( @PrimaryKey @ColumnInfo(name = \"uri\") val uri: String, @ColumnInfo(name = \"podcast_uri\") val podcastUri: String, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"subtitle\") val subtitle: String? = null, @ColumnInfo(name = \"summary\") val summary: String? = null, @ColumnInfo(name = \"author\") val author: String? = null, @ColumnInfo(name = \"published\") val published: OffsetDateTime, @ColumnInfo(name = \"duration\") val duration: Duration? = null )"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun update(entity: Episode)","prompt":""},{"id":1674,"identifierName":"com.example.jetcaster.data.room.EpisodesDao","requiredType":["data class Episode( @PrimaryKey @ColumnInfo(name = \"uri\") val uri: String, @ColumnInfo(name = \"podcast_uri\") val podcastUri: String, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"subtitle\") val subtitle: String? = null, @ColumnInfo(name = \"summary\") val summary: String? = null, @ColumnInfo(name = \"author\") val author: String? = null, @ColumnInfo(name = \"published\") val published: OffsetDateTime, @ColumnInfo(name = \"duration\") val duration: Duration? = null )"],"content":"@Delete\n    abstract suspend fun delete(entity: Episode): Int","prompt":""},{"id":1675,"identifierName":"com.owncloud.android.data.user.db.UserDao","requiredType":[],"content":"@Query(SELECT_QUOTA)\n    abstract fun getQuotaForAccount(\n        accountName: String\n    ): UserQuotaEntity?","prompt":""},{"id":1676,"identifierName":"com.owncloud.android.data.user.db.UserDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insert(userQuotaEntity: UserQuotaEntity)","prompt":""},{"id":1677,"identifierName":"com.owncloud.android.data.user.db.UserDao","requiredType":[],"content":"@Query(DELETE_QUOTA)\n    abstract fun deleteQuotaForAccount(accountName: String)","prompt":""},{"id":1678,"identifierName":"fr.openium.auvergnewebcams.model.dao.WebcamDao","requiredType":[],"content":"@Query(\"SELECT * FROM Webcam WHERE uid == :webcamId LIMIT 1\")\n    fun getWebcam(webcamId: Long): Webcam?","prompt":""},{"id":1679,"identifierName":"fr.openium.auvergnewebcams.model.dao.WebcamDao","requiredType":[],"content":"@Query(\"SELECT * FROM Webcam WHERE uid == :webcamId LIMIT 1\")\n    fun getWebcamSingle(webcamId: Long): Single<Webcam?>","prompt":""},{"id":1680,"identifierName":"fr.openium.auvergnewebcams.model.dao.WebcamDao","requiredType":[],"content":"@Query(\"SELECT * FROM Webcam\")\n    fun getWebcamsSingle(): Single<List<Webcam>>","prompt":""},{"id":1681,"identifierName":"fr.openium.auvergnewebcams.model.dao.WebcamDao","requiredType":[],"content":"@Query(\"SELECT * FROM Webcam WHERE sectionUid == :sectionId\")\n    fun getWebcamsSingle(sectionId: Long): Single<List<Webcam>>","prompt":""},{"id":1682,"identifierName":"fr.openium.auvergnewebcams.model.dao.WebcamDao","requiredType":[],"content":"@Query(\"SELECT * FROM Webcam WHERE imageLD LIKE '%' || :url || '%' OR imageHD LIKE '%' || :url || '%' OR mediaViewSurfLD LIKE '%' || :url || '%' OR mediaViewSurfHD LIKE '%' || :url || '%' ORDER BY uid ASC LIMIT 1\")\n    fun getWebcamWithPartialUrl(url: String): Webcam?","prompt":""},{"id":1683,"identifierName":"fr.openium.auvergnewebcams.model.dao.WebcamDao","requiredType":[],"content":"@Update\n    fun update(webcam: Webcam): Int","prompt":""},{"id":1684,"identifierName":"fr.openium.auvergnewebcams.model.dao.WebcamDao","requiredType":[],"content":"@Update\n    fun update(webcams: List<Webcam>): Int","prompt":""},{"id":1685,"identifierName":"fr.openium.auvergnewebcams.model.dao.WebcamDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(webcam: Webcam): Long","prompt":""},{"id":1686,"identifierName":"fr.openium.auvergnewebcams.model.dao.WebcamDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(webcams: List<Webcam>): List<Long>","prompt":""},{"id":1687,"identifierName":"fr.openium.auvergnewebcams.model.dao.WebcamDao","requiredType":[],"content":"@Query(\"DELETE FROM Webcam WHERE (uid NOT IN (:map)) AND sectionUid == :sectionUid\")\n    fun deleteAllNoMoreInSection(map: List<Long>, sectionUid: Long)","prompt":""},{"id":1688,"identifierName":"com.nononsenseapps.feeder.db.room.ReadStatusSyncedDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insert(value: ReadStatusSynced): Long","prompt":""},{"id":1689,"identifierName":"com.nononsenseapps.feeder.db.room.ReadStatusSyncedDao","requiredType":[],"content":"@Update\n    suspend fun update(value: ReadStatusSynced): Int","prompt":""},{"id":1690,"identifierName":"com.nononsenseapps.feeder.db.room.ReadStatusSyncedDao","requiredType":[],"content":"@Delete\n    suspend fun delete(value: ReadStatusSynced): Int","prompt":""},{"id":1691,"identifierName":"com.nononsenseapps.feeder.db.room.ReadStatusSyncedDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            DELETE FROM read_status_synced\n        \"\"\"\n    )\n    suspend fun deleteAll(): Int","prompt":""},{"id":1692,"identifierName":"com.nononsenseapps.feeder.db.room.ReadStatusSyncedDao","requiredType":[],"content":"/**\n     * Sorts by id DESCENDING so new items always refreshes the flow\n     */\n    @Query(\n        \"\"\"\n            SELECT \n                fi.id AS $COL_ID,\n                f.id AS $COL_FEEDID,\n                fi.guid AS $COL_GUID,\n                f.url AS $COL_FEEDURL\n            FROM feed_items fi\n            JOIN feeds f ON f.id = fi.feed_id\n            WHERE\n                fi.unread IS 0 AND\n                fi.id NOT IN (\n                    SELECT feed_item\n                    FROM read_status_synced\n                )\n            ORDER BY fi.id DESC\n            LIMIT 1\n        \"\"\"\n    )\n    fun getNextFeedItemWithoutSyncedReadMark(): Flow<FeedItemForReadMark?>","prompt":""},{"id":1693,"identifierName":"com.nononsenseapps.feeder.db.room.ReadStatusSyncedDao","requiredType":[],"content":"/**\n     * Limits to 100 items\n     */\n    @Query(\n        \"\"\"\n            SELECT \n                fi.id AS $COL_ID,\n                f.id AS $COL_FEEDID,\n                fi.guid AS $COL_GUID,\n                f.url AS $COL_FEEDURL\n            FROM feed_items fi\n            JOIN feeds f ON f.id = fi.feed_id\n            WHERE\n                fi.unread IS 0 AND\n                fi.id NOT IN (\n                    SELECT feed_item\n                    FROM read_status_synced\n                )\n            ORDER BY fi.id DESC\n            LIMIT 100\n        \"\"\"\n    )\n    fun getFlowOfFeedItemsWithoutSyncedReadMark(): Flow<List<FeedItemForReadMark>>","prompt":""},{"id":1694,"identifierName":"com.nononsenseapps.feeder.db.room.ReadStatusSyncedDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            SELECT\n                fi.id AS $COL_ID,\n                f.id AS $COL_FEEDID,\n                fi.guid AS $COL_GUID,\n                f.url AS $COL_FEEDURL\n            FROM feed_items fi\n            JOIN feeds f ON f.id = fi.feed_id\n            WHERE\n                fi.unread IS 0 AND\n                fi.id NOT IN (\n                    SELECT feed_item\n                    FROM read_status_synced\n                )\n            ORDER BY fi.id DESC\n        \"\"\"\n    )\n    suspend fun getFeedItemsWithoutSyncedReadMark(): List<FeedItemForReadMark>","prompt":""},{"id":1695,"identifierName":"com.nononsenseapps.feeder.db.room.ReadStatusSyncedDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            DELETE FROM remote_read_mark\n            WHERE id in (:ids)\n        \"\"\"\n    )\n    suspend fun deleteReadStatusSyncs(ids: List<Long>): Int","prompt":""},{"id":1696,"identifierName":"com.nononsenseapps.feeder.db.room.ReadStatusSyncedDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            DELETE FROM read_status_synced\n            WHERE feed_item = :feedItemId\n        \"\"\"\n    )\n    suspend fun deleteReadStatusSyncForItem(feedItemId: Long): Int","prompt":""},{"id":1697,"identifierName":"com.androidarchitecture.data.local.user.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user WHERE first_name LIKE :arg0 LIMIT 1\")\n    override fun findByName(first: String): User?","prompt":""},{"id":1698,"identifierName":"com.androidarchitecture.data.local.user.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user WHERE uid LIKE :arg0 LIMIT 1\")\n    override  fun findById(uid: Int): User?","prompt":""},{"id":1699,"identifierName":"com.androidarchitecture.data.local.user.UserDao","requiredType":["data class Usernull"],"content":"@Insert(onConflict = REPLACE)\n    override fun saveUser(user: User)","prompt":""},{"id":1700,"identifierName":"data.tinder.recommendation.RecommendationLikeDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertLike(like: RecommendationLikeEntity)","prompt":""},{"id":1701,"identifierName":"data.tinder.recommendation.RecommendationLikeDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationLikeEntity WHERE id=:id\")\n  fun selectLikeById(id: String): List<RecommendationLikeEntity>","prompt":""},{"id":1702,"identifierName":"com.android.mdl.app.document.DocumentDao","requiredType":[],"content":"@Query(\"SELECT * FROM document\")\n    suspend fun getAll(): List<Document>","prompt":""},{"id":1703,"identifierName":"com.android.mdl.app.document.DocumentDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(document: Document)","prompt":""},{"id":1704,"identifierName":"com.android.mdl.app.document.DocumentDao","requiredType":[],"content":"@Delete\n    suspend fun delete(document: Document)","prompt":""},{"id":1705,"identifierName":"com.android.mdl.app.document.DocumentDao","requiredType":[],"content":"@Query(\"SELECT * FROM document WHERE identity_credential_name = :credentialName\")\n    suspend fun findById(credentialName: String): Document?","prompt":""},{"id":1706,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_TARGETS WHERE id = :id\")\n    override fun findById(id: Long): TemporaryTarget?","prompt":""},{"id":1707,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_TEMPORARY_TARGETS\")\n    override fun deleteAllEntries()","prompt":""},{"id":1708,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":[],"content":"@Query(\"SELECT id FROM $TABLE_TEMPORARY_TARGETS ORDER BY id DESC limit 1\")\n    fun getLastId(): Maybe<Long>","prompt":""},{"id":1709,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_TARGETS WHERE nightscoutId = :nsId AND referenceId IS NULL\")\n    fun findByNSId(nsId: String): TemporaryTarget?","prompt":""},{"id":1710,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":["data class TemporaryTarget( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var reason: Reason, var highTarget: Double, var lowTarget: Double, override var duration: Long // in millis )"],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_TARGETS WHERE timestamp <= :timestamp AND (timestamp + duration) > :timestamp AND referenceId IS NULL AND isValid = 1 ORDER BY timestamp DESC LIMIT 1\")\n    fun getTemporaryTargetActiveAt(timestamp: Long): Maybe<TemporaryTarget>","prompt":""},{"id":1711,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_TARGETS WHERE timestamp >= :timestamp AND isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTemporaryTargetDataFromTime(timestamp: Long): Single<List<TemporaryTarget>>","prompt":""},{"id":1712,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_TARGETS WHERE timestamp >= :timestamp AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTemporaryTargetDataIncludingInvalidFromTime(timestamp: Long): Single<List<TemporaryTarget>>","prompt":""},{"id":1713,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_TARGETS WHERE isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTemporaryTargetData(): Single<List<TemporaryTarget>>","prompt":""},{"id":1714,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":[],"content":"// This query will be used with v3 to get all changed records\n    @Query(\"SELECT * FROM $TABLE_TEMPORARY_TARGETS WHERE id > :id AND referenceId IS NULL OR id IN (SELECT DISTINCT referenceId FROM $TABLE_TEMPORARY_TARGETS WHERE id > :id) ORDER BY id ASC\")\n    fun getModifiedFrom(id: Long): Single<List<TemporaryTarget>>","prompt":""},{"id":1715,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":["data class TemporaryTarget( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var reason: Reason, var highTarget: Double, var lowTarget: Double, override var duration: Long // in millis )"],"content":"// for WS we need 1 record only\n    @Query(\"SELECT * FROM $TABLE_TEMPORARY_TARGETS WHERE id > :id ORDER BY id ASC limit 1\")\n    fun getNextModifiedOrNewAfter(id: Long): Maybe<TemporaryTarget>","prompt":""},{"id":1716,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":["data class TemporaryTarget( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var reason: Reason, var highTarget: Double, var lowTarget: Double, override var duration: Long // in millis )"],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_TARGETS WHERE id = :referenceId\")\n    fun getCurrentFromHistoric(referenceId: Long): Maybe<TemporaryTarget>","prompt":""},{"id":1717,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryTargetDao","requiredType":["data class TemporaryTarget( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var reason: Reason, var highTarget: Double, var lowTarget: Double, override var duration: Long // in millis )"],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_TARGETS WHERE dateCreated > :since AND dateCreated <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<TemporaryTarget>","prompt":""},{"id":1718,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM audios WHERE id NOT IN (:ids)\")\n    abstract suspend fun deleteExcept(ids: List<String>): Int","prompt":""},{"id":1719,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM audios ORDER BY page ASC, search_index ASC\")\n    abstract override fun entries(): Flow<List<Audio>>","prompt":""},{"id":1720,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"SELECT * FROM audios WHERE params = :params ORDER BY page ASC, search_index ASC\")\n    abstract fun entries(params: DatmusicSearchParams): Flow<List<Audio>>","prompt":""},{"id":1721,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"SELECT * FROM audios WHERE params = :params and page = :page ORDER BY page ASC, search_index ASC\")\n    abstract override fun entriesObservable(params: DatmusicSearchParams, page: Int): Flow<List<Audio>>","prompt":""},{"id":1722,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM audios ORDER BY page ASC, search_index ASC LIMIT :count OFFSET :offset\")\n    abstract override fun entriesObservable(count: Int, offset: Int): Flow<List<Audio>>","prompt":""},{"id":1723,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM audios ORDER BY page ASC, search_index ASC\")\n    abstract override fun entriesPagingSource(): PagingSource<Int, Audio>","prompt":""},{"id":1724,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Transaction\n    @Query(\"SELECT * FROM audios WHERE params = :params ORDER BY page ASC, search_index ASC\")\n    abstract override fun entriesPagingSource(params: DatmusicSearchParams): PagingSource<Int, Audio>","prompt":""},{"id":1725,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":["data class Audio( @SerialName(\"id\") @ColumnInfo(name = \"id\") override val id: String = \"\", @SerialName(\"key\") @ColumnInfo(name = \"key\") val searchKey: String = \"\", @SerialName(\"source_id\") @ColumnInfo(name = \"source_id\") val sourceId: String = \"\", @SerialName(\"artist\") @ColumnInfo(name = \"artist\") val artist: String = UNKNOWN_ARTIST, @SerialName(\"title\") @ColumnInfo(name = \"title\") val title: String = UNTITLED_SONG, @SerialName(\"duration\") @ColumnInfo(name = \"duration\") val duration: Int = 0, @SerialName(\"date\") @ColumnInfo(name = \"date\") val date: Long = 0L, @SerialName(\"album\") @ColumnInfo(name = \"album\") val album: String? = null, @SerialName(\"is_explicit\") @ColumnInfo(name = \"explicit\", defaultValue = \"0\") val explicit: Boolean = false, @SerialName(\"cover_url\") @ColumnInfo(name = \"cover_url\") val coverUrl: String? = null, @SerialName(\"cover_url_medium\") @ColumnInfo(name = \"cover_url_medium\") val coverUrlMedium: String? = null, @SerialName(\"cover_url_small\") @ColumnInfo(name = \"cover_url_small\") val coverUrlSmall: String? = null, @SerialName(\"cover\") @ColumnInfo(name = \"cover\") val coverAlternate: String = \"\", @SerialName(\"download\") @ColumnInfo(name = \"download\") val downloadUrl: String? = null, @SerialName(\"stream\") @ColumnInfo(name = \"stream\") val streamUrl: String? = null, @Transient @ColumnInfo(name = \"params\") override var params: String = defaultParams, @Transient @ColumnInfo(name = \"page\") override var page: Int = defaultPage, @PrimaryKey val primaryKey: String = \"\", @Transient @ColumnInfo(name = \"search_index\") val searchIndex: Int = 0, )"],"content":"@Transaction\n    @Query(\"SELECT * FROM audios WHERE id = :id\")\n    abstract override fun entry(id: String): Flow<Audio>","prompt":""},{"id":1726,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM audios WHERE id = :id\")\n    abstract override fun entryNullable(id: String): Flow<Audio?>","prompt":""},{"id":1727,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM audios WHERE id IN (:ids)\")\n    abstract override fun entriesById(ids: List<String>): Flow<List<Audio>>","prompt":""},{"id":1728,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":[],"content":"@Query(\"DELETE FROM audios WHERE id = :id\")\n    abstract override suspend fun delete(id: String): Int","prompt":""},{"id":1729,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"DELETE FROM audios WHERE params = :params\")\n    abstract override suspend fun delete(params: DatmusicSearchParams): Int","prompt":""},{"id":1730,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"DELETE FROM audios WHERE params = :params and page = :page\")\n    abstract override suspend fun delete(params: DatmusicSearchParams, page: Int): Int","prompt":""},{"id":1731,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":[],"content":"@Query(\"DELETE FROM audios\")\n    abstract override suspend fun deleteAll(): Int","prompt":""},{"id":1732,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"SELECT MAX(page) from audios WHERE params = :params\")\n    abstract override suspend fun getLastPage(params: DatmusicSearchParams): Int?","prompt":""},{"id":1733,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"SELECT COUNT(*) from audios where params = :params\")\n    abstract override suspend fun count(params: DatmusicSearchParams): Int","prompt":""},{"id":1734,"identifierName":"tm.alashow.datmusic.data.db.daos.AudiosDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) from audios where id = :id\")\n    abstract override suspend fun has(id: String): Int","prompt":""},{"id":1735,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.platform.RoomGamePlatformService","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(data: RoomPlatform): Long","prompt":""},{"id":1736,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.platform.RoomGamePlatformService","requiredType":[],"content":"@Query(\"select platform.* from platform \" +\n            \"LEFT JOIN game_platform ON platform.id = game_platform.platformId \" +\n            \"WHERE game_platform.gameId = :id\")\n    fun findForGame(id: Int): Flowable<List<RoomPlatform>>","prompt":""},{"id":1737,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.platform.RoomGamePlatformService","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertGamePlatform(data: RoomGamePlatform): Long","prompt":""},{"id":1738,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.platform.RoomGamePlatformService","requiredType":[],"content":"@Query(\"select * from platform WHERE id = :id\")\n    fun find(id: Int): Flowable<RoomPlatform>","prompt":""},{"id":1739,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun listen(): Channel<Player?>","prompt":""},{"id":1740,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun find(): Player?","prompt":""},{"id":1741,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun save(entity: Player): Player","prompt":""},{"id":1742,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun hasPlayer(): Boolean","prompt":""},{"id":1743,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun findAllForSync(lastSync: Duration<Millisecond>): List<Player>","prompt":""},{"id":1744,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun findFriend(friendId: String): Player","prompt":""},{"id":1745,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun findAll(playerIds: List<String>): List<Player>","prompt":""},{"id":1746,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun isUsernameAvailable(username: String): Boolean","prompt":""},{"id":1747,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun addUsername(\n        username: String\n    )","prompt":""},{"id":1748,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun removeUsername(username: String)","prompt":""},{"id":1749,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun findSchemaVersion(): Int?","prompt":""},{"id":1750,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun saveStatistics(stats: Statistics): Statistics","prompt":""},{"id":1751,"identifierName":"io.ipoli.android.player.persistence.PlayerRepository","requiredType":[],"content":"fun delete()","prompt":""},{"id":1752,"identifierName":"io.ipoli.android.player.persistence.PlayerDao","requiredType":[],"content":"@Query(\"SELECT * FROM players LIMIT 1\")\n    abstract fun find(): RoomPlayer?","prompt":""},{"id":1753,"identifierName":"io.ipoli.android.player.persistence.PlayerDao","requiredType":[],"content":"@Query(\"SELECT * FROM players WHERE id = :id\")\n    abstract fun findById(id: String): RoomPlayer","prompt":""},{"id":1754,"identifierName":"io.ipoli.android.player.persistence.PlayerDao","requiredType":[],"content":"@Query(\"SELECT * FROM players WHERE id = :id\")\n    abstract fun listenById(id: String): LiveData<RoomPlayer>","prompt":""},{"id":1755,"identifierName":"io.ipoli.android.player.persistence.PlayerDao","requiredType":[],"content":"@Query(\"SELECT * FROM players LIMIT 1\")\n    abstract fun listen(): LiveData<RoomPlayer>","prompt":""},{"id":1756,"identifierName":"io.ipoli.android.player.persistence.PlayerDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM players\")\n    abstract fun count(): Int","prompt":""},{"id":1757,"identifierName":"io.ipoli.android.player.persistence.PlayerDao","requiredType":[],"content":"@Query(\"SELECT * FROM players $FIND_SYNC_QUERY\")\n    abstract fun findAllForSync(lastSync: Long): List<RoomPlayer>","prompt":""},{"id":1758,"identifierName":"io.ipoli.android.player.persistence.PlayerDao","requiredType":[],"content":"@Query(\"DELETE FROM players\")\n    abstract fun delete()","prompt":""},{"id":1759,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun save(entities: List<Player>): List<Player> {\n        TODO(\"not implemented\")\n    }","prompt":""},{"id":1760,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun findAllForSync(lastSync: Duration<Millisecond>) =\n        dao.findAllForSync(lastSync.millisValue).map { toEntityObject(it) }","prompt":""},{"id":1761,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun findFriend(friendId: String) =\n        FirestorePlayerRepository(database).findFriend(friendId)","prompt":""},{"id":1762,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun findAll(playerIds: List<String>) =\n        FirestorePlayerRepository(database).findAll(playerIds)","prompt":""},{"id":1763,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun save(entity: Player): Player {\n        val rp = toDatabaseObject(entity)\n        dao.save(rp)\n        return entity.copy(id = rp.id)\n    }","prompt":""},{"id":1764,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun hasPlayer(): Boolean {\n        return dao.count() > 0\n    }","prompt":""},{"id":1765,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun findSchemaVersion(): Int? {\n        return find()?.schemaVersion\n    }","prompt":""},{"id":1766,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun saveStatistics(stats: Statistics): Statistics {\n        save(find()!!.copy(statistics = stats))\n        return stats\n    }","prompt":""},{"id":1767,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun listen() =\n        dao.listen().distinct().notifySingle()","prompt":""},{"id":1768,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun find(): Player? {\n        return dao.find()?.let {\n            toEntityObject(it)\n        }\n    }","prompt":""},{"id":1769,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun delete() {\n        dao.delete()\n    }","prompt":""},{"id":1770,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"private fun createPetEquipment(dbPet: DbPet): PetEquipment {\n        val e = DbPetEquipment(dbPet.equipment)\n        val toPetItem: (String?) -> PetItem? = { it?.let { i -> PetItem.valueOf(i) } }\n        return PetEquipment(toPetItem(e.hat), toPetItem(e.mask), toPetItem(e.bodyArmor))\n    }","prompt":""},{"id":1771,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun toDatabaseObject(entity: Player) =\n        RoomPlayer(\n            id = if (entity.id.isEmpty()) UUID.randomUUID().toString() else entity.id,\n            username = entity.username,\n            displayName = entity.displayName,\n            bio = entity.bio,\n            schemaVersion = entity.schemaVersion.toLong(),\n            health = DbHealth().apply {\n                current = entity.health.current.toLong()\n                max = entity.health.max.toLong()\n            }.map,\n            attributes = entity.attributes.map {\n                val value = it.value\n                val dbAttribute = DbAttribute().apply {\n                    type = it.key.name\n                    points = value.points.toLong()\n                    level = value.level.toLong()\n                    pointsForNextLevel = value.pointsForNextLevel.toLong()\n                    tagIds = value.tags.map { t -> t.id }\n                }\n                it.key.name to dbAttribute.map\n            }.toMap().toMutableMap(),\n            level = entity.level.toLong(),\n            coins = entity.coins.toLong(),\n            gems = entity.gems.toLong(),\n            experience = entity.experience,\n            authProvider = entity.authProvider?.let { createDbAuthProvider(it).map },\n            avatar = entity.avatar.name,\n            pet = createDbPet(entity.pet).map,\n            inventory = createDbInventory(entity.inventory).map,\n            membership = entity.membership.name,\n            preferences = createDbPreferences(entity.preferences).map,\n            achievements = createDbAchievements(entity.achievements),\n            statistics = createDbStatistics(entity.statistics),\n            updatedAt = System.currentTimeMillis(),\n            createdAt = entity.createdAt.toEpochMilli(),\n            removedAt = entity.removedAt?.toEpochMilli()\n        )","prompt":""},{"id":1772,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"private fun createDbPet(pet: Pet) =\n        DbPet().also {\n            it.name = pet.name\n            it.avatar = pet.avatar.name\n            it.equipment = createDbPetEquipment(pet.equipment).map\n            it.healthPoints = pet.healthPoints.toLong()\n            it.moodPoints = pet.moodPoints.toLong()\n            it.coinBonus = pet.coinBonus\n            it.experienceBonus = pet.experienceBonus\n            it.itemDropBonus = pet.itemDropBonus\n        }","prompt":""},{"id":1773,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"private fun createDbPetEquipment(equipment: PetEquipment) =\n        DbPetEquipment().also {\n            it.hat = equipment.hat?.name\n            it.mask = equipment.mask?.name\n            it.bodyArmor = equipment.bodyArmor?.name\n        }","prompt":""},{"id":1774,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"private fun createDbAuthProvider(authProvider: AuthProvider) =\n\n        when (authProvider) {\n            is AuthProvider.Google -> {\n                DbAuthProvider().also {\n                    it.userId = authProvider.userId\n                    it.email = authProvider.email\n                    it.displayName = authProvider.displayName\n                    it.image = authProvider.imageUrl?.toString()\n                    it.provider = GoogleAuthProvider.PROVIDER_ID\n                }\n            }\n\n            is AuthProvider.Facebook -> {\n                DbAuthProvider().also {\n                    it.userId = authProvider.userId\n                    it.email = authProvider.email\n                    it.displayName = authProvider.displayName\n                    it.image = authProvider.imageUrl?.toString()\n                    it.provider = FacebookAuthProvider.PROVIDER_ID\n                }\n            }\n        }","prompt":""},{"id":1775,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"private fun createDbInventory(inventory: Inventory) =\n        DbInventory().also {\n            it.food = inventory.food.entries\n                .associate { it.key.name to it.value.toLong() }\n                .toMutableMap()\n            it.avatars = inventory.avatars.map { it.name }\n            it.powerUps = mutableMapOf()\n            it.pets = inventory.pets\n                .map { createDbInventoryPet(it).map }\n            it.themes = inventory.themes.map { it.name }\n            it.colorPacks = inventory.colorPacks.map { it.name }\n            it.iconPacks = inventory.iconPacks.map { it.name }\n            it.presetChallengeIds = inventory.presetChallengeIds.toList()\n        }","prompt":""},{"id":1776,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"private fun createDbInventoryPet(inventoryPet: InventoryPet) =\n        DbInventoryPet().also {\n            it.name = inventoryPet.name\n            it.avatar = inventoryPet.avatar.name\n            it.items = inventoryPet.items.map { it.name }\n        }","prompt":""},{"id":1777,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"private fun createDbPreferences(preferences: Player.Preferences) =\n        DbPreferences().also {\n            it.theme = preferences.theme.name\n            it.syncCalendars = preferences.syncCalendars.map { c ->\n                DbSyncCalendar().also {\n                    it.id = c.id\n                    it.name = c.name\n                }.map\n            }\n            it.productiveTimesOfDay = preferences.productiveTimesOfDay.map { it.name }\n            it.workDays = preferences.workDays.map { it.name }\n            it.workStartMinute = preferences.workStartTime.toMinuteOfDay().toLong()\n            it.workEndMinute = preferences.workEndTime.toMinuteOfDay().toLong()\n            it.sleepStartMinute = preferences.sleepStartTime.toMinuteOfDay().toLong()\n            it.sleepEndMinute = preferences.sleepEndTime.toMinuteOfDay().toLong()\n            it.timeFormat = preferences.timeFormat.name\n            it.temperatureUnit = preferences.temperatureUnit.name\n            it.planDayStartMinute = preferences.planDayTime.toMinuteOfDay().toLong()\n            it.planDays = preferences.planDays.map { it.name }\n            it.isQuickDoNotificationEnabled = preferences.isQuickDoNotificationEnabled\n            it.resetDayStartMinute = preferences.resetDayTime.toMinuteOfDay().toLong()\n            it.agendaStartScreen = preferences.agendaStartScreen.name\n            it.reminderNotificationStyle = preferences.reminderNotificationStyle.name\n            it.planDayNotificationStyle = preferences.planDayNotificationStyle.name\n            it.isAutoPostingEnabled = preferences.isAutoPostingEnabled\n        }","prompt":""},{"id":1778,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"private fun createDbAchievements(achievements: List<Player.UnlockedAchievement>) =\n        achievements.map { a ->\n            DbUnlockedAchievement().also {\n                it.achievement = a.achievement.name\n                it.unlockMinute = a.unlockTime.toMinuteOfDay().toLong()\n                it.unlockDate = a.unlockDate.startOfDayUTC()\n            }.map\n        }","prompt":""},{"id":1779,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun isUsernameAvailable(username: String): Boolean = runBlocking {\n        suspendCoroutine<Boolean> { continuation ->\n            val usernameRef = usernamesReference.document(username.toLowerCase())\n            var registration: ListenerRegistration? = null\n            registration = usernameRef.addSnapshotListener(\n                MetadataChanges.INCLUDE\n            ) { snapshot, error ->\n\n                if (error != null) {\n                    ErrorLogger.log(error)\n                    registration?.remove()\n                    return@addSnapshotListener\n                }\n\n                if (!snapshot!!.metadata.isFromCache) {\n                    registration?.remove()\n                    continuation.resume(!snapshot.exists())\n                }\n            }\n        }\n    }","prompt":""},{"id":1780,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun addUsername(\n        username: String\n    ) {\n        Tasks.await(\n            usernamesReference.document(username.toLowerCase()).set(\n                mapOf(\n                    \"username\" to username\n                )\n            )\n        )\n    }","prompt":""},{"id":1781,"identifierName":"io.ipoli.android.player.persistence.AndroidPlayerRepository","requiredType":[],"content":"override fun removeUsername(username: String) {\n        Tasks.await(usernamesReference.document(username).delete())\n    }","prompt":""},{"id":1782,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"private fun createPetEquipment(dbPet: DbPet): PetEquipment {\n        val e = DbPetEquipment(dbPet.equipment)\n        val toPetItem: (String?) -> PetItem? = { it?.let { PetItem.valueOf(it) } }\n        return PetEquipment(toPetItem(e.hat), toPetItem(e.mask), toPetItem(e.bodyArmor))\n    }","prompt":""},{"id":1783,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"override fun toDatabaseObject(entity: Player) =\n        DbPlayer().also {\n            it.id = entity.id\n            it.username = entity.username\n            it.displayName = entity.displayName\n            it.bio = entity.bio\n            it.schemaVersion = entity.schemaVersion.toLong()\n            it.health = DbHealth().apply {\n                current = entity.health.current.toLong()\n                max = entity.health.max.toLong()\n            }.map\n            it.attributes = entity.attributes.map { a ->\n                val value = a.value\n                val dbAttribute = DbAttribute().apply {\n                    type = a.key.name\n                    points = value.points.toLong()\n                    level = value.level.toLong()\n                    pointsForNextLevel = value.pointsForNextLevel.toLong()\n                    tagIds = value.tags.map { t -> t.id }\n                }\n                a.key.name to dbAttribute.map\n            }.toMap().toMutableMap()\n            it.level = entity.level.toLong()\n            it.coins = entity.coins.toLong()\n            it.gems = entity.gems.toLong()\n            it.experience = entity.experience\n            it.authProvider = entity.authProvider?.let { createDbAuthProvider(it).map }\n            it.avatar = entity.avatar.name\n            it.createdAt = entity.createdAt.toEpochMilli()\n            it.updatedAt = entity.updatedAt.toEpochMilli()\n            it.removedAt = entity.removedAt?.toEpochMilli()\n            it.pet = createDbPet(entity.pet).map\n            it.inventory = createDbInventory(entity.inventory).map\n            it.membership = entity.membership.name\n            it.preferences = createDbPreferences(entity.preferences).map\n            it.achievements = createDbAchievements(entity.achievements)\n            it.statistics = createDbStatistics(entity.statistics)\n        }","prompt":""},{"id":1784,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"private fun createDbPet(pet: Pet) =\n        DbPet().also {\n            it.name = pet.name\n            it.avatar = pet.avatar.name\n            it.equipment = createDbPetEquipment(pet.equipment).map\n            it.healthPoints = pet.healthPoints.toLong()\n            it.moodPoints = pet.moodPoints.toLong()\n            it.coinBonus = pet.coinBonus\n            it.experienceBonus = pet.experienceBonus\n            it.itemDropBonus = pet.itemDropBonus\n        }","prompt":""},{"id":1785,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"private fun createDbPetEquipment(equipment: PetEquipment) =\n        DbPetEquipment().also {\n            it.hat = equipment.hat?.name\n            it.mask = equipment.mask?.name\n            it.bodyArmor = equipment.bodyArmor?.name\n        }","prompt":""},{"id":1786,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"private fun createDbAuthProvider(authProvider: AuthProvider) =\n\n        when (authProvider) {\n            is AuthProvider.Google -> {\n                DbAuthProvider().also {\n                    it.userId = authProvider.userId\n                    it.email = authProvider.email\n                    it.displayName = authProvider.displayName\n                    it.image = authProvider.imageUrl?.toString()\n                    it.provider = GoogleAuthProvider.PROVIDER_ID\n                }\n            }\n\n            is AuthProvider.Facebook -> {\n                DbAuthProvider().also {\n                    it.userId = authProvider.userId\n                    it.email = authProvider.email\n                    it.displayName = authProvider.displayName\n                    it.image = authProvider.imageUrl?.toString()\n                    it.provider = FacebookAuthProvider.PROVIDER_ID\n                }\n            }\n        }","prompt":""},{"id":1787,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"private fun createDbInventory(inventory: Inventory) =\n        DbInventory().also {\n            it.food = inventory.food.entries\n                .associate { it.key.name to it.value.toLong() }\n                .toMutableMap()\n            it.avatars = inventory.avatars.map { it.name }\n            it.powerUps = mutableMapOf()\n            it.pets = inventory.pets\n                .map { createDbInventoryPet(it).map }\n            it.themes = inventory.themes.map { it.name }\n            it.colorPacks = inventory.colorPacks.map { it.name }\n            it.iconPacks = inventory.iconPacks.map { it.name }\n            it.presetChallengeIds = inventory.presetChallengeIds.toList()\n        }","prompt":""},{"id":1788,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"private fun createDbInventoryPet(inventoryPet: InventoryPet) =\n        DbInventoryPet().also {\n            it.name = inventoryPet.name\n            it.avatar = inventoryPet.avatar.name\n            it.items = inventoryPet.items.map { it.name }\n        }","prompt":""},{"id":1789,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"private fun createDbPreferences(preferences: Player.Preferences) =\n        DbPreferences().also {\n            it.theme = preferences.theme.name\n            it.syncCalendars = preferences.syncCalendars.map { c ->\n                DbSyncCalendar().also {\n                    it.id = c.id\n                    it.name = c.name\n                }.map\n            }\n            it.productiveTimesOfDay = preferences.productiveTimesOfDay.map { it.name }\n            it.workDays = preferences.workDays.map { it.name }\n            it.workStartMinute = preferences.workStartTime.toMinuteOfDay().toLong()\n            it.workEndMinute = preferences.workEndTime.toMinuteOfDay().toLong()\n            it.sleepStartMinute = preferences.sleepStartTime.toMinuteOfDay().toLong()\n            it.sleepEndMinute = preferences.sleepEndTime.toMinuteOfDay().toLong()\n            it.timeFormat = preferences.timeFormat.name\n            it.temperatureUnit = preferences.temperatureUnit.name\n            it.planDayStartMinute = preferences.planDayTime.toMinuteOfDay().toLong()\n            it.planDays = preferences.planDays.map { it.name }\n            it.isQuickDoNotificationEnabled = preferences.isQuickDoNotificationEnabled\n            it.resetDayStartMinute = preferences.resetDayTime.toMinuteOfDay().toLong()\n            it.agendaStartScreen = preferences.agendaStartScreen.name\n            it.reminderNotificationStyle = preferences.reminderNotificationStyle.name\n            it.planDayNotificationStyle = preferences.planDayNotificationStyle.name\n            it.isAutoPostingEnabled = preferences.isAutoPostingEnabled\n        }","prompt":""},{"id":1790,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"private fun createDbAchievements(achievements: List<Player.UnlockedAchievement>) =\n        achievements.map { a ->\n            DbUnlockedAchievement().also {\n                it.achievement = a.achievement.name\n                it.unlockMinute = a.unlockTime.toMinuteOfDay().toLong()\n                it.unlockDate = a.unlockDate.startOfDayUTC()\n            }.map\n        }","prompt":""},{"id":1791,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"fun findFriend(friendId: String): Player =\n        extractDocument(collectionReference.document(friendId))!!","prompt":""},{"id":1792,"identifierName":"io.ipoli.android.player.persistence.FirestorePlayerRepository","requiredType":[],"content":"fun findAll(playerIds: List<String>): List<Player> {\n        val playerJobs = playerIds\n            .map {\n                GlobalScope.async(Dispatchers.IO) {\n                    collectionReference\n                        .document(it)\n                        .getSync()\n                }\n            }\n\n        return runBlocking {\n            playerJobs.map {\n                val doc = it.await()\n                toEntityObject(doc.data!!)\n            }\n        }\n    }","prompt":""},{"id":1793,"identifierName":"jp.toastkid.todo.data.TodoTaskDataAccessor","requiredType":[],"content":"@Query(\"SELECT * FROM todotask\")\n    fun allTasks(): PagingSource<Int, TodoTask>","prompt":""},{"id":1794,"identifierName":"jp.toastkid.todo.data.TodoTaskDataAccessor","requiredType":[],"content":"@Query(\"SELECT * FROM todotask WHERE id = :id\")\n    fun findById(id: Int): TodoTask?","prompt":""},{"id":1795,"identifierName":"jp.toastkid.todo.data.TodoTaskDataAccessor","requiredType":["data class PagingSourcenull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(task: TodoTask)","prompt":""},{"id":1796,"identifierName":"jp.toastkid.todo.data.TodoTaskDataAccessor","requiredType":["data class PagingSourcenull"],"content":"@Delete\n    fun delete(task: TodoTask)","prompt":""},{"id":1797,"identifierName":"jp.toastkid.todo.data.TodoTaskDataAccessor","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM todotask WHERE id = :id\")\n    fun delete(id: Int)","prompt":""},{"id":1798,"identifierName":"jp.toastkid.todo.data.TodoTaskDataAccessor","requiredType":[],"content":"@Query(\"SELECT COUNT(id) FROM todotask\")\n    fun count(): Int","prompt":""},{"id":1799,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM albums WHERE title NOT IN (:titles)\")\n    abstract suspend fun deleteExcept(titles: Set<String>): Int","prompt":""},{"id":1800,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM albums ORDER BY page ASC, search_index ASC\")\n    abstract override fun entries(): Flow<List<Album>>","prompt":""},{"id":1801,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Transaction\n    @Query(\"SELECT * FROM albums WHERE params = :params and page = :page ORDER BY page ASC, search_index ASC\")\n    abstract override fun entriesObservable(params: DatmusicSearchParams, page: Int): Flow<List<Album>>","prompt":""},{"id":1802,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM albums ORDER BY page ASC, search_index ASC LIMIT :count OFFSET :offset\")\n    abstract override fun entriesObservable(count: Int, offset: Int): Flow<List<Album>>","prompt":""},{"id":1803,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM albums ORDER BY page ASC, search_index ASC\")\n    abstract override fun entriesPagingSource(): PagingSource<Int, Album>","prompt":""},{"id":1804,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Transaction\n    @Query(\"SELECT * FROM albums WHERE params = :params ORDER BY page ASC, search_index ASC\")\n    abstract override fun entriesPagingSource(params: DatmusicSearchParams): PagingSource<Int, Album>","prompt":""},{"id":1805,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":["data class Album( @SerialName(\"id\") val albumId: AlbumId = 0L, @Transient @ColumnInfo(name = \"id\") override val id: String = albumId.toString(), @SerialName(\"access_key\") @ColumnInfo(name = \"access_key\") val accessKey: String = \"\", @SerialName(\"owner_id\") @ColumnInfo(name = \"owner_id\") val ownerId: Long = 0L, @SerialName(\"title\") @ColumnInfo(name = \"title\") val title: String = UNTITLED_ALBUM, @SerialName(\"subtitle\") @ColumnInfo(name = \"subtitle\") val subtitle: String? = null, @SerialName(\"year\") @ColumnInfo(name = \"year\") val year: Int = 1970, @SerialName(\"count\") @ColumnInfo(name = \"count\") val songCount: Int = 1, @SerialName(\"plays\") @ColumnInfo(name = \"plays\") val playCount: Long = 0L, @SerialName(\"followers\") @ColumnInfo(name = \"followers\") val followers: Int = 0, @SerialName(\"create_time\") @ColumnInfo(name = \"create_time\") val createdAt: Long = 0L, @SerialName(\"update_time\") @ColumnInfo(name = \"update_time\") val updatedAt: Long = 0L, @SerialName(\"is_explicit\") @ColumnInfo(name = \"explicit\") val explicit: Boolean = false, @SerialName(\"main_artists\") @ColumnInfo(name = \"main_artists\") val artists: List<Artist> = listOf(Artist()), @SerialName(\"genres\") @ColumnInfo(name = \"genres\") val genres: List<Genre> = listOf(), @SerialName(\"photo\") @ColumnInfo(name = \"photo\") val photo: Photo = Photo(), @SerialName(\"audios\") @ColumnInfo(name = \"audios\") val audios: List<Audio> = emptyList(), @Transient @ColumnInfo(name = \"params\") override var params: String = defaultParams, @Transient @ColumnInfo(name = \"page\") override var page: Int = defaultPage, @Transient @ColumnInfo(name = \"details_fetched\") val detailsFetched: Boolean = false, @PrimaryKey val primaryKey: String = \"\", @Transient @ColumnInfo(name = \"search_index\") val searchIndex: Int = 0, )"],"content":"@Transaction\n    @Query(\"SELECT * FROM albums WHERE id = :id ORDER BY details_fetched\")\n    abstract override fun entry(id: String): Flow<Album>","prompt":""},{"id":1806,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM albums WHERE id in (:ids)\")\n    abstract override fun entriesById(ids: List<String>): Flow<List<Album>>","prompt":""},{"id":1807,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM albums WHERE id = :id\")\n    abstract override fun entryNullable(id: String): Flow<Album?>","prompt":""},{"id":1808,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":[],"content":"@Query(\"DELETE FROM albums WHERE id = :id\")\n    abstract override suspend fun delete(id: String): Int","prompt":""},{"id":1809,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"DELETE FROM albums WHERE params = :params\")\n    abstract override suspend fun delete(params: DatmusicSearchParams): Int","prompt":""},{"id":1810,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"DELETE FROM albums WHERE params = :params and page = :page\")\n    abstract override suspend fun delete(params: DatmusicSearchParams, page: Int): Int","prompt":""},{"id":1811,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":[],"content":"@Query(\"DELETE FROM albums\")\n    abstract override suspend fun deleteAll(): Int","prompt":""},{"id":1812,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"SELECT MAX(page) from albums WHERE params = :params\")\n    abstract override suspend fun getLastPage(params: DatmusicSearchParams): Int?","prompt":""},{"id":1813,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"SELECT COUNT(*) from albums where params = :params\")\n    abstract override suspend fun count(params: DatmusicSearchParams): Int","prompt":""},{"id":1814,"identifierName":"tm.alashow.datmusic.data.db.daos.AlbumsDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) from albums where id = :id\")\n    abstract override suspend fun has(id: String): Int","prompt":""},{"id":1815,"identifierName":"net.blakelee.coinprofits.repository.db.CoinDao","requiredType":["data class Coinnull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertCoin(coin: Coin): Long","prompt":""},{"id":1816,"identifierName":"net.blakelee.coinprofits.repository.db.CoinDao","requiredType":["data class Coinnull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertCoins(vararg coins: Coin)","prompt":""},{"id":1817,"identifierName":"net.blakelee.coinprofits.repository.db.CoinDao","requiredType":[],"content":"@Query(\"SELECT * FROM coin ORDER BY id\")\n    fun getCoins(): Flowable<List<Coin>>","prompt":""},{"id":1818,"identifierName":"net.blakelee.coinprofits.repository.db.CoinDao","requiredType":["data class Coinnull"],"content":"@Query(\"SELECT * FROM coin WHERE id = :id LIMIT 1\")\n    fun getCoinById(id: String): Coin","prompt":""},{"id":1819,"identifierName":"net.blakelee.coinprofits.repository.db.CoinDao","requiredType":["data class Coinnull"],"content":"@Update\n    fun updateCoin(coin: Coin)","prompt":""},{"id":1820,"identifierName":"net.blakelee.coinprofits.repository.db.CoinDao","requiredType":["data class Coinnull"],"content":"@Update\n    fun updateCoins(vararg coins: Coin)","prompt":""},{"id":1821,"identifierName":"net.blakelee.coinprofits.repository.db.CoinDao","requiredType":["data class Coinnull"],"content":"@Delete\n    fun deleteCoin(coin: Coin)","prompt":""},{"id":1822,"identifierName":"net.blakelee.coinprofits.repository.db.CoinDao","requiredType":[],"content":"@Query(\"DELETE FROM coin\")\n    fun deleteAllCoins()","prompt":""},{"id":1823,"identifierName":"com.easy.kotlin.picturecrawler.dao.ImageRepository","requiredType":[],"content":"@Query(\"SELECT a from #{#entityName} a where a.isDeleted=0 and a.category like %:category% order by a.gmtModified desc\")\n    fun findByCategory(@Param(\"category\") category: String): MutableList<Image>","prompt":""},{"id":1824,"identifierName":"com.easy.kotlin.picturecrawler.dao.ImageRepository","requiredType":[],"content":"@Query(\"select count(*) from #{#entityName} a where a.url = :url\")\n    fun countByUrl(@Param(\"url\") url: String): Int","prompt":""},{"id":1825,"identifierName":"com.easy.kotlin.picturecrawler.dao.ImageRepository","requiredType":[],"content":"/**源数据列表*/\n    @Query(\"SELECT a from #{#entityName} a where a.isDeleted=0 order by a.id desc\") override fun findAll(pageable: Pageable): Page<Image>","prompt":""},{"id":1826,"identifierName":"com.easy.kotlin.picturecrawler.dao.ImageRepository","requiredType":[],"content":"@Query(\"SELECT a from #{#entityName} a where a.isDeleted=0 and a.category like %:searchText% order by a.id desc\")\n    fun search(@Param(\"searchText\") searchText: String, pageable: Pageable): Page<Image>","prompt":""},{"id":1827,"identifierName":"com.easy.kotlin.picturecrawler.dao.ImageRepository","requiredType":[],"content":"/**收藏列表*/\n    @Query(\"SELECT a from #{#entityName} a where a.isDeleted=0 and a.isFavorite=1 order by a.gmtModified desc\")\n    fun findAllFavorite(pageable: Pageable): Page<Image>","prompt":""},{"id":1828,"identifierName":"com.easy.kotlin.picturecrawler.dao.ImageRepository","requiredType":[],"content":"@Query(\"SELECT a from #{#entityName} a where a.isDeleted=0 and a.isFavorite=1 and a.category like %:searchText% order by a.gmtModified desc\")\n    fun searchFavorite(@Param(\"searchText\") searchText: String, pageable: Pageable): Page<Image>","prompt":""},{"id":1829,"identifierName":"com.easy.kotlin.picturecrawler.dao.ImageRepository","requiredType":[],"content":"@Modifying\n    @Transactional\n    @Query(\"update #{#entityName} a set a.isFavorite=1,a.gmtModified=now() where a.id=:id\")\n    fun addFavorite(@Param(\"id\") id: Long)","prompt":""},{"id":1830,"identifierName":"com.easy.kotlin.picturecrawler.dao.ImageRepository","requiredType":[],"content":"@Modifying\n    @Transactional\n    @Query(\"update #{#entityName} a set a.isDeleted=1 where a.id=:id\")\n    fun delete(@Param(\"id\") id: Long)","prompt":""},{"id":1831,"identifierName":"com.easy.kotlin.picturecrawler.dao.ImageRepository","requiredType":[],"content":"@Query(\"SELECT a from #{#entityName} a where a.isDeleted=0 and a.sourceType=1 order by a.id desc\")\n    fun findGankAll(pageable: Pageable): Page<Image>","prompt":""},{"id":1832,"identifierName":"com.easy.kotlin.picturecrawler.dao.ImageRepository","requiredType":[],"content":"@Query(\"SELECT a from #{#entityName} a where a.sourceType=1  and a.isDeleted=0 and a.category like %:searchText% order by a.id desc\")\n    fun searchGank(@Param(\"searchText\") searchText: String, pageable: Pageable): Page<Image>","prompt":""},{"id":1833,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(goldStatus: GoldStatus)","prompt":""},{"id":1834,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Update\n    fun update(goldStatus: GoldStatus)","prompt":""},{"id":1835,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Query(\"SELECT * FROM gold_status LIMIT 1\")\n    fun getGoldStatus(): LiveData<GoldStatus>","prompt":""},{"id":1836,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Delete\n    fun delete(goldStatus: GoldStatus)","prompt":""},{"id":1837,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(premium: PremiumCar)","prompt":""},{"id":1838,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Update\n    fun update(premium: PremiumCar)","prompt":""},{"id":1839,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Query(\"SELECT * FROM premium_car LIMIT 1\")\n    fun getPremiumCar(): LiveData<PremiumCar>","prompt":""},{"id":1840,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Delete\n    fun delete(premium: PremiumCar)","prompt":""},{"id":1841,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(gasLevel: GasTank)","prompt":""},{"id":1842,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Update\n    fun update(gasLevel: GasTank)","prompt":""},{"id":1843,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Query(\"SELECT * FROM gas_tank LIMIT 1\")\n    fun getGasTank(): LiveData<GasTank>","prompt":""},{"id":1844,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Delete\n    fun delete(gasLevel: GasTank)","prompt":""},{"id":1845,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"/**\n     * This is purely for convenience. The clients of this DAO don't have to discriminate among\n     * [GasTank] vs [PremiumCar] vs [GoldStatus] but can simply send in a list of\n     * [entitlements][Entitlement].\n     */\n    @Transaction\n    fun insert(vararg entitlements: Entitlement) {\n        entitlements.forEach {\n            when (it) {\n                is GasTank -> insert(it)\n                is PremiumCar -> insert(it)\n                is GoldStatus -> insert(it)\n            }\n        }\n    }","prompt":""},{"id":1846,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Transaction\n    fun update(vararg entitlements: Entitlement) {\n        entitlements.forEach {\n            when (it) {\n                is GasTank -> update(it)\n                is PremiumCar -> update(it)\n                is GoldStatus -> update(it)\n            }\n        }\n    }","prompt":""},{"id":1847,"identifierName":"com.ridocula.restdroid.persistence.dao.RequestCollectionDao","requiredType":[],"content":"@Query(\"SELECT * FROM request_collection\")\n    fun getAllRequestCollections(): Flowable<List<RequestCollectionEntity>>","prompt":""},{"id":1848,"identifierName":"com.ridocula.restdroid.persistence.dao.RequestCollectionDao","requiredType":["data class RequestCollectionEntityconstructor( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"name\") val name: String )"],"content":"@Query(\"SELECT * FROM request_collection WHERE id = :requestCollectionId\")\n    fun getRequestCollectionById(requestCollectionId: String): Maybe<RequestCollectionEntity>","prompt":""},{"id":1849,"identifierName":"com.ridocula.restdroid.persistence.dao.RequestCollectionDao","requiredType":["data class RequestCollectionEntityconstructor( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"name\") val name: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(requestCollection: RequestCollectionEntity)","prompt":""},{"id":1850,"identifierName":"com.ridocula.restdroid.persistence.dao.RequestCollectionDao","requiredType":["data class RequestCollectionEntityconstructor( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"name\") val name: String )"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun update(requestCollection: RequestCollectionEntity)","prompt":""},{"id":1851,"identifierName":"com.ridocula.restdroid.persistence.dao.RequestCollectionDao","requiredType":["data class RequestCollectionEntityconstructor( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"name\") val name: String )"],"content":"@Delete\n    fun delete(requestCollection: RequestCollectionEntity)","prompt":""},{"id":1852,"identifierName":"fr.vbastien.mycoincollector.db.CoinDao","requiredType":[],"content":"@Query(\"SELECT Coin.* FROM Coin JOIN Country ON Coin.country_id = Country.country_id WHERE Country.country_id = :arg0\")\n    fun findCoinsForCountry(countryId : String) : Maybe<List<Coin>>","prompt":""},{"id":1853,"identifierName":"fr.vbastien.mycoincollector.db.CoinDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertCoin(coin : Coin)","prompt":""},{"id":1854,"identifierName":"fr.vbastien.mycoincollector.db.CoinDao","requiredType":[],"content":"@Query(\"SELECT Coin.* FROM Coin WHERE Coin.coin_id = :arg0\")\n    fun findCoinWithId(coinId : String) : Single<Coin>","prompt":""},{"id":1855,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"@Insert\n    fun insert(principal: Principal): Long","prompt":""},{"id":1856,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"@Insert\n    fun insert(access: PrincipalAccess): Long","prompt":""},{"id":1857,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"@Update\n    fun update(access: PrincipalAccess)","prompt":""},{"id":1858,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"@Query(\"\"\"\nDELETE\nFROM principal_access\nWHERE list = :list\n  AND id NOT IN (:access)\"\"\")\n    fun deleteRemoved(list: Long, access: List<Long>)","prompt":""},{"id":1859,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"@Delete\n    fun delete(access: PrincipalAccess)","prompt":""},{"id":1860,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM principal_access\")\n    fun getAll(): List<PrincipalWithAccess>","prompt":""},{"id":1861,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"fun getOrCreatePrincipal(account: CaldavAccount, href: String, displayName: String? = null) =\n        findPrincipal(account.id, href)\n            ?: Principal(account = account.id, href = href, displayName = displayName)\n                .apply { id = insert(this) }","prompt":""},{"id":1862,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"fun getOrCreateAccess(\n        calendar: CaldavCalendar,\n        principal: Principal,\n        invite: Int,\n        access: Int,\n    ): PrincipalAccess =\n        findAccess(calendar.id, principal.id)\n            ?.apply {\n                if (this.access != access || this.invite != invite) {\n                    this.access = access\n                    this.invite = invite\n                    update(this)\n                }\n            }\n            ?: PrincipalAccess(\n                principal = principal.id,\n                list = calendar.id,\n                invite = invite,\n                access = access\n            ).apply { id = insert(this) }","prompt":""},{"id":1863,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"@Query(\"SELECT * FROM principals WHERE account = :account AND href = :href\")\n    fun findPrincipal(account: Long, href: String): Principal?","prompt":""},{"id":1864,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"@Query(\"SELECT * FROM principal_access WHERE list = :list and principal = :principal\")\n    fun findAccess(list: Long, principal: Long): PrincipalAccess?","prompt":""},{"id":1865,"identifierName":"org.tasks.data.PrincipalDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM principal_access WHERE list = :id\")\n    fun getPrincipals(id: Long): LiveData<List<PrincipalWithAccess>>","prompt":""},{"id":1866,"identifierName":"com.cn29.aac.datasource.itunes.db.ArtistDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg artists: Artist?)","prompt":""},{"id":1867,"identifierName":"com.cn29.aac.datasource.itunes.db.ArtistDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(artists: List<Artist?>?)","prompt":""},{"id":1868,"identifierName":"com.cn29.aac.datasource.itunes.db.ArtistDao","requiredType":[],"content":"@Query(\"SELECT * FROM artist WHERE artistName like '%' || :query  || '%'\")\n    fun getArtists(query: String): LiveData<List<Artist>>","prompt":""},{"id":1869,"identifierName":"com.cn29.aac.datasource.itunes.db.ArtistDao","requiredType":["data class Artist(@JvmField var artistId: Long = 0, @JvmField var artistName: String, @JvmField var trackName: String? = null, @JvmField var artworkUrl100: String? = null, @JvmField var trackPrice: Double = 0.0, @JvmField var isFavourite: Boolean = false, @JvmField var createDate: Date? = null )"],"content":"@Update\n    fun update(artist: Artist): Int","prompt":""},{"id":1870,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookmarkDao2","requiredType":[],"content":"@Query(\"DELETE FROM bookmark2 WHERE id = :id\")\n  suspend fun deleteBookmark(id: Bookmark2.Id)","prompt":""},{"id":1871,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookmarkDao2","requiredType":["data class Bookmark2( val bookId: Book2.Id, val chapterId: Chapter2.Id, val title: String?, val time: Long, val addedAt: Instant, val setBySleepTimer: Boolean, @PrimaryKey val id: Id )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  suspend fun addBookmark(bookmark: Bookmark2)","prompt":""},{"id":1872,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookmarkDao2","requiredType":["data class Bookmark2( val bookId: Book2.Id, val chapterId: Chapter2.Id, val title: String?, val time: Long, val addedAt: Instant, val setBySleepTimer: Boolean, @PrimaryKey val id: Id )"],"content":"@Query(\"SELECT * FROM bookmark2 WHERE chapterId IN(:chapters)\")\n  suspend fun allForFiles(chapters: List<@JvmSuppressWildcards Chapter2.Id>): List<Bookmark2>","prompt":""},{"id":1873,"identifierName":"com.pitchedapps.frost.db.GenericDao","requiredType":[],"content":"@Query(\"SELECT contents FROM frost_generic WHERE type = :type\") fun _select(type: String): String?","prompt":""},{"id":1874,"identifierName":"com.pitchedapps.frost.db.GenericDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE) fun _save(entity: GenericEntity)","prompt":""},{"id":1875,"identifierName":"com.pitchedapps.frost.db.GenericDao","requiredType":[],"content":"@Query(\"DELETE FROM frost_generic WHERE type = :type\") fun _delete(type: String)","prompt":""},{"id":1876,"identifierName":"uk.co.paul_matthews.kotlinandroid.data.PersonData","requiredType":[],"content":"fun getAll(): Flowable<List<Person>> = app.getDatabase()?.personDao()?.getAll()\n            ?: Flowable.error { Error(\"Unable to query the database\") }","prompt":""},{"id":1877,"identifierName":"uk.co.paul_matthews.kotlinandroid.data.PersonData","requiredType":[],"content":"fun getPeople(usernames: List<String>): Flowable<List<Person>> = app.getDatabase()?.personDao()?.getPeople(usernames)\n            ?: Flowable.error { Error(\"Unable to query the database\") }","prompt":""},{"id":1878,"identifierName":"uk.co.paul_matthews.kotlinandroid.data.PersonData","requiredType":[],"content":"fun getPerson(username: String): Maybe<Person> = Maybe.create<Person> {\n        val person = app.getDatabase()?.personDao()?.getPerson(username)\n        if (person != null) {\n            it.onSuccess(person)\n        } else {\n            it.onComplete()\n        }\n    }.subscribeOn(Schedulers.io())","prompt":""},{"id":1879,"identifierName":"uk.co.paul_matthews.kotlinandroid.data.PersonData","requiredType":[],"content":"fun insertPerson(person: Person): Completable = Completable.fromAction {\n        app.getDatabase()?.personDao()?.insert(person)\n    }.subscribeOn(Schedulers.io())","prompt":""},{"id":1880,"identifierName":"uk.co.paul_matthews.kotlinandroid.data.PersonData","requiredType":[],"content":"fun insertPeople(people: Array<Person>): Completable = Completable.fromAction {\n        app.getDatabase()?.personDao()?.insertAll(*people)\n    }.subscribeOn(Schedulers.io())","prompt":""},{"id":1881,"identifierName":"uk.co.paul_matthews.kotlinandroid.data.PersonDao","requiredType":[],"content":"@Query(\"SELECT * FROM $OBJ\")\n    fun getAll(): Flowable<List<Person>>","prompt":""},{"id":1882,"identifierName":"uk.co.paul_matthews.kotlinandroid.data.PersonDao","requiredType":[],"content":"@Query(\"SELECT * FROM $OBJ WHERE $USERNAME = :username\")\n    fun getPerson(username: String): Person","prompt":""},{"id":1883,"identifierName":"uk.co.paul_matthews.kotlinandroid.data.PersonDao","requiredType":[],"content":"@Query(\"SELECT * FROM $OBJ WHERE $USERNAME IN (:usernames)\")\n    fun getPeople(usernames: List<String>): Flowable<List<Person>>","prompt":""},{"id":1884,"identifierName":"uk.co.paul_matthews.kotlinandroid.data.PersonDao","requiredType":[],"content":"@Insert\n    fun insert(person: Person)","prompt":""},{"id":1885,"identifierName":"uk.co.paul_matthews.kotlinandroid.data.PersonDao","requiredType":[],"content":"@Insert\n    fun insertAll(vararg persons: Person)","prompt":""},{"id":1886,"identifierName":"com.simplemobiletools.musicplayer.interfaces.ArtistsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(artist: Artist): Long","prompt":""},{"id":1887,"identifierName":"com.simplemobiletools.musicplayer.interfaces.ArtistsDao","requiredType":[],"content":"@Query(\"SELECT * FROM artists\")\n    fun getAll(): List<Artist>","prompt":""},{"id":1888,"identifierName":"com.simplemobiletools.musicplayer.interfaces.ArtistsDao","requiredType":[],"content":"@Query(\"DELETE FROM artists WHERE id = :id\")\n    fun deleteArtist(id: Long)","prompt":""},{"id":1889,"identifierName":"com.orgzly.android.db.dao.ReminderTimeDao","requiredType":[],"content":"@Query(\"\"\"\n        SELECT\n        n.id as noteId,\n        n.book_id as bookId,\n        coalesce(b.title, b.name) as bookName,\n        n.state as state,\n        n.title as title,\n        $SCHEDULED_TIME as timeType,\n        t.string as orgTimestampString\n        FROM org_ranges r\n        JOIN org_timestamps t ON (r.start_timestamp_id = t.id )\n        JOIN notes n ON (r.id = n.scheduled_range_id)\n        JOIN books b ON (b.id = n.book_id)\n        WHERE t.is_active = 1\n\n        UNION\n\n        SELECT\n        n.id as noteId,\n        n.book_id as bookId,\n        coalesce(b.title, b.name) as bookName,\n        n.state as state,\n        n.title as title,\n        $DEADLINE_TIME as timeType,\n        t.string as orgTimestampString\n        FROM org_ranges r\n        JOIN org_timestamps t ON (r.start_timestamp_id = t.id )\n        JOIN notes n ON (r.id = n.deadline_range_id)\n        JOIN books b ON (b.id = n.book_id)\n        WHERE t.is_active = 1\n\n        UNION\n\n        SELECT\n        n.id as noteId,\n        n.book_id as bookId,\n        coalesce(b.title, b.name) as bookName,\n        n.state as state,\n        n.title as title,\n        $EVENT_TIME as timeType,\n        t.string as orgTimestampString\n        FROM note_events e\n        JOIN org_ranges r ON (r.id = e.org_range_id)\n        JOIN org_timestamps t ON (t.id = r.start_timestamp_id)\n        JOIN notes n ON (n.id = e.note_id)\n        JOIN books b ON (b.id = n.book_id)\n\n    \"\"\")\n    fun getAll(): List<NoteTime>","prompt":""},{"id":1890,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.CafeteriaDao","requiredType":[],"content":"@Query(\"SELECT * FROM cafeteria WHERE id = :id\")\n    fun getById(id: Int): Cafeteria?","prompt":""},{"id":1891,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.CafeteriaDao","requiredType":[],"content":"@Query(\"DELETE FROM cafeteria\")\n    fun removeCache()","prompt":""},{"id":1892,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.CafeteriaDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(cafeterias: List<Cafeteria>)","prompt":""},{"id":1893,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.cafeteria.CafeteriaDao","requiredType":[],"content":"@Query(\"SELECT name FROM cafeteria WHERE id = :id\")\n    fun getMensaNameFromId(id: Int): String","prompt":""},{"id":1894,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(bookmark: Bookmark)","prompt":""},{"id":1895,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark\")\n    fun findAll(): Flowable<List<Bookmark>>","prompt":""},{"id":1896,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkDao","requiredType":[],"content":"@Insert\n    fun insertAll(vararg users: Bookmark)","prompt":""},{"id":1897,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkDao","requiredType":[],"content":"@Delete\n    fun delete(user: Bookmark)","prompt":""},{"id":1898,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark WHERE folder_id = :arg0\")\n    fun selectBookmarksInFolder(folder_id: String): Flowable<List<Bookmark>>","prompt":""},{"id":1899,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark WHERE folder_id IS NULL\")\n    fun selectTopLevelBookmarks(): Flowable<List<Bookmark>>","prompt":""},{"id":1900,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkDao","requiredType":[],"content":"@Query(\"DELETE FROM bookmark\")\n    fun nukeTable()","prompt":""},{"id":1901,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.MultiDao","requiredType":[],"content":"@Query(\"\"\"\n            SELECT SUM(c)\n            FROM (\n                SELECT COUNT(*) AS c FROM bookmark WHERE folder_id = :arg0\n                UNION ALL\n                SELECT COUNT(*) FROM bookmark_folder WHERE folder_id = :arg0\n            )\n        \"\"\")\n    fun getFolderCount(folder_id: String): Flowable<Int>","prompt":""},{"id":1902,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkTagDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(bookmark: BookmarkTag)","prompt":""},{"id":1903,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkTagDao","requiredType":[],"content":"@Delete\n    fun delete(user: BookmarkTag)","prompt":""},{"id":1904,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkTagDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark LEFT JOIN join_bookmark_tag ON bookmark.id = join_bookmark_tag.bookmark_id WHERE join_bookmark_tag.tag_id = :arg0\")\n    fun findBookmarksWithTag(tag_id: String): Flowable<List<Bookmark>>","prompt":""},{"id":1905,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkTagDao","requiredType":[],"content":"@Query(\"SELECT * FROM tag LEFT JOIN join_bookmark_tag ON tag.id = join_bookmark_tag.tag_id WHERE join_bookmark_tag.bookmark_id = :arg0\")\n    fun findTagsForBookmark(bookmark_id: String): Flowable<List<Tag>>","prompt":""},{"id":1906,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkTagDao","requiredType":[],"content":"@Query(\"DELETE FROM join_bookmark_tag\")\n    fun nukeTable()","prompt":""},{"id":1907,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkFolderDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(bookmark: BookmarkFolder)","prompt":""},{"id":1908,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkFolderDao","requiredType":[],"content":"@Delete\n    fun delete(user: BookmarkFolder)","prompt":""},{"id":1909,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkFolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark_folder WHERE UPPER(name) = UPPER(:arg0) AND folder_id = :arg1 LIMIT 1\")\n    fun selectByNameFolder(name: String, folder_id: String): BookmarkFolder?","prompt":""},{"id":1910,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkFolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark_folder WHERE UPPER(name) = UPPER(:arg0) LIMIT 1\")\n    fun selectByName(name: String): BookmarkFolder","prompt":""},{"id":1911,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkFolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark_folder WHERE folder_id = :arg0\")\n    fun selectFoldersInFolder(folder_id: String): Flowable<List<BookmarkFolder>>","prompt":""},{"id":1912,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkFolderDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark_folder WHERE folder_id IS NULL\")\n    fun selectTopLevelFolders(): Flowable<List<BookmarkFolder>>","prompt":""},{"id":1913,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.BookmarkFolderDao","requiredType":[],"content":"@Query(\"DELETE FROM bookmark_folder\")\n    fun nukeTable()","prompt":""},{"id":1914,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.TagDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(bookmark: Tag)","prompt":""},{"id":1915,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.TagDao","requiredType":[],"content":"@Query(\"SELECT * FROM tag\")\n    fun findAll(): Flowable<List<Tag>>","prompt":""},{"id":1916,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.TagDao","requiredType":[],"content":"@Delete\n    fun delete(user: Tag)","prompt":""},{"id":1917,"identifierName":"tech.shadowfox.bookmarkd.bookmarks.db.model.TagDao","requiredType":[],"content":"@Query(\"DELETE FROM tag\")\n    fun nukeTable()","prompt":""},{"id":1918,"identifierName":"com.thanksmister.iot.mqtt.alarmpanel.persistence.MessageDao","requiredType":[],"content":"/**\n     * Get a message by id.\n     * @return the message from the table with a specific id.\n     */\n    @Query(\"SELECT * FROM Messages WHERE messageId = :id\")\n    fun getMessageById(id: String): Flowable<Message>","prompt":""},{"id":1919,"identifierName":"com.thanksmister.iot.mqtt.alarmpanel.persistence.MessageDao","requiredType":[],"content":"/**\n     * Get all messages\n     * @return list of all messages\n     */\n    @Query(\"SELECT * FROM Messages ORDER BY createdAt DESC\")\n    fun getMessages(): Flowable<List<Message>>","prompt":""},{"id":1920,"identifierName":"com.thanksmister.iot.mqtt.alarmpanel.persistence.MessageDao","requiredType":[],"content":"/**\n     * Get all messages\n     * @return list of all messages\n     */\n    @Query(\"SELECT * FROM Messages WHERE type = :type\")\n    fun getMessages(type: String): Flowable<List<Message>>","prompt":""},{"id":1921,"identifierName":"com.thanksmister.iot.mqtt.alarmpanel.persistence.MessageDao","requiredType":[],"content":"/**\n     * Insert a message in the database. If the message already exists, replace it.\n     * @param user the message to be inserted.\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertMessage(message: Message)","prompt":""},{"id":1922,"identifierName":"com.thanksmister.iot.mqtt.alarmpanel.persistence.MessageDao","requiredType":[],"content":"/**\n     * Delete all messages.\n     */\n    @Query(\"DELETE FROM Messages\")\n    fun deleteAllMessages()","prompt":""},{"id":1923,"identifierName":"org.gittner.osmbugs.osmose.OsmoseDao","requiredType":[],"content":"@Query(\"SELECT * FROM OsmoseError\")\n    fun getAll(): Observable<List<OsmoseError>>","prompt":""},{"id":1924,"identifierName":"org.gittner.osmbugs.osmose.OsmoseDao","requiredType":[],"content":"@Insert\n    fun insertAll(error: ArrayList<OsmoseError>)","prompt":""},{"id":1925,"identifierName":"org.gittner.osmbugs.osmose.OsmoseDao","requiredType":[],"content":"@Transaction\n    suspend fun replaceAll(error: ArrayList<OsmoseError>) {\n        clear()\n        insertAll(error)\n    }","prompt":""},{"id":1926,"identifierName":"org.gittner.osmbugs.osmose.OsmoseDao","requiredType":[],"content":"@Delete\n    fun delete(error: OsmoseError)","prompt":""},{"id":1927,"identifierName":"org.gittner.osmbugs.osmose.OsmoseDao","requiredType":[],"content":"@Query(\"DELETE FROM OsmoseError\")\n    fun clear()","prompt":""},{"id":1928,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"@Query(\"SELECT * FROM routes WHERE routeID = :routeID\")\n    fun getRoute(routeID: Int): RouteData","prompt":""},{"id":1929,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"@Insert\n    fun insertRoute(routeData: RouteData): Long","prompt":""},{"id":1930,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"@Update\n    fun updateRoute(routeData: RouteData)","prompt":""},{"id":1931,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"@Delete\n    fun deleteRoute(routeData: RouteData)","prompt":""},{"id":1932,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"@Query(\"DELETE FROM routes\")\n    fun deleteAll()","prompt":""},{"id":1933,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"// Will return 0 id not found\n    @Query(\n        \"SELECT routeID FROM routes \" +\n                \"WHERE origin LIKE :origin AND \" +\n                \"destination LIKE :destination AND \" +\n                \"type LIKE :type\"\n    )\n    fun getRouteNo(origin: String, destination: String, type: String): Int","prompt":""},{"id":1934,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"@Query(\"UPDATE routes SET favorite = 'no'\")\n    fun removeAllFavorite()","prompt":""},{"id":1935,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"@Query(\"UPDATE routes SET favorite = 'yes' WHERE routeID = :routeID\")\n    fun setFavorite(routeID: Int)","prompt":""},{"id":1936,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"@Query(\"UPDATE routes SET syncedOn = :timestamp\")\n    fun updateSync(timestamp: String)","prompt":""},{"id":1937,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"@Query(\"DELETE FROM routes \" + \"WHERE routeID LIKE :routeID \")\n    fun deleteRouteByNumber(routeID: Int)","prompt":""},{"id":1938,"identifierName":"com.rohitsuratekar.NCBSinfo.database.RouteDao","requiredType":[],"content":"@Query(\"SELECT modifiedOn FROM routes WHERE modifiedOn ORDER BY modifiedOn DESC LIMIT 1\")\n    fun getLastModified(): String","prompt":""},{"id":1939,"identifierName":"ru.ustimov.weather.content.impl.local.dao.CitiesDao","requiredType":[],"content":"@Query(\"select * from ${Database.Tables.CITIES}\")\n    fun getAll(): Flowable<List<RoomCity>>","prompt":""},{"id":1940,"identifierName":"ru.ustimov.weather.content.impl.local.dao.CitiesDao","requiredType":["data class RoomCity( @PrimaryKey(autoGenerate = false) @ColumnInfo(name = BaseColumns._ID) private val id: Long, @ColumnInfo(name = \"name\", collate = ColumnInfo.NOCASE) private val name: String?, @ColumnInfo(name = \"country_code\", collate = ColumnInfo.NOCASE) private val countryCode: String, @Embedded private val location: RoomLocation )"],"content":"@Query(\"select * from ${Database.Tables.CITIES} where ${BaseColumns._ID} = :cityId\")\n    fun get(cityId: Long): Flowable<RoomCity>","prompt":""},{"id":1941,"identifierName":"ru.ustimov.weather.content.impl.local.dao.CitiesDao","requiredType":["data class RoomCity( @PrimaryKey(autoGenerate = false) @ColumnInfo(name = BaseColumns._ID) private val id: Long, @ColumnInfo(name = \"name\", collate = ColumnInfo.NOCASE) private val name: String?, @ColumnInfo(name = \"country_code\", collate = ColumnInfo.NOCASE) private val countryCode: String, @Embedded private val location: RoomLocation )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(city: RoomCity): Long","prompt":""},{"id":1942,"identifierName":"ru.ustimov.weather.content.impl.local.dao.CitiesDao","requiredType":["data class RoomCity( @PrimaryKey(autoGenerate = false) @ColumnInfo(name = BaseColumns._ID) private val id: Long, @ColumnInfo(name = \"name\", collate = ColumnInfo.NOCASE) private val name: String?, @ColumnInfo(name = \"country_code\", collate = ColumnInfo.NOCASE) private val countryCode: String, @Embedded private val location: RoomLocation )"],"content":"@Delete\n    fun delete(city: RoomCity)","prompt":""},{"id":1943,"identifierName":"com.sample.android.trivialdrivesample.db.GameStateDao","requiredType":[],"content":"@Query(\"SELECT `value` FROM GameState WHERE `key` = :key LIMIT 1\")\n    operator fun get(key: String): Flow<Int>","prompt":""},{"id":1944,"identifierName":"com.sample.android.trivialdrivesample.db.GameStateDao","requiredType":[],"content":"@Query(\"REPLACE INTO GameState VALUES(:key,:value)\")\n    fun put(key: String, value: Int)","prompt":""},{"id":1945,"identifierName":"com.sample.android.trivialdrivesample.db.GameStateDao","requiredType":[],"content":"@Query(\"UPDATE GameState SET `value`=`value`-1 WHERE `key`=:key AND `value` > :minValue\")\n    fun decrement(key: String, minValue: Int): Int","prompt":""},{"id":1946,"identifierName":"com.sample.android.trivialdrivesample.db.GameStateDao","requiredType":[],"content":"@Query(\"UPDATE GameState SET `value`=`value`+1 WHERE `key`=:key AND `value` < :maxValue\")\n    fun increment(key: String, maxValue: Int): Int","prompt":""},{"id":1947,"identifierName":"com.garpr.android.data.database.FavoritePlayerDao","requiredType":[],"content":"@Delete\n    fun delete(dbFavoritePlayer: DbFavoritePlayer)","prompt":""},{"id":1948,"identifierName":"com.garpr.android.data.database.FavoritePlayerDao","requiredType":[],"content":"@Query(\"DELETE FROM favoritePlayers\")\n    fun deleteAll()","prompt":""},{"id":1949,"identifierName":"com.garpr.android.data.database.FavoritePlayerDao","requiredType":[],"content":"@Query(\"SELECT * FROM favoritePlayers\")\n    fun getAll(): List<DbFavoritePlayer>","prompt":""},{"id":1950,"identifierName":"com.garpr.android.data.database.FavoritePlayerDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(dbFavoritePlayer: DbFavoritePlayer)","prompt":""},{"id":1951,"identifierName":"com.garpr.android.data.database.FavoritePlayerDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(dbFavoritePlayers: List<DbFavoritePlayer>)","prompt":""},{"id":1952,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT places.*\"\n            + \" FROM places\"\n            + \" INNER JOIN geofences ON geofences.place = places.uid\"\n            + \" INNER JOIN tasks ON geofences.task = tasks._id\"\n            + \" WHERE tasks.completed = 0 AND tasks.deleted = 0\"\n            + \" AND (geofences.arrival > 0 OR geofences.departure > 0)\"\n            + \" GROUP BY places.uid\")\n    suspend fun getPlacesWithGeofences(): List<Place>","prompt":""},{"id":1953,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT places.*,\"\n            + \" max(geofences.arrival) as arrival,\"\n            + \" max(geofences.departure) as departure\"\n            + \" FROM places\"\n            + \" INNER JOIN geofences ON geofences.place = places.uid\"\n            + \" INNER JOIN tasks ON tasks._id = geofences.task\"\n            + \" WHERE place = :uid AND tasks.completed = 0 AND tasks.deleted = 0\"\n            + \" AND (geofences.arrival > 0 OR geofences.departure > 0)\"\n            + \" GROUP BY places.uid\")\n    suspend fun getGeofencesByPlace(uid: String): MergedGeofence?","prompt":""},{"id":1954,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"DELETE FROM geofences WHERE place = :place\")\n    suspend fun deleteGeofencesByPlace(place: String)","prompt":""},{"id":1955,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT geofences.* FROM geofences\"\n            + \" INNER JOIN tasks ON tasks._id = geofences.task\"\n            + \" LEFT JOIN alarms ON tasks._id = alarms.task AND alarms.type == $TYPE_SNOOZE\"\n            + \" WHERE place = :place AND arrival = 1 AND tasks.completed = 0\"\n            + \" AND tasks.deleted = 0 AND (alarms._id IS NULL OR alarms.time < :now) AND tasks.hideUntil < :now\")\n    suspend fun getArrivalGeofences(place: String, now: Long = now()): List<Geofence>","prompt":""},{"id":1956,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT geofences.* FROM geofences\"\n            + \" INNER JOIN tasks ON tasks._id = geofences.task\"\n            + \" LEFT JOIN alarms ON tasks._id = alarms.task AND alarms.type == $TYPE_SNOOZE\"\n            + \" WHERE place = :place AND departure = 1 AND tasks.completed = 0\"\n            + \" AND tasks.deleted = 0 AND (alarms._id IS NULL OR alarms.time < :now) AND tasks.hideUntil < :now\")\n    suspend fun getDepartureGeofences(place: String, now: Long = now()): List<Geofence>","prompt":""},{"id":1957,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT * FROM geofences\"\n            + \" INNER JOIN places ON geofences.place = places.uid\"\n            + \" WHERE task = :taskId ORDER BY name ASC LIMIT 1\")\n    suspend fun getGeofences(taskId: Long): Location?","prompt":""},{"id":1958,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT geofences.*, places.* FROM geofences INNER JOIN places ON geofences.place = places.uid INNER JOIN tasks ON tasks._id = geofences.task WHERE tasks._id = :taskId AND tasks.deleted = 0 AND tasks.completed = 0\")\n    suspend fun getActiveGeofences(taskId: Long): List<Location>","prompt":""},{"id":1959,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT places.*\"\n            + \" FROM places\"\n            + \" INNER JOIN geofences ON geofences.place = places.uid\"\n            + \" WHERE geofences.task = :taskId\")\n    suspend fun getPlaceForTask(taskId: Long): Place?","prompt":""},{"id":1960,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT geofences.*, places.* FROM geofences INNER JOIN places ON geofences.place = places.uid INNER JOIN tasks ON tasks._id = geofences.task WHERE tasks.deleted = 0 AND tasks.completed = 0\")\n    suspend fun getActiveGeofences(): List<Location>","prompt":""},{"id":1961,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM geofences\")\n    suspend fun geofenceCount(): Int","prompt":""},{"id":1962,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Delete\n    suspend fun delete(location: Geofence)","prompt":""},{"id":1963,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Delete\n    suspend fun delete(place: Place)","prompt":""},{"id":1964,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Insert\n    suspend fun insert(location: Geofence): Long","prompt":""},{"id":1965,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insert(place: Place): Long","prompt":""},{"id":1966,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Update\n    suspend fun update(place: Place)","prompt":""},{"id":1967,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Update\n    suspend fun update(geofence: Geofence)","prompt":""},{"id":1968,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT * FROM places WHERE uid = :uid LIMIT 1\")\n    suspend fun getByUid(uid: String): Place?","prompt":""},{"id":1969,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT * FROM geofences WHERE task = :taskId\")\n    suspend fun getGeofencesForTask(taskId: Long): List<Geofence>","prompt":""},{"id":1970,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT * FROM places\")\n    suspend fun getPlaces(): List<Place>","prompt":""},{"id":1971,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT * FROM places WHERE place_id = :id\")\n    suspend fun getPlace(id: Long): Place?","prompt":""},{"id":1972,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT * FROM places WHERE uid = :uid\")\n    suspend fun getPlace(uid: String): Place?","prompt":""},{"id":1973,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT places.*, IFNULL(COUNT(geofence_id),0) AS count FROM places LEFT OUTER JOIN geofences ON geofences.place = places.uid GROUP BY uid ORDER BY COUNT(geofence_id) DESC\")\n    fun getPlaceUsage(): LiveData<List<PlaceUsage>>","prompt":""},{"id":1974,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT * FROM places WHERE latitude LIKE :latitude AND longitude LIKE :longitude\")\n    suspend fun findPlace(latitude: String, longitude: String): Place?","prompt":""},{"id":1975,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"SELECT places.*, COUNT(tasks._id) AS count FROM places \"\n            + \" LEFT JOIN geofences ON geofences.place = places.uid \"\n            + \" LEFT JOIN tasks ON geofences.task = tasks._id AND tasks.completed = 0 AND tasks.deleted = 0 AND tasks.hideUntil < :now\"\n            + \" GROUP BY places.uid\"\n            + \" ORDER BY name COLLATE NOCASE ASC\")\n    suspend fun getPlaceFilters(now: Long = currentTimeMillis()): List<LocationFilters>","prompt":""},{"id":1976,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"UPDATE places SET place_order = $NO_ORDER\")\n    suspend fun resetOrders()","prompt":""},{"id":1977,"identifierName":"org.tasks.data.LocationDao","requiredType":[],"content":"@Query(\"UPDATE places SET place_order = :order WHERE place_id = :id\")\n    suspend fun setOrder(id: Long, order: Int)","prompt":""},{"id":1978,"identifierName":"org.tasks.data.LocationDao","requiredType":["data class Tasknull","data class Preferences@JvmOverloads constructor( private val context: Context, name: String? = getSharedPreferencesName(context) )"],"content":"suspend fun getLocation(task: Task, preferences: Preferences): Location? {\n        if (task.isNew) {\n            if (task.hasTransitory(Place.KEY)) {\n                getPlace(task.getTransitory<String>(Place.KEY)!!)?.let {\n                    return Location(Geofence(it.uid, preferences), it)\n                }\n            }\n        } else {\n            return getGeofences(task.id)\n        }\n        return null\n    }","prompt":""},{"id":1979,"identifierName":"org.wikipedia.search.db.RecentSearchDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertRecentSearch(recentSearch: RecentSearch)","prompt":""},{"id":1980,"identifierName":"org.wikipedia.search.db.RecentSearchDao","requiredType":[],"content":"@Query(\"SELECT * FROM RecentSearch ORDER BY timestamp DESC\")\n    suspend fun getRecentSearches(): List<RecentSearch>","prompt":""},{"id":1981,"identifierName":"org.wikipedia.search.db.RecentSearchDao","requiredType":[],"content":"@Query(\"DELETE FROM RecentSearch\")\n    suspend fun deleteAll()","prompt":""},{"id":1982,"identifierName":"org.wikipedia.search.db.RecentSearchDao","requiredType":[],"content":"@Query(\"DELETE FROM RecentSearch WHERE text = :text AND timestamp = :timestamp\")\n    suspend fun deleteBy(text: String, timestamp: Date)","prompt":""},{"id":1983,"identifierName":"org.wikipedia.search.db.RecentSearchDao","requiredType":[],"content":"suspend fun delete(recentSearch: RecentSearch) {\n        deleteBy(recentSearch.text, recentSearch.timestamp)\n    }","prompt":""},{"id":1984,"identifierName":"info.nightscout.androidaps.dana.database.DanaHistoryRecordDao","requiredType":[],"content":"@Query(\"SELECT * from $TABLE_DANA_HISTORY WHERE timestamp >= :timestamp AND code = :type ORDER BY timestamp DESC\")\n    abstract fun allFromByType(timestamp: Long, type: Byte): Single<List<DanaHistoryRecord>>","prompt":""},{"id":1985,"identifierName":"info.nightscout.androidaps.dana.database.DanaHistoryRecordDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun createOrUpdate(danaHistoryRecord: DanaHistoryRecord)","prompt":""},{"id":1986,"identifierName":"org.fdroid.database.VersionDao","requiredType":[],"content":"/**\n     * Inserts new versions for a given [packageName] from a full index.\n     */\n    public fun insert(\n        repoId: Long,\n        packageName: String,\n        packageVersions: Map<String, PackageVersionV2>,\n        checkIfCompatible: (PackageVersionV2) -> Boolean,\n    )","prompt":""},{"id":1987,"identifierName":"org.fdroid.database.VersionDao","requiredType":[],"content":"/**\n     * Returns a list of versions for the given [packageName] sorting by highest version code first.\n     */\n    public fun getAppVersions(packageName: String): LiveData<List<AppVersion>>","prompt":""},{"id":1988,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Transaction\n    override fun insert(\n        repoId: Long,\n        packageName: String,\n        packageVersions: Map<String, PackageVersionV2>,\n        checkIfCompatible: (PackageVersionV2) -> Boolean,\n    ) {\n        packageVersions.entries.iterator().forEach { (versionId, packageVersion) ->\n            val isCompatible = checkIfCompatible(packageVersion)\n            insert(repoId, packageName, versionId, packageVersion, isCompatible)\n        }\n    }","prompt":""},{"id":1989,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Transaction\n    fun insert(\n        repoId: Long,\n        packageName: String,\n        versionId: String,\n        packageVersion: PackageVersionV2,\n        isCompatible: Boolean,\n    ) {\n        val version = packageVersion.toVersion(repoId, packageName, versionId, isCompatible)\n        insert(version)\n        insert(packageVersion.manifest.getVersionedStrings(version))\n    }","prompt":""},{"id":1990,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insert(version: Version)","prompt":""},{"id":1991,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insert(versionedString: List<VersionedString>)","prompt":""},{"id":1992,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Update\n    fun update(version: Version)","prompt":""},{"id":1993,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"fun update(\n        repoId: Long,\n        packageName: String,\n        versionsDiffMap: Map<String, JsonObject?>?,\n        checkIfCompatible: (PackageManifest) -> Boolean,\n    ) {\n        if (versionsDiffMap == null) { // no more versions, delete all\n            deleteAppVersion(repoId, packageName)\n        } else versionsDiffMap.forEach { (versionId, jsonObject) ->\n            if (jsonObject == null) { // delete individual version\n                deleteAppVersion(repoId, packageName, versionId)\n            } else {\n                val version = getVersion(repoId, packageName, versionId)\n                if (version == null) { // new version, parse normally\n                    val packageVersionV2: PackageVersionV2 =\n                        json.decodeFromJsonElement(jsonObject)\n                    val isCompatible = checkIfCompatible(packageVersionV2.packageManifest)\n                    insert(repoId, packageName, versionId, packageVersionV2, isCompatible)\n                } else { // diff against existing version\n                    diffVersion(version, jsonObject, checkIfCompatible)\n                }\n            }\n        } // end forEach\n    }","prompt":""},{"id":1994,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"private fun diffVersion(\n        version: Version,\n        jsonObject: JsonObject,\n        checkIfCompatible: (PackageManifest) -> Boolean,\n    ) {\n        // ensure that diff does not include internal keys\n        DENY_LIST.forEach { forbiddenKey ->\n            if (jsonObject.containsKey(forbiddenKey)) {\n                throw SerializationException(forbiddenKey)\n            }\n        }\n        // diff version\n        val diffedVersion = ReflectionDiffer.applyDiff(version, jsonObject)\n        val isCompatible = checkIfCompatible(diffedVersion.packageManifest)\n        update(diffedVersion.copy(isCompatible = isCompatible))\n        // diff versioned strings\n        val manifest = jsonObject[\"manifest\"]\n        if (manifest is JsonNull) { // no more manifest, delete all versionedStrings\n            deleteVersionedStrings(version.repoId, version.packageName, version.versionId)\n        } else if (manifest is JsonObject) {\n            diffVersionedStrings(version, manifest, \"usesPermission\", PERMISSION)\n            diffVersionedStrings(version, manifest, \"usesPermissionSdk23\",\n                PERMISSION_SDK_23)\n        }\n    }","prompt":""},{"id":1995,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"private fun diffVersionedStrings(\n        version: Version,\n        jsonObject: JsonObject,\n        key: String,\n        type: VersionedStringType,\n    ) = DbDiffUtils.diffAndUpdateListTable(\n        jsonObject = jsonObject,\n        jsonObjectKey = key,\n        listParser = { permissionArray ->\n            val list: List<PermissionV2> = json.decodeFromJsonElement(permissionArray)\n            list.toVersionedString(version, type)\n        },\n        deleteList = {\n            deleteVersionedStrings(version.repoId, version.packageName, version.versionId, type)\n        },\n        insertNewList = { versionedStrings -> insert(versionedStrings) },\n    )","prompt":""},{"id":1996,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Transaction\n    @RewriteQueriesToDropUnusedColumns\n    @Query(\"\"\"SELECT * FROM ${Version.TABLE}\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        WHERE pref.enabled = 1 AND packageName = :packageName\n        ORDER BY manifest_versionCode DESC, pref.weight DESC\"\"\")\n    override fun getAppVersions(packageName: String): LiveData<List<AppVersion>>","prompt":""},{"id":1997,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"/**\n     * Only use for testing, not sorted, does take disabled repos into account.\n     */\n    @Transaction\n    @Query(\"\"\"SELECT * FROM ${Version.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName\"\"\")\n    fun getAppVersions(repoId: Long, packageName: String): List<AppVersion>","prompt":""},{"id":1998,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Query(\"\"\"SELECT * FROM ${Version.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName AND versionId = :versionId\"\"\")\n    fun getVersion(repoId: Long, packageName: String, versionId: String): Version?","prompt":""},{"id":1999,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"/**\n     * Used for finding versions that are an update,\n     * so takes [AppPrefs.ignoreVersionCodeUpdate] into account.\n     */\n    @RewriteQueriesToDropUnusedColumns\n    @Query(\"\"\"SELECT * FROM ${Version.TABLE}\n        JOIN ${RepositoryPreferences.TABLE} AS pref USING (repoId)\n        LEFT JOIN ${AppPrefs.TABLE} AS appPrefs USING (packageName)\n        WHERE pref.enabled = 1 AND\n              manifest_versionCode > COALESCE(appPrefs.ignoreVersionCodeUpdate, 0) AND\n              packageName IN (:packageNames)\n        ORDER BY manifest_versionCode DESC, pref.weight DESC\"\"\")\n    fun getVersions(packageNames: List<String>): List<Version>","prompt":""},{"id":2000,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Query(\"\"\"SELECT * FROM ${VersionedString.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName\"\"\")\n    fun getVersionedStrings(repoId: Long, packageName: String): List<VersionedString>","prompt":""},{"id":2001,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Query(\"\"\"SELECT * FROM ${VersionedString.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName AND versionId = :versionId\"\"\")\n    fun getVersionedStrings(\n        repoId: Long,\n        packageName: String,\n        versionId: String,\n    ): List<VersionedString>","prompt":""},{"id":2002,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Query(\"\"\"DELETE FROM ${Version.TABLE} WHERE repoId = :repoId AND packageName = :packageName\"\"\")\n    fun deleteAppVersion(repoId: Long, packageName: String)","prompt":""},{"id":2003,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Query(\"\"\"DELETE FROM ${Version.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName AND versionId = :versionId\"\"\")\n    fun deleteAppVersion(repoId: Long, packageName: String, versionId: String)","prompt":""},{"id":2004,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Query(\"\"\"DELETE FROM ${VersionedString.TABLE}\n        WHERE repoId = :repoId AND packageName = :packageName AND versionId = :versionId\"\"\")\n    fun deleteVersionedStrings(repoId: Long, packageName: String, versionId: String)","prompt":""},{"id":2005,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Query(\"\"\"DELETE FROM ${VersionedString.TABLE} WHERE repoId = :repoId\n        AND packageName = :packageName AND versionId = :versionId AND type = :type\"\"\")\n    fun deleteVersionedStrings(\n        repoId: Long,\n        packageName: String,\n        versionId: String,\n        type: VersionedStringType,\n    )","prompt":""},{"id":2006,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM ${Version.TABLE}\")\n    fun countAppVersions(): Int","prompt":""},{"id":2007,"identifierName":"org.fdroid.database.VersionDaoInt","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM ${VersionedString.TABLE}\")\n    fun countVersionedStrings(): Int","prompt":""},{"id":2008,"identifierName":"com.android.tv.classics.models.TvMediaMetadata","requiredType":[],"content":"/**\n     * Determine if an instance of this class carries state based on whether the fields below have\n     * anything other than the default values.\n     */\n    private fun isStateless() = playbackDurationMillis == null && !hidden && !watchNext","prompt":""},{"id":2009,"identifierName":"com.android.tv.classics.models.TvMediaMetadata","requiredType":[],"content":"/** Compares only fields not related to the state */\n    override fun equals(other: Any?): Boolean = if (isStateless()) {\n        super.equals(other)\n    } else {\n        copy(playbackDurationMillis = null, hidden = false, watchNext = false).equals(other)\n    }","prompt":""},{"id":2010,"identifierName":"com.android.tv.classics.models.TvMediaMetadata","requiredType":[],"content":"/** We must override [hashCode] if we override the [equals] function */\n    override fun hashCode(): Int = if (isStateless()) {\n        super.hashCode()\n    } else {\n        copy(playbackDurationMillis = null, hidden = false, watchNext = false).hashCode()\n    }","prompt":""},{"id":2011,"identifierName":"com.android.tv.classics.models.TvMediaMetadataDAO","requiredType":[],"content":"/**\n     * Builds a projection for content provider search results using the mappings described in\n     * https://developer.android.com/training/tv/discovery/searchable.html#columns.\n     */\n    @Query(\"SELECT \" +\n            \"id as ${BaseColumns._ID}, \" +\n            \"id as ${SearchManager.SUGGEST_COLUMN_INTENT_DATA_ID}, \" +\n            \"title as ${SearchManager.SUGGEST_COLUMN_TEXT_1}, \" +\n            \"description as ${SearchManager.SUGGEST_COLUMN_TEXT_2}, \" +\n            \"artUri as ${SearchManager.SUGGEST_COLUMN_RESULT_CARD_IMAGE}, \" +\n            \"year as ${SearchManager.SUGGEST_COLUMN_PRODUCTION_YEAR}, \" +\n            \"playbackDurationMillis as ${SearchManager.SUGGEST_COLUMN_DURATION} \" +\n            \"FROM tvmediametadata WHERE :title LIKE '%' || searchableTitle || '%'\")\n    fun contentProviderQuery(title: String): Cursor?","prompt":""},{"id":2012,"identifierName":"com.android.tv.classics.models.TvMediaMetadataDAO","requiredType":[],"content":"@Query(\"SELECT * FROM tvmediametadata\")\n    fun findAll(): List<TvMediaMetadata>","prompt":""},{"id":2013,"identifierName":"com.android.tv.classics.models.TvMediaMetadataDAO","requiredType":[],"content":"@Query(\"SELECT * FROM tvmediametadata WHERE id = :id LIMIT 1\")\n    fun findById(id: String): TvMediaMetadata?","prompt":""},{"id":2014,"identifierName":"com.android.tv.classics.models.TvMediaMetadataDAO","requiredType":[],"content":"@Query(\"SELECT * FROM tvmediametadata WHERE collectionId = :collectionId\")\n    fun findByCollection(collectionId: String): List<TvMediaMetadata>","prompt":""},{"id":2015,"identifierName":"com.android.tv.classics.models.TvMediaMetadataDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg metadata: TvMediaMetadata)","prompt":""},{"id":2016,"identifierName":"com.android.tv.classics.models.TvMediaMetadataDAO","requiredType":[],"content":"@Update\n    fun update(metadata: TvMediaMetadata)","prompt":""},{"id":2017,"identifierName":"com.android.tv.classics.models.TvMediaMetadataDAO","requiredType":[],"content":"@Delete\n    fun delete(metadata: TvMediaMetadata)","prompt":""},{"id":2018,"identifierName":"com.android.tv.classics.models.TvMediaMetadataDAO","requiredType":[],"content":"@Query(\"DELETE FROM tvmediametadata\")\n    fun truncate()","prompt":""},{"id":2019,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.ReviewDao","requiredType":[],"content":"@Query(\"SELECT id, movie_id, author, content, url FROM review \" + \"WHERE movie_id = :movieId\")\n    fun getByMovieId(movieId: Int): Flowable<List<ReviewEntity>>","prompt":""},{"id":2020,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.ReviewDao","requiredType":[],"content":"@Insert\n    fun insertAll(reviews: List<ReviewEntity>)","prompt":""},{"id":2021,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.ReviewDao","requiredType":[],"content":"@Query(\"DELETE FROM review \" + \"WHERE movie_id IN (SELECT id FROM movie m WHERE id = :movieId)\")\n    fun deleteByMovieId(movieId: Int): Int","prompt":""},{"id":2022,"identifierName":"torille.fi.lurkforreddit.data.SubredditDao","requiredType":["data class Subreddit( @PrimaryKey @ColumnInfo(name = \"reddit_id\") var subId: String = \"\", var url: String = \"\", @ColumnInfo(name = \"display_name\") var displayName: String = \"\", @ColumnInfo(name = \"banner_url\") var bannerUrl: String? = \"\", @ColumnInfo(name = \"key_color\") var keyColor: String? = \"\" )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(subreddit: Subreddit)","prompt":""},{"id":2023,"identifierName":"torille.fi.lurkforreddit.data.SubredditDao","requiredType":["data class Subreddit( @PrimaryKey @ColumnInfo(name = \"reddit_id\") var subId: String = \"\", var url: String = \"\", @ColumnInfo(name = \"display_name\") var displayName: String = \"\", @ColumnInfo(name = \"banner_url\") var bannerUrl: String? = \"\", @ColumnInfo(name = \"key_color\") var keyColor: String? = \"\" )"],"content":"@Update\n    fun update(subreddit: Subreddit)","prompt":""},{"id":2024,"identifierName":"torille.fi.lurkforreddit.data.SubredditDao","requiredType":["data class Subreddit( @PrimaryKey @ColumnInfo(name = \"reddit_id\") var subId: String = \"\", var url: String = \"\", @ColumnInfo(name = \"display_name\") var displayName: String = \"\", @ColumnInfo(name = \"banner_url\") var bannerUrl: String? = \"\", @ColumnInfo(name = \"key_color\") var keyColor: String? = \"\" )"],"content":"@Delete\n    fun delete(subreddit: Subreddit)","prompt":""},{"id":2025,"identifierName":"torille.fi.lurkforreddit.data.SubredditDao","requiredType":[],"content":"@Query(\"DELETE FROM subreddits\")\n    fun deleteAllSubreddits()","prompt":""},{"id":2026,"identifierName":"torille.fi.lurkforreddit.data.SubredditDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(subreddit: List<Subreddit>)","prompt":""},{"id":2027,"identifierName":"torille.fi.lurkforreddit.data.SubredditDao","requiredType":[],"content":"@Query(\"SELECT * FROM subreddits\")\n    fun getSubreddits(): Flowable<List<Subreddit>>","prompt":""},{"id":2028,"identifierName":"dagger.poc.android.data.AnswerRoomDbDao","requiredType":[],"content":"@Query(\"SELECT * FROM answer \"\n            + \"INNER JOIN user ON user.id = answer.author_id\")\n    fun findAll(): Flowable<List<Answer>>","prompt":""},{"id":2029,"identifierName":"dagger.poc.android.data.AnswerRoomDbDao","requiredType":[],"content":"@Insert\n    fun create(answer: Answer): Long","prompt":""},{"id":2030,"identifierName":"dagger.poc.android.data.AnswerRoomDbDao","requiredType":[],"content":"@Delete\n    fun delete(answer: Answer)","prompt":""},{"id":2031,"identifierName":"dagger.poc.android.data.AnswerRoomDbDao","requiredType":[],"content":"@Update\n    fun update(answer: Answer)","prompt":""},{"id":2032,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.HistoryDao","requiredType":[],"content":"@Query(\"select * from history\")\n    fun getAllHistory(): Flowable<List<WorkoutHistoryObject>>","prompt":""},{"id":2033,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.HistoryDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertHistory(historyObject: WorkoutHistoryObject)","prompt":""},{"id":2034,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.HistoryDao","requiredType":[],"content":"@Update(onConflict = REPLACE)\n    fun updateHistory(historyObject: WorkoutHistoryObject)","prompt":""},{"id":2035,"identifierName":"io.sweers.catchup.gemoji.GemojiDao","requiredType":[],"content":"@Language(\"RoomSql\")\n  @Query(\"select emoji from gemoji where alias = :alias\")\n  fun getEmoji(alias: String): String?","prompt":""},{"id":2036,"identifierName":"com.kamer.orny.data.room.SettingsDao","requiredType":["data class PageSettingsEntity( @PrimaryKey val id: Int = 0, val budget: Double, @ColumnInfo(name = \"start_date\") val startDate: Date, val period: Int )"],"content":"@Query(\"SELECT * FROM page_settings LIMIT 1\")\n    fun getPageSettings(): Flowable<PageSettingsEntity>","prompt":""},{"id":2037,"identifierName":"com.kamer.orny.data.room.SettingsDao","requiredType":["data class PageSettingsEntity( @PrimaryKey val id: Int = 0, val budget: Double, @ColumnInfo(name = \"start_date\") val startDate: Date, val period: Int )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun setPageSettings(settings: PageSettingsEntity)","prompt":""},{"id":2038,"identifierName":"com.kamer.orny.data.room.SettingsDao","requiredType":[],"content":"@Query(\"SELECT authors.* FROM authors JOIN app_settings ON authors.id = app_settings.default_author_id\")\n    fun getDefaultAuthor(): Flowable<List<AuthorEntity>>","prompt":""},{"id":2039,"identifierName":"com.kamer.orny.data.room.SettingsDao","requiredType":["data class AppSettingsEntity( @PrimaryKey val id: Int = 0, @ColumnInfo(name = \"default_author_id\", index = true) val defaultAuthorId: String? )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun setAppSettings(settings: AppSettingsEntity)","prompt":""},{"id":2040,"identifierName":"io.ashdavies.playground.github.ConferenceDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Insert(onConflict = REPLACE)\n  suspend fun insert(conferences: List<Conference>)","prompt":""},{"id":2041,"identifierName":"io.ashdavies.playground.github.ConferenceDao","requiredType":[],"content":"@Query(\"SELECT * FROM conferences ORDER BY dateStart ASC\")\n  fun conferences(): DataSource.Factory<Int, Conference>","prompt":""},{"id":2042,"identifierName":"com.devmpv.repositories.AttachmentRepository","requiredType":[],"content":"@Query(\"select count(m) from Attachment a join a.messages m where a.id = ?1\")\n    fun countMessages(id: Long): Long?","prompt":""},{"id":2043,"identifierName":"com.devmpv.repositories.AttachmentRepository","requiredType":["data class Attachmentnull"],"content":"fun findByMd5(md5: String): Optional<Attachment>","prompt":""},{"id":2044,"identifierName":"com.devmpv.repositories.AttachmentRepository","requiredType":["data class Attachmentnull"],"content":"@Query(\"select a from Attachment a where a.messages IS EMPTY\")\n    fun findEmpty(): Set<Attachment>","prompt":""},{"id":2045,"identifierName":"androidx.work.impl.model.SystemIdInfoDao","requiredType":[],"content":"/**\n     * Inserts a [SystemIdInfo] into the database.\n     *\n     * @param systemIdInfo The [SystemIdInfo] to be inserted into the database.\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertSystemIdInfo(systemIdInfo: SystemIdInfo)","prompt":""},{"id":2046,"identifierName":"androidx.work.impl.model.SystemIdInfoDao","requiredType":[],"content":"/**\n     * @param workSpecId The [WorkSpec] identifier.\n     * @return The instance of [SystemIdInfo] if exists.\n     */\n    @Query(\"SELECT * FROM SystemIdInfo WHERE work_spec_id=:workSpecId AND generation=:generation\")\n    fun getSystemIdInfo(workSpecId: String, generation: Int): SystemIdInfo?","prompt":""},{"id":2047,"identifierName":"androidx.work.impl.model.SystemIdInfoDao","requiredType":[],"content":"fun getSystemIdInfo(id: WorkGenerationalId) = getSystemIdInfo(id.workSpecId, id.generation)","prompt":""},{"id":2048,"identifierName":"androidx.work.impl.model.SystemIdInfoDao","requiredType":[],"content":"/**\n     * Removes [SystemIdInfo] corresponding to the [WorkSpec] identifier.\n     *\n     * @param workSpecId The [WorkSpec] identifier.\n     */\n    @Query(\"DELETE FROM SystemIdInfo where work_spec_id=:workSpecId AND generation=:generation\")\n    fun removeSystemIdInfo(workSpecId: String, generation: Int)","prompt":""},{"id":2049,"identifierName":"androidx.work.impl.model.SystemIdInfoDao","requiredType":[],"content":"/**\n     * Removes [SystemIdInfo] corresponding to the [WorkSpec] identifier.\n     *\n     * @param workSpecId The [WorkSpec] identifier.\n     */\n    @Query(\"DELETE FROM SystemIdInfo where work_spec_id=:workSpecId\")\n    fun removeSystemIdInfo(workSpecId: String)","prompt":""},{"id":2050,"identifierName":"androidx.work.impl.model.SystemIdInfoDao","requiredType":[],"content":"fun removeSystemIdInfo(id: WorkGenerationalId) =\n        removeSystemIdInfo(id.workSpecId, id.generation)","prompt":""},{"id":2051,"identifierName":"androidx.work.impl.model.SystemIdInfoDao","requiredType":[],"content":"/**\n     * @return The [List] of [WorkSpec] ids.\n     */\n    @Query(\"SELECT DISTINCT work_spec_id FROM SystemIdInfo\")\n    fun getWorkSpecIds(): List<String>","prompt":""},{"id":2052,"identifierName":"com.kingz.database.dao.UserInfoDao","requiredType":["data class UserInfoEntity( val admin:Boolean, val isLogin:Boolean, val userId:Int, val nickname:String, val publicName:String, val username:String, val email:String, val token:String )"],"content":"@Query(\"SELECT * FROM UserInfoEntity WHERE isLogin = 1\")\n    fun queryUserIsLogin():LiveData<UserInfoEntity>","prompt":""},{"id":2053,"identifierName":"com.kingz.database.dao.UserInfoDao","requiredType":[],"content":"@Query(\"SELECT token FROM UserInfoEntity WHERE userId == :userId\")\n    fun queryUserToken(userId:String): String?","prompt":""},{"id":2054,"identifierName":"com.kingz.database.dao.UserInfoDao","requiredType":["data class UserInfoEntity( val admin:Boolean, val isLogin:Boolean, val userId:Int, val nickname:String, val publicName:String, val username:String, val email:String, val token:String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertUserInfo(entity: UserInfoEntity)","prompt":""},{"id":2055,"identifierName":"com.renard.ocr.billing.cache.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"SELECT * FROM AugmentedSkuDetails WHERE type = '${BillingClient.SkuType.INAPP}'\")\n   fun getInappSkuDetails(): LiveData<List<AugmentedSkuDetails>>","prompt":""},{"id":2056,"identifierName":"com.renard.ocr.billing.cache.AugmentedSkuDetailsDao","requiredType":[],"content":"@Transaction\n   fun insertOrUpdate(skuDetails: SkuDetails) = skuDetails.apply {\n       val result = getById(sku)\n       val canPurchase = result?.canPurchase ?: true\n       val originalJson = toString().substring(\"SkuDetails: \".length)\n       insert(AugmentedSkuDetails(canPurchase, sku, type, price, title, description, originalJson))\n   }","prompt":""},{"id":2057,"identifierName":"com.renard.ocr.billing.cache.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"SELECT * FROM AugmentedSkuDetails WHERE sku = :sku\")\n   fun getById(sku: String): AugmentedSkuDetails?","prompt":""},{"id":2058,"identifierName":"com.renard.ocr.billing.cache.AugmentedSkuDetailsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n   fun insert(augmentedSkuDetails: AugmentedSkuDetails)","prompt":""},{"id":2059,"identifierName":"com.renard.ocr.billing.cache.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"UPDATE AugmentedSkuDetails SET canPurchase = :canPurchase WHERE sku = :sku\")\n   fun update(sku: String, canPurchase: Boolean)","prompt":""},{"id":2060,"identifierName":"us.mikeandwan.photos.database.RandomPreferenceDao","requiredType":[],"content":"@Query(\"SELECT * FROM random_preference WHERE id = :id\")\n    fun getRandomPreference(id: Int): Flow<RandomPreference>","prompt":""},{"id":2061,"identifierName":"us.mikeandwan.photos.database.RandomPreferenceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun setRandomPreference(preference: RandomPreference)","prompt":""},{"id":2062,"identifierName":"de.tum.`in`.tumcampusapp.utils.sync.SyncDao","requiredType":[],"content":"@Query(\"SELECT lastSync FROM sync WHERE (strftime('%s','now') - strftime('%s',lastSync)) < :seconds AND id=:id\")\n    fun getSyncSince(id: String, seconds: Int): String?","prompt":""},{"id":2063,"identifierName":"de.tum.`in`.tumcampusapp.utils.sync.SyncDao","requiredType":[],"content":"@Query(\"DELETE FROM sync\")\n    fun removeCache()","prompt":""},{"id":2064,"identifierName":"de.tum.`in`.tumcampusapp.utils.sync.SyncDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(sync: Sync)","prompt":""},{"id":2065,"identifierName":"com.google.android.ground.persistence.local.room.dao.LocationOfInterestDao","requiredType":[],"content":"@Query(\"SELECT * FROM location_of_interest WHERE survey_id = :surveyId AND state = :state\")\n  fun findOnceAndStream(\n    surveyId: String,\n    state: EntityState\n  ): Flowable<List<LocationOfInterestEntity>>","prompt":""},{"id":2066,"identifierName":"com.google.android.ground.persistence.local.room.dao.LocationOfInterestDao","requiredType":["data class LocationOfInterestEntity( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"survey_id\") val surveyId: String, @ColumnInfo(name = \"job_id\") val jobId: String, @ColumnInfo(name = \"state\") var state: EntityState, @Embedded(prefix = \"created_\") val created: AuditInfoEntity, @Embedded(prefix = \"modified_\") val lastModified: AuditInfoEntity, @Embedded val geometry: GeometryEntity? )"],"content":"@Query(\"SELECT * FROM location_of_interest WHERE id = :id\")\n  fun findById(id: String): Maybe<LocationOfInterestEntity>","prompt":""},{"id":2067,"identifierName":"app.ss.storage.db.dao.AudioDao","requiredType":[],"content":"@Query(\"SELECT * FROM audios WHERE id = :id\")\n    fun findBy(id: String): AudioFileEntity?","prompt":""},{"id":2068,"identifierName":"app.ss.storage.db.dao.AudioDao","requiredType":[],"content":"@Query(\"SELECT * FROM audios WHERE targetIndex LIKE :index ORDER BY targetIndex\")\n    fun getBy(index: String): List<AudioFileEntity>","prompt":""},{"id":2069,"identifierName":"app.ss.storage.db.dao.AudioDao","requiredType":[],"content":"@Query(\"UPDATE audios SET duration = :duration WHERE id = :forId\")\n    fun update(duration: Long, forId: String)","prompt":""},{"id":2070,"identifierName":"app.ss.storage.db.dao.AudioDao","requiredType":[],"content":"@Query(\"DELETE FROM audios WHERE targetIndex LIKE :index\")\n    suspend fun delete(index: String)","prompt":""},{"id":2071,"identifierName":"com.perqin.dailywallpapers.data.models.wallpaperssource.WallpapersSourceDao","requiredType":[],"content":"@Insert\n    fun insertWallpapersSource(wallpapersSource: WallpapersSource)","prompt":""},{"id":2072,"identifierName":"com.perqin.dailywallpapers.data.models.wallpaperssource.WallpapersSourceDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${WallpapersSource.TABLE_NAME}\")\n    fun queryAllWallpapersSources(): LiveData<List<WallpapersSource>>","prompt":""},{"id":2073,"identifierName":"com.perqin.dailywallpapers.data.models.wallpaperssource.WallpapersSourceDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${WallpapersSource.TABLE_NAME} WHERE ${WallpapersSource.UID} = :wallpapersSourceUid LIMIT 1\")\n    fun queryWallpapersSourceByUid(wallpapersSourceUid: Long): LiveData<WallpapersSource>","prompt":""},{"id":2074,"identifierName":"com.perqin.dailywallpapers.data.models.wallpaperssource.WallpapersSourceDao","requiredType":[],"content":"@Update\n    fun updateWallpapersSource(wallpapersSource: WallpapersSource)","prompt":""},{"id":2075,"identifierName":"com.perqin.dailywallpapers.data.models.wallpaperssource.WallpapersSourceDao","requiredType":[],"content":"@Delete\n    fun deleteWallpapersSource(wallpapersSource: WallpapersSource)","prompt":""},{"id":2076,"identifierName":"com.jospint.droiddevs.architecturecomponents.db.ForecastDao","requiredType":["data class Place( @PrimaryKey val id: String, val name: String, val latitude: Double, val longitude: Double, @Embedded var forecast: Forecast? = null)"],"content":"@Query(\"SELECT * FROM place where id = :p0\")\n    fun getPlace(id:String) : LiveData<Place>","prompt":""},{"id":2077,"identifierName":"com.jospint.droiddevs.architecturecomponents.db.ForecastDao","requiredType":["data class Place( @PrimaryKey val id: String, val name: String, val latitude: Double, val longitude: Double, @Embedded var forecast: Forecast? = null)"],"content":"@Insert(onConflict = REPLACE)\n    fun insertPlace(place: Place)","prompt":""},{"id":2078,"identifierName":"com.emogoth.android.phone.mimi.db.dao.UserPostAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.USER_POSTS_TABLE}\")\n    abstract fun getAll(): Single<List<UserPost>>","prompt":""},{"id":2079,"identifierName":"com.emogoth.android.phone.mimi.db.dao.UserPostAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.USER_POSTS_TABLE} WHERE ${UserPost.BOARD_NAME} = :boardName AND ${UserPost.THREAD_ID} = :threadId\")\n    abstract fun getPosts(boardName: String, threadId: Long): Flowable<List<UserPost>>","prompt":""},{"id":2080,"identifierName":"com.emogoth.android.phone.mimi.db.dao.UserPostAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.USER_POSTS_TABLE} WHERE ${UserPost.BOARD_NAME} = :boardName AND ${UserPost.THREAD_ID} = :threadId AND ${UserPost.POST_ID} = :postId\")\n    abstract fun removePost(boardName: String, threadId: Long, postId: Long): Single<Int>","prompt":""},{"id":2081,"identifierName":"com.emogoth.android.phone.mimi.db.dao.UserPostAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.USER_POSTS_TABLE} WHERE ${UserPost.POST_TIME} < :timestamp\")\n    abstract fun prune(timestamp: Long)","prompt":""},{"id":2082,"identifierName":"org.videolan.vlc.database.SlaveDao","requiredType":["data class Slave( @PrimaryKey @ColumnInfo(name = \"slave_media_mrl\") val mediaPath: String, @ColumnInfo(name = \"slave_type\") val type: Int, @ColumnInfo(name = \"slave_priority\") val priority:Int, @ColumnInfo(name = \"slave_uri\") val uri: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(slave: Slave)","prompt":""},{"id":2083,"identifierName":"org.videolan.vlc.database.SlaveDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(slaves: Array<Slave>)","prompt":""},{"id":2084,"identifierName":"org.videolan.vlc.database.SlaveDao","requiredType":["data class Slave( @PrimaryKey @ColumnInfo(name = \"slave_media_mrl\") val mediaPath: String, @ColumnInfo(name = \"slave_type\") val type: Int, @ColumnInfo(name = \"slave_priority\") val priority:Int, @ColumnInfo(name = \"slave_uri\") val uri: String )"],"content":"@Query(\"SELECT * from SLAVES_table where slave_media_mrl = :mrl\")\n    fun get(mrl: String): List<Slave>","prompt":""},{"id":2085,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\n        \"\"\"SELECT * FROM beers\n        WHERE instr(normalized_name, :q1) > 0\n        AND (:q2 IS NULL OR instr(normalized_name, :q2) > 0)\n        AND (:q3 IS NULL OR instr(normalized_name, :q3) > 0)\"\"\"\n    )\n    abstract fun search(\n        q1: String,\n        q2: String? = null,\n        q3: String? = null\n    ): Flow<List<BeerEntity>>","prompt":""},{"id":2086,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"SELECT * FROM beers WHERE liked > 0 ORDER BY time_entered\")\n    abstract fun tickedBeers(): Flow<List<BeerEntity>>","prompt":""},{"id":2087,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"UPDATE beers SET liked = null, time_entered = null\")\n    abstract suspend fun clearTicks()","prompt":""},{"id":2088,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"SELECT id FROM beers WHERE accessed IS NOT NULL ORDER BY accessed DESC\")\n    abstract fun lastAccessed(): Flow<List<Int>>","prompt":""},{"id":2089,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"SELECT * FROM beers WHERE id=:key\")\n    abstract suspend fun get(key: Int): BeerEntity?","prompt":""},{"id":2090,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Transaction\n    open suspend fun get(keys: List<Int>): List<BeerEntity> {\n        return getBatch(keys, ::getList)\n    }","prompt":""},{"id":2091,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"SELECT * FROM beers WHERE id IN (:keys)\")\n    abstract suspend fun getList(keys: List<Int>): List<BeerEntity>","prompt":""},{"id":2092,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"SELECT * FROM beers WHERE id=:key\")\n    abstract fun getStream(key: Int): Flow<BeerEntity?>","prompt":""},{"id":2093,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"SELECT * FROM beers\")\n    abstract suspend fun getAll(): List<BeerEntity>","prompt":""},{"id":2094,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"SELECT * FROM beers\")\n    abstract fun getAllStream(): Flow<List<BeerEntity>>","prompt":""},{"id":2095,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"SELECT id FROM beers\")\n    abstract fun getKeys(): List<Int>","prompt":""},{"id":2096,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"SELECT id FROM beers\")\n    abstract fun getKeysStream(): Flow<List<Int>>","prompt":""},{"id":2097,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Transaction\n    open suspend fun put(value: BeerEntity): BeerEntity? {\n        return putMerged(value, ::get)\n    }","prompt":""},{"id":2098,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Transaction\n    open suspend fun put(values: List<BeerEntity>): List<BeerEntity> {\n        return putBatch(values, ::get)\n    }","prompt":""},{"id":2099,"identifierName":"quickbeer.android.domain.beer.store.BeerDao","requiredType":[],"content":"@Query(\"DELETE FROM beers WHERE id=:key\")\n    abstract suspend fun delete(key: Int): Int","prompt":""},{"id":2100,"identifierName":"dev.mfazio.abl.data.PlayerKeysDao","requiredType":[],"content":"@Query(\"SELECT * FROM player_keys WHERE playerId = :playerId\")\n    suspend fun getPlayerKeysByPlayerId(playerId: String): PlayerKeys?","prompt":""},{"id":2101,"identifierName":"dev.mfazio.abl.data.PlayerKeysDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertKeys(keys: List<PlayerKeys>)","prompt":""},{"id":2102,"identifierName":"dev.mfazio.abl.data.PlayerKeysDao","requiredType":[],"content":"@Query(\"DELETE FROM player_keys\")\n    suspend fun deleteAllPlayerKeys()","prompt":""},{"id":2103,"identifierName":"com.generalmobile.app.gmnotes.db.dao.NoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM Note order by createDate desc\")\n    fun getNotes(): LiveData<List<Note>>","prompt":""},{"id":2104,"identifierName":"com.generalmobile.app.gmnotes.db.dao.NoteDao","requiredType":["data class Notenull"],"content":"@Query(\"SELECT * FROM Note where id = :noteId\")\n    fun getNote(noteId: Long): Note","prompt":""},{"id":2105,"identifierName":"com.generalmobile.app.gmnotes.db.dao.NoteDao","requiredType":["data class Notenull"],"content":"@Insert(onConflict = REPLACE)\n    fun insertNote(note: Note)","prompt":""},{"id":2106,"identifierName":"com.generalmobile.app.gmnotes.db.dao.NoteDao","requiredType":["data class Notenull"],"content":"@Update\n    fun updateNote(note: Note)","prompt":""},{"id":2107,"identifierName":"com.generalmobile.app.gmnotes.db.dao.NoteDao","requiredType":["data class Notenull"],"content":"@Delete\n    fun deleteNote(note: Note)","prompt":""},{"id":2108,"identifierName":"com.generalmobile.app.gmnotes.db.dao.NoteDao","requiredType":[],"content":"@Query(\"Select count(*) from Note\")\n    fun getCount(): Int","prompt":""},{"id":2109,"identifierName":"de.maxdobler.systemicconsensus.team.TeamDao","requiredType":[],"content":"@Insert\n    fun insert(team: Team)","prompt":""},{"id":2110,"identifierName":"de.maxdobler.systemicconsensus.team.TeamDao","requiredType":[],"content":"@Query(\"SELECT * FROM team\")\n    fun loadAll(): LiveData<List<Team>>","prompt":""},{"id":2111,"identifierName":"de.stefanmedack.ccctv.persistence.daos.EventDao","requiredType":[],"content":"@Query(\"SELECT * FROM Events\")\n    fun getEvents(): Flowable<List<Event>>","prompt":""},{"id":2112,"identifierName":"de.stefanmedack.ccctv.persistence.daos.EventDao","requiredType":[],"content":"@Query(\"SELECT * FROM Events WHERE id in (:ids)\")\n    fun getEvents(ids: List<String>): Flowable<List<Event>>","prompt":""},{"id":2113,"identifierName":"de.stefanmedack.ccctv.persistence.daos.EventDao","requiredType":[],"content":"@Query(\"SELECT * FROM Events ORDER BY date(date) DESC Limit 25\")\n    fun getRecentEvents(): Flowable<List<Event>>","prompt":""},{"id":2114,"identifierName":"de.stefanmedack.ccctv.persistence.daos.EventDao","requiredType":[],"content":"@Query(\"SELECT * FROM Events WHERE promoted = 1 Limit 25\")\n    fun getPromotedEvents(): Flowable<List<Event>>","prompt":""},{"id":2115,"identifierName":"de.stefanmedack.ccctv.persistence.daos.EventDao","requiredType":[],"content":"@Query(\"SELECT * FROM Events ORDER BY view_count DESC Limit 25\")\n    fun getPopularEvents(): Flowable<List<Event>>","prompt":""},{"id":2116,"identifierName":"de.stefanmedack.ccctv.persistence.daos.EventDao","requiredType":[],"content":"@Query(\"SELECT * FROM Events WHERE date > :date ORDER BY view_count DESC Limit 25\")\n    fun getPopularEventsYoungerThan(date: OffsetDateTime): Flowable<List<Event>>","prompt":""},{"id":2117,"identifierName":"de.stefanmedack.ccctv.persistence.daos.EventDao","requiredType":["data class Event( @PrimaryKey val id: String, @ColumnInfo(name = \"conference_acronym\") val conferenceAcronym: String, @ColumnInfo(name = \"url\") val url: String, @ColumnInfo(name = \"slug\") val slug: String, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"subtitle\") val subtitle: String = EMPTY_STRING, @ColumnInfo(name = \"description\") val description: String = EMPTY_STRING, @ColumnInfo(name = \"persons\") val persons: List<String> = listOf(), @ColumnInfo(name = \"thumb_url\") val thumbUrl: String? = null, @ColumnInfo(name = \"poster_url\") val posterUrl: String? = null, @ColumnInfo(name = \"original_language\") val originalLanguage: LanguageList = LanguageList(), @ColumnInfo(name = \"duration\") val duration: Int? = null, @ColumnInfo(name = \"view_count\") val viewCount: Int = 0, @ColumnInfo(name = \"promoted\") val promoted: Boolean = false, @ColumnInfo(name = \"tags\") val tags: List<String> = listOf(), @ColumnInfo(name = \"related\") val related: List<RelatedEvent> = listOf(), @ColumnInfo(name = \"release_date\") val releaseDate: LocalDate? = null, @ColumnInfo(name = \"date\") val date: OffsetDateTime? = null, @ColumnInfo(name = \"updated_at\") val updatedAt: OffsetDateTime? = null )"],"content":"@Query(\"SELECT * FROM Events WHERE id = :id\")\n    fun getEventById(id: String): Single<Event>","prompt":""},{"id":2118,"identifierName":"de.stefanmedack.ccctv.persistence.daos.EventDao","requiredType":["data class Event( @PrimaryKey val id: String, @ColumnInfo(name = \"conference_acronym\") val conferenceAcronym: String, @ColumnInfo(name = \"url\") val url: String, @ColumnInfo(name = \"slug\") val slug: String, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"subtitle\") val subtitle: String = EMPTY_STRING, @ColumnInfo(name = \"description\") val description: String = EMPTY_STRING, @ColumnInfo(name = \"persons\") val persons: List<String> = listOf(), @ColumnInfo(name = \"thumb_url\") val thumbUrl: String? = null, @ColumnInfo(name = \"poster_url\") val posterUrl: String? = null, @ColumnInfo(name = \"original_language\") val originalLanguage: LanguageList = LanguageList(), @ColumnInfo(name = \"duration\") val duration: Int? = null, @ColumnInfo(name = \"view_count\") val viewCount: Int = 0, @ColumnInfo(name = \"promoted\") val promoted: Boolean = false, @ColumnInfo(name = \"tags\") val tags: List<String> = listOf(), @ColumnInfo(name = \"related\") val related: List<RelatedEvent> = listOf(), @ColumnInfo(name = \"release_date\") val releaseDate: LocalDate? = null, @ColumnInfo(name = \"date\") val date: OffsetDateTime? = null, @ColumnInfo(name = \"updated_at\") val updatedAt: OffsetDateTime? = null )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(event: Event)","prompt":""},{"id":2119,"identifierName":"de.stefanmedack.ccctv.persistence.daos.EventDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(events: List<Event>)","prompt":""},{"id":2120,"identifierName":"androidx.paging.samples.shared.UserDao","requiredType":["data class PagingSourcenull"],"content":"// Normally suspend when using Kotlin Coroutines, but sync version allows this Dao to be used\n    // in both Java and Kotlin samples.\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(users: List<User>)","prompt":""},{"id":2121,"identifierName":"androidx.paging.samples.shared.UserDao","requiredType":[],"content":"fun pagingSource(): PagingSource<Int, User>","prompt":""},{"id":2122,"identifierName":"androidx.paging.samples.shared.UserDao","requiredType":["data class PagingSourcenull"],"content":"// Normally suspend when using Kotlin Coroutines, but sync version allows this Dao to be used\n    // in both Java and Kotlin samples.\n    @Query(\"DELETE FROM users WHERE label = :query\")\n    fun deleteByQuery(query: String)","prompt":""},{"id":2123,"identifierName":"androidx.paging.samples.shared.UserDao","requiredType":[],"content":"suspend fun lastUpdated(): Long","prompt":""},{"id":2124,"identifierName":"androidx.paging.samples.shared.UserDao","requiredType":[],"content":"fun lastUpdatedFuture(): ListenableFuture<Long>","prompt":""},{"id":2125,"identifierName":"androidx.paging.samples.shared.UserDao","requiredType":[],"content":"fun lastUpdatedSingle(): Single<Long>","prompt":""},{"id":2126,"identifierName":"com.brackeys.ui.data.storage.database.dao.theme.ThemeDao","requiredType":[],"content":"@Query(\"SELECT * FROM `${Tables.THEMES}` WHERE `name` LIKE '%' || :searchQuery || '%'\")\n    abstract suspend fun loadAll(searchQuery: String): List<ThemeEntity>","prompt":""},{"id":2127,"identifierName":"com.brackeys.ui.data.storage.database.dao.theme.ThemeDao","requiredType":[],"content":"@Query(\"SELECT * FROM `${Tables.THEMES}` WHERE `uuid` = :uuid\")\n    abstract suspend fun load(uuid: String): ThemeEntity","prompt":""},{"id":2128,"identifierName":"com.brackeys.ui.data.storage.database.dao.theme.ThemeDao","requiredType":[],"content":"@Query(\"DELETE FROM `${Tables.THEMES}`\")\n    abstract suspend fun deleteAll()","prompt":""},{"id":2129,"identifierName":"org.jraf.android.cinetoday.database.TheaterDao","requiredType":[],"content":"@Query(\"SELECT * FROM Theater\")\n    fun allTheatersLive(): LiveData<Array<Theater>>","prompt":""},{"id":2130,"identifierName":"org.jraf.android.cinetoday.database.TheaterDao","requiredType":["data class Theater( @PrimaryKey override var id: String, var name: String, var address: String, var pictureUri: String? )"],"content":"@Query(\"SELECT * FROM Theater\")\n    fun allTheaters(): Array<Theater>","prompt":""},{"id":2131,"identifierName":"org.jraf.android.cinetoday.database.TheaterDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM Theater\")\n    fun countTheaters(): Int","prompt":""},{"id":2132,"identifierName":"org.jraf.android.cinetoday.database.TheaterDao","requiredType":["data class Theater( @PrimaryKey override var id: String, var name: String, var address: String, var pictureUri: String? )"],"content":"@Insert\n    fun insert(theater: Theater)","prompt":""},{"id":2133,"identifierName":"org.jraf.android.cinetoday.database.TheaterDao","requiredType":[],"content":"@Query(\"DELETE from Theater where id=:id\")\n    fun delete(id: String)","prompt":""},{"id":2134,"identifierName":"org.monora.uprotocol.client.android.database.WebTransferDao","requiredType":[],"content":"@Query(\"SELECT * FROM webTransfer WHERE id = :id\")\n    fun get(id: Int): LiveData<WebTransfer>","prompt":""},{"id":2135,"identifierName":"org.monora.uprotocol.client.android.database.WebTransferDao","requiredType":[],"content":"@Query(\"SELECT * FROM webTransfer WHERE uri = :uri\")\n    suspend fun get(uri: Uri): WebTransfer?","prompt":""},{"id":2136,"identifierName":"org.monora.uprotocol.client.android.database.WebTransferDao","requiredType":[],"content":"@Query(\"SELECT * FROM webTransfer ORDER BY dateCreated DESC\")\n    fun getAll(): LiveData<List<WebTransfer>>","prompt":""},{"id":2137,"identifierName":"org.monora.uprotocol.client.android.database.WebTransferDao","requiredType":[],"content":"@Insert\n    suspend fun insert(webTransfer: WebTransfer)","prompt":""},{"id":2138,"identifierName":"org.monora.uprotocol.client.android.database.WebTransferDao","requiredType":[],"content":"@Delete\n    suspend fun remove(webTransfer: WebTransfer)","prompt":""},{"id":2139,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":[],"content":"@Query(\"SELECT * from meteorites ORDER BY name LIMIT :limit\")\n    fun meteoriteOrdered(limit: Long): DataSource.Factory<Int, Meteorite>","prompt":""},{"id":2140,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":[],"content":"@Query(\"SELECT * from meteorites ORDER BY ((reclat-:lat)*(reclat-:lat)) + ((reclong - :lng)*(reclong - :lng)) ASC\")\n    fun meteoriteOrderedByLocation(lat: Double, lng: Double): DataSource.Factory<Int, Meteorite>","prompt":""},{"id":2141,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":[],"content":"@Query(\"SELECT * from meteorites WHERE (LOWER(address) GLOB '*' || :filter|| '*') or (LOWER(name) GLOB '*' || :filter|| '*') ORDER BY ((reclat-:lat)*(reclat-:lat)) + ((reclong - :lng)*(reclong - :lng)) ASC\")\n    fun meteoriteOrderedByLocationFiltered(lat: Double, lng: Double, filter: String): DataSource.Factory<Int, Meteorite>","prompt":""},{"id":2142,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":[],"content":"@Query(\"SELECT * from meteorites WHERE (LOWER(address) GLOB '*' || :filter|| '*') or (LOWER(name) GLOB '*' || :filter|| '*') ORDER BY name ASC LIMIT 5000\")\n    fun meteoriteFiltered(filter: String): DataSource.Factory<Int, Meteorite>","prompt":""},{"id":2143,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":[],"content":"@Query(\"SELECT * from meteorites WHERE address IS NULL OR LENGTH(address) = 0 ORDER BY id LIMIT 30\")\n    fun meteoritesWithOutAddress(): Flow<List<Meteorite>>","prompt":""},{"id":2144,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":["data class Meteorite( @PrimaryKey @SerializedName(\"id\") var id: Int = 0, var mass: String? = null, var nametype: String? = null, var recclass: String? = null, var name: String? = null, var fall: String? = null, var year: String? = null, var reclong: String? = null, var reclat: String? = null, var address: String? = null )"],"content":"@Query(\"SELECT * from meteorites where id = :meteoriteId LIMIT 1\")\n    fun getMeteoriteById(meteoriteId: String): Flow<Meteorite>","prompt":""},{"id":2145,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":[],"content":"@Query(\"SELECT count(id) from meteorites\")\n    suspend fun getMeteoritesCount(): Int","prompt":""},{"id":2146,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":[],"content":"@Query(\"SELECT count(id) from meteorites WHERE address IS NULL OR LENGTH(address) = 0\")\n    suspend fun getMeteoritesWithoutAddressCount(): Int","prompt":""},{"id":2147,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertAll(items: List<Meteorite>)","prompt":""},{"id":2148,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun updateAll(items: List<Meteorite>)","prompt":""},{"id":2149,"identifierName":"com.antonio.samir.meteoritelandingsspots.data.local.database.MeteoriteDao","requiredType":["data class Meteorite( @PrimaryKey @SerializedName(\"id\") var id: Int = 0, var mass: String? = null, var nametype: String? = null, var recclass: String? = null, var name: String? = null, var fall: String? = null, var year: String? = null, var reclong: String? = null, var reclat: String? = null, var address: String? = null )","data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Update\n    suspend fun update(meteorite: Meteorite)","prompt":""},{"id":2150,"identifierName":"data.tinder.recommendation.RecommendationUserDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertUser(user: RecommendationUserEntity)","prompt":""},{"id":2151,"identifierName":"data.tinder.recommendation.RecommendationUserDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserEntity WHERE id=:id\")\n  @Transaction\n  fun selectUserById(id: String): LiveData<List<RecommendationUserWithRelatives>>","prompt":""},{"id":2152,"identifierName":"data.tinder.recommendation.RecommendationUserDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserEntity WHERE instr(name, :filter) > 0 ORDER BY distanceMiles ASC\")\n  @Transaction\n  fun selectUsersByFilterOnName(filter: String)\n      : DataSource.Factory<Int, RecommendationUserWithRelatives>","prompt":""},{"id":2153,"identifierName":"org.monora.uprotocol.client.android.database.ClientAddressDao","requiredType":[],"content":"@Query(\"SELECT * FROM clientAddress WHERE clientUid = :clientUid\")\n    suspend fun getAll(clientUid: String): List<UClientAddress>","prompt":""},{"id":2154,"identifierName":"org.monora.uprotocol.client.android.database.ClientAddressDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(address: UClientAddress)","prompt":""},{"id":2155,"identifierName":"com.apps.adrcotfas.goodtime.database.ProfileDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun addProfile(profile: Profile)","prompt":""},{"id":2156,"identifierName":"com.apps.adrcotfas.goodtime.database.ProfileDao","requiredType":[],"content":"@Query(\"delete from Profile where name = :name\")\n    fun deleteProfile(name: String)","prompt":""},{"id":2157,"identifierName":"net.blakelee.coinprofits.repository.db.TransactionDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertTransactions(transactions: List<Transaction>)","prompt":""},{"id":2158,"identifierName":"net.blakelee.coinprofits.repository.db.TransactionDao","requiredType":[],"content":"@Query(\"SELECT * FROM transactions WHERE id = :id\")\n    fun getTransactionsById(id: String): Flowable<List<Transaction>>","prompt":""},{"id":2159,"identifierName":"net.blakelee.coinprofits.repository.db.TransactionDao","requiredType":[],"content":"@Query(\"SELECT * FROM transactions WHERE publicKey = :publicKey\")\n    fun getTransactionsByAddress(publicKey: String): Flowable<List<Transaction>>","prompt":""},{"id":2160,"identifierName":"net.blakelee.coinprofits.repository.db.TransactionDao","requiredType":[],"content":"@Query(\"DELETE FROM transactions WHERE id = :id\")\n    fun deleteTransactionsById(id: String)","prompt":""},{"id":2161,"identifierName":"org.stepik.android.cache.review_session.dao.ReviewSessionDao","requiredType":["data class ReviewSession( @PrimaryKey @SerializedName(\"id\") override val id: Long, @SerializedName(\"instruction\") val instruction: Long, @SerializedName(\"submission\") val submission: Long, @SerializedName(\"given_reviews\") val givenReviews: List<Long>, @SerializedName(\"is_giving_started\") val isGivingStarted: Boolean, @SerializedName(\"is_giving_finished\") val isGivingFinished: Boolean, @SerializedName(\"taken_reviews\") val takenReviews: List<Long>, @SerializedName(\"is_taking_started\") val isTakingStarted: Boolean, @SerializedName(\"is_taking_finished\") val isTakingFinished: Boolean, @SerializedName(\"is_taking_finished_by_teacher\") val isTakingFinishedByTeacher: Boolean, @SerializedName(\"when_taking_finished_by_teacher\") val whenTakingFinishedByTeacher: Date?, @SerializedName(\"is_review_available\") val isReviewAvailable: Boolean, @SerializedName(\"is_finished\") val isFinished: Boolean, @SerializedName(\"score\") val score: Float, @SerializedName(\"available_reviews_count\") val availableReviewsCount: Int?, @SerializedName(\"active_review\") val activeReview: Long?, @Embedded @SerializedName(\"actions\") val actions: Actions )"],"content":"@Query(\"SELECT * FROM ReviewSession WHERE id IN (:ids)\")\n    fun getReviewSessions(ids: List<Long>): List<ReviewSession>","prompt":""},{"id":2162,"identifierName":"org.stepik.android.cache.review_session.dao.ReviewSessionDao","requiredType":["data class ReviewSession( @PrimaryKey @SerializedName(\"id\") override val id: Long, @SerializedName(\"instruction\") val instruction: Long, @SerializedName(\"submission\") val submission: Long, @SerializedName(\"given_reviews\") val givenReviews: List<Long>, @SerializedName(\"is_giving_started\") val isGivingStarted: Boolean, @SerializedName(\"is_giving_finished\") val isGivingFinished: Boolean, @SerializedName(\"taken_reviews\") val takenReviews: List<Long>, @SerializedName(\"is_taking_started\") val isTakingStarted: Boolean, @SerializedName(\"is_taking_finished\") val isTakingFinished: Boolean, @SerializedName(\"is_taking_finished_by_teacher\") val isTakingFinishedByTeacher: Boolean, @SerializedName(\"when_taking_finished_by_teacher\") val whenTakingFinishedByTeacher: Date?, @SerializedName(\"is_review_available\") val isReviewAvailable: Boolean, @SerializedName(\"is_finished\") val isFinished: Boolean, @SerializedName(\"score\") val score: Float, @SerializedName(\"available_reviews_count\") val availableReviewsCount: Int?, @SerializedName(\"active_review\") val activeReview: Long?, @Embedded @SerializedName(\"actions\") val actions: Actions )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun saveReviewSession(item: ReviewSession)","prompt":""},{"id":2163,"identifierName":"setlist.shea.domain.db.SetListDao","requiredType":[],"content":"@Query(\"SELECT * FROM setlist\")\n    fun getAll() : Single<List<SetList>>","prompt":""},{"id":2164,"identifierName":"setlist.shea.domain.db.SetListDao","requiredType":[],"content":"@Query(\"SELECT * FROM setlist\")\n    fun getAllFlowable() : Flowable<List<SetList>>","prompt":""},{"id":2165,"identifierName":"setlist.shea.domain.db.SetListDao","requiredType":["data class SetList(@PrimaryKey var listName: String = \"\", var songs: List<Song> = emptyList())"],"content":"@Query(\"SELECT * from setlist WHERE listName LIKE :setListName\")\n    fun getSetList(setListName: String): Flowable<SetList>","prompt":""},{"id":2166,"identifierName":"setlist.shea.domain.db.SetListDao","requiredType":["data class SetList(@PrimaryKey var listName: String = \"\", var songs: List<Song> = emptyList())"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertSetList(setList: SetList)","prompt":""},{"id":2167,"identifierName":"setlist.shea.domain.db.SetListDao","requiredType":["data class SetList(@PrimaryKey var listName: String = \"\", var songs: List<Song> = emptyList())"],"content":"@Delete\n    fun delete(setList: SetList)","prompt":""},{"id":2168,"identifierName":"org.zeroxlab.momodict.db.room.EntryDao","requiredType":["data class Entry( var wordStr: String, var data: String? = null, var source: String? = null )"],"content":"@Query(\"SELECT * FROM entries WHERE wordStr = :keyword\")\n    fun getEntries(keyword: String): List<Entry>","prompt":""},{"id":2169,"identifierName":"org.zeroxlab.momodict.db.room.EntryDao","requiredType":["data class Entry( var wordStr: String, var data: String? = null, var source: String? = null )"],"content":"// TODO: can the limitation be configurable?\n    @Query(\"SELECT * FROM entries WHERE wordStr LIKE '%' || :keyword || '%' LIMIT 0, 1000\")\n    fun queryEntries(keyword: String): List<Entry>","prompt":""},{"id":2170,"identifierName":"org.zeroxlab.momodict.db.room.EntryDao","requiredType":["data class Entry( var wordStr: String, var data: String? = null, var source: String? = null )"],"content":"// TODO: can the limitation be configurable?\n    @Query(\"SELECT * FROM entries WHERE wordStr LIKE '%' || :keyword || '%' AND source is :bookName LIMIT 0, 1000\")\n    fun queryEntries(keyword: String, bookName: String): List<Entry>","prompt":""},{"id":2171,"identifierName":"org.zeroxlab.momodict.db.room.EntryDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun addEntries(entries: List<Entry>)","prompt":""},{"id":2172,"identifierName":"org.zeroxlab.momodict.db.room.EntryDao","requiredType":[],"content":"@Query(\"DELETE FROM entries WHERE source = :bookName\")\n    fun removeEntriesByBookName(bookName: String)","prompt":""},{"id":2173,"identifierName":"com.guerinet.mymartlet.util.room.daos.CourseDao","requiredType":["data class Term(val season: Season, val year: Int)","data class Course( val term: Term, val subject: String, val number: String, val title: String, val crn: Int, val section: String, val startTime: LocalTime, val endTime: LocalTime, val days: List<DayOfWeek>, val type: String, val location: String, val instructor: String, val credits: Double, val startDate: LocalDate, val endDate: LocalDate )"],"content":"/**\n     * Returns the list of [Course]s for the [term]\n     */\n    @Query(\"SELECT * FROM Course WHERE term = :term\")\n    abstract fun getTermCourses(term: Term): List<Course>","prompt":""},{"id":2174,"identifierName":"com.guerinet.mymartlet.util.room.daos.CourseDao","requiredType":[],"content":"/**\n     * Deletes all of the stored [Course]s\n     */\n    @Query(\"DELETE FROM Course\")\n    abstract fun deleteAll()","prompt":""},{"id":2175,"identifierName":"com.guerinet.mymartlet.util.room.daos.CourseDao","requiredType":["data class Term(val season: Season, val year: Int)"],"content":"/**\n     * Updates the stored [courses]\n     */\n    @Transaction\n    open fun update(courses: List<Course>, term: Term) {\n        // Set the term on the list of courses\n        courses.forEach { it.term = term }\n\n        update(courses, this::deleteAll)\n    }","prompt":""},{"id":2176,"identifierName":"com.waz.zclient.storage.db.messages.MessagesDeletionDao","requiredType":[],"content":"@Query(\"SELECT * FROM MsgDeletion\")\n    suspend fun allMessageDeletions(): List<MessageDeletionEntity>","prompt":""},{"id":2177,"identifierName":"com.izettle.wrench.database.WrenchPredefinedConfigurationValueDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + PredefinedConfigurationValueTable.TABLE_NAME + \" WHERE \" + PredefinedConfigurationValueTable.COL_CONFIG_ID + \" = (:configurationId)\")\n    fun getByConfigurationId(configurationId: Long): LiveData<List<WrenchPredefinedConfigurationValue>>","prompt":""},{"id":2178,"identifierName":"com.izettle.wrench.database.WrenchPredefinedConfigurationValueDao","requiredType":[],"content":"@Insert\n    fun insert(fullConfig: WrenchPredefinedConfigurationValue): Long","prompt":""},{"id":2179,"identifierName":"jp.hazuki.yuzubrowser.legacy.webrtc.WebPermissionsDao","requiredType":["data class WebPermissions( @PrimaryKey val host: String, var camera: PermissionState = PermissionState.UNCONFIGURED, var microphone: PermissionState = PermissionState.UNCONFIGURED, var midi: PermissionState = PermissionState.UNCONFIGURED, var mediaId: PermissionState = PermissionState.UNCONFIGURED, )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun update(permission: WebPermissions): Long","prompt":""},{"id":2180,"identifierName":"jp.hazuki.yuzubrowser.legacy.webrtc.WebPermissionsDao","requiredType":["data class WebPermissions( @PrimaryKey val host: String, var camera: PermissionState = PermissionState.UNCONFIGURED, var microphone: PermissionState = PermissionState.UNCONFIGURED, var midi: PermissionState = PermissionState.UNCONFIGURED, var mediaId: PermissionState = PermissionState.UNCONFIGURED, )"],"content":"@Query(\"select * from permissions order by host\")\n    suspend fun getList(): List<WebPermissions>","prompt":""},{"id":2181,"identifierName":"jp.hazuki.yuzubrowser.legacy.webrtc.WebPermissionsDao","requiredType":[],"content":"@Query(\"select * from permissions where host = :host\")\n    suspend fun get(host: String): WebPermissions?","prompt":""},{"id":2182,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT id, title, artistName, albumName, albumArtistName, time, art, url, genre FROM song JOIN queueorder ON song.id = queueorder.songId ORDER BY queueorder.`order`\")\n    fun displayInQueueOrder(): DataSource.Factory<Int, DbSongDisplay>","prompt":""},{"id":2183,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT id, title, artistName, albumName, albumArtistName, time, art, url, genre FROM song ORDER BY title\")\n    fun displayInAlphabeticalOrder(): DataSource.Factory<Int, DbSongDisplay>","prompt":""},{"id":2184,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT id, title, artistName, albumName, albumArtistName, time, art, url, genre FROM song WHERE title LIKE :filter ORDER BY title COLLATE UNICODE\")\n    fun displayFiltered(filter: String): DataSource.Factory<Int, DbSongDisplay>","prompt":""},{"id":2185,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT id, title, artistName, albumName, albumArtistName, time, art, url, genre FROM song WHERE title LIKE :filter ORDER BY genre COLLATE UNICODE\")\n    suspend fun displayFilteredList(filter: String): List<DbSongDisplay>","prompt":""},{"id":2186,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT id, local FROM song JOIN queueorder ON song.id = queueorder.songId ORDER BY queueorder.`order`\")\n    fun songsInQueueOrder(): LiveData<List<DbSongToPlay>>","prompt":""},{"id":2187,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT * FROM song JOIN queueorder ON song.id = queueorder.songId WHERE queueorder.`order` = :position\")\n    suspend fun forPositionInQueue(position: Int): DbSong?","prompt":""},{"id":2188,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT `order` FROM queueorder WHERE queueorder.songId = :songId\")\n    suspend fun findPositionInQueue(songId: Long): Int?","prompt":""},{"id":2189,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT queueorder.`order` FROM queueorder JOIN song ON queueorder.songId = song.id WHERE song.title LIKE :filter OR song.artistName LIKE :filter OR song.albumArtistName LIKE :filter OR song.albumName LIKE :filter ORDER BY queueorder.`order` COLLATE UNICODE\")\n    fun searchPositionsWhereFilterPresent(filter: String): LiveData<List<Long>>","prompt":""},{"id":2190,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery(observedEntities = [DbSong::class])\n    suspend fun forCurrentFilters(query: SupportSQLiteQuery): List<Long>","prompt":""},{"id":2191,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery\n    suspend fun artForFilters(query: SupportSQLiteQuery): List<String>","prompt":""},{"id":2192,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT genre FROM song ORDER BY genre COLLATE UNICODE\")\n    fun genreOrderByGenre(): DataSource.Factory<Int, String>","prompt":""},{"id":2193,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT genre FROM song WHERE genre LIKE :filter ORDER BY genre COLLATE UNICODE\")\n    fun genreOrderByGenreFiltered(filter: String): DataSource.Factory<Int, String>","prompt":""},{"id":2194,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT genre FROM song WHERE genre LIKE :filter ORDER BY genre COLLATE UNICODE\")\n    suspend fun genreOrderByGenreFilteredList(filter: String): List<String>","prompt":""},{"id":2195,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM queueorder\")\n    suspend fun queueSize(): Int?","prompt":""},{"id":2196,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"SELECT * FROM song WHERE id = :songId\")\n    suspend fun findById(songId: Long): DbSong?","prompt":""},{"id":2197,"identifierName":"be.florien.anyflow.data.local.dao.SongDao","requiredType":[],"content":"@Query(\"UPDATE song SET local = :uri WHERE id = :songId\")\n    suspend fun updateWithLocalUri(songId: Long, uri: String)","prompt":""},{"id":2198,"identifierName":"tonnysunm.com.acornote.model.NoteLabelCrossRefDao","requiredType":[],"content":"@Query(\"SELECT * from note_label_table\")\n    suspend fun getAll(): List<NoteLabelCrossRef>","prompt":""},{"id":2199,"identifierName":"tonnysunm.com.acornote.model.NoteLabelCrossRefDao","requiredType":[],"content":"@Query(\"DELETE FROM note_label_table WHERE label_id = :labelId AND note_id = :noteId\")\n    suspend fun delete(labelId: Int, noteId: Int)","prompt":""},{"id":2200,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class DataClassFromDependency( @PrimaryKey(autoGenerate = true) val id: Int, val name: String )"],"content":"@Query(\"select * from DataClassFromDependency\")\n    fun selectAll(): List<DataClassFromDependency>","prompt":""},{"id":2201,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class EmbeddedFromDependency( @Embedded val data: DataClassFromDependency)"],"content":"@Query(\"select * from DataClassFromDependency where id = :id LIMIT 1\")\n    fun findEmbedded(id: Int): EmbeddedFromDependency","prompt":""},{"id":2202,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class PojoFromDependency( val id: Int, val name: String )"],"content":"@Query(\"select * from DataClassFromDependency where id = :id LIMIT 1\")\n    fun findPojo(id: Int): PojoFromDependency","prompt":""},{"id":2203,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class DataClassFromDependency( @PrimaryKey(autoGenerate = true) val id: Int, val name: String )"],"content":"@Query(\"select * from DataClassFromDependency where id = :id LIMIT 1\")\n    fun findById(id: Int): DataClassFromDependency","prompt":""},{"id":2204,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class RelationFromDependency(val sharedName: String)"],"content":"@RequiresApi(Build.VERSION_CODES.LOLLIPOP)\n    @Transaction\n    @Query(\"WITH nameTable( sharedName ) AS ( SELECT :name ) SELECT * from nameTable\")\n    fun relation(name: String): RelationFromDependency","prompt":""},{"id":2205,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class DataClassFromDependency( @PrimaryKey(autoGenerate = true) val id: Int, val name: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg input: DataClassFromDependency)","prompt":""},{"id":2206,"identifierName":"gc.david.dfm.database.DistanceDao","requiredType":[],"content":"@Query(\"SELECT * FROM DISTANCE\")\n    fun loadAll(): List<Distance>","prompt":""},{"id":2207,"identifierName":"gc.david.dfm.database.DistanceDao","requiredType":[],"content":"@Query(\"DELETE FROM DISTANCE\")\n    fun deleteAll()","prompt":""},{"id":2208,"identifierName":"gc.david.dfm.database.DistanceDao","requiredType":[],"content":"@Insert\n    fun insert(distance: Distance): Long","prompt":""},{"id":2209,"identifierName":"com.android.example.paging.pagingwithnetwork.reddit.db.RedditPostDao","requiredType":["data class PagingSourcenull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertAll(posts: List<RedditPost>)","prompt":""},{"id":2210,"identifierName":"com.android.example.paging.pagingwithnetwork.reddit.db.RedditPostDao","requiredType":[],"content":"@Query(\"SELECT * FROM posts WHERE subreddit = :subreddit ORDER BY indexInResponse ASC\")\n    fun postsBySubreddit(subreddit: String): PagingSource<Int, RedditPost>","prompt":""},{"id":2211,"identifierName":"com.android.example.paging.pagingwithnetwork.reddit.db.RedditPostDao","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM posts WHERE subreddit = :subreddit\")\n    suspend fun deleteBySubreddit(subreddit: String)","prompt":""},{"id":2212,"identifierName":"com.android.example.paging.pagingwithnetwork.reddit.db.RedditPostDao","requiredType":[],"content":"@Query(\"SELECT MAX(indexInResponse) + 1 FROM posts WHERE subreddit = :subreddit\")\n    suspend fun getNextIndexInSubreddit(subreddit: String): Int","prompt":""},{"id":2213,"identifierName":"com.orgzly.android.db.dao.BookViewDao","requiredType":[],"content":"@Query(\"$QUERY WHERE books.id = :id GROUP BY books.id\")\n    abstract fun get(id: Long): BookView?","prompt":""},{"id":2214,"identifierName":"com.orgzly.android.db.dao.BookViewDao","requiredType":[],"content":"@Query(\"$QUERY WHERE books.name = :name GROUP BY books.id\")\n    abstract fun get(name: String): BookView?","prompt":""},{"id":2215,"identifierName":"com.orgzly.android.db.dao.BookViewDao","requiredType":[],"content":"@Query(\"$QUERY GROUP BY books.id ORDER BY $ORDER_BY_NAME\")\n    abstract fun getAllFOrderByNameLiveData(): LiveData<List<BookView>>","prompt":""},{"id":2216,"identifierName":"com.orgzly.android.db.dao.BookViewDao","requiredType":[],"content":"@Query(\"$QUERY GROUP BY books.id ORDER BY $ORDER_BY_TIME\")\n    abstract fun getAllOrderByTimeLiveData(): LiveData<List<BookView>>","prompt":""},{"id":2217,"identifierName":"com.orgzly.android.db.dao.BookViewDao","requiredType":["data class BookView( @Embedded val book: Book, val noteCount: Int, @Embedded(prefix = \"link_repo_\") val linkRepo: Repo? = null, @Embedded(prefix = \"synced_to_\") val syncedTo: VersionedRook? = null )"],"content":"@Query(\"$QUERY GROUP BY books.id ORDER BY $ORDER_BY_NAME\")\n    abstract fun getAllFOrderByName(): List<BookView>","prompt":""},{"id":2218,"identifierName":"com.orgzly.android.db.dao.BookViewDao","requiredType":["data class BookView( @Embedded val book: Book, val noteCount: Int, @Embedded(prefix = \"link_repo_\") val linkRepo: Repo? = null, @Embedded(prefix = \"synced_to_\") val syncedTo: VersionedRook? = null )"],"content":"@Query(\"$QUERY GROUP BY books.id ORDER BY $ORDER_BY_TIME\")\n    abstract fun getAllOrderByTime(): List<BookView>","prompt":""},{"id":2219,"identifierName":"voice.data.repo.internals.dao.ChapterDao","requiredType":[],"content":"@Query(\"SELECT * FROM chapters2 WHERE id = :id\")\n  suspend fun chapter(id: Chapter.Id): Chapter?","prompt":""},{"id":2220,"identifierName":"voice.data.repo.internals.dao.ChapterDao","requiredType":[],"content":"@Query(\"SELECT * FROM chapters2 WHERE id IN (:ids)\")\n  suspend fun chapters(ids: List<Chapter.Id>): List<Chapter>","prompt":""},{"id":2221,"identifierName":"voice.data.repo.internals.dao.ChapterDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  suspend fun insert(chapter: Chapter)","prompt":""},{"id":2222,"identifierName":"com.emogoth.android.phone.mimi.db.dao.PostOptionAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.POST_OPTIONS_TABLE}\")\n    abstract fun getAll(): Single<List<PostOption>>","prompt":""},{"id":2223,"identifierName":"com.emogoth.android.phone.mimi.db.dao.PostOptionAccess","requiredType":[],"content":"@Query(\"UPDATE ${MimiDatabase.POST_OPTIONS_TABLE} SET ${PostOption.USED_COUNT} = ${PostOption.USED_COUNT} + 1, ${PostOption.LAST_USED} = :timestamp WHERE ${PostOption.OPTION} = :option\")\n    abstract fun increment(option: String, timestamp: Long): Single<Int>","prompt":""},{"id":2224,"identifierName":"com.emogoth.android.phone.mimi.db.dao.PostOptionAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.POST_OPTIONS_TABLE} WHERE ${PostOption.OPTION} = :option\")\n    abstract fun remove(option: String)","prompt":""},{"id":2225,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertEvents(events: List<Event>)","prompt":""},{"id":2226,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertEvent(event: Event)","prompt":""},{"id":2227,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Query(\"DELETE FROM Event\")\n    fun deleteAll()","prompt":""},{"id":2228,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Query(\"SELECT * from Event ORDER BY startsAt DESC\")\n    fun getAllEvents(): Flowable<List<Event>>","prompt":""},{"id":2229,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Query(\"SELECT * from Event WHERE id = :id\")\n    fun getEvent(id: Long): Flowable<Event>","prompt":""},{"id":2230,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Query(\"SELECT * FROM event WHERE id = :eventId\")\n    fun getEventById(eventId: Long): Single<Event>","prompt":""},{"id":2231,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Query(\"SELECT * from Event WHERE id in (:ids)\")\n    fun getEventWithIds(ids: List<Long>): Flowable<List<Event>>","prompt":""},{"id":2232,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Query(\"UPDATE Event SET favorite = :favorite WHERE id = :eventId\")\n    fun setFavorite(eventId: Long, favorite: Boolean)","prompt":""},{"id":2233,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Query(\"SELECT * from Event WHERE favorite = 1\")\n    fun getFavoriteEvents(): Flowable<List<Event>>","prompt":""},{"id":2234,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Query(\"SELECT * from Event WHERE favorite = 1 AND id in (:ids)\")\n    fun getFavoriteEventWithinIds(ids: List<Long>): Single<List<Event>>","prompt":""},{"id":2235,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":["data class EventTopic( @Id(LongIdHandler::class) @PrimaryKey val id: Long, val name: String, val slug: String, @ColumnInfo(index = true) @Relationship(\"event\") var event: EventId? = null )"],"content":"@Query(\"SELECT * from Event WHERE eventTopic = :eventTopic\")\n    fun getAllSimilarEvents(eventTopic: EventTopic): Flowable<List<Event>>","prompt":""},{"id":2236,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":["data class EventTopic( @Id(LongIdHandler::class) @PrimaryKey val id: Long, val name: String, val slug: String, @ColumnInfo(index = true) @Relationship(\"event\") var event: EventId? = null )"],"content":"@Query(\"SELECT * FROM EventTopic WHERE id=:topicId\")\n    fun getEventTopic(topicId: Long): Single<EventTopic>","prompt":""},{"id":2237,"identifierName":"org.fossasia.openevent.general.event.EventDao","requiredType":[],"content":"@Query(\"UPDATE Event SET favorite = :favorite AND favoriteEventId = NULL\")\n    fun clearFavoriteEvents(favorite: Boolean = false)","prompt":""},{"id":2238,"identifierName":"de.fluchtwege.vocabulary.persistance.LessonDao","requiredType":[],"content":"@Query(\"SELECT * FROM lesson\")\n    fun getLessons(): Flowable<List<Lesson>>","prompt":""},{"id":2239,"identifierName":"de.fluchtwege.vocabulary.persistance.LessonDao","requiredType":["data class Lesson(@PrimaryKey val name: String, val description: String, var questions: List<Question>)"],"content":"@Query(\"SELECT * FROM lesson WHERE name = :name LIMIT 1\")\n    fun getLesson(name: String): Flowable<Lesson>","prompt":""},{"id":2240,"identifierName":"de.fluchtwege.vocabulary.persistance.LessonDao","requiredType":[],"content":"@Query(\"DELETE FROM lesson WHERE name = :name\")\n    fun deleteLesson(name: String): Unit","prompt":""},{"id":2241,"identifierName":"de.fluchtwege.vocabulary.persistance.LessonDao","requiredType":[],"content":"@Query(\"DELETE FROM lesson\")\n    fun clearLessons(): Unit","prompt":""},{"id":2242,"identifierName":"de.fluchtwege.vocabulary.persistance.LessonDao","requiredType":["data class Lesson(@PrimaryKey val name: String, val description: String, var questions: List<Question>)"],"content":"@Insert\n    fun insert(lesson: Lesson): Unit","prompt":""},{"id":2243,"identifierName":"de.fluchtwege.vocabulary.persistance.LessonDao","requiredType":["data class Lesson(@PrimaryKey val name: String, val description: String, var questions: List<Question>)"],"content":"@Update\n    fun update(lesson: Lesson): Unit","prompt":""},{"id":2244,"identifierName":"com.kingz.database.dao.CookiesDao","requiredType":["data class CookiesEntity( @ColumnInfo(name = \"id\") var id: Int = 0, @ColumnInfo(name = \"url\", defaultValue = \"\") var url: String = \"\", @ColumnInfo(name = \"cookies\", defaultValue = \"\") var cookies: String = \"\" )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(cookie: CookiesEntity)","prompt":""},{"id":2245,"identifierName":"com.kingz.database.dao.CookiesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(cookiesList: MutableList<CookiesEntity>): List<Long>?","prompt":""},{"id":2246,"identifierName":"com.kingz.database.dao.CookiesDao","requiredType":[],"content":"@Query((\"DELETE FROM http_cookie\"))\n    suspend fun clear()","prompt":""},{"id":2247,"identifierName":"com.kingz.database.dao.CookiesDao","requiredType":[],"content":"//根据指定URL查找cookie\n    @Query(\"SELECT * FROM http_cookie where url=:url\")\n    fun getCookies(url: String): CookiesEntity?","prompt":""},{"id":2248,"identifierName":"com.emmanuelmess.simpleaccounting.db.RowDao","requiredType":[],"content":"@Query(\"SELECT * FROM rows\")\n\tfun getAll(): List<Row>","prompt":""},{"id":2249,"identifierName":"com.emmanuelmess.simpleaccounting.db.RowDao","requiredType":[],"content":"@Insert\n\tfun insert(rows: Collection<Row>)","prompt":""},{"id":2250,"identifierName":"com.emmanuelmess.simpleaccounting.db.RowDao","requiredType":[],"content":"@Insert\n\tfun insert(row: Row)","prompt":""},{"id":2251,"identifierName":"com.emmanuelmess.simpleaccounting.db.RowDao","requiredType":["data class Session( val month: Int, val year: Int, val currency: String )"],"content":"fun newRowInMonth(day: String?, session: Session) {\n\t\tinsert(Row(null, day, \"\", null, null, session.month, session.year, session.currency))\n\t}","prompt":""},{"id":2252,"identifierName":"com.emmanuelmess.simpleaccounting.db.RowDao","requiredType":[],"content":"@Query(\"SELECT id FROM rows WHERE id = (SELECT MAX(id) FROM rows) ORDER BY date\")\n\tfun getLastIndex(): Int","prompt":""},{"id":2253,"identifierName":"com.emmanuelmess.simpleaccounting.db.RowDao","requiredType":[],"content":"@Query(\"UPDATE rows SET date = :date, reference = :reference, credit = :credit, debit = :debit WHERE id = :id\")\n\tfun update(id: Int, date: String, reference: String, credit: String, debit: String)","prompt":""},{"id":2254,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Query(\"SELECT * FROM styles WHERE id=:key\")\n    abstract suspend fun get(key: Int): StyleEntity?","prompt":""},{"id":2255,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Transaction\n    open suspend fun get(keys: List<Int>): List<StyleEntity> {\n        return getBatch(keys, ::getList)\n    }","prompt":""},{"id":2256,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Query(\"SELECT * FROM styles WHERE id IN (:keys)\")\n    abstract suspend fun getList(keys: List<Int>): List<StyleEntity>","prompt":""},{"id":2257,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Query(\"SELECT * FROM styles WHERE id=:key\")\n    abstract fun getStream(key: Int): Flow<StyleEntity?>","prompt":""},{"id":2258,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Query(\"SELECT * FROM styles\")\n    abstract suspend fun getAll(): List<StyleEntity>","prompt":""},{"id":2259,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Query(\"SELECT * FROM styles\")\n    abstract fun getAllStream(): Flow<List<StyleEntity>>","prompt":""},{"id":2260,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Query(\"SELECT id FROM styles\")\n    abstract fun getKeys(): List<Int>","prompt":""},{"id":2261,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Query(\"SELECT id FROM styles\")\n    abstract fun getKeysStream(): Flow<List<Int>>","prompt":""},{"id":2262,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Transaction\n    open suspend fun put(value: StyleEntity): StyleEntity? {\n        return putMerged(value, ::get)\n    }","prompt":""},{"id":2263,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Transaction\n    open suspend fun put(values: List<StyleEntity>): List<StyleEntity> {\n        return putBatch(values, ::get)\n    }","prompt":""},{"id":2264,"identifierName":"quickbeer.android.domain.style.store.StyleDao","requiredType":[],"content":"@Query(\"DELETE FROM styles WHERE id=:key\")\n    abstract suspend fun delete(key: Int): Int","prompt":""},{"id":2265,"identifierName":"com.nononsenseapps.feeder.db.room.SyncDeviceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(device: SyncDevice): Long","prompt":""},{"id":2266,"identifierName":"com.nononsenseapps.feeder.db.room.SyncDeviceDao","requiredType":[],"content":"@Delete\n    suspend fun delete(device: SyncDevice): Int","prompt":""},{"id":2267,"identifierName":"com.nononsenseapps.feeder.db.room.SyncDeviceDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            SELECT *\n            FROM sync_device\n            ORDER BY device_name\n        \"\"\"\n    )\n    fun getDevices(): Flow<List<SyncDevice>>","prompt":""},{"id":2268,"identifierName":"com.nononsenseapps.feeder.db.room.SyncDeviceDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            DELETE FROM sync_device\n        \"\"\"\n    )\n    fun deleteAll(): Int","prompt":""},{"id":2269,"identifierName":"com.nononsenseapps.feeder.db.room.SyncDeviceDao","requiredType":[],"content":"@Transaction\n    suspend fun replaceDevices(devices: List<SyncDevice>) {\n        deleteAll()\n        devices.forEach {\n            insert(it)\n        }\n    }","prompt":""},{"id":2270,"identifierName":"com.steckinc.entity.PostRepository","requiredType":[],"content":"@Query(\"select p from Post p left join fetch p.comments c where p.id = ?1\")\n    fun findOneWithDependencies(id: Long): Post","prompt":""},{"id":2271,"identifierName":"org.stepik.android.cache.course_recommendations.dao.CourseRecommendationsDao","requiredType":[],"content":"@Query(\"SELECT * FROM CourseRecommendation\")\n    fun getCourseRecommendations(): Single<List<CourseRecommendation>>","prompt":""},{"id":2272,"identifierName":"org.stepik.android.cache.course_recommendations.dao.CourseRecommendationsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertCourseRecommendations(courseRecommendations: List<CourseRecommendation>): Completable","prompt":""},{"id":2273,"identifierName":"org.stepik.android.cache.course_recommendations.dao.CourseRecommendationsDao","requiredType":[],"content":"@Query(\"DELETE FROM CourseRecommendation\")\n    fun clearCourseRecommendations(): Completable","prompt":""},{"id":2274,"identifierName":"com.example.busschedule.database.schedule.ScheduleDao","requiredType":[],"content":"@Query(\"SELECT * FROM schedule ORDER BY arrival_time ASC\")\n    fun getAll(): Flow<List<Schedule>>","prompt":""},{"id":2275,"identifierName":"com.example.busschedule.database.schedule.ScheduleDao","requiredType":[],"content":"@Query(\"SELECT * FROM schedule WHERE stop_name = :stopName ORDER BY arrival_time ASC\")\n    fun getByStopName(stopName: String): Flow<List<Schedule>>","prompt":""},{"id":2276,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":[],"content":"@Query(\"SELECT * FROM TopPerformerProducts WHERE datePeriod = :datePeriod AND siteId = :siteId\")\n    fun observeTopPerformerProducts(\n        siteId: Long,\n        datePeriod: String\n    ): Flow<List<TopPerformerProductEntity>>","prompt":""},{"id":2277,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":["data class TopPerformerProductEntity( val siteId: Long, val datePeriod: String, val productId: Long, val name: String, val imageUrl: String?, val quantity: Int, val currency: String, val total: Double, val millisSinceLastUpdated: Long )"],"content":"@Query(\"SELECT * FROM TopPerformerProducts WHERE datePeriod = :datePeriod AND siteId = :siteId\")\n    suspend fun getTopPerformerProductsFor(\n        siteId: Long,\n        datePeriod: String\n    ): List<TopPerformerProductEntity>","prompt":""},{"id":2278,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":["data class TopPerformerProductEntity( val siteId: Long, val datePeriod: String, val productId: Long, val name: String, val imageUrl: String?, val quantity: Int, val currency: String, val total: Double, val millisSinceLastUpdated: Long )"],"content":"@Query(\"SELECT * FROM TopPerformerProducts WHERE siteId = :siteId\")\n    suspend fun getTopPerformerProductsForSite(\n        siteId: Long\n    ): List<TopPerformerProductEntity>","prompt":""},{"id":2279,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":["data class TopPerformerProductEntity( val siteId: Long, val datePeriod: String, val productId: Long, val name: String, val imageUrl: String?, val quantity: Int, val currency: String, val total: Double, val millisSinceLastUpdated: Long )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(entity: TopPerformerProductEntity)","prompt":""},{"id":2280,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":[],"content":"@Query(\"DELETE FROM TopPerformerProducts WHERE datePeriod = :datePeriod AND siteId = :siteId\")\n    suspend fun deleteAllFor(siteId: Long, datePeriod: String)","prompt":""},{"id":2281,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":[],"content":"@Transaction\n    suspend fun updateTopPerformerProductsFor(\n        siteId: Long,\n        datePeriod: String,\n        topPerformerProducts: List<TopPerformerProductEntity>\n    ) {\n        deleteAllFor(siteId, datePeriod)\n        topPerformerProducts.forEach { topPerformerProduct ->\n            insert(topPerformerProduct)\n        }\n    }","prompt":""},{"id":2282,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":[],"content":"@Transaction\n    suspend fun updateTopPerformerProductsForSite(\n        siteId: Long,\n        topPerformerProducts: List<TopPerformerProductEntity>\n    ) {\n        topPerformerProducts.forEach { topPerformerProduct ->\n            insert(topPerformerProduct)\n        }\n    }","prompt":""},{"id":2283,"identifierName":"com.example.android.hilt.data.LogDao","requiredType":[],"content":"@Query(\"SELECT * FROM logs ORDER BY id DESC\")\n    fun getAll(): List<Log>","prompt":""},{"id":2284,"identifierName":"com.example.android.hilt.data.LogDao","requiredType":[],"content":"@Insert\n    fun insertAll(vararg logs: Log)","prompt":""},{"id":2285,"identifierName":"com.example.android.hilt.data.LogDao","requiredType":[],"content":"@Query(\"DELETE FROM logs\")\n    fun nukeTable()","prompt":""},{"id":2286,"identifierName":"com.apps.adrcotfas.goodtime.database.SessionDao","requiredType":[],"content":"@Query(\"select * from Session where id = :id\")\n    fun getSession(id: Long): LiveData<Session>","prompt":""},{"id":2287,"identifierName":"com.apps.adrcotfas.goodtime.database.SessionDao","requiredType":[],"content":"@Query(\"select * from Session where (archived is 0 OR archived is NULL) and timestamp >= :intervalStart and timestamp < :intervalEnd ORDER BY timestamp DESC\")\n    fun getAllSessionsUnarchived(intervalStart : Long, intervalEnd : Long): LiveData<List<Session>>","prompt":""},{"id":2288,"identifierName":"com.apps.adrcotfas.goodtime.database.SessionDao","requiredType":[],"content":"@Query(\"select * from Session where label = :label ORDER BY timestamp DESC\")\n    fun getSessions(label: String): LiveData<List<Session>>","prompt":""},{"id":2289,"identifierName":"com.apps.adrcotfas.goodtime.database.SessionDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun addSession(session: Session)","prompt":""},{"id":2290,"identifierName":"com.apps.adrcotfas.goodtime.database.SessionDao","requiredType":[],"content":"@Query(\"update Session SET timestamp = :timestamp, duration = :duration, label = :label WHERE id = :id\")\n    suspend fun editSession(id: Long, timestamp: Long, duration: Int, label: String?)","prompt":""},{"id":2291,"identifierName":"com.apps.adrcotfas.goodtime.database.SessionDao","requiredType":[],"content":"@Query(\"update Session SET label = :label WHERE id = :id\")\n    suspend fun editLabel(id: Long, label: String?)","prompt":""},{"id":2292,"identifierName":"com.apps.adrcotfas.goodtime.database.SessionDao","requiredType":[],"content":"@Query(\"delete from Session where id = :id\")\n    suspend fun deleteSession(id: Long)","prompt":""},{"id":2293,"identifierName":"com.apps.adrcotfas.goodtime.database.SessionDao","requiredType":[],"content":"/**\n     * Deletes sessions finished at a later timestamp than the one provided as input.\n     * Typically used to delete today's finished sessions\n     * @param timestamp Sessions finished later than this timestamp will be deleted\n     */\n    @Query(\"delete from Session where timestamp >= :timestamp\")\n    suspend fun deleteSessionsAfter(timestamp: Long)","prompt":""},{"id":2294,"identifierName":"com.apps.adrcotfas.goodtime.database.SessionDao","requiredType":[],"content":"@Query(\"delete from Session\")\n    suspend fun deleteAllSessions()","prompt":""},{"id":2295,"identifierName":"org.wikipedia.pageimages.db.PageImageDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertPageImage(pageImage: PageImage)","prompt":""},{"id":2296,"identifierName":"org.wikipedia.pageimages.db.PageImageDao","requiredType":[],"content":"@Query(\"SELECT * FROM PageImage\")\n    fun getAllPageImages(): List<PageImage>","prompt":""},{"id":2297,"identifierName":"us.mikeandwan.photos.database.SearchHistoryDao","requiredType":[],"content":"@Query(\"SELECT * FROM search_history ORDER BY search_date DESC\")\n    fun getSearchTerms(): Flow<List<SearchHistory>>","prompt":""},{"id":2298,"identifierName":"us.mikeandwan.photos.database.SearchHistoryDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun addSearchTerm(term: SearchHistory)","prompt":""},{"id":2299,"identifierName":"us.mikeandwan.photos.database.SearchHistoryDao","requiredType":[],"content":"@Query(\"DELETE FROM search_history\")\n    suspend fun clearHistory()","prompt":""},{"id":2300,"identifierName":"us.mikeandwan.photos.database.SearchHistoryDao","requiredType":[],"content":"@Query(\"SELECT search_date FROM search_history ORDER BY search_date DESC LIMIT 1 OFFSET :queriesToKeep\")\n    suspend fun getEarliestDateToRemove(queriesToKeep: Int): Calendar","prompt":""},{"id":2301,"identifierName":"us.mikeandwan.photos.database.SearchHistoryDao","requiredType":[],"content":"@Query(\"DELETE FROM search_history WHERE search_date <= :earliestDate\")\n    suspend fun removeOldHistory(earliestDate: Calendar)","prompt":""},{"id":2302,"identifierName":"me.nya_n.notificationnotifier.data.repository.source.TargetAppDao","requiredType":["data class InstalledApp( val label: String, @PrimaryKey @ColumnInfo(name = \"package_name\") @SerializedName(\"package_name\") val packageName: String )"],"content":"@Insert\n    fun insert(target: InstalledApp)","prompt":""},{"id":2303,"identifierName":"me.nya_n.notificationnotifier.data.repository.source.TargetAppDao","requiredType":["data class InstalledApp( val label: String, @PrimaryKey @ColumnInfo(name = \"package_name\") @SerializedName(\"package_name\") val packageName: String )"],"content":"@Delete\n    fun delete(target: InstalledApp)","prompt":""},{"id":2304,"identifierName":"me.nya_n.notificationnotifier.data.repository.source.TargetAppDao","requiredType":["data class InstalledApp( val label: String, @PrimaryKey @ColumnInfo(name = \"package_name\") @SerializedName(\"package_name\") val packageName: String )"],"content":"@Query(\"select * from targets\")\n    fun getAll(): List<InstalledApp>","prompt":""},{"id":2305,"identifierName":"me.nya_n.notificationnotifier.data.repository.source.TargetAppDao","requiredType":[],"content":"@Query(\"delete from targets\")\n    fun clear()","prompt":""},{"id":2306,"identifierName":"org.xwiki.android.sync.contactdb.dao.GroupsCacheDao","requiredType":[],"content":"@Query(\"SELECT * from $GROUPS_LIST_TABLE where $UserAccountIdColumn LIKE :id\")\n    operator fun get(id: UserAccountId) : GroupsCacheEntity?","prompt":""},{"id":2307,"identifierName":"org.xwiki.android.sync.contactdb.dao.GroupsCacheDao","requiredType":["data class GroupsCacheEntity( @PrimaryKey @ColumnInfo(name = UserAccountIdColumn) val id: UserAccountId, @ColumnInfo(name = GroupsListColumn) var groupsList: List<XWikiGroup> )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun set(groupsCacheEntity: GroupsCacheEntity)","prompt":""},{"id":2308,"identifierName":"org.xwiki.android.sync.contactdb.dao.GroupsCacheDao","requiredType":[],"content":"@Query (\"DELETE FROM $GROUPS_LIST_TABLE WHERE $UserAccountIdColumn = :id\")\n    fun remove(id: UserAccountId)","prompt":""},{"id":2309,"identifierName":"com.github.tommykw.musical.data.local.MusicalDao","requiredType":["data class Musical( @PrimaryKey val id: Int, val productionId: String, val name: String, val playwright: String, val poster: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun save(musical: Musical)","prompt":""},{"id":2310,"identifierName":"com.github.tommykw.musical.data.local.MusicalDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun saveAll(musicals: List<Musical>)","prompt":""},{"id":2311,"identifierName":"com.github.tommykw.musical.data.local.MusicalDao","requiredType":[],"content":"@Query(\"SELECT * FROM musical ORDER BY id\")\n    fun loadAllMusicalsFlow(): Flow<List<Musical>>","prompt":""},{"id":2312,"identifierName":"com.github.tommykw.musical.data.local.MusicalDao","requiredType":[],"content":"//@Query(\"SELECT * FROM musical WHERE trilogy = :trilogyNumber ORDER BY number\")\n    @Query(\"SELECT * FROM musical ORDER BY id\")\n    fun getMusicalsForIdFlow(): Flow<List<Musical>>","prompt":""},{"id":2313,"identifierName":"de.tutao.tutanota.data.AlarmInfoDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n\tfun insertAlarmNotification(alarmNotification: AlarmNotificationEntity)","prompt":""},{"id":2314,"identifierName":"de.tutao.tutanota.data.AlarmInfoDao","requiredType":[],"content":"@Query(\"DELETE FROM AlarmNotification WHERE identifier = :identifier\")\n\tfun deleteAlarmNotification(identifier: String)","prompt":""},{"id":2315,"identifierName":"de.tutao.tutanota.data.AlarmInfoDao","requiredType":[],"content":"@Query(\"DELETE FROM AlarmNotification\")\n\tfun clear()","prompt":""},{"id":2316,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":["data class Arrow( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var name: String = \"\", var maxArrowNumber: Int = 12, var length: String? = \"\", var material: String? = \"\", var spine: String? = \"\", var weight: String? = \"\", var tipWeight: String? = \"\", var vanes: String? = \"\", var nock: String? = \"\", var comment: String? = \"\", var diameter: Dimension = Dimension(5f, Dimension.Unit.MILLIMETER), @ColumnInfo(typeAffinity = ColumnInfo.BLOB) var thumbnail: Thumbnail? = null )"],"content":"@Query(\"SELECT * FROM `Arrow`\")\n    abstract fun loadArrows(): List<Arrow>","prompt":""},{"id":2317,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `Arrow`\")\n    abstract fun loadArrowsLive(): LiveData<List<Arrow>>","prompt":""},{"id":2318,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":["data class Arrow( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var name: String = \"\", var maxArrowNumber: Int = 12, var length: String? = \"\", var material: String? = \"\", var spine: String? = \"\", var weight: String? = \"\", var tipWeight: String? = \"\", var vanes: String? = \"\", var nock: String? = \"\", var comment: String? = \"\", var diameter: Dimension = Dimension(5f, Dimension.Unit.MILLIMETER), @ColumnInfo(typeAffinity = ColumnInfo.BLOB) var thumbnail: Thumbnail? = null )"],"content":"@Query(\"SELECT * FROM `Arrow` WHERE `id` = (:id)\")\n    abstract fun loadArrow(id: Long): Arrow","prompt":""},{"id":2319,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `Arrow` WHERE `id` = (:id)\")\n    abstract fun loadArrowOrNull(id: Long): Arrow?","prompt":""},{"id":2320,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":["data class ArrowImage( @PrimaryKey(autoGenerate = true) var id: Long = 0, override var fileName: String = \"\", var arrowId: Long? = null )"],"content":"@Query(\"SELECT * FROM `ArrowImage` WHERE `arrowId` = (:id)\")\n    abstract fun loadArrowImages(id: Long): List<ArrowImage>","prompt":""},{"id":2321,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":["data class Arrow( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var name: String = \"\", var maxArrowNumber: Int = 12, var length: String? = \"\", var material: String? = \"\", var spine: String? = \"\", var weight: String? = \"\", var tipWeight: String? = \"\", var vanes: String? = \"\", var nock: String? = \"\", var comment: String? = \"\", var diameter: Dimension = Dimension(5f, Dimension.Unit.MILLIMETER), @ColumnInfo(typeAffinity = ColumnInfo.BLOB) var thumbnail: Thumbnail? = null )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertArrow(arrow: Arrow): Long","prompt":""},{"id":2322,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":["data class Arrow( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var name: String = \"\", var maxArrowNumber: Int = 12, var length: String? = \"\", var material: String? = \"\", var spine: String? = \"\", var weight: String? = \"\", var tipWeight: String? = \"\", var vanes: String? = \"\", var nock: String? = \"\", var comment: String? = \"\", var diameter: Dimension = Dimension(5f, Dimension.Unit.MILLIMETER), @ColumnInfo(typeAffinity = ColumnInfo.BLOB) var thumbnail: Thumbnail? = null )"],"content":"@Update\n    abstract fun updateArrow(arrow: Arrow)","prompt":""},{"id":2323,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertArrowImages(images: List<ArrowImage>)","prompt":""},{"id":2324,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":[],"content":"@Query(\"DELETE FROM `ArrowImage` WHERE `arrowId` = (:arrowId)\")\n    abstract fun deleteArrowImages(arrowId: Long)","prompt":""},{"id":2325,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":["data class Arrow( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var name: String = \"\", var maxArrowNumber: Int = 12, var length: String? = \"\", var material: String? = \"\", var spine: String? = \"\", var weight: String? = \"\", var tipWeight: String? = \"\", var vanes: String? = \"\", var nock: String? = \"\", var comment: String? = \"\", var diameter: Dimension = Dimension(5f, Dimension.Unit.MILLIMETER), @ColumnInfo(typeAffinity = ColumnInfo.BLOB) var thumbnail: Thumbnail? = null )"],"content":"@Transaction\n    open fun saveArrow(arrow: Arrow, images: List<ArrowImage>) {\n        if (arrow.id > 0) {\n            updateArrow(arrow)\n        } else {\n            arrow.id = insertArrow(arrow)\n        }\n        deleteArrowImages(arrow.id)\n        for (image in images) {\n            image.arrowId = arrow.id\n        }\n        insertArrowImages(images)\n    }","prompt":""},{"id":2326,"identifierName":"de.dreier.mytargets.base.db.dao.ArrowDAO","requiredType":["data class Arrow( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var name: String = \"\", var maxArrowNumber: Int = 12, var length: String? = \"\", var material: String? = \"\", var spine: String? = \"\", var weight: String? = \"\", var tipWeight: String? = \"\", var vanes: String? = \"\", var nock: String? = \"\", var comment: String? = \"\", var diameter: Dimension = Dimension(5f, Dimension.Unit.MILLIMETER), @ColumnInfo(typeAffinity = ColumnInfo.BLOB) var thumbnail: Thumbnail? = null )"],"content":"@Delete\n    abstract fun deleteArrow(arrow: Arrow)","prompt":""},{"id":2327,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.PurchaseDao","requiredType":[],"content":"@Query(\"SELECT * FROM purchase_table\")\n    fun getPurchases(): List<CachedPurchase>","prompt":""},{"id":2328,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.PurchaseDao","requiredType":[],"content":"@Insert\n    fun insert(purchase: CachedPurchase)","prompt":""},{"id":2329,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.PurchaseDao","requiredType":[],"content":"@Transaction\n    fun insert(vararg purchases: Purchase) {\n        purchases.forEach {\n            insert(CachedPurchase(data = it))\n        }\n    }","prompt":""},{"id":2330,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.PurchaseDao","requiredType":[],"content":"@Delete\n    fun delete(vararg purchases: CachedPurchase)","prompt":""},{"id":2331,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.PurchaseDao","requiredType":[],"content":"@Query(\"DELETE FROM purchase_table\")\n    fun deleteAll()","prompt":""},{"id":2332,"identifierName":"jp.hazuki.yuzubrowser.adblock.repository.abp.AbpDao","requiredType":[],"content":"@Query(\"SELECT * from abp\")\n    suspend fun getAll(): List<AbpEntity>","prompt":""},{"id":2333,"identifierName":"jp.hazuki.yuzubrowser.adblock.repository.abp.AbpDao","requiredType":[],"content":"@Insert\n    suspend fun inset(abpEntity: AbpEntity): Long","prompt":""},{"id":2334,"identifierName":"jp.hazuki.yuzubrowser.adblock.repository.abp.AbpDao","requiredType":[],"content":"@Insert\n    suspend fun inset(entities: List<AbpEntity>)","prompt":""},{"id":2335,"identifierName":"jp.hazuki.yuzubrowser.adblock.repository.abp.AbpDao","requiredType":[],"content":"@Delete\n    suspend fun delete(abpEntity: AbpEntity)","prompt":""},{"id":2336,"identifierName":"jp.hazuki.yuzubrowser.adblock.repository.abp.AbpDao","requiredType":[],"content":"@Update\n    suspend fun update(abpEntity: AbpEntity)","prompt":""},{"id":2337,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.news.NewsSourcesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(news: NewsSources)","prompt":""},{"id":2338,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.news.NewsSourcesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(news: List<NewsSources>)","prompt":""},{"id":2339,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.news.NewsSourcesDao","requiredType":[],"content":"@Query(\"SELECT * FROM news_sources WHERE id < 7 OR id > 13 OR id=:selectedNewspread\")\n    fun getNewsSources(selectedNewspread: String): List<NewsSources>","prompt":""},{"id":2340,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.news.NewsSourcesDao","requiredType":[],"content":"@Query(\"SELECT * FROM news_sources WHERE id=:id\")\n    fun getNewsSource(id: Int): NewsSources","prompt":""},{"id":2341,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.news.NewsSourcesDao","requiredType":[],"content":"@Query(\"DELETE FROM news_sources\")\n    fun flush()","prompt":""},{"id":2342,"identifierName":"io.github.andyswe.elva.data.MeasurementRepository","requiredType":[],"content":"@QueryHints(QueryHint(name = \"org.hibernate.fetchSize\", value = \"1\"), QueryHint(name = \"org.hibernate.readOnly\", value = \"true\"))\n    @Query(value = \"select t from Measurement t\")\n    @Async\n    fun streamAll(): Stream<Measurement>","prompt":""},{"id":2343,"identifierName":"org.stepik.android.cache.analytic.dao.AnalyticDao","requiredType":["data class AnalyticLocalEvent( @ColumnInfo(name = DbStructureAnalytic.Columns.EVENT_NAME) val name: String, @ColumnInfo(name = DbStructureAnalytic.Columns.EVENT_JSON) val eventData: JsonElement, @ColumnInfo(name = DbStructureAnalytic.Columns.EVENT_TIMESTAMP) val eventTimestamp: Long )"],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insertAnalyticEvent(analyticLocalEvent: AnalyticLocalEvent): Completable","prompt":""},{"id":2344,"identifierName":"org.stepik.android.cache.analytic.dao.AnalyticDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${DbStructureAnalytic.TABLE_NAME} LIMIT $EVENT_LIMIT\")\n    fun getAnalyticEvents(): Single<List<AnalyticLocalEvent>>","prompt":""},{"id":2345,"identifierName":"org.stepik.android.cache.analytic.dao.AnalyticDao","requiredType":[],"content":"@Delete\n    fun clearEvents(analyticLocalEvents: List<AnalyticLocalEvent>): Completable","prompt":""},{"id":2346,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM task\")\n    fun loadAll(): Flowable<List<Task>>","prompt":""},{"id":2347,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM task WHERE id IN (:taskIds)\")\n    fun loadByIds(vararg taskIds: String): Flowable<List<Task>>","prompt":""},{"id":2348,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":["data class Task()"],"content":"@Query(\"SELECT * FROM task WHERE id = :taskId LIMIT 1\")\n    fun loadById(taskId: String): Flowable<Task>","prompt":""},{"id":2349,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":["data class Task()"],"content":"@Query(\"SELECT * FROM task WHERE id = :taskId LIMIT 1\")\n    fun loadByIdOnce(taskId: String): Maybe<Task>","prompt":""},{"id":2350,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM task WHERE parentId = :taskId ORDER BY title ASC\")\n    fun loadSubTasksById(taskId: String): Flowable<List<Task>>","prompt":""},{"id":2351,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM task WHERE dueDateTimestamp = null\")\n    fun loadUnlimitedTasks(): Flowable<List<Task>>","prompt":""},{"id":2352,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"SELECT *, (SELECT Count(*) FROM task as sub_task WHERE parentId = parent_task.id ) as subTasksCount \" +\n            \"FROM task as parent_task \" +\n            \"WHERE ((dueDateTimestamp BETWEEN :from AND :to) OR \" +\n            \"(dueDateTimestamp < :from AND isComplete = 0) OR \" +\n            \"dueDateTimestamp is null) AND parentId is null\")\n    fun loadForTodayScreen(from: Date, to: Date): Flowable<List<Task>>","prompt":""},{"id":2353,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"SELECT Count (*) FROM task WHERE (dueDateTimestamp BETWEEN :from AND :to) AND parentId is null\")\n    fun getTasksCount(from: Date, to: Date): Flowable<Int>","prompt":""},{"id":2354,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"SELECT *, (SELECT Count(*) FROM task as sub_task WHERE parentId = parent_task.id ) as subTasksCount \" +\n            \"FROM task as parent_task \" +\n            \"WHERE dueDateTimestamp BETWEEN :from AND :to AND parentId is null\")\n    fun getTasksByDate(from: Date, to: Date): Flowable<List<Task>>","prompt":""},{"id":2355,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":["data class Task()"],"content":"@Query(\"SELECT * FROM task WHERE parentId IN (:parentTaskIds) AND id not null\")\n    fun loadSubTasks(parentTaskIds: List<String>): List<Task>","prompt":""},{"id":2356,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM task WHERE (dueDateTimestamp BETWEEN :from AND :to) AND isComplete = :isComplete\")\n    fun getTasksByDate(from: Date, to: Date, isComplete: Boolean): Flowable<List<Task>>","prompt":""},{"id":2357,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM task WHERE (dueDateTimestamp BETWEEN :from AND :to) AND priorityId = :priority\")\n    fun getTasksByDate(from: Date, to: Date, priority: TaskPriority): Flowable<List<Task>>","prompt":""},{"id":2358,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":["data class Task()"],"content":"@Query(\"SELECT * FROM task WHERE title LIKE :title LIMIT 1\")\n    fun findByTitle(title: String): Task","prompt":""},{"id":2359,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":["data class Task()"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(task: Task)","prompt":""},{"id":2360,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":["data class Task()"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun update(task: Task)","prompt":""},{"id":2361,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"UPDATE task SET isComplete = :isComplete WHERE id = :taskId\")\n    fun updateTaskStatus(taskId: String, isComplete: Boolean)","prompt":""},{"id":2362,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":["data class Task()"],"content":"@Delete\n    fun delete(task: Task)","prompt":""},{"id":2363,"identifierName":"com.makeevapps.simpletodolist.datasource.db.TaskDao","requiredType":[],"content":"@Query(\"DELETE FROM task\")\n    fun deleteAll()","prompt":""},{"id":2364,"identifierName":"com.example.zephy.photoapp.dao.LessonSubmissionCommentDao","requiredType":[],"content":"@Query(\"SELECT * FROM submission_comment_table WHERE submissionId = :submissionId\")\n    fun getCommentBySubmissionId(submissionId: Int): LiveData<List<LessonSubmissionCommentEntity>>","prompt":""},{"id":2365,"identifierName":"com.example.zephy.photoapp.dao.LessonSubmissionCommentDao","requiredType":[],"content":"@Query(\"SELECT * FROM submission_comment_table WHERE submissionId = :submissionId\")\n    fun getCommentBySubmissionIdSync(submissionId: Int): List<LessonSubmissionCommentEntity>","prompt":""},{"id":2366,"identifierName":"com.example.zephy.photoapp.dao.LessonSubmissionCommentDao","requiredType":[],"content":"@Query(\"SELECT * FROM submission_comment_table WHERE submissionId = :submissionId AND syncId IS NULL\")\n    fun getUnsyncedComments(submissionId: Int): List<LessonSubmissionCommentEntity>","prompt":""},{"id":2367,"identifierName":"com.example.zephy.photoapp.dao.LessonSubmissionCommentDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(comment: LessonSubmissionCommentEntity)","prompt":""},{"id":2368,"identifierName":"com.example.zephy.photoapp.dao.LessonSubmissionCommentDao","requiredType":[],"content":"@Query(\"DELETE FROM submission_comment_table\")\n    fun deleteAll()","prompt":""},{"id":2369,"identifierName":"com.example.zephy.photoapp.dao.LessonSubmissionCommentDao","requiredType":[],"content":"@Query(\"DELETE FROM submission_comment_table WHERE submissionId = :submissionId\")\n    fun deleteAllBySubId(submissionId: Int)","prompt":""},{"id":2370,"identifierName":"com.example.zephy.photoapp.dao.LessonSubmissionCommentDao","requiredType":[],"content":"@Query(\"DELETE FROM submission_comment_table WHERE syncId = :syncId\")\n    fun deleteBySyncId(syncId: Int)","prompt":""},{"id":2371,"identifierName":"com.example.zephy.photoapp.dao.LessonSubmissionCommentDao","requiredType":[],"content":"@Query(\"DELETE FROM submission_comment_table WHERE id = :id\")\n    fun deleteById(id: Int)","prompt":""},{"id":2372,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationMembersDao","requiredType":[],"content":"@Query(\"SELECT * FROM ConversationMembers\")\n    suspend fun allConversationMembers(): List<ConversationMembersEntity>","prompt":""},{"id":2373,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationMembersDao","requiredType":[],"content":"@Insert\n    suspend fun insertConversationMemeber(conversationMember: ConversationMembersEntity)","prompt":""},{"id":2374,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationMembersDao","requiredType":[],"content":"@Query(\"SELECT * FROM ConversationMembers ORDER BY user_id, conv_id LIMIT :batchSize OFFSET :start\")\n    override suspend fun nextBatch(start: Int, batchSize: Int): List<ConversationMembersEntity>?","prompt":""},{"id":2375,"identifierName":"com.waz.zclient.storage.db.conversations.ConversationMembersDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM ConversationMembers\")\n    override suspend fun count(): Int","prompt":""},{"id":2376,"identifierName":"com.google.android.ground.persistence.local.room.dao.SubmissionMutationDao","requiredType":[],"content":"@Query(\"SELECT * FROM submission_mutation\")\n  fun loadAllOnceAndStream(): Flowable<List<SubmissionMutationEntity>>","prompt":""},{"id":2377,"identifierName":"com.google.android.ground.persistence.local.room.dao.SubmissionMutationDao","requiredType":[],"content":"@Query(\n    \"SELECT * FROM submission_mutation \" +\n      \"WHERE location_of_interest_id = :locationOfInterestId AND state IN (:allowedStates)\"\n  )\n  fun findByLocationOfInterestId(\n    locationOfInterestId: String,\n    vararg allowedStates: MutationEntitySyncStatus\n  ): Single<List<SubmissionMutationEntity>>","prompt":""},{"id":2378,"identifierName":"com.google.android.ground.persistence.local.room.dao.SubmissionMutationDao","requiredType":[],"content":"@Query(\n    \"SELECT * FROM submission_mutation \" +\n      \"WHERE submission_id = :submissionId AND state IN (:allowedStates)\"\n  )\n  fun findBySubmissionId(\n    submissionId: String,\n    vararg allowedStates: MutationEntitySyncStatus\n  ): Single<List<SubmissionMutationEntity>>","prompt":""},{"id":2379,"identifierName":"com.google.android.ground.persistence.local.room.dao.SubmissionMutationDao","requiredType":[],"content":"@Query(\n    \"SELECT * FROM submission_mutation \" +\n      \"WHERE location_of_interest_id = :locationOfInterestId AND state IN (:allowedStates)\"\n  )\n  fun findByLocationOfInterestIdOnceAndStream(\n    locationOfInterestId: String,\n    vararg allowedStates: MutationEntitySyncStatus\n  ): @Cold(terminates = false) Flowable<List<SubmissionMutationEntity>>","prompt":""},{"id":2380,"identifierName":"org.zeroxlab.momodict.db.room.BookDao","requiredType":[],"content":"@Query(\"DELETE FROM dictionaries WHERE bookName = :bookName\")\n    fun removeBook(bookName: String): Int","prompt":""},{"id":2381,"identifierName":"org.zeroxlab.momodict.db.room.BookDao","requiredType":[],"content":"@Query(\"SELECT * from dictionaries\")\n    fun getAll(): List<Book>","prompt":""},{"id":2382,"identifierName":"org.zeroxlab.momodict.db.room.BookDao","requiredType":[],"content":"@Insert\n    fun addBook(book: Book)","prompt":""},{"id":2383,"identifierName":"com.android.example.sleepsamplekotlin.data.db.SleepClassifyEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM sleep_classify_events_table ORDER BY time_stamp_seconds DESC\")\n    fun getAll(): Flow<List<SleepClassifyEventEntity>>","prompt":""},{"id":2384,"identifierName":"com.android.example.sleepsamplekotlin.data.db.SleepClassifyEventDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(sleepClassifyEventEntity: SleepClassifyEventEntity)","prompt":""},{"id":2385,"identifierName":"com.android.example.sleepsamplekotlin.data.db.SleepClassifyEventDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertAll(sleepClassifyEventEntities: List<SleepClassifyEventEntity>)","prompt":""},{"id":2386,"identifierName":"com.android.example.sleepsamplekotlin.data.db.SleepClassifyEventDao","requiredType":[],"content":"@Delete\n    suspend fun delete(sleepClassifyEventEntity: SleepClassifyEventEntity)","prompt":""},{"id":2387,"identifierName":"com.android.example.sleepsamplekotlin.data.db.SleepClassifyEventDao","requiredType":[],"content":"@Query(\"DELETE FROM sleep_classify_events_table\")\n    suspend fun deleteAll()","prompt":""},{"id":2388,"identifierName":"com.github.vhromada.catalog.repository.GameRepository","requiredType":["data class Game( /** * ID */ @Id @SequenceGenerator(name = \"game_generator\", sequenceName = \"games_sq\", allocationSize = 1) @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"game_generator\") var id: Int?, /** * UUID */ val uuid: String, /** * Name */ @Column(name = \"game_name\") var name: String, /** * Normalized name */ @Column(name = \"normalized_game_name\") var normalizedName: String, /** * URL to english Wikipedia page about game */ @Column(name = \"wiki_en\") var wikiEn: String?, /** * URL to czech Wikipedia page about game */ @Column(name = \"wiki_cz\") var wikiCz: String?, /** * Count of media */ @Column(name = \"media_count\") var mediaCount: Int, /** * Format */ var format: String, /** * Cheat */ @OneToOne(cascade = [CascadeType.ALL], fetch = FetchType.EAGER, orphanRemoval = true) @JoinColumn(name = \"cheat\") var cheat: Cheat?, /** * True if there is crack */ var crack: Boolean, /** * True if there is serial key */ @Column(name = \"serial_key\") var serialKey: Boolean, /** * True if there is patch */ var patch: Boolean, /** * True if there is trainer */ var trainer: Boolean, /** * True if there is data for trainer */ @Column(name = \"trainer_data\") var trainerData: Boolean, /** * True if there is editor */ @Column(name = \"editor\") var editor: Boolean, /** * True if there are saves */ var saves: Boolean, /** * Other data */ @Column(name = \"other_data\") var otherData: String?, /** * Note */ var note: String? )"],"content":"/**\n     * Finds game by UUID.\n     *\n     * @param uuid UUID\n     * @return game\n     */\n    fun findByUuid(uuid: String): Optional<Game>","prompt":""},{"id":2389,"identifierName":"com.github.vhromada.catalog.repository.GameRepository","requiredType":["data class GameStatistics( /** * Count of programs */ val count: Long, /** * Count of media */ val mediaCount: Long? )"],"content":"/**\n     * Returns statistics.\n     *\n     * @return statistics\n     */\n    @Query(\"SELECT new com.github.vhromada.catalog.domain.io.GameStatistics(COUNT(g.id), SUM(g.mediaCount)) FROM Game g\")\n    fun getStatistics(): GameStatistics","prompt":""},{"id":2390,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RelatedEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM related WHERE parentEventId = :id\")\n    abstract fun getRelatedEventsForEvent(id: Long): LiveData<List<RelatedEvent>>","prompt":""},{"id":2391,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RelatedEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM related WHERE parentEventId = :id\")\n    abstract suspend fun getRelatedEventsForEventSuspend(id: Long): List<RelatedEvent>","prompt":""},{"id":2392,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RelatedEventDao","requiredType":[],"content":"@Query(\"\"\"SELECT event.* FROM related JOIN event ON related.relatedEventGuid = event.guid WHERE related.parentEventId = :id\"\"\")\n    abstract fun newGetReletedEventsForEvent(id: Long): LiveData<List<Event>>","prompt":""},{"id":2393,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RelatedEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM related WHERE parentEventId = :parentId AND relatedEventGuid = :related\")\n    abstract suspend fun findSpecificRelatedEvent(parentId: Long, related: String): RelatedEvent?","prompt":""},{"id":2394,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RelatedEventDao","requiredType":[],"content":"@Query(\"DElETE FROM related\")\n    abstract fun delete()","prompt":""},{"id":2395,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RelatedEventDao","requiredType":[],"content":"override suspend fun updateOrInsertInternal(item: RelatedEvent): Long {\n        if (item.id != 0L) {\n            update(item)\n        } else {\n            val existingItem = findSpecificRelatedEvent(item.parentEventId, item.relatedEventGuid)\n            if (existingItem != null) {\n                item.id = existingItem.id\n                update(item)\n            } else {\n                item.id = insert(item)\n            }\n        }\n        return item.id\n    }","prompt":""},{"id":2396,"identifierName":"org.secuso.privacyfriendlyexample.database.dao.SampleDataDao","requiredType":["data class SampleData( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_id\") var identifier: Int, @ColumnInfo(name = \"content\") var content: String?)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(sampleData: SampleData)","prompt":""},{"id":2397,"identifierName":"org.secuso.privacyfriendlyexample.database.dao.SampleDataDao","requiredType":["data class SampleData( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_id\") var identifier: Int, @ColumnInfo(name = \"content\") var content: String?)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(vararg hosts: SampleData)","prompt":""},{"id":2398,"identifierName":"org.secuso.privacyfriendlyexample.database.dao.SampleDataDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(hosts: List<SampleData>)","prompt":""},{"id":2399,"identifierName":"org.secuso.privacyfriendlyexample.database.dao.SampleDataDao","requiredType":["data class SampleData( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_id\") var identifier: Int, @ColumnInfo(name = \"content\") var content: String?)"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun update(host: SampleData)","prompt":""},{"id":2400,"identifierName":"org.secuso.privacyfriendlyexample.database.dao.SampleDataDao","requiredType":["data class SampleData( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_id\") var identifier: Int, @ColumnInfo(name = \"content\") var content: String?)"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updateAll(vararg host: SampleData)","prompt":""},{"id":2401,"identifierName":"org.secuso.privacyfriendlyexample.database.dao.SampleDataDao","requiredType":[],"content":"@Query(\"SELECT * FROM sample_data WHERE content = :content\")\n    operator fun get(content: String): SampleData?","prompt":""},{"id":2402,"identifierName":"org.secuso.privacyfriendlyexample.database.dao.SampleDataDao","requiredType":[],"content":"@Query(\"SELECT * FROM sample_data WHERE _id = :id\")\n    operator fun get(id: Int): SampleData?","prompt":""},{"id":2403,"identifierName":"org.secuso.privacyfriendlyexample.database.dao.SampleDataDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM sample_data\")\n    fun count(): LiveData<Int>","prompt":""},{"id":2404,"identifierName":"org.secuso.privacyfriendlyexample.database.dao.SampleDataDao","requiredType":["data class SampleData( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"_id\") var identifier: Int, @ColumnInfo(name = \"content\") var content: String?)"],"content":"@Delete\n    fun delete(domain: SampleData)","prompt":""},{"id":2405,"identifierName":"org.secuso.privacyfriendlyexample.database.dao.SampleDataDao","requiredType":[],"content":"@Delete\n    fun deleteAll(deleteList: List<SampleData>)","prompt":""},{"id":2406,"identifierName":"com.waz.zclient.storage.db.notifications.EncryptedPushNotificationEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM EncryptedPushNotificationEvents\")\n    suspend fun allEncryptedPushNotificationEvents(): List<EncryptedPushNotificationEventEntity>","prompt":""},{"id":2407,"identifierName":"org.tasks.data.FilterDao","requiredType":[],"content":"@Update\n    suspend fun update(filter: Filter)","prompt":""},{"id":2408,"identifierName":"org.tasks.data.FilterDao","requiredType":[],"content":"@Query(\"DELETE FROM filters WHERE _id = :id\")\n    suspend fun delete(id: Long)","prompt":""},{"id":2409,"identifierName":"org.tasks.data.FilterDao","requiredType":[],"content":"@Delete\n    suspend fun delete(filter: Filter)","prompt":""},{"id":2410,"identifierName":"org.tasks.data.FilterDao","requiredType":[],"content":"@Query(\"SELECT * FROM filters WHERE title = :title COLLATE NOCASE LIMIT 1\")\n    suspend fun getByName(title: String): Filter?","prompt":""},{"id":2411,"identifierName":"org.tasks.data.FilterDao","requiredType":[],"content":"@Insert\n    suspend fun insert(filter: Filter): Long","prompt":""},{"id":2412,"identifierName":"org.tasks.data.FilterDao","requiredType":[],"content":"@Query(\"SELECT * FROM filters\")\n    suspend fun getFilters(): List<Filter>","prompt":""},{"id":2413,"identifierName":"org.tasks.data.FilterDao","requiredType":[],"content":"@Query(\"SELECT * FROM filters WHERE _id = :id LIMIT 1\")\n    suspend fun getById(id: Long): Filter?","prompt":""},{"id":2414,"identifierName":"org.tasks.data.FilterDao","requiredType":[],"content":"@Query(\"UPDATE filters SET f_order = $NO_ORDER\")\n    suspend fun resetOrders()","prompt":""},{"id":2415,"identifierName":"org.tasks.data.FilterDao","requiredType":[],"content":"@Query(\"UPDATE filters SET f_order = :order WHERE _id = :id\")\n    suspend fun setOrder(id: Long, order: Int)","prompt":""},{"id":2416,"identifierName":"com.github.bumblebee.command.autocomplete.dao.AutoCompleteRepository","requiredType":["data class AutoCompletePhrasenull"],"content":"@Modifying\n    @Query(\"UPDATE AutoCompletePhrase phrase SET phrase.phrasePattern = :phrasePattern \" +\n            \"WHERE phrase.phraseKey = :phraseKey\")\n    fun updatePhrase(@Param(\"phraseKey\") phraseKey: String, @Param(\"phrasePattern\") phrasePattern: String)","prompt":""},{"id":2417,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.VideoDao","requiredType":[],"content":"@Query(\"SELECT id, movie_id, name, key, site, size, type FROM video \" + \"WHERE movie_id = :movieId\")\n    fun getByMovieId(movieId: Int): Flowable<List<VideoEntity>>","prompt":""},{"id":2418,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.VideoDao","requiredType":[],"content":"@Insert\n    fun insertAll(videos: List<VideoEntity>)","prompt":""},{"id":2419,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.VideoDao","requiredType":[],"content":"@Query(\"DELETE FROM video \" + \"WHERE movie_id IN (SELECT id FROM movie WHERE id = :movieId)\")\n    fun deleteByMovieId(movieId: Int): Int","prompt":""},{"id":2420,"identifierName":"com.bnsantos.offline.db.UserDao","requiredType":["data class User( @PrimaryKey val id: String, val name: String, val email: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(user: User)","prompt":""},{"id":2421,"identifierName":"com.bnsantos.offline.db.UserDao","requiredType":["data class User( @PrimaryKey val id: String, val name: String, val email: String )"],"content":"@Query(\"SELECT * FROM User WHERE id = :p0\")\n    fun read(id: String): Flowable<User>","prompt":""},{"id":2422,"identifierName":"com.tasomaniac.openwith.data.PreferredAppDao","requiredType":[],"content":"@Query(\"SELECT * FROM openwith WHERE preferred = 1\")\n    fun allPreferredApps(): Flowable<List<PreferredApp>>","prompt":""},{"id":2423,"identifierName":"com.tasomaniac.openwith.data.PreferredAppDao","requiredType":[],"content":"@Query(\"SELECT * FROM openwith WHERE host = :host\")\n    fun preferredAppByHost(host: String): Maybe<PreferredApp>","prompt":""},{"id":2424,"identifierName":"com.tasomaniac.openwith.data.PreferredAppDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(preferredApp: PreferredApp)","prompt":""},{"id":2425,"identifierName":"com.tasomaniac.openwith.data.PreferredAppDao","requiredType":[],"content":"@Query(\"DELETE FROM openwith WHERE host = :host\")\n    fun deleteHost(host: String)","prompt":""},{"id":2426,"identifierName":"io.github.sdsstudios.ScoreKeeper.Database.Dao.TimeLimitDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${TABLE_NAME}\")\n    abstract fun getAllTimeLimits(): LiveData<List<TimeLimit>>","prompt":""},{"id":2427,"identifierName":"moe.feng.nhentai.dao.HistoryDao","requiredType":["data class History( @Expose val action: Int, @Expose @PrimaryKey var time: Long = System.currentTimeMillis(), @Expose var key: String = \"\" )"],"content":"/**\n\t * Get all histories\n\t * @return All histories list\n\t */\n\t@Query(\"SELECT * from ${History.TAG}\")\n\tfun getAllHistories(): List<History>","prompt":""},{"id":2428,"identifierName":"moe.feng.nhentai.dao.HistoryDao","requiredType":["data class History( @Expose val action: Int, @Expose @PrimaryKey var time: Long = System.currentTimeMillis(), @Expose var key: String = \"\" )"],"content":"/**\n\t * Insert history(s)\n\t * @param history Histories being inserted\n\t */\n\t@Insert(onConflict = OnConflictStrategy.REPLACE)\n\tfun insert(vararg history: History)","prompt":""},{"id":2429,"identifierName":"moe.feng.nhentai.dao.HistoryDao","requiredType":["data class History( @Expose val action: Int, @Expose @PrimaryKey var time: Long = System.currentTimeMillis(), @Expose var key: String = \"\" )"],"content":"/**\n\t * Delete history from cache\n\t * @param history History being deleted\n\t */\n\t@Delete\n\tfun delete(history: History)","prompt":""},{"id":2430,"identifierName":"com.emogoth.android.phone.mimi.db.dao.ArchivedPostAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.ARCHIVED_POSTS_TABLE}\")\n    abstract fun getAll(): Flowable<List<ArchivedPost>>","prompt":""},{"id":2431,"identifierName":"com.emogoth.android.phone.mimi.db.dao.ArchivedPostAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.ARCHIVED_POSTS_TABLE} WHERE ${ArchivedPost.BOARD_NAME} = :boardName AND ${ArchivedPost.THREAD_ID} = :threadId\")\n    abstract fun getThread(boardName: String, threadId: Long): Flowable<List<ArchivedPost>>","prompt":""},{"id":2432,"identifierName":"com.emogoth.android.phone.mimi.db.dao.ArchivedPostAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.ARCHIVED_POSTS_TABLE} WHERE ${ArchivedPost.BOARD_NAME} = :boardName AND ${ArchivedPost.THREAD_ID} = :threadId\")\n    abstract fun removeThread(boardName: String, threadId: Long)","prompt":""},{"id":2433,"identifierName":"com.emogoth.android.phone.mimi.db.dao.ArchivedPostAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.ARCHIVED_POSTS_TABLE} WHERE ${ArchivedPost.THREAD_ID} in (:ids)\")\n    abstract fun removeThreads(ids: List<Long>)","prompt":""},{"id":2434,"identifierName":"com.emogoth.android.phone.mimi.db.dao.ArchivedPostAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.ARCHIVED_POSTS_TABLE}\")\n    abstract fun clear()","prompt":""},{"id":2435,"identifierName":"com.ayatk.biblio.infrastructure.database.dao.NovelDao","requiredType":[],"content":"@Query(\"SELECT * FROM novel\")\n  fun getAllNovel(): Flowable<List<NovelEntity>>","prompt":""},{"id":2436,"identifierName":"com.ayatk.biblio.infrastructure.database.dao.NovelDao","requiredType":["data class NovelEntity( @PrimaryKey @ColumnInfo(index = true) var code: String, var title: String, @ColumnInfo(name = \"user_id\", index = true) var userID: Int, var writer: String, var story: String, @ColumnInfo(index = true) var publisher: Publisher, @ColumnInfo(name = \"big_genre\") var bigGenre: BigGenre, @ColumnInfo(index = true) var genre: Genre, var keyword: String, @ColumnInfo(name = \"novel_state\", index = true) var novelState: NovelState, @ColumnInfo(name = \"first_upload\") var firstUpload: Date, @ColumnInfo(name = \"last_upload\") var lastUpload: Date, var page: Int, var length: Int, @ColumnInfo(name = \"read_time\") var readTime: Int, @ColumnInfo(name = \"is_r18\", index = true) var isR18: Boolean, @ColumnInfo(name = \"is_r15\", index = true) var isR15: Boolean, @ColumnInfo(name = \"is_bl\", index = true) var isBL: Boolean, @ColumnInfo(name = \"is_gl\", index = true) var isGL: Boolean, @ColumnInfo(name = \"is_cruelness\", index = true) var isCruelness: Boolean, @ColumnInfo(name = \"is_transmigration\", index = true) var isTransmigration: Boolean, @ColumnInfo(name = \"is_transfer\", index = true) var isTransfer: Boolean, @ColumnInfo(name = \"global_point\", index = true) var globalPoint: Int, @ColumnInfo(name = \"bookmark_count\") var bookmarkCount: Int, @ColumnInfo(name = \"review_count\") var reviewCount: Int, @ColumnInfo(name = \"rating_count\") var ratingCount: Int, @ColumnInfo(name = \"illustration_count\") var illustrationCount: Int, @ColumnInfo(name = \"conversation_rate\") var conversationRate: Int, @ColumnInfo(name = \"novel_updated_at\") var novelUpdatedAt: Date )"],"content":"@Query(\"SELECT * FROM novel WHERE code = :code LIMIT 1\")\n  fun findNovelByCode(code: String): Maybe<NovelEntity>","prompt":""},{"id":2437,"identifierName":"com.ayatk.biblio.infrastructure.database.dao.NovelDao","requiredType":["data class NovelEntity( @PrimaryKey @ColumnInfo(index = true) var code: String, var title: String, @ColumnInfo(name = \"user_id\", index = true) var userID: Int, var writer: String, var story: String, @ColumnInfo(index = true) var publisher: Publisher, @ColumnInfo(name = \"big_genre\") var bigGenre: BigGenre, @ColumnInfo(index = true) var genre: Genre, var keyword: String, @ColumnInfo(name = \"novel_state\", index = true) var novelState: NovelState, @ColumnInfo(name = \"first_upload\") var firstUpload: Date, @ColumnInfo(name = \"last_upload\") var lastUpload: Date, var page: Int, var length: Int, @ColumnInfo(name = \"read_time\") var readTime: Int, @ColumnInfo(name = \"is_r18\", index = true) var isR18: Boolean, @ColumnInfo(name = \"is_r15\", index = true) var isR15: Boolean, @ColumnInfo(name = \"is_bl\", index = true) var isBL: Boolean, @ColumnInfo(name = \"is_gl\", index = true) var isGL: Boolean, @ColumnInfo(name = \"is_cruelness\", index = true) var isCruelness: Boolean, @ColumnInfo(name = \"is_transmigration\", index = true) var isTransmigration: Boolean, @ColumnInfo(name = \"is_transfer\", index = true) var isTransfer: Boolean, @ColumnInfo(name = \"global_point\", index = true) var globalPoint: Int, @ColumnInfo(name = \"bookmark_count\") var bookmarkCount: Int, @ColumnInfo(name = \"review_count\") var reviewCount: Int, @ColumnInfo(name = \"rating_count\") var ratingCount: Int, @ColumnInfo(name = \"illustration_count\") var illustrationCount: Int, @ColumnInfo(name = \"conversation_rate\") var conversationRate: Int, @ColumnInfo(name = \"novel_updated_at\") var novelUpdatedAt: Date )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insert(novel: NovelEntity)","prompt":""},{"id":2438,"identifierName":"com.ayatk.biblio.infrastructure.database.dao.NovelDao","requiredType":["data class NovelEntity( @PrimaryKey @ColumnInfo(index = true) var code: String, var title: String, @ColumnInfo(name = \"user_id\", index = true) var userID: Int, var writer: String, var story: String, @ColumnInfo(index = true) var publisher: Publisher, @ColumnInfo(name = \"big_genre\") var bigGenre: BigGenre, @ColumnInfo(index = true) var genre: Genre, var keyword: String, @ColumnInfo(name = \"novel_state\", index = true) var novelState: NovelState, @ColumnInfo(name = \"first_upload\") var firstUpload: Date, @ColumnInfo(name = \"last_upload\") var lastUpload: Date, var page: Int, var length: Int, @ColumnInfo(name = \"read_time\") var readTime: Int, @ColumnInfo(name = \"is_r18\", index = true) var isR18: Boolean, @ColumnInfo(name = \"is_r15\", index = true) var isR15: Boolean, @ColumnInfo(name = \"is_bl\", index = true) var isBL: Boolean, @ColumnInfo(name = \"is_gl\", index = true) var isGL: Boolean, @ColumnInfo(name = \"is_cruelness\", index = true) var isCruelness: Boolean, @ColumnInfo(name = \"is_transmigration\", index = true) var isTransmigration: Boolean, @ColumnInfo(name = \"is_transfer\", index = true) var isTransfer: Boolean, @ColumnInfo(name = \"global_point\", index = true) var globalPoint: Int, @ColumnInfo(name = \"bookmark_count\") var bookmarkCount: Int, @ColumnInfo(name = \"review_count\") var reviewCount: Int, @ColumnInfo(name = \"rating_count\") var ratingCount: Int, @ColumnInfo(name = \"illustration_count\") var illustrationCount: Int, @ColumnInfo(name = \"conversation_rate\") var conversationRate: Int, @ColumnInfo(name = \"novel_updated_at\") var novelUpdatedAt: Date )"],"content":"@Delete\n  fun delete(novel: NovelEntity)","prompt":""},{"id":2439,"identifierName":"com.arcgisruntime.sample.geotriggermonitoringdemo.model.PointOfInterestDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun save(point: PointOfInterest)","prompt":""},{"id":2440,"identifierName":"com.arcgisruntime.sample.geotriggermonitoringdemo.model.PointOfInterestDao","requiredType":[],"content":"@Query(\"SELECT * FROM pointofinterest WHERE id = :id\")\n    fun load(id: Int): Flow<PointOfInterest>","prompt":""},{"id":2441,"identifierName":"com.arcgisruntime.sample.geotriggermonitoringdemo.model.PointOfInterestDao","requiredType":[],"content":"@Delete\n    fun delete(point: PointOfInterest)","prompt":""},{"id":2442,"identifierName":"com.arcgisruntime.sample.geotriggermonitoringdemo.model.PointOfInterestDao","requiredType":[],"content":"@Query(\"DELETE FROM pointofinterest\")\n    fun clear()","prompt":""},{"id":2443,"identifierName":"com.arcgisruntime.sample.geotriggermonitoringdemo.model.PointOfInterestDao","requiredType":[],"content":"@Query(\"SELECT * FROM pointofinterest\")\n    fun getAll(): Flow<List<PointOfInterest>>","prompt":""},{"id":2444,"identifierName":"com.orgzly.android.db.dao.RookUrlDao","requiredType":[],"content":"@Query(\"SELECT * FROM rook_urls WHERE url = :url\")\n    abstract fun get(url: String): RookUrl?","prompt":""},{"id":2445,"identifierName":"com.orgzly.android.db.dao.RookUrlDao","requiredType":[],"content":"fun getOrInsert(rookUrl: String): Long =\n            get(rookUrl).let {\n                it?.id ?: insert(RookUrl(0, rookUrl))\n            }","prompt":""},{"id":2446,"identifierName":"me.liuqingwen.android.projectphotowall.AppDatabaseHelper","requiredType":[],"content":"fun getAllPhotos() = this.photoDao.findAllPhotos()","prompt":""},{"id":2447,"identifierName":"me.liuqingwen.android.projectphotowall.AppDatabaseHelper","requiredType":[],"content":"fun getPhotoById(id:Int) = this.photoDao.findPhotoById(id)","prompt":""},{"id":2448,"identifierName":"me.liuqingwen.android.projectphotowall.AppDatabaseHelper","requiredType":[],"content":"fun addPhotos(vararg photo: Photo) = this.photoDao.insertPhotos(*photo)","prompt":""},{"id":2449,"identifierName":"me.liuqingwen.android.projectphotowall.AppDatabaseHelper","requiredType":[],"content":"fun updatePhotos(vararg photo: Photo) = this.photoDao.updatePhotos(*photo)","prompt":""},{"id":2450,"identifierName":"me.liuqingwen.android.projectphotowall.AppDatabaseHelper","requiredType":[],"content":"fun removePhotos(vararg photo: Photo) = this.photoDao.deletePhotos(*photo)","prompt":""},{"id":2451,"identifierName":"me.liuqingwen.android.projectphotowall.Photo","requiredType":[],"content":"override fun writeToParcel(parcel: Parcel, flags: Int)\n    {\n        parcel.writeLong(id)\n        parcel.writeString(url)\n        parcel.writeString(author)\n        parcel.writeLong(date?.time ?: 0L)\n        parcel.writeString(description)\n    }","prompt":""},{"id":2452,"identifierName":"me.liuqingwen.android.projectphotowall.Photo","requiredType":[],"content":"override fun describeContents() = 0","prompt":""},{"id":2453,"identifierName":"me.liuqingwen.android.projectphotowall.DatabaseConverter","requiredType":[],"content":"@TypeConverter\n    fun dateToString(date:Date?):String? = date?.let { SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.getDefault()).format(it) }","prompt":""},{"id":2454,"identifierName":"me.liuqingwen.android.projectphotowall.DatabaseConverter","requiredType":[],"content":"@TypeConverter\n    fun stringToDate(string:String?):Date? = string?.let { SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.getDefault()).parse(it) }","prompt":""},{"id":2455,"identifierName":"me.liuqingwen.android.projectphotowall.PhotoDao","requiredType":[],"content":"@Query(\"SELECT * FROM photo\")\n    fun findAllPhotos():List<Photo>","prompt":""},{"id":2456,"identifierName":"me.liuqingwen.android.projectphotowall.PhotoDao","requiredType":[],"content":"@Query(\"SELECT * FROM photo WHERE id = :arg0\")\n    fun findPhotoById(id:Int):Photo?","prompt":""},{"id":2457,"identifierName":"me.liuqingwen.android.projectphotowall.PhotoDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertPhotos(vararg photo:Photo)","prompt":""},{"id":2458,"identifierName":"me.liuqingwen.android.projectphotowall.PhotoDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.ABORT)\n    fun updatePhotos(vararg photo:Photo)","prompt":""},{"id":2459,"identifierName":"me.liuqingwen.android.projectphotowall.PhotoDao","requiredType":[],"content":"@Delete\n    fun deletePhotos(vararg photo:Photo)","prompt":""},{"id":2460,"identifierName":"me.liuqingwen.android.projectphotowall.AppDatabase","requiredType":[],"content":"abstract fun photoDao():PhotoDao","prompt":""},{"id":2461,"identifierName":"io.github.tonnyl.mango.database.dao.AccessTokenDao","requiredType":["data class AccessToken( @ColumnInfo(name = \"access_token\") @SerializedName(\"access_token\") @Expose val accessToken: String, @ColumnInfo(name = \"token_type\") @SerializedName(\"token_type\") @Expose val tokenType: String, @ColumnInfo(name = \"scope\") @SerializedName(\"scope\") @Expose val scope: String, @PrimaryKey @ColumnInfo(name = \"id\") @Expose var id: Long )"],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(accessToken: AccessToken)","prompt":""},{"id":2462,"identifierName":"io.github.tonnyl.mango.database.dao.AccessTokenDao","requiredType":["data class AccessToken( @ColumnInfo(name = \"access_token\") @SerializedName(\"access_token\") @Expose val accessToken: String, @ColumnInfo(name = \"token_type\") @SerializedName(\"token_type\") @Expose val tokenType: String, @ColumnInfo(name = \"scope\") @SerializedName(\"scope\") @Expose val scope: String, @PrimaryKey @ColumnInfo(name = \"id\") @Expose var id: Long )"],"content":"@Query(\"SELECT * FROM access_token WHERE id = :id\")\n    fun query(id: Long): AccessToken","prompt":""},{"id":2463,"identifierName":"io.github.tonnyl.mango.database.dao.AccessTokenDao","requiredType":["data class AccessToken( @ColumnInfo(name = \"access_token\") @SerializedName(\"access_token\") @Expose val accessToken: String, @ColumnInfo(name = \"token_type\") @SerializedName(\"token_type\") @Expose val tokenType: String, @ColumnInfo(name = \"scope\") @SerializedName(\"scope\") @Expose val scope: String, @PrimaryKey @ColumnInfo(name = \"id\") @Expose var id: Long )"],"content":"@Update\n    fun update(accessToken: AccessToken)","prompt":""},{"id":2464,"identifierName":"io.github.tonnyl.mango.database.dao.AccessTokenDao","requiredType":["data class AccessToken( @ColumnInfo(name = \"access_token\") @SerializedName(\"access_token\") @Expose val accessToken: String, @ColumnInfo(name = \"token_type\") @SerializedName(\"token_type\") @Expose val tokenType: String, @ColumnInfo(name = \"scope\") @SerializedName(\"scope\") @Expose val scope: String, @PrimaryKey @ColumnInfo(name = \"id\") @Expose var id: Long )"],"content":"@Delete\n    fun delete(accessToken: AccessToken)","prompt":""},{"id":2465,"identifierName":"ro.edi.novelty.data.db.dao.FeedDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM feeds ORDER BY page ASC\")\n    protected abstract fun queryAll(): LiveData<List<Feed>>","prompt":""},{"id":2466,"identifierName":"ro.edi.novelty.data.db.dao.FeedDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM feeds WHERE is_starred ORDER BY page ASC\")\n    abstract fun getMyFeeds(): List<Feed>?","prompt":""},{"id":2467,"identifierName":"ro.edi.novelty.data.db.dao.FeedDao","requiredType":[],"content":"@Query(\"SELECT * FROM feeds WHERE id = :feedId\")\n    abstract fun getFeed(feedId: Int): Feed?","prompt":""},{"id":2468,"identifierName":"ro.edi.novelty.data.db.dao.FeedDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM feeds WHERE page > :page\")\n    abstract fun getFeedsAfter(page: Int): List<Feed>?","prompt":""},{"id":2469,"identifierName":"ro.edi.novelty.data.db.dao.FeedDao","requiredType":[],"content":"/**\n     * Get all feeds.\n     */\n    fun getFeeds(): LiveData<List<Feed>> = queryAll().getDistinct()","prompt":""},{"id":2470,"identifierName":"ro.edi.novelty.data.db.dao.FeedDao","requiredType":[],"content":"@Query(\"UPDATE feeds SET type = :type WHERE id = :feedId\")\n    abstract fun updateType(feedId: Int, type: Int)","prompt":""},{"id":2471,"identifierName":"ro.edi.novelty.data.db.dao.FeedDao","requiredType":[],"content":"@Query(\"UPDATE feeds SET page = :page WHERE id = :feedId\")\n    abstract fun updatePage(feedId: Int, page: Int)","prompt":""},{"id":2472,"identifierName":"ro.edi.novelty.data.db.dao.FeedDao","requiredType":[],"content":"@Transaction\n    open fun swapPages(feedId1: Int, page1: Int, feedId2: Int, page2: Int) {\n        updatePage(feedId1, page2)\n        updatePage(feedId2, page1)\n    }","prompt":""},{"id":2473,"identifierName":"ro.edi.novelty.data.db.dao.FeedDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM feeds\")\n    abstract fun deleteAll()","prompt":""},{"id":2474,"identifierName":"ro.edi.novelty.data.db.dao.FeedDao","requiredType":[],"content":"@Query(\"DELETE FROM feeds WHERE id = :feedId\")\n    abstract fun delete(feedId: Int)","prompt":""},{"id":2475,"identifierName":"com.waz.zclient.storage.db.cache.CacheEntryDao","requiredType":[],"content":"@Query(\"SELECT * FROM CacheEntry\")\n    suspend fun cacheEntries(): List<CacheEntryEntity>","prompt":""},{"id":2476,"identifierName":"com.waz.zclient.storage.db.cache.CacheEntryDao","requiredType":[],"content":"@Insert\n    suspend fun insertCacheEntry(cacheEntry: CacheEntryEntity)","prompt":""},{"id":2477,"identifierName":"org.wordpress.android.fluxc.persistence.FeatureFlagConfigDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * from FeatureFlagConfigurations\")\n    abstract fun getFeatureFlagList(): List<FeatureFlag>","prompt":""},{"id":2478,"identifierName":"org.wordpress.android.fluxc.persistence.FeatureFlagConfigDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * from FeatureFlagConfigurations WHERE `key` = :key\")\n    abstract fun getFeatureFlag(key: String): List<FeatureFlag>","prompt":""},{"id":2479,"identifierName":"org.wordpress.android.fluxc.persistence.FeatureFlagConfigDao","requiredType":["data class ColumnInfo( /** * Name of the column in the database. Defaults to the field name if not set. * * @return Name of the column in the database. */ val name: String = INHERIT_FIELD_NAME, /** * The type affinity for the column, which will be used when constructing the database. * * If it is not specified, the value defaults to [UNDEFINED] and Room resolves it based * on the field's type and available TypeConverters. * * See [SQLite types documentation](https://www.sqlite.org/datatype3.html) for details. * * @return The type affinity of the column. This is either [UNDEFINED], [TEXT], * [INTEGER], [REAL], or [BLOB]. */ @SuppressWarnings(\"unused\") @get:SQLiteTypeAffinity val typeAffinity: Int = UNDEFINED, /** * Convenience method to index the field. * * If you would like to create a composite index instead, see: [Index]. * * @return True if this field should be indexed, false otherwise. Defaults to false. */ val index: Boolean = false, /** * The collation sequence for the column, which will be used when constructing the database. * * The default value is [UNSPECIFIED]. In that case, Room does not add any * collation sequence to the column, and SQLite treats it like [BINARY]. * * @return The collation sequence of the column. This is either [UNSPECIFIED], * [BINARY], [NOCASE], [RTRIM], [LOCALIZED] or [UNICODE]. */ @get:Collate val collate: Int = UNSPECIFIED, /** * The default value for this column. * * ``` * @ColumnInfo(defaultValue = \"No name\") * public name: String * * @ColumnInfo(defaultValue = \"0\") * public flag: Int * ``` * * Note that the default value you specify here will _NOT_ be used if you simply * insert the [Entity] with [Insert]. In that case, any value assigned in * Java/Kotlin will be used. Use [Query] with an `INSERT` statement * and skip this column there in order to use this default value. * * NULL, CURRENT_TIMESTAMP and other SQLite constant values are interpreted as such. If you want * to use them as strings for some reason, surround them with single-quotes. * * ``` * @ColumnInfo(defaultValue = \"NULL\") * public description: String? * * @ColumnInfo(defaultValue = \"'NULL'\") * public name: String * ``` * * You can also use constant expressions by surrounding them with parentheses. * * ``` * @ColumnInfo(defaultValue = \"('Created at' || CURRENT_TIMESTAMP)\") * public notice: String * ``` * * @return The default value for this column. * @see [VALUE_UNSPECIFIED] */ val defaultValue: String = VALUE_UNSPECIFIED, )"],"content":"@Transaction\n    @Suppress(\"SpreadOperator\")\n    open fun insert(featureFlags: Map<String, Boolean>) {\n        featureFlags.forEach {\n            insert(\n                    FeatureFlag(\n                            key = it.key,\n                            value = it.value,\n                            createdAt = System.currentTimeMillis(),\n                            modifiedAt = System.currentTimeMillis(),\n                            source = REMOTE\n                    )\n            )\n        }\n    }","prompt":""},{"id":2480,"identifierName":"org.wordpress.android.fluxc.persistence.FeatureFlagConfigDao","requiredType":["data class ColumnInfo( /** * Name of the column in the database. Defaults to the field name if not set. * * @return Name of the column in the database. */ val name: String = INHERIT_FIELD_NAME, /** * The type affinity for the column, which will be used when constructing the database. * * If it is not specified, the value defaults to [UNDEFINED] and Room resolves it based * on the field's type and available TypeConverters. * * See [SQLite types documentation](https://www.sqlite.org/datatype3.html) for details. * * @return The type affinity of the column. This is either [UNDEFINED], [TEXT], * [INTEGER], [REAL], or [BLOB]. */ @SuppressWarnings(\"unused\") @get:SQLiteTypeAffinity val typeAffinity: Int = UNDEFINED, /** * Convenience method to index the field. * * If you would like to create a composite index instead, see: [Index]. * * @return True if this field should be indexed, false otherwise. Defaults to false. */ val index: Boolean = false, /** * The collation sequence for the column, which will be used when constructing the database. * * The default value is [UNSPECIFIED]. In that case, Room does not add any * collation sequence to the column, and SQLite treats it like [BINARY]. * * @return The collation sequence of the column. This is either [UNSPECIFIED], * [BINARY], [NOCASE], [RTRIM], [LOCALIZED] or [UNICODE]. */ @get:Collate val collate: Int = UNSPECIFIED, /** * The default value for this column. * * ``` * @ColumnInfo(defaultValue = \"No name\") * public name: String * * @ColumnInfo(defaultValue = \"0\") * public flag: Int * ``` * * Note that the default value you specify here will _NOT_ be used if you simply * insert the [Entity] with [Insert]. In that case, any value assigned in * Java/Kotlin will be used. Use [Query] with an `INSERT` statement * and skip this column there in order to use this default value. * * NULL, CURRENT_TIMESTAMP and other SQLite constant values are interpreted as such. If you want * to use them as strings for some reason, surround them with single-quotes. * * ``` * @ColumnInfo(defaultValue = \"NULL\") * public description: String? * * @ColumnInfo(defaultValue = \"'NULL'\") * public name: String * ``` * * You can also use constant expressions by surrounding them with parentheses. * * ``` * @ColumnInfo(defaultValue = \"('Created at' || CURRENT_TIMESTAMP)\") * public notice: String * ``` * * @return The default value for this column. * @see [VALUE_UNSPECIFIED] */ val defaultValue: String = VALUE_UNSPECIFIED, )"],"content":"@Transaction\n    @Query(\"DELETE FROM FeatureFlagConfigurations\")\n    abstract fun clear()","prompt":""},{"id":2481,"identifierName":"org.wordpress.android.fluxc.persistence.FeatureFlagConfigDao","requiredType":["data class ColumnInfo( /** * Name of the column in the database. Defaults to the field name if not set. * * @return Name of the column in the database. */ val name: String = INHERIT_FIELD_NAME, /** * The type affinity for the column, which will be used when constructing the database. * * If it is not specified, the value defaults to [UNDEFINED] and Room resolves it based * on the field's type and available TypeConverters. * * See [SQLite types documentation](https://www.sqlite.org/datatype3.html) for details. * * @return The type affinity of the column. This is either [UNDEFINED], [TEXT], * [INTEGER], [REAL], or [BLOB]. */ @SuppressWarnings(\"unused\") @get:SQLiteTypeAffinity val typeAffinity: Int = UNDEFINED, /** * Convenience method to index the field. * * If you would like to create a composite index instead, see: [Index]. * * @return True if this field should be indexed, false otherwise. Defaults to false. */ val index: Boolean = false, /** * The collation sequence for the column, which will be used when constructing the database. * * The default value is [UNSPECIFIED]. In that case, Room does not add any * collation sequence to the column, and SQLite treats it like [BINARY]. * * @return The collation sequence of the column. This is either [UNSPECIFIED], * [BINARY], [NOCASE], [RTRIM], [LOCALIZED] or [UNICODE]. */ @get:Collate val collate: Int = UNSPECIFIED, /** * The default value for this column. * * ``` * @ColumnInfo(defaultValue = \"No name\") * public name: String * * @ColumnInfo(defaultValue = \"0\") * public flag: Int * ``` * * Note that the default value you specify here will _NOT_ be used if you simply * insert the [Entity] with [Insert]. In that case, any value assigned in * Java/Kotlin will be used. Use [Query] with an `INSERT` statement * and skip this column there in order to use this default value. * * NULL, CURRENT_TIMESTAMP and other SQLite constant values are interpreted as such. If you want * to use them as strings for some reason, surround them with single-quotes. * * ``` * @ColumnInfo(defaultValue = \"NULL\") * public description: String? * * @ColumnInfo(defaultValue = \"'NULL'\") * public name: String * ``` * * You can also use constant expressions by surrounding them with parentheses. * * ``` * @ColumnInfo(defaultValue = \"('Created at' || CURRENT_TIMESTAMP)\") * public notice: String * ``` * * @return The default value for this column. * @see [VALUE_UNSPECIFIED] */ val defaultValue: String = VALUE_UNSPECIFIED, )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insert(offer: FeatureFlag)","prompt":""},{"id":2482,"identifierName":"`in`.nerd_is.android_showcase.hitokoto.dao.HitokotoDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertHitokoto(hitokoto: Hitokoto): Long","prompt":""},{"id":2483,"identifierName":"`in`.nerd_is.android_showcase.hitokoto.dao.HitokotoDao","requiredType":[],"content":"@Query(\"SELECT * FROM hitokoto ORDER BY RANDOM() LIMIT 1\")\n    fun selectRandomHitokoto(): Flowable<Hitokoto>","prompt":""},{"id":2484,"identifierName":"`in`.nerd_is.android_showcase.hitokoto.dao.HitokotoDao","requiredType":[],"content":"@Query(\"SELECT * FROM hitokoto WHERE id = :p0\")\n    // TODO: a kapt bug here, need to change :p0 to :id after fixed\n    fun selectById(id: String): Flowable<Hitokoto>","prompt":""},{"id":2485,"identifierName":"`in`.nerd_is.android_showcase.hitokoto.dao.HitokotoDao","requiredType":[],"content":"@Query(\"SELECT * FROM hitokoto\")\n    fun selectAll(): Flowable<List<Hitokoto>>","prompt":""},{"id":2486,"identifierName":"`in`.nerd_is.android_showcase.hitokoto.dao.HitokotoDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM hitokoto\")\n    fun countHitokoto(): Flowable<Long>","prompt":""},{"id":2487,"identifierName":"com.crossbowffs.quotelock.history.database.QuoteHistoryDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${QuoteHistoryContract.TABLE}\")\n    fun getAll(): Flow<List<QuoteHistoryEntity>>","prompt":""},{"id":2488,"identifierName":"com.crossbowffs.quotelock.history.database.QuoteHistoryDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insert(quote: QuoteHistoryEntity): Long?","prompt":""},{"id":2489,"identifierName":"com.crossbowffs.quotelock.history.database.QuoteHistoryDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM ${QuoteHistoryContract.TABLE}\")\n    fun count(): Flow<Int>","prompt":""},{"id":2490,"identifierName":"com.crossbowffs.quotelock.history.database.QuoteHistoryDao","requiredType":[],"content":"@Delete\n    suspend fun delete(quote: QuoteHistoryEntity): Int","prompt":""},{"id":2491,"identifierName":"com.crossbowffs.quotelock.history.database.QuoteHistoryDao","requiredType":[],"content":"@Query(\"DELETE FROM ${QuoteHistoryContract.TABLE} WHERE ${QuoteHistoryContract.ID} = :id\")\n    suspend fun delete(id: Long): Int","prompt":""},{"id":2492,"identifierName":"com.crossbowffs.quotelock.history.database.QuoteHistoryDao","requiredType":[],"content":"@Query(\"DELETE FROM ${QuoteHistoryContract.TABLE}\")\n    suspend fun deleteAll()","prompt":""},{"id":2493,"identifierName":"com.crossbowffs.quotelock.history.database.QuoteHistoryDatabase","requiredType":[],"content":"abstract fun dao(): QuoteHistoryDao","prompt":""},{"id":2494,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM movie\")\n    fun getAll(): Flowable<List<MovieEntity>>","prompt":""},{"id":2495,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM movie WHERE id = :id\")\n    fun getById(id: Int): Flowable<MovieEntity>","prompt":""},{"id":2496,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.MovieDao","requiredType":[],"content":"@Query(\"SELECT EXISTS(SELECT id FROM movie WHERE id = :id)\")\n    fun existsById(id: Int): Flowable<Int>","prompt":""},{"id":2497,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.MovieDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insert(movie: MovieEntity): Long","prompt":""},{"id":2498,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.MovieDao","requiredType":[],"content":"@Update\n    fun update(movie: MovieEntity)","prompt":""},{"id":2499,"identifierName":"ch.berta.fabio.popularmovies.data.localmoviedb.tables.MovieDao","requiredType":[],"content":"@Query(\"DELETE FROM movie WHERE id = :id\")\n    fun deleteById(id: Int): Int","prompt":""},{"id":2500,"identifierName":"no.nordicsemi.android.uart.db.ConfigurationsDao","requiredType":[],"content":"@Query(\"SELECT * FROM configurations\")\n    fun load(): Flow<List<Configuration>>","prompt":""},{"id":2501,"identifierName":"no.nordicsemi.android.uart.db.ConfigurationsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(configuration: Configuration)","prompt":""},{"id":2502,"identifierName":"no.nordicsemi.android.uart.db.ConfigurationsDao","requiredType":[],"content":"@Query(\"DELETE FROM configurations WHERE name = :name\")\n    suspend fun delete(name: String)","prompt":""},{"id":2503,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    abstract fun insertAccount(timelineAccountEntity: TimelineAccountEntity): Long","prompt":""},{"id":2504,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    abstract fun insertStatus(timelineAccountEntity: TimelineStatusEntity): Long","prompt":""},{"id":2505,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Insert(onConflict = IGNORE)\n    abstract fun insertStatusIfNotThere(timelineAccountEntity: TimelineStatusEntity): Long","prompt":""},{"id":2506,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Query(\"\"\"\nSELECT s.serverId, s.url, s.timelineUserId,\ns.authorServerId, s.inReplyToId, s.inReplyToAccountId, s.createdAt,\ns.emojis, s.reblogsCount, s.favouritesCount, s.reblogged, s.favourited, s.sensitive,\ns.spoilerText, s.visibility, s.mentions, s.application, s.reblogServerId,s.reblogAccountId,\ns.content, s.attachments,\na.serverId as 'a_serverId', a.timelineUserId as 'a_timelineUserId',\na.localUsername as 'a_localUsername', a.username as 'a_username',\na.displayName as 'a_displayName', a.url as 'a_url', a.avatar as 'a_avatar', a.emojis as 'a_emojis',\nrb.serverId as 'rb_serverId', rb.timelineUserId 'rb_timelineUserId',\nrb.localUsername as 'rb_localUsername', rb.username as 'rb_username',\nrb.displayName as 'rb_displayName', rb.url as 'rb_url', rb.avatar as 'rb_avatar',\nrb.emojis as'rb_emojis'\nFROM TimelineStatusEntity s\nLEFT JOIN TimelineAccountEntity a ON (s.timelineUserId = a.timelineUserId AND s.authorServerId = a.serverId)\nLEFT JOIN TimelineAccountEntity rb ON (s.timelineUserId = rb.timelineUserId AND s.reblogAccountId = rb.serverId)\nWHERE s.timelineUserId = :account\nAND (CASE WHEN :maxId IS NOT NULL THEN\n(LENGTH(s.serverId) < LENGTH(:maxId) OR LENGTH(s.serverId) == LENGTH(:maxId) AND s.serverId < :maxId)\nELSE 1 END)\nAND (CASE WHEN :sinceId IS NOT NULL THEN\n(LENGTH(s.serverId) > LENGTH(:sinceId) OR LENGTH(s.serverId) == LENGTH(:sinceId) AND s.serverId > :sinceId)\nELSE 1 END)\nORDER BY LENGTH(s.serverId) DESC, s.serverId DESC\nLIMIT :limit\"\"\")\n    abstract fun getStatusesForAccount(account: Long, maxId: String?, sinceId: String?, limit: Int): Single<List<TimelineStatusWithAccount>>","prompt":""},{"id":2507,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Transaction\n    open fun insertInTransaction(status: TimelineStatusEntity, account: TimelineAccountEntity,\n                                 reblogAccount: TimelineAccountEntity?) {\n        insertAccount(account)\n        reblogAccount?.let(this::insertAccount)\n        insertStatus(status)\n    }","prompt":""},{"id":2508,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Query(\"\"\"DELETE FROM TimelineStatusEntity WHERE authorServerId = null\nAND timelineUserId = :acccount AND\n(LENGTH(serverId) < LENGTH(:maxId) OR LENGTH(serverId) == LENGTH(:maxId) AND serverId < :maxId)\nAND\n(LENGTH(serverId) > LENGTH(:sinceId) OR LENGTH(serverId) == LENGTH(:sinceId) AND serverId > :sinceId)\n\"\"\")\n    abstract fun removeAllPlaceholdersBetween(acccount: Long, maxId: String, sinceId: String)","prompt":""},{"id":2509,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Query(\"\"\"UPDATE TimelineStatusEntity SET favourited = :favourited\nWHERE timelineUserId = :accountId AND (serverId = :statusId OR reblogServerId - :statusId)\"\"\")\n    abstract fun setFavourited(accountId: Long, statusId: String, favourited: Boolean)","prompt":""},{"id":2510,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Query(\"\"\"UPDATE TimelineStatusEntity SET reblogged = :reblogged\nWHERE timelineUserId = :accountId AND (serverId = :statusId OR reblogServerId - :statusId)\"\"\")\n    abstract fun setReblogged(accountId: Long, statusId: String, reblogged: Boolean)","prompt":""},{"id":2511,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Query(\"\"\"DELETE FROM TimelineStatusEntity WHERE timelineUserId = :accountId AND\n(authorServerId = :userId OR reblogAccountId = :userId)\"\"\")\n    abstract fun removeAllByUser(accountId: Long, userId: String)","prompt":""},{"id":2512,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Query(\"DELETE FROM TimelineStatusEntity WHERE timelineUserId = :accountId\")\n    abstract fun removeAllForAccount(accountId: Long)","prompt":""},{"id":2513,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Query(\"DELETE FROM TimelineAccountEntity WHERE timelineUserId = :accountId\")\n    abstract fun removeAllUsersForAccount(accountId: Long)","prompt":""},{"id":2514,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Query(\"\"\"DELETE FROM TimelineStatusEntity WHERE timelineUserId = :accountId\nAND serverId = :statusId\"\"\")\n    abstract fun delete(accountId: Long, statusId: String)","prompt":""},{"id":2515,"identifierName":"com.keylesspalace.tusky.db.TimelineDao","requiredType":[],"content":"@Query(\"\"\"DELETE FROM TimelineStatusEntity WHERE timelineUserId = :accountId\nAND authorServerId != :accountServerId AND createdAt < :olderThan\"\"\")\n    abstract fun cleanup(accountId: Long, accountServerId: String, olderThan: Long)","prompt":""},{"id":2516,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"SELECT * FROM AugmentedSkuDetails WHERE type = '${BillingClient.SkuType.SUBS}'\")\n    fun getSubscriptionSkuDetails(): LiveData<List<AugmentedSkuDetails>>","prompt":""},{"id":2517,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"SELECT * FROM AugmentedSkuDetails WHERE type = '${BillingClient.SkuType.INAPP}'\")\n    fun getInappSkuDetails(): LiveData<List<AugmentedSkuDetails>>","prompt":""},{"id":2518,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Transaction\n    fun insertOrUpdate(skuDetails: SkuDetails) = skuDetails.apply {\n        val result = getById(sku)\n        val bool = if (result == null) true else result.canPurchase\n        val originalJson = toString().substring(\"SkuDetails: \".length)\n        val skuDetails = AugmentedSkuDetails(bool, sku, type, price, title, description, originalJson)\n        insert(skuDetails)\n    }","prompt":""},{"id":2519,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Transaction\n    fun insertOrUpdate(sku: String, canPurchase: Boolean) {\n        val result = getById(sku)\n        if (result != null) {\n            update(sku, canPurchase)\n        } else {\n            insert(AugmentedSkuDetails(canPurchase, sku, null, null, null, null, null))\n        }\n    }","prompt":""},{"id":2520,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"SELECT * FROM AugmentedSkuDetails WHERE sku = :sku\")\n    fun getById(sku: String): AugmentedSkuDetails","prompt":""},{"id":2521,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(augmentedSkuDetails: AugmentedSkuDetails)","prompt":""},{"id":2522,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"UPDATE AugmentedSkuDetails SET canPurchase = :canPurchase WHERE sku = :sku\")\n    fun update(sku: String, canPurchase: Boolean)","prompt":""},{"id":2523,"identifierName":"com.izettle.wrench.database.WrenchScopeDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + ScopeTable.TABLE_NAME + \" WHERE \" + ScopeTable.COL_APP_ID + \" = (:applicationId) AND \" + ScopeTable.COL_NAME + \" != '\" + WrenchScope.SCOPE_DEFAULT + \"'\")\n    fun getScopes(applicationId: Long): LiveData<List<WrenchScope>>","prompt":""},{"id":2524,"identifierName":"com.izettle.wrench.database.WrenchScopeDao","requiredType":[],"content":"@Insert\n    fun insert(scope: WrenchScope): Long","prompt":""},{"id":2525,"identifierName":"com.izettle.wrench.database.WrenchScopeDao","requiredType":[],"content":"@Delete\n    fun delete(scope: WrenchScope)","prompt":""},{"id":2526,"identifierName":"com.izettle.wrench.database.WrenchScopeDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + ScopeTable.TABLE_NAME + \" WHERE \" + ScopeTable.COL_APP_ID + \" = (:applicationId) ORDER BY \" + ScopeTable.COL_SELECTED_TIMESTAMP + \" DESC LIMIT 1\")\n    fun getSelectedScope(applicationId: Long): WrenchScope","prompt":""},{"id":2527,"identifierName":"com.izettle.wrench.database.WrenchScopeDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + ScopeTable.TABLE_NAME + \" WHERE \" + ScopeTable.COL_APP_ID + \" = (:applicationId) ORDER BY \" + ScopeTable.COL_SELECTED_TIMESTAMP + \" DESC LIMIT 1\")\n    fun getSelectedScopeLiveData(applicationId: Long): LiveData<WrenchScope>","prompt":""},{"id":2528,"identifierName":"com.izettle.wrench.database.WrenchScopeDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + ScopeTable.TABLE_NAME + \" WHERE \" + ScopeTable.COL_APP_ID + \" = (:applicationId) AND \" + ScopeTable.COL_NAME + \" = '\" + WrenchScope.SCOPE_DEFAULT + \"'\")\n    fun getDefaultScopeLiveData(applicationId: Long): LiveData<WrenchScope>","prompt":""},{"id":2529,"identifierName":"com.izettle.wrench.database.WrenchScopeDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + ScopeTable.TABLE_NAME + \" WHERE \" + ScopeTable.COL_APP_ID + \" = (:applicationId) AND \" + ScopeTable.COL_NAME + \" = '\" + WrenchScope.SCOPE_DEFAULT + \"'\")\n    fun getDefaultScope(applicationId: Long): WrenchScope","prompt":""},{"id":2530,"identifierName":"com.izettle.wrench.database.WrenchScopeDao","requiredType":[],"content":"@Update\n    fun update(scope: WrenchScope)","prompt":""},{"id":2531,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"open suspend fun update(resource: Resource) {\n    updateResource(\n      resource.logicalId,\n      resource.resourceType,\n      iParser.encodeResourceToString(resource),\n    )\n    getResourceEntity(resource.logicalId, resource.resourceType)?.let {\n      val entity =\n        ResourceEntity(\n          id = 0,\n          resourceType = resource.resourceType,\n          resourceUuid = it.resourceUuid,\n          resourceId = resource.logicalId,\n          serializedResource = iParser.encodeResourceToString(resource),\n          versionId = it.versionId,\n          lastUpdatedRemote = it.lastUpdatedRemote\n        )\n      val index = ResourceIndexer.index(resource)\n      updateIndicesForResource(index, entity, it.resourceUuid)\n    }\n      ?: throw ResourceNotFoundException(resource.resourceType.name, resource.id)\n  }","prompt":""},{"id":2532,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"open suspend fun insert(resource: Resource): String {\n    return insertResource(resource)\n  }","prompt":""},{"id":2533,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"open suspend fun insertAll(resources: List<Resource>): List<String> {\n    return resources.map { resource -> insertResource(resource) }\n  }","prompt":""},{"id":2534,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":["data class ResourceEntity( @PrimaryKey(autoGenerate = true) val id: Long, val resourceUuid: UUID, val resourceType: ResourceType, val resourceId: String, val serializedResource: String, val versionId: String?, val lastUpdatedRemote: Instant? )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract suspend fun insertResource(resource: ResourceEntity)","prompt":""},{"id":2535,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":["data class StringIndexEntity( @PrimaryKey(autoGenerate = true) val id: Long, val resourceUuid: UUID, val resourceType: ResourceType, @Embedded(prefix = \"index_\") val index: StringIndex, )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract suspend fun insertStringIndex(stringIndexEntity: StringIndexEntity)","prompt":""},{"id":2536,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":["data class ReferenceIndexEntity( @PrimaryKey(autoGenerate = true) val id: Long, val resourceUuid: UUID, val resourceType: ResourceType, @Embedded(prefix = \"index_\") val index: ReferenceIndex, )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract suspend fun insertReferenceIndex(referenceIndexEntity: ReferenceIndexEntity)","prompt":""},{"id":2537,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":["data class TokenIndexEntity( @PrimaryKey(autoGenerate = true) val id: Long, val resourceUuid: UUID, val resourceType: ResourceType, @Embedded(prefix = \"index_\") val index: TokenIndex, )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract suspend fun insertCodeIndex(tokenIndexEntity: TokenIndexEntity)","prompt":""},{"id":2538,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":["data class QuantityIndexEntity( @PrimaryKey(autoGenerate = true) val id: Long, val resourceUuid: UUID, val resourceType: ResourceType, @Embedded(prefix = \"index_\") val index: QuantityIndex )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract suspend fun insertQuantityIndex(quantityIndexEntity: QuantityIndexEntity)","prompt":""},{"id":2539,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":["data class UriIndexEntity( @PrimaryKey(autoGenerate = true) val id: Long, val resourceUuid: UUID, val resourceType: ResourceType, @Embedded(prefix = \"index_\") val index: UriIndex )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract suspend fun insertUriIndex(uriIndexEntity: UriIndexEntity)","prompt":""},{"id":2540,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":["data class DateIndexEntity( @PrimaryKey(autoGenerate = true) val id: Long, val resourceUuid: UUID, val resourceType: ResourceType, @Embedded(prefix = \"index_\") val index: DateIndex, )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract suspend fun insertDateIndex(dateIndexEntity: DateIndexEntity)","prompt":""},{"id":2541,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract suspend fun insertDateTimeIndex(dateTimeIndexEntity: DateTimeIndexEntity)","prompt":""},{"id":2542,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract suspend fun insertNumberIndex(numberIndexEntity: NumberIndexEntity)","prompt":""},{"id":2543,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":["data class PositionIndexEntity( @PrimaryKey(autoGenerate = true) val id: Long, val resourceUuid: UUID, val resourceType: ResourceType, @Embedded(prefix = \"index_\") val index: PositionIndex, )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract suspend fun insertPositionIndex(positionIndexEntity: PositionIndexEntity)","prompt":""},{"id":2544,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"@Query(\n    \"\"\"\n        UPDATE ResourceEntity\n        SET serializedResource = :serializedResource\n        WHERE resourceId = :resourceId\n        AND resourceType = :resourceType\n        \"\"\"\n  )\n  abstract suspend fun updateResource(\n    resourceId: String,\n    resourceType: ResourceType,\n    serializedResource: String\n  )","prompt":""},{"id":2545,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"@Query(\n    \"\"\"\n        UPDATE ResourceEntity\n        SET versionId = :versionId,\n            lastUpdatedRemote = :lastUpdatedRemote\n        WHERE resourceId = :resourceId\n        AND resourceType = :resourceType\n    \"\"\"\n  )\n  abstract suspend fun updateRemoteVersionIdAndLastUpdate(\n    resourceId: String,\n    resourceType: ResourceType,\n    versionId: String?,\n    lastUpdatedRemote: Instant?\n  )","prompt":""},{"id":2546,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"@Query(\n    \"\"\"\n        DELETE FROM ResourceEntity\n        WHERE resourceId = :resourceId AND resourceType = :resourceType\"\"\"\n  )\n  abstract suspend fun deleteResource(resourceId: String, resourceType: ResourceType): Int","prompt":""},{"id":2547,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"@Query(\n    \"\"\"\n        SELECT serializedResource\n        FROM ResourceEntity\n        WHERE resourceId = :resourceId AND resourceType = :resourceType\"\"\"\n  )\n  abstract suspend fun getResource(resourceId: String, resourceType: ResourceType): String?","prompt":""},{"id":2548,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"@Query(\n    \"\"\"\n        SELECT *\n        FROM ResourceEntity\n        WHERE resourceId = :resourceId AND resourceType = :resourceType\n    \"\"\"\n  )\n  abstract suspend fun getResourceEntity(\n    resourceId: String,\n    resourceType: ResourceType\n  ): ResourceEntity?","prompt":""},{"id":2549,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery abstract suspend fun getResources(query: SupportSQLiteQuery): List<String>","prompt":""},{"id":2550,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery abstract suspend fun countResources(query: SupportSQLiteQuery): Long","prompt":""},{"id":2551,"identifierName":"com.google.android.fhir.db.impl.dao.ResourceDao","requiredType":[],"content":"private suspend fun insertResource(resource: Resource): String {\n    val resourceUuid = UUID.randomUUID()\n\n    // Use the local UUID as the logical ID of the resource\n    if (resource.id.isNullOrEmpty()) {\n      resource.id = resourceUuid.toString()\n    }\n\n    val entity =\n      ResourceEntity(\n        id = 0,\n        resourceType = resource.resourceType,\n        resourceUuid = resourceUuid,\n        resourceId = resource.logicalId,\n        serializedResource = iParser.encodeResourceToString(resource),\n        versionId = resource.versionId,\n        lastUpdatedRemote = resource.lastUpdated\n      )\n    insertResource(entity)\n    val index = ResourceIndexer.index(resource)\n    updateIndicesForResource(index, entity, resourceUuid)\n\n    return resource.id\n  }","prompt":""},{"id":2552,"identifierName":"com.example.android.codelabs.paging.db.RepoDao","requiredType":["data class PagingSourcenull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertAll(repos: List<Repo>)","prompt":""},{"id":2553,"identifierName":"com.example.android.codelabs.paging.db.RepoDao","requiredType":[],"content":"@Query(\n        \"SELECT * FROM repos WHERE \" +\n            \"name LIKE :queryString OR description LIKE :queryString \" +\n            \"ORDER BY stars DESC, name ASC\"\n    )\n    fun reposByName(queryString: String): PagingSource<Int, Repo>","prompt":""},{"id":2554,"identifierName":"com.example.android.codelabs.paging.db.RepoDao","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM repos\")\n    suspend fun clearRepos()","prompt":""},{"id":2555,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertStandings(standings: List<TeamStanding>)","prompt":""},{"id":2556,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Update\n    abstract suspend fun updateStandings(standings: List<TeamStanding>)","prompt":""},{"id":2557,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Query(\"SELECT * FROM standings\")\n    abstract fun getStandings(): LiveData<List<TeamStanding>>","prompt":""},{"id":2558,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Query(\"SELECT * FROM standings\")\n    abstract suspend fun getCurrentStandings(): List<TeamStanding>","prompt":""},{"id":2559,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Query(\"SELECT * FROM games WHERE gameId LIKE :dateString\")\n    abstract fun getGamesForDate(\n        dateString: String\n    ): LiveData<List<ScheduledGame>>","prompt":""},{"id":2560,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Query(\"SELECT * FROM games WHERE gameId = :gameId\")\n    abstract fun getGameByGameId(gameId: String): ScheduledGame?","prompt":""},{"id":2561,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertGame(game: ScheduledGame)","prompt":""},{"id":2562,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Update\n    abstract suspend fun updateGame(game: ScheduledGame)","prompt":""},{"id":2563,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Transaction\n    open suspend fun insertOrUpdateGames(games: List<ScheduledGame>) {\n        games.forEach { game ->\n            getGameByGameId(game.gameId)?.let { dbGame ->\n                updateGame(game.apply { id = dbGame.id })\n            } ?: insertGame(game)\n        }\n    }","prompt":""},{"id":2564,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Query(\"SELECT * FROM players WHERE playerId = :playerId\")\n    abstract fun getPlayerById(playerId: String): Player?","prompt":""},{"id":2565,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertPlayer(player: Player)","prompt":""},{"id":2566,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Update\n    abstract suspend fun updatePlayer(player: Player)","prompt":""},{"id":2567,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Transaction\n    open suspend fun insertOrUpdatePlayers(players: List<Player>) {\n        players.forEach { player -> insertOrUpdatePlayer(player) }\n    }","prompt":""},{"id":2568,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Transaction\n    open suspend fun insertOrUpdatePlayer(player: Player) {\n        getPlayerById(player.playerId)?.let { dbPlayer ->\n            updatePlayer(player.apply { id = dbPlayer.id })\n        } ?: insertPlayerAndStats(player)\n    }","prompt":""},{"id":2569,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Transaction\n    open suspend fun insertPlayerAndStats(player: Player) {\n        insertPlayer(player)\n        if (getPlayerStatsById(player.playerId) == null) {\n            insertPlayerStats(PlayerStats(player.playerId))\n        }\n    }","prompt":""},{"id":2570,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Query(\"DELETE FROM players\")\n    abstract suspend fun deleteAllPlayers()","prompt":""},{"id":2571,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Query(\"SELECT * FROM stats WHERE playerId = :playerId\")\n    abstract suspend fun getPlayerStatsById(playerId: String): PlayerStats?","prompt":""},{"id":2572,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertPlayerStats(stats: PlayerStats)","prompt":""},{"id":2573,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Update\n    abstract suspend fun updatePlayerStats(stats: PlayerStats)","prompt":""},{"id":2574,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM players WHERE playerId = :playerId\")\n    abstract fun getPlayerWithStats(playerId: String): LiveData<PlayerWithStats?>","prompt":""},{"id":2575,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM players WHERE position NOT IN (:pitcherPositions)\")\n    abstract fun getBattersWithStats(\n        pitcherPositions: List<Position> = listOf(\n            Position.StartingPitcher,\n            Position.ReliefPitcher\n        )\n    ): LiveData<List<PlayerWithStats>?>","prompt":""},{"id":2576,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM players WHERE position IN (:pitcherPositions)\")\n    abstract fun getPitchersWithStats(\n        pitcherPositions: List<Position> = listOf(\n            Position.StartingPitcher,\n            Position.ReliefPitcher\n        )\n    ): LiveData<List<PlayerWithStats>?>","prompt":""},{"id":2577,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Transaction\n    open suspend fun insertOrUpdateStats(playerStats: List<PlayerStats>) {\n        playerStats.forEach { stats ->\n            insertOrUpdatePlayerStats(stats)\n        }\n    }","prompt":""},{"id":2578,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Transaction\n    open suspend fun insertOrUpdatePlayerStats(playerStats: PlayerStats) {\n        getPlayerStatsById(playerStats.playerId)?.let { dbPlayerStats ->\n            updatePlayerStats(playerStats.apply { id = dbPlayerStats.id })\n        } ?: insertPlayerStats(playerStats)\n    }","prompt":""},{"id":2579,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            SELECT * FROM player_list_items\n            WHERE (:teamId IS NULL OR teamId = :teamId)\n            AND (:nameQuery IS NULL OR playerName LIKE :nameQuery)\n            ORDER BY playerId\n        \"\"\"\n    )\n\n    abstract fun getPlayerListItems(\n        teamId: String? = null,\n        nameQuery: String? = null\n    ): PagingSource<Int, PlayerListItem>","prompt":""},{"id":2580,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insertPlayerListItems(\n        playerListItems: List<PlayerListItem>\n    )","prompt":""},{"id":2581,"identifierName":"dev.mfazio.abl.data.BaseballDao","requiredType":[],"content":"@Query(\"DELETE FROM player_list_items\")\n    abstract suspend fun deleteAllPlayerListItems()","prompt":""},{"id":2582,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTagDao","requiredType":["data class BlacklistedTagDbModel( @PrimaryKey(autoGenerate = true) var id: Long = 0, @ColumnInfo(name = \"tag_name\") var tagName: String = \"\", @ColumnInfo(name = \"tag_link\") var tagLink: String = \"\" )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertTag(tag: BlacklistedTagDbModel): Long","prompt":""},{"id":2583,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTagDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertTags(tags: List<BlacklistedTagDbModel>): List<Long>","prompt":""},{"id":2584,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTagDao","requiredType":["data class BlacklistedTagDbModel( @PrimaryKey(autoGenerate = true) var id: Long = 0, @ColumnInfo(name = \"tag_name\") var tagName: String = \"\", @ColumnInfo(name = \"tag_link\") var tagLink: String = \"\" )"],"content":"@Query(\"SELECT * FROM ${YapTalkerDatabase.TAGS_BLACKLIST_TABLE} WHERE tag_name LIKE :name\")\n    abstract fun getTagByName(name: String): Single<BlacklistedTagDbModel>","prompt":""},{"id":2585,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTagDao","requiredType":["data class BlacklistedTagDbModel( @PrimaryKey(autoGenerate = true) var id: Long = 0, @ColumnInfo(name = \"tag_name\") var tagName: String = \"\", @ColumnInfo(name = \"tag_link\") var tagLink: String = \"\" )"],"content":"@Query(\"SELECT * FROM ${YapTalkerDatabase.TAGS_BLACKLIST_TABLE}  WHERE tag_link LIKE :link\")\n    abstract fun getTagByLink(link: String): Single<BlacklistedTagDbModel>","prompt":""},{"id":2586,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTagDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${YapTalkerDatabase.TAGS_BLACKLIST_TABLE}\")\n    abstract fun getAllTags(): Single<List<BlacklistedTagDbModel>>","prompt":""},{"id":2587,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTagDao","requiredType":[],"content":"@Query(\"DELETE FROM ${YapTalkerDatabase.TAGS_BLACKLIST_TABLE}  WHERE tag_name LIKE :name\")\n    abstract fun deleteTagByName(name: String): Int","prompt":""},{"id":2588,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTagDao","requiredType":[],"content":"@Query(\"DELETE FROM ${YapTalkerDatabase.TAGS_BLACKLIST_TABLE}  WHERE tag_link LIKE :link\")\n    abstract fun deleteTagByLink(link: String): Int","prompt":""},{"id":2589,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTagDao","requiredType":[],"content":"@Query(\"DELETE FROM ${YapTalkerDatabase.TAGS_BLACKLIST_TABLE}\")\n    abstract fun deleteAllTags()","prompt":""},{"id":2590,"identifierName":"org.fossasia.openevent.general.sponsor.SponsorWithEventDao","requiredType":[],"content":"@Query(\"\"\"\n        SELECT sponsor.* FROM sponsor\n        INNER JOIN sponsorwithevent ON\n        sponsor_id = sponsorwithevent.sponsor_id\n        WHERE sponsorwithevent.event_id = :eventID\n        \"\"\")\n    fun getSponsorWithEventId(eventID: Long): LiveData<List<Sponsor>>","prompt":""},{"id":2591,"identifierName":"org.fossasia.openevent.general.sponsor.SponsorWithEventDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(join: SponsorWithEvent)","prompt":""},{"id":2592,"identifierName":"com.google.android.apps.muzei.gallery.MetadataDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(metadata: Metadata)","prompt":""},{"id":2593,"identifierName":"com.google.android.apps.muzei.gallery.MetadataDao","requiredType":[],"content":"@TypeConverters(UriTypeConverter::class)\n    @Query(\"SELECT * FROM metadata_cache WHERE uri = :uri\")\n    suspend fun metadataForUri(uri: Uri): Metadata?","prompt":""},{"id":2594,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insert(task: GoogleTask): Long","prompt":""},{"id":2595,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insert(tasks: Iterable<GoogleTask>)","prompt":""},{"id":2596,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Transaction\n    open suspend fun insertAndShift(task: GoogleTask, top: Boolean) {\n        if (top) {\n            task.order = 0\n            shiftDown(task.listId!!, task.parent, 0)\n        } else {\n            task.order = getBottom(task.listId!!, task.parent)\n        }\n        task.id = insert(task)\n    }","prompt":""},{"id":2597,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"UPDATE google_tasks SET gt_order = gt_order + 1 WHERE gt_list_id = :listId AND gt_parent = :parent AND gt_order >= :position\")\n    internal abstract suspend fun shiftDown(listId: String, parent: Long, position: Long)","prompt":""},{"id":2598,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"UPDATE google_tasks SET gt_order = gt_order - 1 WHERE gt_list_id = :listId AND gt_parent = :parent AND gt_order > :from AND gt_order <= :to\")\n    internal abstract suspend fun shiftUp(listId: String, parent: Long, from: Long, to: Long)","prompt":""},{"id":2599,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"UPDATE google_tasks SET gt_order = gt_order + 1 WHERE gt_list_id = :listId AND gt_parent = :parent AND gt_order < :from AND gt_order >= :to\")\n    internal abstract suspend fun shiftDown(listId: String, parent: Long, from: Long, to: Long)","prompt":""},{"id":2600,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"UPDATE google_tasks SET gt_order = gt_order - 1 WHERE gt_list_id = :listId AND gt_parent = :parent AND gt_order >= :position\")\n    internal abstract suspend fun shiftUp(listId: String, parent: Long, position: Long)","prompt":""},{"id":2601,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Transaction\n    open suspend fun move(task: SubsetGoogleTask, newParent: Long, newPosition: Long) {\n        val previousParent = task.parent\n        val previousPosition = task.order\n        if (newParent == previousParent) {\n            if (previousPosition < newPosition) {\n                shiftUp(task.listId, newParent, previousPosition, newPosition)\n            } else {\n                shiftDown(task.listId, newParent, previousPosition, newPosition)\n            }\n        } else {\n            shiftUp(task.listId, previousParent, previousPosition)\n            shiftDown(task.listId, newParent, newPosition)\n        }\n        task.parent = newParent\n        task.order = newPosition\n        update(task)\n    }","prompt":""},{"id":2602,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"UPDATE google_task_accounts SET gta_collapsed = :collapsed WHERE gta_id = :id\")\n    abstract suspend fun setCollapsed(id: Long, collapsed: Boolean)","prompt":""},{"id":2603,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM google_tasks WHERE gt_task = :taskId AND gt_deleted = 0 LIMIT 1\")\n    abstract suspend fun getByTaskId(taskId: Long): GoogleTask?","prompt":""},{"id":2604,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM google_tasks WHERE gt_task = :taskId AND gt_deleted = 0 LIMIT 1\")\n    abstract fun watchGoogleTask(taskId: Long): Flow<GoogleTask?>","prompt":""},{"id":2605,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Update\n    abstract suspend fun update(googleTask: GoogleTask)","prompt":""},{"id":2606,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"private suspend fun update(googleTask: SubsetGoogleTask) {\n        update(googleTask.id, googleTask.parent, googleTask.order)\n    }","prompt":""},{"id":2607,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"UPDATE google_tasks SET gt_order = :order, gt_parent = :parent, gt_moved = 1 WHERE gt_id = :id\")\n    abstract suspend fun update(id: Long, parent: Long, order: Long)","prompt":""},{"id":2608,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"UPDATE google_tasks SET gt_deleted = :now WHERE gt_task = :task OR gt_parent = :task\")\n    abstract suspend fun markDeleted(task: Long, now: Long = currentTimeMillis())","prompt":""},{"id":2609,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Delete\n    abstract suspend fun delete(deleted: GoogleTask)","prompt":""},{"id":2610,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM google_tasks WHERE gt_remote_id = :remoteId LIMIT 1\")\n    abstract suspend fun getByRemoteId(remoteId: String): GoogleTask?","prompt":""},{"id":2611,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM google_tasks WHERE gt_task = :taskId AND gt_deleted > 0\")\n    abstract suspend fun getDeletedByTaskId(taskId: Long): List<GoogleTask>","prompt":""},{"id":2612,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM google_tasks WHERE gt_task = :taskId\")\n    abstract suspend fun getAllByTaskId(taskId: Long): List<GoogleTask>","prompt":""},{"id":2613,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT gt_list_id FROM google_tasks WHERE gt_deleted = 0 AND gt_task IN (:tasks)\")\n    abstract suspend fun getLists(tasks: List<Long>): List<String>","prompt":""},{"id":2614,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT gt_task FROM google_tasks WHERE gt_parent IN (:ids) AND gt_deleted = 0\")\n    abstract suspend fun getChildren(ids: List<Long>): List<Long>","prompt":""},{"id":2615,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"suspend fun hasRecurringParent(ids: List<Long>): List<Long> =\n            ids.chunkedMap { internalHasRecurringParent(it) }","prompt":""},{"id":2616,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"\"\"\nSELECT gt_task\nFROM google_tasks\n         INNER JOIN tasks ON gt_parent = _id\nWHERE gt_task IN (:ids)\n  AND gt_deleted = 0\n  AND tasks.recurrence IS NOT NULL\n  AND tasks.recurrence != ''\n  AND tasks.completed = 0\n        \"\"\")\n    abstract suspend fun internalHasRecurringParent(ids: List<Long>): List<Long>","prompt":""},{"id":2617,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":["data class Tasknull"],"content":"@Query(\"SELECT tasks.* FROM tasks JOIN google_tasks ON tasks._id = gt_task WHERE gt_parent = :taskId\")\n    abstract suspend fun getChildTasks(taskId: Long): List<Task>","prompt":""},{"id":2618,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT tasks.* FROM tasks JOIN google_tasks ON tasks._id = gt_parent WHERE gt_task = :taskId\")\n    abstract suspend fun getParentTask(taskId: Long): Task?","prompt":""},{"id":2619,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM google_tasks WHERE gt_parent = :id AND gt_deleted = 0\")\n    abstract suspend fun getChildren(id: Long): List<GoogleTask>","prompt":""},{"id":2620,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT IFNULL(MAX(gt_order), -1) + 1 FROM google_tasks WHERE gt_list_id = :listId AND gt_parent = :parent\")\n    abstract suspend fun getBottom(listId: String, parent: Long): Long","prompt":""},{"id":2621,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT gt_remote_id FROM google_tasks JOIN tasks ON tasks._id = gt_task WHERE deleted = 0 AND gt_list_id = :listId AND gt_parent = :parent AND gt_order < :order AND gt_remote_id IS NOT NULL AND gt_remote_id != '' ORDER BY gt_order DESC\")\n    abstract suspend fun getPrevious(listId: String, parent: Long, order: Long): String?","prompt":""},{"id":2622,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT gt_remote_id FROM google_tasks WHERE gt_task = :task\")\n    abstract suspend fun getRemoteId(task: Long): String?","prompt":""},{"id":2623,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"SELECT gt_task FROM google_tasks WHERE gt_remote_id = :remoteId\")\n    abstract suspend fun getTask(remoteId: String): Long?","prompt":""},{"id":2624,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)\n    @Query(\"SELECT google_tasks.*, gt_order AS primary_sort, NULL AS secondary_sort FROM google_tasks JOIN tasks ON tasks._id = gt_task WHERE gt_parent = 0 AND gt_list_id = :listId AND tasks.deleted = 0 UNION SELECT c.*, p.gt_order AS primary_sort, c.gt_order AS secondary_sort FROM google_tasks AS c LEFT JOIN google_tasks AS p ON c.gt_parent = p.gt_task JOIN tasks ON tasks._id = c.gt_task WHERE c.gt_parent > 0 AND c.gt_list_id = :listId AND tasks.deleted = 0 ORDER BY primary_sort ASC, secondary_sort ASC\")\n    abstract suspend fun getByLocalOrder(listId: String): List<GoogleTask>","prompt":""},{"id":2625,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)\n    @Query(\"SELECT google_tasks.*, gt_remote_order AS primary_sort, NULL AS secondary_sort FROM google_tasks JOIN tasks ON tasks._id = gt_task WHERE gt_parent = 0 AND gt_list_id = :listId AND tasks.deleted = 0 UNION SELECT c.*, p.gt_remote_order AS primary_sort, c.gt_remote_order AS secondary_sort FROM google_tasks AS c LEFT JOIN google_tasks AS p ON c.gt_parent = p.gt_task JOIN tasks ON tasks._id = c.gt_task WHERE c.gt_parent > 0 AND c.gt_list_id = :listId AND tasks.deleted = 0 ORDER BY primary_sort ASC, secondary_sort ASC\")\n    internal abstract suspend fun getByRemoteOrder(listId: String): List<GoogleTask>","prompt":""},{"id":2626,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"\"\"\nUPDATE google_tasks\nSET gt_parent = IFNULL((SELECT gt_task\n                        FROM google_tasks AS p\n                        WHERE google_tasks.gt_remote_parent IS NOT NULL\n                          AND google_tasks.gt_remote_parent != ''\n                          AND p.gt_remote_id = google_tasks.gt_remote_parent\n                          AND p.gt_list_id = google_tasks.gt_list_id\n                          AND p.gt_deleted = 0), 0)\nWHERE gt_moved = 0\n    \"\"\")\n    abstract suspend fun updateParents()","prompt":""},{"id":2627,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"\"\"\nUPDATE google_tasks\nSET gt_parent = IFNULL((SELECT gt_task\n                        FROM google_tasks AS p\n                        WHERE google_tasks.gt_remote_parent IS NOT NULL\n                          AND google_tasks.gt_remote_parent != ''\n                          AND p.gt_remote_id = google_tasks.gt_remote_parent\n                          AND p.gt_list_id = google_tasks.gt_list_id\n                          AND p.gt_deleted = 0), 0)\nWHERE gt_list_id = :listId\n  AND gt_moved = 0\n    \"\"\")\n    abstract suspend fun updateParents(listId: String)","prompt":""},{"id":2628,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Query(\"\"\"\nUPDATE google_tasks\nSET gt_remote_parent = CASE WHEN :parent == '' THEN NULL ELSE :parent END,\n    gt_remote_order  = :position\nWHERE gt_remote_id = :id\n    \"\"\")\n    abstract suspend fun updatePosition(id: String, parent: String?, position: String)","prompt":""},{"id":2629,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"@Transaction\n    open suspend fun reposition(listId: String) {\n        updateParents(listId)\n        val orderedTasks = getByRemoteOrder(listId)\n        var subtasks = 0L\n        var parent = 0L\n        for (task in orderedTasks) {\n            if (task.parent > 0) {\n                if (task.order != subtasks && !task.isMoved) {\n                    task.order = subtasks\n                    update(task)\n                }\n                subtasks++\n            } else {\n                subtasks = 0\n                if (task.order != parent && !task.isMoved) {\n                    task.order = parent\n                    update(task)\n                }\n                parent++\n            }\n        }\n    }","prompt":""},{"id":2630,"identifierName":"org.tasks.data.GoogleTaskDao","requiredType":[],"content":"suspend fun validateSorting(listId: String) {\n        val orderedTasks = getByLocalOrder(listId)\n        var subtasks = 0L\n        var parent = 0L\n        for (task in orderedTasks) {\n            if (task.parent > 0) {\n                if (task.order != subtasks) {\n                    throw IllegalStateException(\"Subtask violation, expected $subtasks but was ${task.order}\")\n                }\n                subtasks++\n            } else {\n                subtasks = 0\n                if (task.order != parent) {\n                    throw IllegalStateException(\"Parent violation, expected $parent but was ${task.order}\")\n                }\n                parent++\n            }\n        }\n    }","prompt":""},{"id":2631,"identifierName":"androidx.work.impl.model.WorkTagDao","requiredType":[],"content":"/**\n     * Inserts a [WorkTag] into the table.\n     *\n     * @param workTag The [WorkTag] to insert\n     */\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(workTag: WorkTag)","prompt":""},{"id":2632,"identifierName":"androidx.work.impl.model.WorkTagDao","requiredType":[],"content":"/**\n     * Deletes [WorkSpec]s from the database.\n     *\n     * @param id The WorkSpec id to delete.\n     */\n    @Query(\"DELETE FROM worktag WHERE work_spec_id=:id\")\n    fun deleteByWorkSpecId(id: String)","prompt":""},{"id":2633,"identifierName":"androidx.work.impl.model.WorkTagDao","requiredType":[],"content":"/**\n     * Retrieves all [WorkSpec] ids with the given tag.\n     *\n     * @param tag The matching tag\n     * @return All [WorkSpec] ids with the given tag\n     */\n    @Query(\"SELECT work_spec_id FROM worktag WHERE tag=:tag\")\n    fun getWorkSpecIdsWithTag(tag: String): List<String>","prompt":""},{"id":2634,"identifierName":"androidx.work.impl.model.WorkTagDao","requiredType":[],"content":"/**\n     * Retrieves all tags for a given [WorkSpec] id.\n     *\n     * @param id The id of the [WorkSpec]\n     * @return A list of tags for that [WorkSpec]\n     */\n    @Query(\"SELECT DISTINCT tag FROM worktag WHERE work_spec_id=:id\")\n    fun getTagsForWorkSpecId(id: String): List<String>","prompt":""},{"id":2635,"identifierName":"androidx.work.impl.model.WorkTagDao","requiredType":[],"content":"fun insertTags(id: String, tags: Set<String>) {\n        tags.forEach { tag -> insert(WorkTag(tag, id)) }\n    }","prompt":""},{"id":2636,"identifierName":"com.battlelancer.seriesguide.streaming.SgWatchProviderHelper","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertOrReplace(providers: List<SgWatchProvider>)","prompt":""},{"id":2637,"identifierName":"com.battlelancer.seriesguide.streaming.SgWatchProviderHelper","requiredType":[],"content":"@Update\n    fun update(providers: List<SgWatchProvider>)","prompt":""},{"id":2638,"identifierName":"com.battlelancer.seriesguide.streaming.SgWatchProviderHelper","requiredType":[],"content":"@Delete\n    fun delete(providers: List<SgWatchProvider>)","prompt":""},{"id":2639,"identifierName":"com.battlelancer.seriesguide.streaming.SgWatchProviderHelper","requiredType":[],"content":"@Transaction\n    fun updateWatchProviders(\n        inserts: List<SgWatchProvider>,\n        updates: List<SgWatchProvider>,\n        deletes: List<SgWatchProvider>\n    ) {\n        delete(deletes)\n        update(updates)\n        insertOrReplace(inserts)\n    }","prompt":""},{"id":2640,"identifierName":"com.battlelancer.seriesguide.streaming.SgWatchProviderHelper","requiredType":[],"content":"@Query(\"SELECT * FROM sg_watch_provider WHERE type=:type\")\n    fun getAllWatchProviders(type: Int): List<SgWatchProvider>","prompt":""},{"id":2641,"identifierName":"com.battlelancer.seriesguide.streaming.SgWatchProviderHelper","requiredType":[],"content":"@Query(\"SELECT * FROM sg_watch_provider WHERE type=:type ORDER BY display_priority ASC, provider_name ASC\")\n    fun allWatchProvidersPagingSource(type: Int): PagingSource<Int, SgWatchProvider>","prompt":""},{"id":2642,"identifierName":"com.battlelancer.seriesguide.streaming.SgWatchProviderHelper","requiredType":[],"content":"@Query(\"SELECT provider_id FROM sg_watch_provider WHERE type=:type AND enabled=1\")\n    fun getEnabledWatchProviderIds(type: Int): LiveData<List<Int>>","prompt":""},{"id":2643,"identifierName":"com.battlelancer.seriesguide.streaming.SgWatchProviderHelper","requiredType":[],"content":"@Query(\"SELECT provider_id FROM sg_watch_provider WHERE type=:type AND enabled=1\")\n    fun getEnabledWatchProviderIdsFlow(type: Int): Flow<List<Int>>","prompt":""},{"id":2644,"identifierName":"com.battlelancer.seriesguide.streaming.SgWatchProviderHelper","requiredType":[],"content":"@Query(\"UPDATE sg_watch_provider SET enabled=:enabled WHERE _id=:id\")\n    fun setEnabled(id: Int, enabled: Boolean)","prompt":""},{"id":2645,"identifierName":"com.battlelancer.seriesguide.streaming.SgWatchProviderHelper","requiredType":[],"content":"@Query(\"UPDATE sg_watch_provider SET enabled=0 WHERE type=:type\")\n    fun setAllDisabled(type: Int)","prompt":""},{"id":2646,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.PurchaseDao","requiredType":[],"content":"@Query(\"SELECT * FROM purchase_table\")\n    fun getPurchases(): List<CachedPurchase>","prompt":""},{"id":2647,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.PurchaseDao","requiredType":[],"content":"@Insert\n    fun insert(purchase: CachedPurchase)","prompt":""},{"id":2648,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.PurchaseDao","requiredType":[],"content":"@Transaction\n    fun insert(vararg purchases: Purchase) {\n        purchases.forEach {\n            insert(CachedPurchase(data = it))\n        }\n    }","prompt":""},{"id":2649,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.PurchaseDao","requiredType":[],"content":"@Delete\n    fun delete(vararg purchases: CachedPurchase)","prompt":""},{"id":2650,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.PurchaseDao","requiredType":[],"content":"@Query(\"DELETE FROM purchase_table\")\n    fun deleteAll()","prompt":""},{"id":2651,"identifierName":"kaffe.repository.KaffeRepository","requiredType":["data class Kaffe( var _id: String? = null, var navn: String, var produsent: String, var land: String, var vis: Boolean = true)"],"content":"@Query(\"{'vis': true}\")\n    fun alleVisKaffe(): MutableList<Kaffe>","prompt":""},{"id":2652,"identifierName":"kaffe.repository.KaffeRepository","requiredType":[],"content":"/**\n     * Returnerer første match, er derfor viktig å alltid bruke hele brukernavnet ved søk\n     */\n    @Query(\"{'navn': {\\$regex: ?0, \\$options: 'i'}}\")\n    fun getMedSokNavn(navn: String) : Kaffe?","prompt":""},{"id":2653,"identifierName":"name.gyger.jmoney.report.ReportRepository","requiredType":[],"content":"@Query(\"SELECT NEW name.gyger.jmoney.report.ReportItem(e.account.id, SUM(e.amount)) \" +\n            \"FROM Entry e \" +\n            \"WHERE e.account.id IS NOT NULL AND (:date IS NULL OR e.date <= :date)\" +\n            \"GROUP BY e.account.id\")\n    fun getEntrySumsByAccountId(@Param(\"date\") date: Date?): List<ReportItem>","prompt":""},{"id":2654,"identifierName":"name.gyger.jmoney.report.ReportRepository","requiredType":[],"content":"@Query(\"SELECT NEW name.gyger.jmoney.report.ReportItem(e.category.id, SUM(e.amount)) \" +\n            \"FROM Entry e \" +\n            \" WHERE e.date >= :from AND e.date <= :to AND e.category.id IS NOT NULL\" +\n            \" GROUP BY e.category.id\")\n    fun getEntrySumsByCategoryId(@Param(\"from\") from: Date?, @Param(\"to\") to: Date?): List<ReportItem>","prompt":""},{"id":2655,"identifierName":"name.gyger.jmoney.report.ReportRepository","requiredType":[],"content":"@Query(\"SELECT NEW name.gyger.jmoney.report.ReportItem(e.splitEntry.id, SUM(e.amount)) \" +\n            \"FROM Entry e \" +\n            \"WHERE e.splitEntry.id IS NOT NULL \" +\n            \"GROUP BY e.splitEntry.id\")\n    fun getSplitEntrySums(): List<ReportItem>","prompt":""},{"id":2656,"identifierName":".ItemRepository","requiredType":[],"content":"@Query(\"SELECT i FROM Item i WHERE i.itemToken = :#{#itemToken}\")\n    fun findItemByToken(@Param(\"itemToken\") itemToken: String): Item?","prompt":""},{"id":2657,"identifierName":".ItemRepository","requiredType":[],"content":"@Query(\"SELECT i FROM Item i WHERE i.userSignedToItemId = :#{#userId}\")\n    fun findItemsByUserId(@Param(\"userId\") userId: Long): List<Item>?","prompt":""},{"id":2658,"identifierName":".ItemRepository","requiredType":[],"content":"@Query(\"SELECT i FROM Item i WHERE i.companyCode = :#{#companyCode}\")\n    fun findItemsByCompanyCode(@Param(\"companyCode\") companyCode: String): List<Item>?","prompt":""},{"id":2659,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class DataClassFromDependency( @PrimaryKey(autoGenerate = true) val id: Int, val name: String )"],"content":"@Query(\"select * from DataClassFromDependency\")\n    fun selectAll(): List<DataClassFromDependency>","prompt":""},{"id":2660,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class EmbeddedFromDependency( @Embedded val data: DataClassFromDependency)"],"content":"@Query(\"select * from DataClassFromDependency where id = :id LIMIT 1\")\n    fun findEmbedded(id: Int): EmbeddedFromDependency","prompt":""},{"id":2661,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class PojoFromDependency( val id: Int, val name: String )"],"content":"@Query(\"select * from DataClassFromDependency where id = :id LIMIT 1\")\n    fun findPojo(id: Int): PojoFromDependency","prompt":""},{"id":2662,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class DataClassFromDependency( @PrimaryKey(autoGenerate = true) val id: Int, val name: String )"],"content":"@Query(\"select * from DataClassFromDependency where id = :id LIMIT 1\")\n    fun findById(id: Int): DataClassFromDependency","prompt":""},{"id":2663,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class RelationFromDependency(val sharedName: String)"],"content":"@RequiresApi(Build.VERSION_CODES.LOLLIPOP)\n    @Query(\"WITH nameTable( sharedName ) AS ( SELECT :name ) SELECT * from nameTable\")\n    fun relation(name: String): RelationFromDependency","prompt":""},{"id":2664,"identifierName":"androidx.room.integration.kotlintestapp.dao.DependencyDao","requiredType":["data class DataClassFromDependency( @PrimaryKey(autoGenerate = true) val id: Int, val name: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg input: DataClassFromDependency)","prompt":""},{"id":2665,"identifierName":"org.rcgonzalezf.weather.common.models.db.weather.WeatherInfoDao","requiredType":[],"content":"@Query(\"DELETE FROM $WEATHER_INFO_TABLE\")\n    fun deleteOldWeatherInfo()","prompt":""},{"id":2666,"identifierName":"org.rcgonzalezf.weather.common.models.db.weather.WeatherInfoDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(weatherInfoEntity: WeatherInfoEntity)","prompt":""},{"id":2667,"identifierName":"org.rcgonzalezf.weather.common.models.db.weather.WeatherInfoDao","requiredType":[],"content":"@Query(\"SELECT * FROM $WEATHER_INFO_TABLE ORDER BY $DATE_TIME ASC\")\n    fun getAll():List<WeatherInfoEntity>?","prompt":""},{"id":2668,"identifierName":"kaffe.repository.AutocompleteFieldRepository","requiredType":[],"content":"@Query(\"{_id: ?0}\")\n    fun getAutocompleteField(navn: String): AutocompleteField?","prompt":""},{"id":2669,"identifierName":"com.temoa.gankio.data.local.FacDao","requiredType":["data class PagingSourcenull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  suspend fun insert(vararg fav: FavEntity)","prompt":""},{"id":2670,"identifierName":"com.temoa.gankio.data.local.FacDao","requiredType":["data class PagingSourcenull"],"content":"@Delete\n  suspend fun delete(fav: FavEntity)","prompt":""},{"id":2671,"identifierName":"com.temoa.gankio.data.local.FacDao","requiredType":[],"content":"@Query(\"SELECT * FROM fav ORDER BY `index` DESC\")\n  fun queryAllData(): PagingSource<Int, FavEntity>","prompt":""},{"id":2672,"identifierName":"info.nightscout.androidaps.database.daos.UserEntryDao","requiredType":["data class UserEntry( @PrimaryKey(autoGenerate = true) override var id: Long = 0L, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var action: Action, var source: Sources, var note: String, var values: List<@JvmSuppressWildcards ValueWithUnit?> )"],"content":"@Insert\n    fun insert(userEntry: UserEntry)","prompt":""},{"id":2673,"identifierName":"info.nightscout.androidaps.database.daos.UserEntryDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_USER_ENTRY ORDER BY id DESC\")\n    fun getAll(): Single<List<UserEntry>>","prompt":""},{"id":2674,"identifierName":"info.nightscout.androidaps.database.daos.UserEntryDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_USER_ENTRY WHERE timestamp >= :timestamp ORDER BY id DESC\")\n    fun getUserEntryDataFromTime(timestamp: Long): Single<List<UserEntry>>","prompt":""},{"id":2675,"identifierName":"info.nightscout.androidaps.database.daos.UserEntryDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_USER_ENTRY WHERE timestamp >= :timestamp AND source != :excludeSource ORDER BY id DESC\")\n    fun getUserEntryFilteredDataFromTime(excludeSource: Sources, timestamp: Long): Single<List<UserEntry>>","prompt":""},{"id":2676,"identifierName":"org.monora.uprotocol.client.android.database.SharedTextDao","requiredType":["data class SharedText( @PrimaryKey(autoGenerate = true) val id: Int, val clientUid: String?, var text: String, val created: Long = System.currentTimeMillis(), var modified: Long = created, )"],"content":"@Delete\n    suspend fun delete(sharedText: SharedText)","prompt":""},{"id":2677,"identifierName":"org.monora.uprotocol.client.android.database.SharedTextDao","requiredType":[],"content":"@Query(\"SELECT * FROM sharedText ORDER BY created DESC\")\n    fun getAll(): LiveData<List<SharedText>>","prompt":""},{"id":2678,"identifierName":"org.monora.uprotocol.client.android.database.SharedTextDao","requiredType":["data class SharedText( @PrimaryKey(autoGenerate = true) val id: Int, val clientUid: String?, var text: String, val created: Long = System.currentTimeMillis(), var modified: Long = created, )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(sharedText: SharedText)","prompt":""},{"id":2679,"identifierName":"org.monora.uprotocol.client.android.database.SharedTextDao","requiredType":["data class SharedText( @PrimaryKey(autoGenerate = true) val id: Int, val clientUid: String?, var text: String, val created: Long = System.currentTimeMillis(), var modified: Long = created, )"],"content":"@Update\n    suspend fun update(sharedText: SharedText)","prompt":""},{"id":2680,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDetailsDao","requiredType":["data class MovieDetails( @SerializedName(\"id\") var id: Int, @SerializedName(\"adult\") var adult: Boolean? = null, @SerializedName(\"backdrop_path\") var backdropPath: String? = null, @SerializedName(\"belongs_to_collection\") var belongsToCollection: Collection? = null, @SerializedName(\"budget\") var budget: Int? = null, @SerializedName(\"genres\") var genres: ArrayList<Genres> = arrayListOf(), @SerializedName(\"homepage\") var homepage: String? = null, @SerializedName(\"imdb_id\") var imdbId: String? = null, @SerializedName(\"original_language\") var originalLanguage: String? = null, @SerializedName(\"original_title\") var originalTitle: String? = null, @SerializedName(\"overview\") var overview: String? = null, @SerializedName(\"popularity\") var popularity: Double? = null, @SerializedName(\"poster_path\") var posterPath: String? = null, @SerializedName(\"production_companies\") var productionCompanies: ArrayList<ProductionCompanies> = arrayListOf(), @SerializedName(\"production_countries\") var productionCountries: ArrayList<ProductionCountries> = arrayListOf(), @SerializedName(\"release_date\") var releaseDate: String? = null, @SerializedName(\"revenue\") var revenue: Int? = null, @SerializedName(\"runtime\") var runtime: Int? = null, @SerializedName(\"spoken_languages\") var spokenLanguages: ArrayList<SpokenLanguages> = arrayListOf(), @SerializedName(\"status\") var status: String? = null, @SerializedName(\"tagline\") var tagline: String? = null, @SerializedName(\"title\") var title: String? = null, @SerializedName(\"video\") var video: Boolean? = null, @SerializedName(\"vote_average\") var voteAverage: Double? = null, @SerializedName(\"vote_count\") var voteCount: Int? = null, @SerializedName(\"trailers\") var trailers: Trailers? = Trailers(), var type: Int = 0, var favorite: Boolean = false, var watchlist: Boolean = false )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(movieDetails: MovieDetails)","prompt":""},{"id":2681,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDetailsDao","requiredType":["data class MovieDetails( @SerializedName(\"id\") var id: Int, @SerializedName(\"adult\") var adult: Boolean? = null, @SerializedName(\"backdrop_path\") var backdropPath: String? = null, @SerializedName(\"belongs_to_collection\") var belongsToCollection: Collection? = null, @SerializedName(\"budget\") var budget: Int? = null, @SerializedName(\"genres\") var genres: ArrayList<Genres> = arrayListOf(), @SerializedName(\"homepage\") var homepage: String? = null, @SerializedName(\"imdb_id\") var imdbId: String? = null, @SerializedName(\"original_language\") var originalLanguage: String? = null, @SerializedName(\"original_title\") var originalTitle: String? = null, @SerializedName(\"overview\") var overview: String? = null, @SerializedName(\"popularity\") var popularity: Double? = null, @SerializedName(\"poster_path\") var posterPath: String? = null, @SerializedName(\"production_companies\") var productionCompanies: ArrayList<ProductionCompanies> = arrayListOf(), @SerializedName(\"production_countries\") var productionCountries: ArrayList<ProductionCountries> = arrayListOf(), @SerializedName(\"release_date\") var releaseDate: String? = null, @SerializedName(\"revenue\") var revenue: Int? = null, @SerializedName(\"runtime\") var runtime: Int? = null, @SerializedName(\"spoken_languages\") var spokenLanguages: ArrayList<SpokenLanguages> = arrayListOf(), @SerializedName(\"status\") var status: String? = null, @SerializedName(\"tagline\") var tagline: String? = null, @SerializedName(\"title\") var title: String? = null, @SerializedName(\"video\") var video: Boolean? = null, @SerializedName(\"vote_average\") var voteAverage: Double? = null, @SerializedName(\"vote_count\") var voteCount: Int? = null, @SerializedName(\"trailers\") var trailers: Trailers? = Trailers(), var type: Int = 0, var favorite: Boolean = false, var watchlist: Boolean = false )"],"content":"@Delete\n    fun delete(movie: MovieDetails)","prompt":""},{"id":2682,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDetailsDao","requiredType":["data class MovieDetails( @SerializedName(\"id\") var id: Int, @SerializedName(\"adult\") var adult: Boolean? = null, @SerializedName(\"backdrop_path\") var backdropPath: String? = null, @SerializedName(\"belongs_to_collection\") var belongsToCollection: Collection? = null, @SerializedName(\"budget\") var budget: Int? = null, @SerializedName(\"genres\") var genres: ArrayList<Genres> = arrayListOf(), @SerializedName(\"homepage\") var homepage: String? = null, @SerializedName(\"imdb_id\") var imdbId: String? = null, @SerializedName(\"original_language\") var originalLanguage: String? = null, @SerializedName(\"original_title\") var originalTitle: String? = null, @SerializedName(\"overview\") var overview: String? = null, @SerializedName(\"popularity\") var popularity: Double? = null, @SerializedName(\"poster_path\") var posterPath: String? = null, @SerializedName(\"production_companies\") var productionCompanies: ArrayList<ProductionCompanies> = arrayListOf(), @SerializedName(\"production_countries\") var productionCountries: ArrayList<ProductionCountries> = arrayListOf(), @SerializedName(\"release_date\") var releaseDate: String? = null, @SerializedName(\"revenue\") var revenue: Int? = null, @SerializedName(\"runtime\") var runtime: Int? = null, @SerializedName(\"spoken_languages\") var spokenLanguages: ArrayList<SpokenLanguages> = arrayListOf(), @SerializedName(\"status\") var status: String? = null, @SerializedName(\"tagline\") var tagline: String? = null, @SerializedName(\"title\") var title: String? = null, @SerializedName(\"video\") var video: Boolean? = null, @SerializedName(\"vote_average\") var voteAverage: Double? = null, @SerializedName(\"vote_count\") var voteCount: Int? = null, @SerializedName(\"trailers\") var trailers: Trailers? = Trailers(), var type: Int = 0, var favorite: Boolean = false, var watchlist: Boolean = false )"],"content":"@Query(\"SELECT * FROM movie_details\")\n    fun getAllDetails(): List<MovieDetails>","prompt":""},{"id":2683,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDetailsDao","requiredType":["data class MovieDetails( @SerializedName(\"id\") var id: Int, @SerializedName(\"adult\") var adult: Boolean? = null, @SerializedName(\"backdrop_path\") var backdropPath: String? = null, @SerializedName(\"belongs_to_collection\") var belongsToCollection: Collection? = null, @SerializedName(\"budget\") var budget: Int? = null, @SerializedName(\"genres\") var genres: ArrayList<Genres> = arrayListOf(), @SerializedName(\"homepage\") var homepage: String? = null, @SerializedName(\"imdb_id\") var imdbId: String? = null, @SerializedName(\"original_language\") var originalLanguage: String? = null, @SerializedName(\"original_title\") var originalTitle: String? = null, @SerializedName(\"overview\") var overview: String? = null, @SerializedName(\"popularity\") var popularity: Double? = null, @SerializedName(\"poster_path\") var posterPath: String? = null, @SerializedName(\"production_companies\") var productionCompanies: ArrayList<ProductionCompanies> = arrayListOf(), @SerializedName(\"production_countries\") var productionCountries: ArrayList<ProductionCountries> = arrayListOf(), @SerializedName(\"release_date\") var releaseDate: String? = null, @SerializedName(\"revenue\") var revenue: Int? = null, @SerializedName(\"runtime\") var runtime: Int? = null, @SerializedName(\"spoken_languages\") var spokenLanguages: ArrayList<SpokenLanguages> = arrayListOf(), @SerializedName(\"status\") var status: String? = null, @SerializedName(\"tagline\") var tagline: String? = null, @SerializedName(\"title\") var title: String? = null, @SerializedName(\"video\") var video: Boolean? = null, @SerializedName(\"vote_average\") var voteAverage: Double? = null, @SerializedName(\"vote_count\") var voteCount: Int? = null, @SerializedName(\"trailers\") var trailers: Trailers? = Trailers(), var type: Int = 0, var favorite: Boolean = false, var watchlist: Boolean = false )"],"content":"@Query(\"SELECT * FROM movie_details WHERE favorite = 1\")\n    fun getAllFavorites(): List<MovieDetails>","prompt":""},{"id":2684,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDetailsDao","requiredType":["data class MovieDetails( @SerializedName(\"id\") var id: Int, @SerializedName(\"adult\") var adult: Boolean? = null, @SerializedName(\"backdrop_path\") var backdropPath: String? = null, @SerializedName(\"belongs_to_collection\") var belongsToCollection: Collection? = null, @SerializedName(\"budget\") var budget: Int? = null, @SerializedName(\"genres\") var genres: ArrayList<Genres> = arrayListOf(), @SerializedName(\"homepage\") var homepage: String? = null, @SerializedName(\"imdb_id\") var imdbId: String? = null, @SerializedName(\"original_language\") var originalLanguage: String? = null, @SerializedName(\"original_title\") var originalTitle: String? = null, @SerializedName(\"overview\") var overview: String? = null, @SerializedName(\"popularity\") var popularity: Double? = null, @SerializedName(\"poster_path\") var posterPath: String? = null, @SerializedName(\"production_companies\") var productionCompanies: ArrayList<ProductionCompanies> = arrayListOf(), @SerializedName(\"production_countries\") var productionCountries: ArrayList<ProductionCountries> = arrayListOf(), @SerializedName(\"release_date\") var releaseDate: String? = null, @SerializedName(\"revenue\") var revenue: Int? = null, @SerializedName(\"runtime\") var runtime: Int? = null, @SerializedName(\"spoken_languages\") var spokenLanguages: ArrayList<SpokenLanguages> = arrayListOf(), @SerializedName(\"status\") var status: String? = null, @SerializedName(\"tagline\") var tagline: String? = null, @SerializedName(\"title\") var title: String? = null, @SerializedName(\"video\") var video: Boolean? = null, @SerializedName(\"vote_average\") var voteAverage: Double? = null, @SerializedName(\"vote_count\") var voteCount: Int? = null, @SerializedName(\"trailers\") var trailers: Trailers? = Trailers(), var type: Int = 0, var favorite: Boolean = false, var watchlist: Boolean = false )"],"content":"@Query(\"SELECT * FROM movie_details WHERE watchlist = 1\")\n    fun getAllWatchlist(): List<MovieDetails>","prompt":""},{"id":2685,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDetailsDao","requiredType":["data class MovieDetails( @SerializedName(\"id\") var id: Int, @SerializedName(\"adult\") var adult: Boolean? = null, @SerializedName(\"backdrop_path\") var backdropPath: String? = null, @SerializedName(\"belongs_to_collection\") var belongsToCollection: Collection? = null, @SerializedName(\"budget\") var budget: Int? = null, @SerializedName(\"genres\") var genres: ArrayList<Genres> = arrayListOf(), @SerializedName(\"homepage\") var homepage: String? = null, @SerializedName(\"imdb_id\") var imdbId: String? = null, @SerializedName(\"original_language\") var originalLanguage: String? = null, @SerializedName(\"original_title\") var originalTitle: String? = null, @SerializedName(\"overview\") var overview: String? = null, @SerializedName(\"popularity\") var popularity: Double? = null, @SerializedName(\"poster_path\") var posterPath: String? = null, @SerializedName(\"production_companies\") var productionCompanies: ArrayList<ProductionCompanies> = arrayListOf(), @SerializedName(\"production_countries\") var productionCountries: ArrayList<ProductionCountries> = arrayListOf(), @SerializedName(\"release_date\") var releaseDate: String? = null, @SerializedName(\"revenue\") var revenue: Int? = null, @SerializedName(\"runtime\") var runtime: Int? = null, @SerializedName(\"spoken_languages\") var spokenLanguages: ArrayList<SpokenLanguages> = arrayListOf(), @SerializedName(\"status\") var status: String? = null, @SerializedName(\"tagline\") var tagline: String? = null, @SerializedName(\"title\") var title: String? = null, @SerializedName(\"video\") var video: Boolean? = null, @SerializedName(\"vote_average\") var voteAverage: Double? = null, @SerializedName(\"vote_count\") var voteCount: Int? = null, @SerializedName(\"trailers\") var trailers: Trailers? = Trailers(), var type: Int = 0, var favorite: Boolean = false, var watchlist: Boolean = false )"],"content":"@Query(\"SELECT * FROM movie_details WHERE id = :id AND type = :type\")\n    fun getDetailsOfType(id: Int, type: Int = 0): MovieDetails","prompt":""},{"id":2686,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDetailsDao","requiredType":["data class MovieDetails( @SerializedName(\"id\") var id: Int, @SerializedName(\"adult\") var adult: Boolean? = null, @SerializedName(\"backdrop_path\") var backdropPath: String? = null, @SerializedName(\"belongs_to_collection\") var belongsToCollection: Collection? = null, @SerializedName(\"budget\") var budget: Int? = null, @SerializedName(\"genres\") var genres: ArrayList<Genres> = arrayListOf(), @SerializedName(\"homepage\") var homepage: String? = null, @SerializedName(\"imdb_id\") var imdbId: String? = null, @SerializedName(\"original_language\") var originalLanguage: String? = null, @SerializedName(\"original_title\") var originalTitle: String? = null, @SerializedName(\"overview\") var overview: String? = null, @SerializedName(\"popularity\") var popularity: Double? = null, @SerializedName(\"poster_path\") var posterPath: String? = null, @SerializedName(\"production_companies\") var productionCompanies: ArrayList<ProductionCompanies> = arrayListOf(), @SerializedName(\"production_countries\") var productionCountries: ArrayList<ProductionCountries> = arrayListOf(), @SerializedName(\"release_date\") var releaseDate: String? = null, @SerializedName(\"revenue\") var revenue: Int? = null, @SerializedName(\"runtime\") var runtime: Int? = null, @SerializedName(\"spoken_languages\") var spokenLanguages: ArrayList<SpokenLanguages> = arrayListOf(), @SerializedName(\"status\") var status: String? = null, @SerializedName(\"tagline\") var tagline: String? = null, @SerializedName(\"title\") var title: String? = null, @SerializedName(\"video\") var video: Boolean? = null, @SerializedName(\"vote_average\") var voteAverage: Double? = null, @SerializedName(\"vote_count\") var voteCount: Int? = null, @SerializedName(\"trailers\") var trailers: Trailers? = Trailers(), var type: Int = 0, var favorite: Boolean = false, var watchlist: Boolean = false )"],"content":"@Update\n    fun updateDetails(movie: MovieDetails): Int","prompt":""},{"id":2687,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":["data class Round( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var trainingId: Long? = null, var index: Int = 0, var shotsPerEnd: Int = 0, var maxEndCount: Int? = null, var distance: Dimension = Dimension.UNKNOWN, var comment: String = \"\", @Embedded var target: Target = Target(), @Embedded var score: Score = Score() )"],"content":"@Query(\"SELECT * FROM `Round` WHERE `id` in (:roundIds)\")\n    abstract fun loadRounds(roundIds: LongArray): List<Round>","prompt":""},{"id":2688,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":["data class Round( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var trainingId: Long? = null, var index: Int = 0, var shotsPerEnd: Int = 0, var maxEndCount: Int? = null, var distance: Dimension = Dimension.UNKNOWN, var comment: String = \"\", @Embedded var target: Target = Target(), @Embedded var score: Score = Score() )"],"content":"@Query(\"SELECT * FROM `Round` WHERE `trainingId` = :id ORDER BY `index`\")\n    abstract fun loadRounds(id: Long): List<Round>","prompt":""},{"id":2689,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `Round` WHERE `trainingId` = :id ORDER BY `index`\")\n    abstract fun loadRoundsLive(id: Long): LiveData<List<Round>>","prompt":""},{"id":2690,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":["data class Round( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var trainingId: Long? = null, var index: Int = 0, var shotsPerEnd: Int = 0, var maxEndCount: Int? = null, var distance: Dimension = Dimension.UNKNOWN, var comment: String = \"\", @Embedded var target: Target = Target(), @Embedded var score: Score = Score() )"],"content":"@Query(\"SELECT * FROM `Round` WHERE `id` = :id\")\n    abstract fun loadRound(id: Long): Round","prompt":""},{"id":2691,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `Round` WHERE `id` = :id\")\n    abstract fun loadRoundOrNull(id: Long): Round?","prompt":""},{"id":2692,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `End` WHERE `roundId` = :id ORDER BY `index`\")\n    abstract fun loadEnds(id: Long): MutableList<End>","prompt":""},{"id":2693,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":["data class Round( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var trainingId: Long? = null, var index: Int = 0, var shotsPerEnd: Int = 0, var maxEndCount: Int? = null, var distance: Dimension = Dimension.UNKNOWN, var comment: String = \"\", @Embedded var target: Target = Target(), @Embedded var score: Score = Score() )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertRound(round: Round): Long","prompt":""},{"id":2694,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":[],"content":"@Insert\n    abstract fun insertEnds(round: List<End>)","prompt":""},{"id":2695,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":["data class Round( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var trainingId: Long? = null, var index: Int = 0, var shotsPerEnd: Int = 0, var maxEndCount: Int? = null, var distance: Dimension = Dimension.UNKNOWN, var comment: String = \"\", @Embedded var target: Target = Target(), @Embedded var score: Score = Score() )"],"content":"@Update\n    abstract fun updateRound(round: Round)","prompt":""},{"id":2696,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":[],"content":"@Query(\"DELETE FROM `End` WHERE `roundId` = :id\")\n    abstract fun deleteEnds(id: Long)","prompt":""},{"id":2697,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":["data class Round( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var trainingId: Long? = null, var index: Int = 0, var shotsPerEnd: Int = 0, var maxEndCount: Int? = null, var distance: Dimension = Dimension.UNKNOWN, var comment: String = \"\", @Embedded var target: Target = Target(), @Embedded var score: Score = Score() )"],"content":"@Transaction\n    open fun addRound(round: Round, ends: List<End>) {\n        round.id = insertRound(round)\n        deleteEnds(round.id)\n        for (end in ends) {\n            end.roundId = round.id\n        }\n        insertEnds(ends)\n    }","prompt":""},{"id":2698,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":["data class Round( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var trainingId: Long? = null, var index: Int = 0, var shotsPerEnd: Int = 0, var maxEndCount: Int? = null, var distance: Dimension = Dimension.UNKNOWN, var comment: String = \"\", @Embedded var target: Target = Target(), @Embedded var score: Score = Score() )"],"content":"@Transaction\n    open fun deleteRound(round: Round) {\n        deleteRoundWithoutIndexUpdate(round)\n        decrementIndices(round.index)\n    }","prompt":""},{"id":2699,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":["data class Round( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var trainingId: Long? = null, var index: Int = 0, var shotsPerEnd: Int = 0, var maxEndCount: Int? = null, var distance: Dimension = Dimension.UNKNOWN, var comment: String = \"\", @Embedded var target: Target = Target(), @Embedded var score: Score = Score() )"],"content":"@Delete\n    abstract fun deleteRoundWithoutIndexUpdate(round: Round)","prompt":""},{"id":2700,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":[],"content":"@Query(\"UPDATE Round SET `index` = `index` - 1 WHERE `index` > :allAboveIndex\")\n    abstract fun decrementIndices(allAboveIndex: Int)","prompt":""},{"id":2701,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":[],"content":"@Query(\"UPDATE Round SET `index` = `index` + 1 WHERE `index` >= :allAboveIndex\")\n    abstract fun incrementIndices(allAboveIndex: Int)","prompt":""},{"id":2702,"identifierName":"de.dreier.mytargets.base.db.dao.RoundDAO","requiredType":["data class Round( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var trainingId: Long? = null, var index: Int = 0, var shotsPerEnd: Int = 0, var maxEndCount: Int? = null, var distance: Dimension = Dimension.UNKNOWN, var comment: String = \"\", @Embedded var target: Target = Target(), @Embedded var score: Score = Score() )"],"content":"@Transaction\n    open fun insertRound(round: Round, ends: List<End>) {\n        incrementIndices(round.index)\n        addRound(round, ends)\n    }","prompt":""},{"id":2703,"identifierName":"com.guerinet.mymartlet.util.room.daos.CourseResultDao","requiredType":[],"content":"/**\n     * Returns all stored [CourseResult]s\n     */\n    @Query(\"SELECT * FROM CourseResult\")\n    abstract fun getAll(): List<CourseResult>","prompt":""},{"id":2704,"identifierName":"com.guerinet.mymartlet.util.room.daos.CourseResultDao","requiredType":["data class Term(val season: Season, val year: Int)"],"content":"/**\n     * Returns all [CourseResult]s for the [term]\n     */\n    @Query(\"SELECT * FROM CourseResult WHERE term = :term\")\n    abstract fun get(term: Term): List<CourseResult>","prompt":""},{"id":2705,"identifierName":"com.guerinet.mymartlet.util.room.daos.CourseResultDao","requiredType":["data class Term(val season: Season, val year: Int)"],"content":"/**\n     * Returns one [CourseResult] with the same [term] and [crn] if found\n     */\n    @Query(\"SELECT * FROM CourseResult WHERE term = :term AND crn = :crn\")\n    abstract fun get(term: Term, crn: Int): CourseResult?","prompt":""},{"id":2706,"identifierName":"jp.toastkid.yobidashi.settings.color.SavedColorRepository","requiredType":[],"content":"@Insert\n    fun add(item: SavedColor): Long","prompt":""},{"id":2707,"identifierName":"jp.toastkid.yobidashi.settings.color.SavedColorRepository","requiredType":[],"content":"@Query(\"SELECT * FROM SavedColor\")\n    fun findAll(): List<SavedColor>","prompt":""},{"id":2708,"identifierName":"jp.toastkid.yobidashi.settings.color.SavedColorRepository","requiredType":[],"content":"@Delete\n    fun delete(item: SavedColor)","prompt":""},{"id":2709,"identifierName":"jp.toastkid.yobidashi.settings.color.SavedColorRepository","requiredType":[],"content":"@Query(\"DELETE FROM SavedColor\")\n    fun deleteAll()","prompt":""},{"id":2710,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `Bow`\")\n    abstract fun loadBows(): List<Bow>","prompt":""},{"id":2711,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `Bow` WHERE `id` = (:id)\")\n    abstract fun loadBow(id: Long): Bow","prompt":""},{"id":2712,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `Bow` WHERE `id` = (:id)\")\n    abstract fun loadBowOrNull(id: Long): Bow?","prompt":""},{"id":2713,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `BowImage` WHERE `bowId` = (:id)\")\n    abstract fun loadBowImages(id: Long): List<BowImage>","prompt":""},{"id":2714,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":["data class SightMark( @PrimaryKey(autoGenerate = true) override var id: Long = 0, var bowId: Long? = null, var distance: Dimension = Dimension(18f, METER), var value: String? = \"\" )"],"content":"@Query(\"SELECT * FROM `SightMark` WHERE `bowId` = (:id)\")\n    abstract fun loadSightMarks(id: Long): List<SightMark>","prompt":""},{"id":2715,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertBow(bow: Bow): Long","prompt":""},{"id":2716,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Update\n    abstract fun updateBow(bow: Bow)","prompt":""},{"id":2717,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertBowImages(images: List<BowImage>)","prompt":""},{"id":2718,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Query(\"DELETE FROM `BowImage` WHERE `bowId` = (:bowId)\")\n    abstract fun deleteBowImages(bowId: Long)","prompt":""},{"id":2719,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertSightMarks(sightMarks: List<SightMark>)","prompt":""},{"id":2720,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Query(\"DELETE FROM `SightMark` WHERE `bowId` = (:bowId)\")\n    abstract fun deleteSightMarks(bowId: Long)","prompt":""},{"id":2721,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Transaction\n    open fun saveBow(bow: Bow, images: List<BowImage>, sightMarks: List<SightMark>) {\n        if (bow.id > 0) {\n            updateBow(bow)\n        } else {\n            bow.id = insertBow(bow)\n        }\n        for (image in images) {\n            image.bowId = bow.id\n        }\n        deleteBowImages(bow.id)\n        insertBowImages(images)\n        for (sightMark in sightMarks) {\n            sightMark.bowId = bow.id\n        }\n        deleteSightMarks(bow.id)\n        insertSightMarks(sightMarks)\n    }","prompt":""},{"id":2722,"identifierName":"de.dreier.mytargets.base.db.dao.BowDAO","requiredType":[],"content":"@Delete\n    abstract fun deleteBow(bow: Bow)","prompt":""},{"id":2723,"identifierName":"com.dreampany.translation.data.source.room.TextTranslationDao","requiredType":[],"content":"@Query(\"select count(*) from texttranslation where source = :source and target = :target and input = :input limit 1\")\n    fun getCount(source: String, target: String, input: String): Int","prompt":""},{"id":2724,"identifierName":"com.dreampany.translation.data.source.room.TextTranslationDao","requiredType":[],"content":"@Query(\"select count(*) from texttranslation where source = :source and target = :target and input = :input limit 1\")\n    fun getCountRx(source: String, target: String, input: String): Maybe<Int>","prompt":""},{"id":2725,"identifierName":"com.dreampany.translation.data.source.room.TextTranslationDao","requiredType":[],"content":"@Query(\"select * from texttranslation where source = :source and target = :target and input = :input limit 1\")\n    fun getItem(source: String, target: String, input: String): TextTranslation?","prompt":""},{"id":2726,"identifierName":"com.example.photolog_end.LogDao","requiredType":[],"content":"@Query(\"SELECT * FROM logs ORDER BY date DESC\")\n    suspend fun getAll(): List<LogEntry>","prompt":""},{"id":2727,"identifierName":"com.example.photolog_end.LogDao","requiredType":[],"content":"suspend fun getAllWithFiles(photoFolder: File): List<Log> {\n        return getAll().map { Log.fromLogEntry(it, photoFolder) }\n    }","prompt":""},{"id":2728,"identifierName":"com.example.photolog_end.LogDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(log: LogEntry)","prompt":""},{"id":2729,"identifierName":"com.example.photolog_end.LogDao","requiredType":[],"content":"@Delete\n    suspend fun delete(log: LogEntry)","prompt":""},{"id":2730,"identifierName":"de.tum.`in`.tumcampusapp.component.notifications.persistence.ActiveAlarmsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun addActiveAlarm(alarm: ActiveAlarm)","prompt":""},{"id":2731,"identifierName":"de.tum.`in`.tumcampusapp.component.notifications.persistence.ActiveAlarmsDao","requiredType":[],"content":"@Delete\n    fun deleteActiveAlarm(alarm: ActiveAlarm)","prompt":""},{"id":2732,"identifierName":"de.tum.`in`.tumcampusapp.component.notifications.persistence.ActiveAlarmsDao","requiredType":[],"content":"@Query(\"SELECT CASE WHEN count(*) < $MAX_ACTIVE THEN $MAX_ACTIVE - count(*) ELSE 0 END FROM active_alarms\")\n    fun maxAlarmsToSchedule(): Int","prompt":""},{"id":2733,"identifierName":"lijin.heinika.cn.mygankio.dao.GirlsDao","requiredType":["data class GirlsBean( @SerializedName(\"_id\") @PrimaryKey val id: String, val createdAt: String, val desc: String, val publishedAt: String, val source: String, val type: String, val url: String, val used: Boolean = false, val who: String )"],"content":"@Query(\"select * FROM Girls\")\n    fun getGirls(): List<GirlsBean>","prompt":""},{"id":2734,"identifierName":"lijin.heinika.cn.mygankio.dao.GirlsDao","requiredType":["data class GirlsBean( @SerializedName(\"_id\") @PrimaryKey val id: String, val createdAt: String, val desc: String, val publishedAt: String, val source: String, val type: String, val url: String, val used: Boolean = false, val who: String )"],"content":"@Query(\"select * From Girls Where id = :id\")\n    fun getGirl(id: String): GirlsBean","prompt":""},{"id":2735,"identifierName":"lijin.heinika.cn.mygankio.dao.GirlsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun addGirls(girlsBeanList: List<GirlsBean>)","prompt":""},{"id":2736,"identifierName":"lijin.heinika.cn.mygankio.dao.GirlsDao","requiredType":["data class GirlsBean( @SerializedName(\"_id\") @PrimaryKey val id: String, val createdAt: String, val desc: String, val publishedAt: String, val source: String, val type: String, val url: String, val used: Boolean = false, val who: String )"],"content":"@Delete\n    fun deleteGirls(ganHuoBean: GirlsBean)","prompt":""},{"id":2737,"identifierName":"lijin.heinika.cn.mygankio.dao.GirlsDao","requiredType":["data class GirlsBean( @SerializedName(\"_id\") @PrimaryKey val id: String, val createdAt: String, val desc: String, val publishedAt: String, val source: String, val type: String, val url: String, val used: Boolean = false, val who: String )"],"content":"@Update\n    fun updateGirls(ganHuoBean: GirlsBean)","prompt":""},{"id":2738,"identifierName":"com.ak47.cms.cms.dao.StockIndexRepository","requiredType":[],"content":"@Modifying\n    @Transactional(propagation = Propagation.SUPPORTS)\n    @Query(value = \"INSERT INTO `stock_index` (`index_code`, `prod_name`, `last_px`, `px_change`, `px_change_rate`, `price_precision`,`gmt_created`,`gmt_modified`) \" +\n            \"VALUES ( :index_code,  :prod_name,  :last_px,  :px_change , :px_change_rate,   :price_precision,  now(), now()) \" +\n            \"ON DUPLICATE KEY UPDATE `gmt_modified` = now(), `last_px` = :last_px, `px_change` = :px_change,  `px_change_rate` = :px_change_rate , `price_precision` = :price_precision\",\n            nativeQuery = true)\n    fun saveOnNoDuplicateKey(\n        @Param(\"index_code\") index_code: String,\n        @Param(\"prod_name\") prod_name: String,\n        @Param(\"last_px\") last_px: String,\n        @Param(\"px_change\") px_change: String,\n        @Param(\"px_change_rate\") px_change_rate: String,\n        @Param(\"price_precision\") price_precision: String\n    ): Int","prompt":""},{"id":2739,"identifierName":"com.ak47.cms.cms.dao.StockIndexRepository","requiredType":["data class StockIndexnull"],"content":"override fun findAll(): List<StockIndex>","prompt":""},{"id":2740,"identifierName":"com.waz.zclient.storage.db.userclients.UserClientDao","requiredType":[],"content":"@Query(\"SELECT * FROM Clients\")\n    suspend fun allClients(): List<UserClientsEntity>","prompt":""},{"id":2741,"identifierName":"com.waz.zclient.storage.db.userclients.UserClientDao","requiredType":[],"content":"@Insert\n    suspend fun insertClient(client: UserClientsEntity)","prompt":""},{"id":2742,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookMetaDataDao","requiredType":["data class BookMetaData( @ColumnInfo(name = \"id\") @PrimaryKey val id: UUID, @ColumnInfo(name = \"type\") val type: Book.Type, @ColumnInfo(name = \"author\") val author: String?, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"root\") val root: String, @ColumnInfo(name = \"addedAtMillis\") val addedAtMillis: Long )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  suspend fun insert(metaData: BookMetaData)","prompt":""},{"id":2743,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookMetaDataDao","requiredType":["data class BookMetaData( @ColumnInfo(name = \"id\") @PrimaryKey val id: UUID, @ColumnInfo(name = \"type\") val type: Book.Type, @ColumnInfo(name = \"author\") val author: String?, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"root\") val root: String, @ColumnInfo(name = \"addedAtMillis\") val addedAtMillis: Long )"],"content":"@Query(\"SELECT * FROM bookMetaData WHERE id = :id\")\n  suspend fun byId(id: UUID): BookMetaData","prompt":""},{"id":2744,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookMetaDataDao","requiredType":["data class BookMetaData( @ColumnInfo(name = \"id\") @PrimaryKey val id: UUID, @ColumnInfo(name = \"type\") val type: Book.Type, @ColumnInfo(name = \"author\") val author: String?, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"root\") val root: String, @ColumnInfo(name = \"addedAtMillis\") val addedAtMillis: Long )"],"content":"@Delete\n  suspend fun delete(metaData: BookMetaData)","prompt":""},{"id":2745,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookMetaDataDao","requiredType":[],"content":"@Query(\"UPDATE bookMetaData SET name = :name WHERE id = :id\")\n  suspend fun updateBookName(id: UUID, name: String)","prompt":""},{"id":2746,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryUpdateDao","requiredType":[],"content":"override fun updateIgnoreUntilTime(\n    packageName: String,\n    activityName: String,\n    ignoreUntilTime: Long\n  ): Completable {\n    return Completable.fromAction {\n      daoUpdateIgnoreUntilTime(packageName, activityName, ignoreUntilTime)\n    }\n  }","prompt":""},{"id":2747,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryUpdateDao","requiredType":[],"content":"@Query(\n      \"UPDATE ${PadLockEntryDb.TABLE_NAME} SET ${PadLockEntryDb.COLUMN_IGNORE_UNTIL_TIME} = :ignoreUntilTime WHERE ${PadLockEntryDb.COLUMN_PACKAGE_NAME} = :packageName AND ${PadLockEntryDb.COLUMN_ACTIVITY_NAME} = :activityName\"\n  )\n  internal abstract fun daoUpdateIgnoreUntilTime(\n    packageName: String,\n    activityName: String,\n    ignoreUntilTime: Long\n  )","prompt":""},{"id":2748,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryUpdateDao","requiredType":[],"content":"override fun updateLockUntilTime(\n    packageName: String,\n    activityName: String,\n    lockUntilTime: Long\n  ): Completable {\n    return Completable.fromAction {\n      daoUpdateLockUntilTime(packageName, activityName, lockUntilTime)\n    }\n  }","prompt":""},{"id":2749,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryUpdateDao","requiredType":[],"content":"@Query(\n      \"UPDATE ${PadLockEntryDb.TABLE_NAME} SET ${PadLockEntryDb.COLUMN_LOCK_UNTIL_TIME} = :lockUntilTime WHERE ${PadLockEntryDb.COLUMN_PACKAGE_NAME} = :packageName AND ${PadLockEntryDb.COLUMN_ACTIVITY_NAME} = :activityName\"\n  )\n  internal abstract fun daoUpdateLockUntilTime(\n    packageName: String,\n    activityName: String,\n    lockUntilTime: Long\n  )","prompt":""},{"id":2750,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryUpdateDao","requiredType":[],"content":"override fun updateWhitelist(\n    packageName: String,\n    activityName: String,\n    whitelist: Boolean\n  ): Completable {\n    return Completable.fromAction {\n      daoUpdateWhitelist(packageName, activityName, whitelist)\n    }\n  }","prompt":""},{"id":2751,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryUpdateDao","requiredType":[],"content":"@Query(\n      \"UPDATE ${PadLockEntryDb.TABLE_NAME} SET ${PadLockEntryDb.COLUMN_WHITELIST} = :whitelist WHERE ${PadLockEntryDb.COLUMN_PACKAGE_NAME} = :packageName AND ${PadLockEntryDb.COLUMN_ACTIVITY_NAME} = :activityName\"\n  )\n  internal abstract fun daoUpdateWhitelist(\n    packageName: String,\n    activityName: String,\n    whitelist: Boolean\n  )","prompt":""},{"id":2752,"identifierName":"com.android.samples.donuttracker.storage.DonutDao","requiredType":[],"content":"@Query(\"SELECT * FROM donut\")\n    fun getAll(): LiveData<List<Donut>>","prompt":""},{"id":2753,"identifierName":"com.android.samples.donuttracker.storage.DonutDao","requiredType":[],"content":"@Query(\"SELECT * FROM donut WHERE id = :id\")\n    suspend fun get(id: Long): Donut","prompt":""},{"id":2754,"identifierName":"com.android.samples.donuttracker.storage.DonutDao","requiredType":[],"content":"@Insert\n    suspend fun insert(donut: Donut): Long","prompt":""},{"id":2755,"identifierName":"com.android.samples.donuttracker.storage.DonutDao","requiredType":[],"content":"@Delete\n    suspend fun delete(donut: Donut)","prompt":""},{"id":2756,"identifierName":"com.android.samples.donuttracker.storage.DonutDao","requiredType":[],"content":"@Update\n    suspend fun update(donut: Donut)","prompt":""},{"id":2757,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DirectoryDao","requiredType":["data class Directory( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"path\") var path: String, @ColumnInfo(name = \"thumbnail\") var tmb: String, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"media_count\") var mediaCnt: Int, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"location\") var location: Int, @ColumnInfo(name = \"media_types\") var types: Int, @ColumnInfo(name = \"sort_value\") var sortValue: String, @Ignore var subfoldersCount: Int = 0, @Ignore var subfoldersMediaCount: Int = 0, @Ignore var containsMediaFilesDirectly: Boolean = true )"],"content":"@Query(\"SELECT path, thumbnail, filename, media_count, last_modified, date_taken, size, location, media_types, sort_value FROM directories\")\n    fun getAll(): List<Directory>","prompt":""},{"id":2758,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DirectoryDao","requiredType":["data class Directory( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"path\") var path: String, @ColumnInfo(name = \"thumbnail\") var tmb: String, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"media_count\") var mediaCnt: Int, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"location\") var location: Int, @ColumnInfo(name = \"media_types\") var types: Int, @ColumnInfo(name = \"sort_value\") var sortValue: String, @Ignore var subfoldersCount: Int = 0, @Ignore var subfoldersMediaCount: Int = 0, @Ignore var containsMediaFilesDirectly: Boolean = true )"],"content":"@Insert(onConflict = REPLACE)\n    fun insert(directory: Directory)","prompt":""},{"id":2759,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DirectoryDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertAll(directories: List<Directory>)","prompt":""},{"id":2760,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DirectoryDao","requiredType":[],"content":"@Query(\"DELETE FROM directories WHERE path = :path COLLATE NOCASE\")\n    fun deleteDirPath(path: String)","prompt":""},{"id":2761,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DirectoryDao","requiredType":[],"content":"@Query(\"UPDATE OR REPLACE directories SET thumbnail = :thumbnail, media_count = :mediaCnt, last_modified = :lastModified, date_taken = :dateTaken, size = :size, media_types = :mediaTypes, sort_value = :sortValue WHERE path = :path COLLATE NOCASE\")\n    fun updateDirectory(path: String, thumbnail: String, mediaCnt: Int, lastModified: Long, dateTaken: Long, size: Long, mediaTypes: Int, sortValue: String)","prompt":""},{"id":2762,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DirectoryDao","requiredType":[],"content":"@Query(\"UPDATE directories SET thumbnail = :thumbnail, filename = :name, path = :newPath WHERE path = :oldPath COLLATE NOCASE\")\n    fun updateDirectoryAfterRename(thumbnail: String, name: String, newPath: String, oldPath: String)","prompt":""},{"id":2763,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DirectoryDao","requiredType":[],"content":"@Query(\"DELETE FROM directories WHERE path = \\'$RECYCLE_BIN\\' COLLATE NOCASE\")\n    fun deleteRecycleBin()","prompt":""},{"id":2764,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.DirectoryDao","requiredType":[],"content":"@Query(\"SELECT thumbnail FROM directories WHERE path = :path\")\n    fun getDirectoryThumbnail(path: String): String?","prompt":""},{"id":2765,"identifierName":"com.niusounds.matomeviewer.data.ArticleDao","requiredType":[],"content":"/**\n     * 記事リストを取得する。\n     */\n    @Query(\"SELECT * FROM article ORDER BY pubDate DESC LIMIT :limit\")\n    fun getAll(limit: Int = 100): LiveData<List<Article>>","prompt":""},{"id":2766,"identifierName":"com.niusounds.matomeviewer.data.ArticleDao","requiredType":[],"content":"@Query(\"SELECT * FROM article WHERE link = :link\")\n    fun findByUrl(link: String): LiveData<Article>","prompt":""},{"id":2767,"identifierName":"com.niusounds.matomeviewer.data.ArticleDao","requiredType":[],"content":"/**\n     * 記事を保存する。メインスレッドで呼んではいけない。\n     */\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun save(article: Article)","prompt":""},{"id":2768,"identifierName":"com.izettle.wrench.database.WrenchApplicationDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + ApplicationTable.TABLE_NAME)\n    fun getApplications(): DataSource.Factory<Int, WrenchApplication>","prompt":""},{"id":2769,"identifierName":"com.izettle.wrench.database.WrenchApplicationDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + ApplicationTable.TABLE_NAME + \" WHERE id = (:id)\")\n    fun getApplication(id: Long): LiveData<WrenchApplication>","prompt":""},{"id":2770,"identifierName":"com.izettle.wrench.database.WrenchApplicationDao","requiredType":[],"content":"@Query(\"SELECT * FROM \" + ApplicationTable.TABLE_NAME + \" WHERE packageName IN (:packageName)\")\n    fun loadByPackageName(packageName: String): WrenchApplication","prompt":""},{"id":2771,"identifierName":"com.izettle.wrench.database.WrenchApplicationDao","requiredType":[],"content":"@Insert\n    fun insert(application: WrenchApplication): Long","prompt":""},{"id":2772,"identifierName":"com.izettle.wrench.database.WrenchApplicationDao","requiredType":[],"content":"@Delete\n    fun delete(application: WrenchApplication)","prompt":""},{"id":2773,"identifierName":"com.garymcgowan.moviepedia.persistence.StoredMovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM favourite_movies\")\n    fun getAll(): List<StoredMovie>","prompt":""},{"id":2774,"identifierName":"com.garymcgowan.moviepedia.persistence.StoredMovieDao","requiredType":[],"content":"@Insert\n    fun insertAll(vararg movies: StoredMovie)","prompt":""},{"id":2775,"identifierName":"com.garymcgowan.moviepedia.persistence.StoredMovieDao","requiredType":[],"content":"@Delete\n    fun deleteAll(vararg movies: StoredMovie)","prompt":""},{"id":2776,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM product_table ORDER BY title ASC\")\n    fun getAllProductInfo(): LiveData<List<ProductEntity>>","prompt":""},{"id":2777,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM product_table WHERE product_type = 1 ORDER BY title ASC\")\n    fun getAllOses(): LiveData<List<ProductEntity>>","prompt":""},{"id":2778,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM product_table WHERE product_type = 2 ORDER BY title ASC\")\n    fun getAllDevices(): LiveData<List<ProductEntity>>","prompt":""},{"id":2779,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM product_table WHERE isFav = 1 ORDER BY title ASC\")\n    fun getAllFaves(): LiveData<List<ProductEntity>>","prompt":""},{"id":2780,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertItem(productEntity: ProductEntity)","prompt":""},{"id":2781,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertItemList(entities: List<ProductEntity>)","prompt":""},{"id":2782,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM product_table WHERE title = :prodNameIn LIMIT 1\")\n    fun getProductItem(prodNameIn: String): LiveData<ProductEntity>","prompt":""},{"id":2783,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Query(\"DELETE FROM product_table\")\n    fun deleteAll()","prompt":""},{"id":2784,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Query(\"DELETE FROM product_table WHERE product_type = 1\")\n    fun deleteAllOS()","prompt":""},{"id":2785,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Query(\"DELETE FROM product_table WHERE product_type = 2\")\n    fun deleteAllDevices()","prompt":""},{"id":2786,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"// These are only used in  DB, LiveData objects should be used for most other cases\n    @Query(\"SELECT * FROM product_table  WHERE product_type = 1 ORDER BY title ASC\")\n    fun getOsItems(): List<ProductEntity>","prompt":""},{"id":2787,"identifierName":"com.designdemo.uaha.data.model.product.ProductItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM product_table  WHERE product_type = 2 ORDER BY title ASC\")\n    fun getDeviceItems(): List<ProductEntity>","prompt":""},{"id":2788,"identifierName":"kittentrate.score.PlayerScoreDao","requiredType":[],"content":"@Query(\"SELECT * from Score\")\n    fun getTopScores(): List<PlayerScore>","prompt":""},{"id":2789,"identifierName":"kittentrate.score.PlayerScoreDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun addTopScore(playerScore: PlayerScore): Long","prompt":""},{"id":2790,"identifierName":"kittentrate.score.PlayerScoreDao","requiredType":[],"content":"@Delete\n    fun deleteAllScores(vararg playerScore: PlayerScore)","prompt":""},{"id":2791,"identifierName":"com.kingz.coroutines.data.local.dao.UserDao","requiredType":["data class User( @PrimaryKey val id: Int, @ColumnInfo(name = \"name\") val name: String?, @ColumnInfo(name = \"email\") val email: String?, @ColumnInfo(name = \"avatar\") val avatar: String? )"],"content":"@Query(\"SELECT * FROM user_info\")\n    suspend fun getAll(): List<User>","prompt":""},{"id":2792,"identifierName":"com.kingz.coroutines.data.local.dao.UserDao","requiredType":[],"content":"@Insert\n    suspend fun insertAll(users: List<User>)","prompt":""},{"id":2793,"identifierName":"com.kingz.coroutines.data.local.dao.UserDao","requiredType":["data class User( @PrimaryKey val id: Int, @ColumnInfo(name = \"name\") val name: String?, @ColumnInfo(name = \"email\") val email: String?, @ColumnInfo(name = \"avatar\") val avatar: String? )"],"content":"@Delete\n    suspend fun delete(user: User)","prompt":""},{"id":2794,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":["data class Episode( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") override val id: Long = 0, @ColumnInfo(name = \"season_id\") val seasonId: Long, @ColumnInfo(name = \"trakt_id\") override val traktId: Int? = null, @ColumnInfo(name = \"tmdb_id\") override val tmdbId: Int? = null, @ColumnInfo(name = \"title\") val title: String? = null, @ColumnInfo(name = \"overview\") val summary: String? = null, @ColumnInfo(name = \"number\") val number: Int? = null, @ColumnInfo(name = \"first_aired\") val firstAired: OffsetDateTime? = null, @ColumnInfo(name = \"trakt_rating\") val traktRating: Float? = null, @ColumnInfo(name = \"trakt_rating_votes\") val traktRatingVotes: Int? = null, @ColumnInfo(name = \"tmdb_backdrop_path\") val tmdbBackdropPath: String? = null )"],"content":"@Query(\"SELECT * from episodes WHERE season_id = :seasonId ORDER BY number\")\n    abstract suspend fun episodesWithSeasonId(seasonId: Long): List<Episode>","prompt":""},{"id":2795,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Query(\"DELETE FROM episodes WHERE season_id = :seasonId\")\n    abstract suspend fun deleteWithSeasonId(seasonId: Long)","prompt":""},{"id":2796,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Query(\"SELECT * from episodes WHERE trakt_id = :traktId\")\n    abstract suspend fun episodeWithTraktId(traktId: Int): Episode?","prompt":""},{"id":2797,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Query(\"SELECT * from episodes WHERE tmdb_id = :tmdbId\")\n    abstract suspend fun episodeWithTmdbId(tmdbId: Int): Episode?","prompt":""},{"id":2798,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Query(\"SELECT * from episodes WHERE id = :id\")\n    abstract suspend fun episodeWithId(id: Long): Episode?","prompt":""},{"id":2799,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Query(\"SELECT trakt_id from episodes WHERE id = :id\")\n    abstract suspend fun episodeTraktIdForId(id: Long): Int?","prompt":""},{"id":2800,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Query(\"SELECT id from episodes WHERE trakt_id = :traktId\")\n    abstract suspend fun episodeIdWithTraktId(traktId: Int): Long?","prompt":""},{"id":2801,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * from episodes WHERE id = :id\")\n    abstract fun episodeWithIdObservable(id: Long): Flow<EpisodeWithSeason>","prompt":""},{"id":2802,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Query(\n        \"SELECT shows.id FROM shows\" +\n            \" INNER JOIN seasons AS s ON s.show_id = shows.id\" +\n            \" INNER JOIN episodes AS eps ON eps.season_id = s.id\" +\n            \" WHERE eps.id = :episodeId\"\n    )\n    abstract suspend fun showIdForEpisodeId(episodeId: Long): Long","prompt":""},{"id":2803,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Transaction\n    @RewriteQueriesToDropUnusedColumns\n    @Query(latestWatchedEpisodeForShowId)\n    abstract fun observeLatestWatchedEpisodeForShowId(showId: Long): Flow<EpisodeWithSeason?>","prompt":""},{"id":2804,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Transaction\n    @RewriteQueriesToDropUnusedColumns\n    @Query(nextEpisodeForShowIdAfter)\n    abstract fun observeNextEpisodeForShowAfter(\n        showId: Long,\n        seasonNumber: Int,\n        episodeNumber: Int\n    ): Flow<EpisodeWithSeason?>","prompt":""},{"id":2805,"identifierName":"app.tivi.data.daos.EpisodesDao","requiredType":[],"content":"@Transaction\n    @RewriteQueriesToDropUnusedColumns\n    @Query(nextAiredEpisodeForShowIdAfter)\n    abstract fun observeNextAiredEpisodeForShowAfter(\n        showId: Long,\n        seasonNumber: Int,\n        episodeNumber: Int\n    ): Flow<EpisodeWithSeason?>","prompt":""},{"id":2806,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM counter\")\n  abstract fun count(): Int","prompt":""},{"id":2807,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Query(\"SELECT * FROM counter ORDER BY position\")\n  abstract fun counters(): Flowable<List<Counter>>","prompt":""},{"id":2808,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Query(\"SELECT * FROM counter WHERE id = :id\")\n  abstract fun counter(id: Long): Counter?","prompt":""},{"id":2809,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Query(\"SELECT position FROM counter WHERE id = :id\")\n  abstract fun position(id: Long): Long","prompt":""},{"id":2810,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Query(\"SELECT position FROM counter WHERE position < :position ORDER BY position DESC LIMIT 1\")\n  abstract fun previousPosition(position: Long): Long","prompt":""},{"id":2811,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Query(\"SELECT position FROM counter WHERE position > :position ORDER BY position ASC LIMIT 1\")\n  abstract fun nextPosition(position: Long): Long","prompt":""},{"id":2812,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Query(\"SELECT position FROM counter ORDER BY position DESC LIMIT 1\")\n  abstract fun lastPosition(): Long","prompt":""},{"id":2813,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"fun createCounter(name: String) {\n    insertOrUpdate(Counter(0, name, lastPosition() + POSITION_OFFSET))\n  }","prompt":""},{"id":2814,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Query(\"UPDATE counter \" +\n      \"SET count = (count + :difference) \" +\n      \"WHERE id = :counterId\")\n  abstract fun modifyCount(counterId: Long, difference: Long)","prompt":""},{"id":2815,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Query(\"UPDATE counter \" +\n      \"SET name = :name \" +\n      \"WHERE id = :counterId\")\n  abstract fun modifyName(counterId: Long, name: String)","prompt":""},{"id":2816,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Query(\"UPDATE counter \" +\n      \"SET position = :position \" +\n      \"WHERE id = :counterId\")\n  abstract fun modifyPosition(counterId: Long, position: Long)","prompt":""},{"id":2817,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"// Positioning is done in such a way that we don't have to rewrite the whole db each time you change anything,\n  // just the single item that is being moved.\n  fun move(fromCounterId: Long, toCounterId: Long) {\n    val fromPosition = position(fromCounterId)\n    val toPosition = position(toCounterId)\n\n    val newPosition: Long\n    if (fromPosition < toPosition) {\n      val nextPosition = nextPosition(toPosition)\n      if (nextPosition == 0L) {\n        newPosition = toPosition + POSITION_OFFSET\n      }\n      else {\n        newPosition = (nextPosition + toPosition) / 2L\n      }\n    }\n    else {\n      val previousPosition = previousPosition(toPosition)\n      if (previousPosition == 0L) {\n        newPosition = toPosition / 2L\n      }\n      else {\n        newPosition = (previousPosition + toPosition) / 2L\n      }\n    }\n\n    modifyPosition(fromCounterId, newPosition)\n  }","prompt":""},{"id":2818,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract fun insertOrUpdate(vararg counters: Counter)","prompt":""},{"id":2819,"identifierName":"net.danlew.counter.data.CounterDao","requiredType":[],"content":"@Delete\n  abstract fun delete(counter: Counter)","prompt":""},{"id":2820,"identifierName":"org.tvheadend.data.dao.ConnectionDao","requiredType":[],"content":"@Query(\"SELECT * FROM connections\")\n    fun loadAllConnections(): LiveData<List<ConnectionEntity>>","prompt":""},{"id":2821,"identifierName":"org.tvheadend.data.dao.ConnectionDao","requiredType":[],"content":"@Query(\"SELECT * FROM connections\")\n    fun loadAllConnectionsSync(): List<ConnectionEntity>","prompt":""},{"id":2822,"identifierName":"org.tvheadend.data.dao.ConnectionDao","requiredType":[],"content":"@Query(\"SELECT * FROM connections WHERE active = 1\")\n    fun loadActiveConnection(): LiveData<ConnectionEntity>","prompt":""},{"id":2823,"identifierName":"org.tvheadend.data.dao.ConnectionDao","requiredType":[],"content":"@Query(\"SELECT * FROM connections WHERE active = 1\")\n    fun loadActiveConnectionSync(): ConnectionEntity?","prompt":""},{"id":2824,"identifierName":"org.tvheadend.data.dao.ConnectionDao","requiredType":[],"content":"@Query(\"SELECT * FROM connections WHERE id = :id\")\n    fun loadConnectionByIdSync(id: Int): ConnectionEntity?","prompt":""},{"id":2825,"identifierName":"org.tvheadend.data.dao.ConnectionDao","requiredType":[],"content":"@Query(\"SELECT * FROM connections WHERE id = :id\")\n    fun loadConnectionById(id: Int): LiveData<ConnectionEntity>","prompt":""},{"id":2826,"identifierName":"org.tvheadend.data.dao.ConnectionDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(connection: ConnectionEntity): Long","prompt":""},{"id":2827,"identifierName":"org.tvheadend.data.dao.ConnectionDao","requiredType":[],"content":"@Update\n    fun update(connection: ConnectionEntity)","prompt":""},{"id":2828,"identifierName":"org.tvheadend.data.dao.ConnectionDao","requiredType":[],"content":"@Delete\n    fun delete(connection: ConnectionEntity)","prompt":""},{"id":2829,"identifierName":"org.tvheadend.data.dao.ConnectionDao","requiredType":[],"content":"@Query(\"UPDATE connections SET active = 0 WHERE active = 1\")\n    fun disableActiveConnection()","prompt":""},{"id":2830,"identifierName":"name.gyger.jmoney.account.EntryRepository","requiredType":[],"content":"@Query(\"SELECT count(e) FROM Entry e WHERE e.account.id = :accountId\")\n    fun count(@Param(\"accountId\") accountId: Long): Long","prompt":""},{"id":2831,"identifierName":"name.gyger.jmoney.account.EntryRepository","requiredType":[],"content":"@Query(\"SELECT e FROM Entry e WHERE e.splitEntry.id = :entryId\")\n    fun findSubEntries(@Param(\"entryId\") entryId: Long): List<Entry>","prompt":""},{"id":2832,"identifierName":"name.gyger.jmoney.account.EntryRepository","requiredType":[],"content":"@Query(\"SELECT e FROM Entry e LEFT JOIN FETCH e.category WHERE e.account.id = :accountId \" +\n            \"ORDER BY CASE WHEN e.date IS NULL THEN 1 ELSE 0 END, e.date, e.creation\")\n    fun findEntriesForAccount(@Param(\"accountId\") accountId: Long): List<Entry>","prompt":""},{"id":2833,"identifierName":"name.gyger.jmoney.account.EntryRepository","requiredType":[],"content":"@Modifying\n    @Query(\"UPDATE Entry SET CATEGORY_ID = NULL WHERE CATEGORY_ID = :categoryId\")\n    fun deleteCategoryFromEntry(@Param(\"categoryId\") categoryId: Long)","prompt":""},{"id":2834,"identifierName":"name.gyger.jmoney.account.EntryRepository","requiredType":[],"content":"@Query(\"SELECT e FROM Entry e WHERE e.category.id = null AND e.splitEntry = null ORDER BY \" +\n            \"CASE WHEN e.date IS NULL THEN 0 ELSE 1 END, e.date DESC, e.creation DESC\")\n    fun getEntriesWithoutCategory(): List<Entry>","prompt":""},{"id":2835,"identifierName":"name.gyger.jmoney.account.EntryRepository","requiredType":[],"content":"@Query(\"SELECT e FROM Entry e WHERE e.category.id = :categoryId \" +\n            \"AND e.date >= :from AND e.date <= :to ORDER BY e.date DESC, e.creation DESC\")\n    fun getEntriesForCategory(@Param(\"categoryId\") categoryId: Long, @Param(\"from\") fromDate: Date?,\n                              @Param(\"to\") to: Date?): List<Entry>","prompt":""},{"id":2836,"identifierName":"name.gyger.jmoney.account.EntryRepository","requiredType":[],"content":"@Query(\"SELECT e FROM Entry e WHERE e.category.id = :categoryId \" +\n            \"ORDER BY CASE WHEN e.date IS NULL THEN 0 ELSE 1 END, e.date DESC, e.creation DESC\")\n    fun getInconsistentSplitEntries(@Param(\"categoryId\") categoryId: Long): List<Entry>","prompt":""},{"id":2837,"identifierName":"com.uncmorfi.models.ReservationDao","requiredType":[],"content":"@Query(\"SELECT * FROM reservations WHERE code LIKE :code\")\n    suspend fun getReservation(code: String): Reservation?","prompt":""},{"id":2838,"identifierName":"com.uncmorfi.models.ReservationDao","requiredType":[],"content":"@Query(\"SELECT * FROM cookies WHERE code_id LIKE :code\")\n    suspend fun getCookies(code: String): List<Cookie>","prompt":""},{"id":2839,"identifierName":"com.uncmorfi.models.ReservationDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertReserves(vararg reserve: Reservation)","prompt":""},{"id":2840,"identifierName":"com.uncmorfi.models.ReservationDao","requiredType":[],"content":"@Insert\n    suspend fun insertCookies(vararg cookies: Cookie)","prompt":""},{"id":2841,"identifierName":"com.uncmorfi.models.ReservationDao","requiredType":[],"content":"@Transaction\n    suspend fun insert(reserve: Reservation) {\n        insertReserves(reserve)\n        deleteCookies(reserve.code)\n        insertCookies(*reserve.cookies!!.toTypedArray())\n    }","prompt":""},{"id":2842,"identifierName":"com.uncmorfi.models.ReservationDao","requiredType":[],"content":"@Query(\"DELETE FROM reservations WHERE code LIKE :code\")\n    suspend fun delete(code: String)","prompt":""},{"id":2843,"identifierName":"com.uncmorfi.models.ReservationDao","requiredType":[],"content":"@Query(\"DELETE FROM cookies WHERE code_id LIKE :code\")\n    suspend fun deleteCookies(code: String)","prompt":""},{"id":2844,"identifierName":"com.emogoth.android.phone.mimi.db.dao.PostAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.POSTS_TABLE}\")\n    abstract fun getAll(): Flowable<List<Post>>","prompt":""},{"id":2845,"identifierName":"com.emogoth.android.phone.mimi.db.dao.PostAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.POSTS_TABLE} WHERE ${Post.THREAD_ID} = :threadId\")\n    abstract fun getThread(threadId: Long): Flowable<List<Post>>","prompt":""},{"id":2846,"identifierName":"com.emogoth.android.phone.mimi.db.dao.PostAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.POSTS_TABLE} WHERE ${Post.THREAD_ID} = ${Post.POST_ID}\")\n    abstract fun getFirstPosts(): Flowable<List<Post>>","prompt":""},{"id":2847,"identifierName":"com.emogoth.android.phone.mimi.db.dao.PostAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.POSTS_TABLE} WHERE ${Post.THREAD_ID} in (:ids)\")\n    abstract fun deleteThreads(ids: List<Long>)","prompt":""},{"id":2848,"identifierName":"com.emogoth.android.phone.mimi.db.dao.PostAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.POSTS_TABLE} WHERE ${Post.THREAD_ID} = :id\")\n    abstract fun deleteThread(id: Long)","prompt":""},{"id":2849,"identifierName":"com.emogoth.android.phone.mimi.db.dao.PostAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.POSTS_TABLE}\")\n    abstract fun clear()","prompt":""},{"id":2850,"identifierName":"com.codebutler.retrograde.metadata.ovgdb.db.dao.RomDao","requiredType":[],"content":"@Query(\"SELECT * FROM roms WHERE romFileName = :romFileName LIMIT 1\")\n    fun findByFileName(romFileName: String): Maybe<OvgdbRom>","prompt":""},{"id":2851,"identifierName":"com.codebutler.retrograde.metadata.ovgdb.db.dao.RomDao","requiredType":[],"content":"@Query(\"SELECT * FROM roms WHERE romHashCRC = :crc LIMIT 1\")\n    fun findByCRC(crc: String): Maybe<OvgdbRom>","prompt":""},{"id":2852,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `End` WHERE `roundId` = :roundId ORDER BY `index`\")\n    abstract fun loadEnds(roundId: Long): MutableList<End>","prompt":""},{"id":2853,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `EndImage` WHERE `endId` = :id\")\n    abstract fun loadEndImages(id: Long): List<EndImage>","prompt":""},{"id":2854,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `Shot` WHERE `endId` = :id ORDER BY `index`\")\n    abstract fun loadShots(id: Long): List<Shot>","prompt":""},{"id":2855,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertEnd(end: End): Long","prompt":""},{"id":2856,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Update\n    abstract fun updateEnd(end: End)","prompt":""},{"id":2857,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Update\n    abstract fun updateShots(shots: List<Shot>)","prompt":""},{"id":2858,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Transaction\n    open fun insertEnd(end: End, images: List<EndImage>, shots: List<Shot>) {\n        incrementIndices(end.index)\n        insertCompleteEnd(end, images, shots)\n    }","prompt":""},{"id":2859,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertEndImage(images: EndImage): Long","prompt":""},{"id":2860,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertShot(images: Shot): Long","prompt":""},{"id":2861,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Query(\"DELETE FROM `EndImage` WHERE `endId` = (:endId)\")\n    abstract fun deleteEndImages(endId: Long)","prompt":""},{"id":2862,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Transaction\n    open fun insertCompleteEnd(end: End, images: List<EndImage>, shots: List<Shot>) {\n        end.id = insertEnd(end)\n        for (image in images) {\n            image.endId = end.id\n            image.id = insertEndImage(image)\n        }\n\n        for (shot in shots) {\n            shot.endId = end.id\n            shot.id = insertShot(shot)\n        }\n    }","prompt":""},{"id":2863,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Transaction\n    open fun deleteEnd(end: End) {\n        deleteEndWithoutIndexUpdate(end)\n        decrementIndices(end.index)\n    }","prompt":""},{"id":2864,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Delete\n    abstract fun deleteEndWithoutIndexUpdate(end: End)","prompt":""},{"id":2865,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Query(\"UPDATE `End` SET `index` = `index` - 1 WHERE `index` > :allAboveIndex\")\n    abstract fun decrementIndices(allAboveIndex: Int)","prompt":""},{"id":2866,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Query(\"UPDATE `End` SET `index` = `index` + 1 WHERE `index` >= :allAboveIndex\")\n    abstract fun incrementIndices(allAboveIndex: Int)","prompt":""},{"id":2867,"identifierName":"de.dreier.mytargets.base.db.dao.EndDAO","requiredType":[],"content":"@Transaction\n    open fun replaceImages(end: End, images: List<EndImage>) {\n        deleteEndImages(end.id)\n        for (image in images) {\n            image.endId = end.id\n            image.id = insertEndImage(image)\n        }\n    }","prompt":""},{"id":2868,"identifierName":"androidx.work.impl.model.PreferenceDao","requiredType":[],"content":"/**\n     * Inserts a [Preference] into the database.\n     *\n     * @param preference The [Preference] entity to be inserted into the database\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertPreference(preference: Preference)","prompt":""},{"id":2869,"identifierName":"androidx.work.impl.model.PreferenceDao","requiredType":[],"content":"/**\n     * Fetches the value for the given [String] key.\n     *\n     * @param key The [String] key\n     * @return The value if present for the given [String] key\n     */\n    @Query(\"SELECT long_value FROM Preference where `key`=:key\")\n    fun getLongValue(key: String): Long?","prompt":""},{"id":2870,"identifierName":"androidx.work.impl.model.PreferenceDao","requiredType":[],"content":"/**\n     * Fetches a [LiveData] of [Long] for the given [String] key.\n     *\n     * @param key The [String] key\n     * @return The [LiveData] of  [Long] if present for the given\n     * [String] key\n     */\n    @Query(\"SELECT long_value FROM Preference where `key`=:key\")\n    fun getObservableLongValue(key: String): LiveData<Long?>","prompt":""},{"id":2871,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT * FROM channel_tags \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" ORDER BY tag_name\")\n    fun loadAllChannelTags(): LiveData<List<ChannelTagEntity>>","prompt":""},{"id":2872,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT * FROM channel_tags \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND channel_count > 0 \" +\n            \" ORDER BY tag_name\")\n    fun loadOnlyNonEmptyChannelTagsSync(): List<ChannelTagEntity>","prompt":""},{"id":2873,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT * FROM channel_tags \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" ORDER BY tag_name\")\n    fun loadAllChannelTagsSync(): List<ChannelTagEntity>","prompt":""},{"id":2874,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT * FROM channel_tags \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND id = :id \")\n    fun loadChannelTagByIdSync(id: Int): ChannelTagEntity?","prompt":""},{"id":2875,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Transaction\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(channelTag: ChannelTagEntity)","prompt":""},{"id":2876,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Transaction\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(items: List<ChannelTagEntity>)","prompt":""},{"id":2877,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Update\n    fun update(channelTags: List<ChannelTagEntity>)","prompt":""},{"id":2878,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Update\n    fun update(channelTags: ChannelTagEntity)","prompt":""},{"id":2879,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Delete\n    fun delete(channelTag: ChannelTagEntity)","prompt":""},{"id":2880,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Query(\"DELETE FROM channel_tags\")\n    fun deleteAll()","prompt":""},{"id":2881,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Query(\"DELETE FROM channel_tags \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND id = :id \")\n    fun deleteById(id: Int)","prompt":""},{"id":2882,"identifierName":"org.tvheadend.data.dao.ChannelTagDao","requiredType":[],"content":"@Query(\"SELECT id FROM channel_tags \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND is_selected = 1 \" +\n            \" ORDER BY tag_name\")\n    fun loadAllSelectedItemIds(): LiveData<List<Int>?>","prompt":""},{"id":2883,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"@Query(\"select * from Novel where bookshelf = 1 order by pinnedTime desc, max(receiveUpdateTime, readTime) desc\")\n    abstract fun listBookshelfOrderBySmart(): List<Novel>","prompt":""},{"id":2884,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"@Query(\"select * from Novel where bookshelf = 1 order by pinnedTime desc, readTime desc\")\n    abstract fun listBookshelfOrderByReadTime(): List<Novel>","prompt":""},{"id":2885,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"@Query(\"select * from Novel where bookshelf = 1 order by pinnedTime desc, receiveUpdateTime desc\")\n    abstract fun listBookshelfOrderByReceiveUpdateTime(): List<Novel>","prompt":""},{"id":2886,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"// 越晚加入的小说id越大，结果越靠前，\n    @Query(\"select * from Novel where bookshelf = 1 order by pinnedTime desc, id desc\")\n    abstract fun listBookshelfOrderById(): List<Novel>","prompt":""},{"id":2887,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"// 没有中文拼音排序，\n    @Query(\"select * from Novel where bookshelf = 1 order by pinnedTime desc, name \")\n    abstract fun listBookshelfOrderByName(): List<Novel>","prompt":""},{"id":2888,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"@Query(\"select * from Novel where bookshelf = 1 order by pinnedTime desc, author \")\n    abstract fun listBookshelfOrderByAuthor(): List<Novel>","prompt":""},{"id":2889,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"@Query(\"select * from Novel where bookshelf = 1 order by pinnedTime desc, site \")\n    abstract fun listBookshelfOrderBySite(): List<Novel>","prompt":""},{"id":2890,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"update Novel set bookshelf = :bookshelf where id = :id\")\n    abstract fun updateBookshelf(id: Long, bookshelf: Boolean)","prompt":""},{"id":2891,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"/**\n     * 返回非空，所以传入的id不能是不存在的，\n     */\n    @Query(\"select * from Novel where id = :id\")\n    abstract fun query(id: Long): Novel","prompt":""},{"id":2892,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"select * from Novel where site = :site and author = :author and name = :name\")\n    abstract fun query(site: String, author: String, name: String): Novel?","prompt":""},{"id":2893,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"select * from Novel where site = :site and detail = :detail\")\n    abstract fun query(site: String, detail: String): Novel?","prompt":""},{"id":2894,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"@Query(\"select Novel.* from Novel left join (select * from BookListItem group by novelId) as BookListItem on BookListItem.novelId = Novel.id where bookListId notnull or bookshelf = 1\")\n    abstract fun listImportant(): List<Novel>","prompt":""},{"id":2895,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"update Novel set name = :name, author = :author, detail = :detail, image = :image, introduction = :introduction, updateTime = :updateTime, chapters = :chapters where id = :id\")\n    abstract fun updateNovelDetail(id: Long, name: String, author: String, detail: String, image: String, introduction: String, updateTime: Date, chapters: String)","prompt":""},{"id":2896,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"update Novel set chaptersCount = :chaptersCount, readAtChapterName = :readAtChapterName, lastChapterName = :lastChapterName, updateTime = :updateTime, checkUpdateTime = :checkUpdateTime, receiveUpdateTime = :receiveUpdateTime where id = :id\")\n    abstract fun updateChapters(\n            id: Long, chaptersCount: Int,\n            readAtChapterName: String, lastChapterName: String,\n            updateTime: Date, checkUpdateTime: Date, receiveUpdateTime: Date\n    )","prompt":""},{"id":2897,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"/**\n     * 插入前都有查询，所以不用在插入失败时尝试更新，\n     * 返回id, 要赋值回novel,\n     */\n    @Insert\n    abstract fun insert(novel: Novel): Long","prompt":""},{"id":2898,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"update Novel set pinnedTime = :pinnedTime where id = :id\")\n    abstract fun updatePinnedTime(id: Long, pinnedTime: Date)","prompt":""},{"id":2899,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"update Novel set readAtChapterIndex = :readAtChapterIndex, readAtTextIndex = :readAtTextIndex, readAtChapterName = :readAtChapterName, readTime = :readTime, pinnedTime = :pinnedTime where id = :id\")\n    abstract fun updateReadStatus(id: Long, readAtChapterIndex: Int, readAtTextIndex: Int, readAtChapterName: String, readTime: Date, pinnedTime: Date)","prompt":""},{"id":2900,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"// 筛阅读时间，不能是最小值，考虑到时区，无论怎么处理，给个一天的限制没问题，\n    @Query(\"select * from Novel where readTime > 86400000 order by readTime desc limit :count\")\n    abstract fun history(count: Int): List<Novel>","prompt":""},{"id":2901,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"update Novel set bookshelf = 0\")\n    abstract fun cleanBookshelf()","prompt":""},{"id":2902,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"update Novel set readTime = 0\")\n    abstract fun cleanHistory()","prompt":""},{"id":2903,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"update Novel set detail = :detail where id = :id\")\n    abstract fun updateDetailOnly(id: Long, detail: String)","prompt":""},{"id":2904,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"@Query(\"select * from Novel where bookshelf = 1 and receiveUpdateTime > readTime order by receiveUpdateTime desc\")\n    abstract fun hasUpdateNovelList(): List<Novel>","prompt":""},{"id":2905,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":[],"content":"@Query(\"select count(*) from Novel limit 1\")\n    abstract fun isNotEmpty(): Boolean","prompt":""},{"id":2906,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"@Delete\n    abstract fun delete(novel: Novel)","prompt":""},{"id":2907,"identifierName":"cc.aoeiuv020.panovel.data.dao.NovelDao","requiredType":["data class Novel( /** * 普通的id, * 要给个null才能autoGenerate， * 插入时拿到id再赋值回来，所以要可变var， */ @PrimaryKey(autoGenerate = true) var id: Long? = null, /** * 网站名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * 不外键到网站表，那张表不稳定， * * 点.开头的表示本地小说，带上格式，比如\".txt\"\".epub\", */ var site: String, /** * 作者名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var author: String, /** * 小说名， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], */ var name: String, /** * 用于请求小说详情页的额外信息， * 必须存在，不可空，一本小说至少要有[\"site\", \"author“， ”name\", \"detail\"], * [cc.aoeiuv020.panovel.api.NovelItem.extra] */ var detail: String, /** * 阅读进度， * 阅读至的章节索引， */ var readAtChapterIndex: Int = 0, /** * 章节内的阅读进度， * 看到第几页或者第几个字，具体没决定， */ var readAtTextIndex: Int = 0, /** * 是否在书架上，sqlite没有分区，只建个索引， */ var bookshelf: Boolean = false, /** * 章节数， */ var chaptersCount: Int = 0, /** * 图片地址，没有图片的统一填充一张写着没有封面的图片地址，不可空， * 默认一样统一填充一张写着没有封面的图片地址，不空， * 然后展示时判断，是noCover就填充内置的暂无封面的封面， * 直接改成可空更好，但是sqlite不能改字段， */ var image: String = noCover, /** * 简介，获取后如果小说没有简介，留空白或者字符串null，不可空， */ var introduction: String = VALUE_NULL, /** * 用于请求小说章节列表的extra, 获取小说详情后不可空， * 不能给默认值，要留着判断是否需要请求小说详情页， * [cc.aoeiuv020.panovel.api.NovelDetail.extra] * * 对于本地线文本小说就是编码， */ var chapters: String? = null, /** * 最新章节名, 刷新章节列表时更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var lastChapterName: String = VALUE_NULL, /** * 阅读进度章节名, 阅读后更新， * 这个章节名只用于展示，所以可以给个默认空字符串， */ var readAtChapterName: String = VALUE_NULL, /** * 上次阅读时间，在阅读后更新， * 时间只用于对比和展示，没阅读过就是默认最小时间， */ var readTime: Date = Date(0), /** * 最新更新时间, 也就是最新一章更新的时间，刷新章节列表如果存在这个时间就更新， * 可能不打算用这个字段，判断是否更新应该用[receiveUpdateTime]比较靠谱， * 刷新详情或者章节可能并不返回更新时间，可能只有null, 非空就覆盖这个字段， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var updateTime: Date = Date(0), /** * 检查更新时间, 也就是这个时间之前的更新是已知的，不论有无更新， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var checkUpdateTime: Date = Date(0), /** * 拿到上一个更新的时间, 也就是上次刷出更新的[checkUpdateTime], * 是否刷出更新只判断章节数量， * * 用来对比阅读时间就知道是否是已读了， * 时间只用于对比和展示，没刷新过章节就是默认最小时间， */ var receiveUpdateTime: Date = Date(0), /** * 置顶时间，书架按这个排序， * 不置顶的给个最小时间， * 不过这样不好判断是否置顶，对比0时间的话，可能有时区问题， * 没法设置个按钮置顶时显示取消置顶， */ var pinnedTime: Date = Date(0) )"],"content":"@Update\n    abstract fun update(novel: Novel)","prompt":""},{"id":2908,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE id = :id\")\n    override fun findById(id: Long): TemporaryBasal?","prompt":""},{"id":2909,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_TEMPORARY_BASALS\")\n    override fun deleteAllEntries()","prompt":""},{"id":2910,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT id FROM $TABLE_TEMPORARY_BASALS ORDER BY id DESC limit 1\")\n    fun getLastId(): Maybe<Long>","prompt":""},{"id":2911,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE temporaryId = :temporaryId\")\n    fun findByTempId(temporaryId: Long): TemporaryBasal?","prompt":""},{"id":2912,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE timestamp = :timestamp AND referenceId IS NULL\")\n    fun findByTimestamp(timestamp: Long): TemporaryBasal?","prompt":""},{"id":2913,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE pumpId = :pumpId AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL\")\n    fun findByPumpIds(pumpId: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): TemporaryBasal?","prompt":""},{"id":2914,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE endId = :endPumpId AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL\")\n    fun findByPumpEndIds(endPumpId: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): TemporaryBasal?","prompt":""},{"id":2915,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE nightscoutId = :nsId AND referenceId IS NULL\")\n    fun findByNSId(nsId: String): TemporaryBasal?","prompt":""},{"id":2916,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE temporaryId = :temporaryId AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL\")\n    fun findByPumpTempIds(temporaryId: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): TemporaryBasal?","prompt":""},{"id":2917,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE timestamp <= :timestamp AND (timestamp + duration) > :timestamp AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL AND isValid = 1 ORDER BY timestamp DESC LIMIT 1\")\n    fun getTemporaryBasalActiveAt(timestamp: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): Maybe<TemporaryBasal>","prompt":""},{"id":2918,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE timestamp <= :timestamp AND (timestamp + duration) > :timestamp AND referenceId IS NULL AND isValid = 1 ORDER BY timestamp DESC LIMIT 1\")\n    fun getTemporaryBasalActiveAt(timestamp: Long): Maybe<TemporaryBasal>","prompt":""},{"id":2919,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE timestamp <= :to AND (timestamp + duration) > :from AND referenceId IS NULL AND isValid = 1 ORDER BY timestamp DESC\")\n    fun getTemporaryBasalActiveBetweenTimeAndTime(from: Long, to: Long): Single<List<TemporaryBasal>>","prompt":""},{"id":2920,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE timestamp >= :timestamp AND isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTemporaryBasalDataFromTime(timestamp: Long): Single<List<TemporaryBasal>>","prompt":""},{"id":2921,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE timestamp >= :from AND timestamp <= :to AND isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTemporaryBasalDataFromTimeToTime(from: Long, to: Long): Single<List<TemporaryBasal>>","prompt":""},{"id":2922,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE timestamp >= :timestamp AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTemporaryBasalDataIncludingInvalidFromTime(timestamp: Long): Single<List<TemporaryBasal>>","prompt":""},{"id":2923,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE timestamp >= :from AND timestamp <= :to AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTemporaryBasalDataIncludingInvalidFromTimeToTime(from: Long, to: Long): Single<List<TemporaryBasal>>","prompt":""},{"id":2924,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE isValid = 1 AND referenceId IS NULL ORDER BY timestamp ASC\")\n    fun getTemporaryBasalData(): Single<List<TemporaryBasal>>","prompt":""},{"id":2925,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE referenceId = :id ORDER BY id DESC LIMIT 1\")\n    fun getLastHistoryRecord(id: Long): TemporaryBasal?","prompt":""},{"id":2926,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"// This query will be used with v3 to get all changed records\n    @Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE id > :id AND referenceId IS NULL OR id IN (SELECT DISTINCT referenceId FROM $TABLE_TEMPORARY_BASALS WHERE id > :id) ORDER BY id ASC\")\n    fun getModifiedFrom(id: Long): Single<List<TemporaryBasal>>","prompt":""},{"id":2927,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"// for WS we need 1 record only\n    @Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE id > :id ORDER BY id ASC limit 1\")\n    fun getNextModifiedOrNewAfter(id: Long): Maybe<TemporaryBasal>","prompt":""},{"id":2928,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE id = :referenceId\")\n    fun getCurrentFromHistoric(referenceId: Long): Maybe<TemporaryBasal>","prompt":""},{"id":2929,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE isValid = 1 AND referenceId IS NULL ORDER BY id ASC LIMIT 1\")\n    fun getOldestRecord(): TemporaryBasal?","prompt":""},{"id":2930,"identifierName":"info.nightscout.androidaps.database.daos.TemporaryBasalDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TEMPORARY_BASALS WHERE dateCreated > :since AND dateCreated <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<TemporaryBasal>","prompt":""},{"id":2931,"identifierName":"six.ca.droiddailyproject.arch.db.migration.UserDao","requiredType":["data class User(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"uid\") val uid: Int, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"age\") val age: Int = 0)"],"content":"@Query(\"SELECT * FROM user\")\n    fun getUserList(): List<User>","prompt":""},{"id":2932,"identifierName":"six.ca.droiddailyproject.arch.db.migration.UserDao","requiredType":["data class User(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"uid\") val uid: Int, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"age\") val age: Int = 0)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertUser(newUser: User): Long","prompt":""},{"id":2933,"identifierName":"six.ca.droiddailyproject.arch.db.migration.UserDao","requiredType":["data class User(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"uid\") val uid: Int, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"age\") val age: Int = 0)"],"content":"@Update\n    fun updateUser(user: User): Int","prompt":""},{"id":2934,"identifierName":"six.ca.droiddailyproject.arch.db.migration.UserDao","requiredType":["data class User(@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"uid\") val uid: Int, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"age\") val age: Int = 0)"],"content":"@Delete\n    fun deleteUser(user: User): Int","prompt":""},{"id":2935,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryQueryDao","requiredType":["data class EntityChangeEvent( val type: Type, val packageName: String?, val activityName: String?, val whitelisted: Boolean )"],"content":"override fun subscribeToUpdates(): Observable<EntityChangeEvent> {\n    throw RuntimeException(\n        \"The DbEntryQueryDao does not power this subscribeToUpdates() method. See PadLockDbImpl.\"\n    )\n  }","prompt":""},{"id":2936,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryQueryDao","requiredType":[],"content":"override fun queryAll(): Single<List<AllEntriesModel>> {\n    return daoQueryAll()\n        .toSingle(emptyList())\n        .map { it }\n  }","prompt":""},{"id":2937,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryQueryDao","requiredType":[],"content":"@Query(\n      \"SELECT ${PadLockEntryDb.COLUMN_PACKAGE_NAME}, ${PadLockEntryDb.COLUMN_ACTIVITY_NAME}, ${PadLockEntryDb.COLUMN_WHITELIST} FROM ${PadLockEntryDb.TABLE_NAME}\"\n  )\n  // We intentionally do not ask for everything\n  @SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)\n  @CheckResult\n  internal abstract fun daoQueryAll(): Maybe<List<PadLockEntryDb>>","prompt":""},{"id":2938,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryQueryDao","requiredType":[],"content":"override fun queryWithPackageName(packageName: String): Single<List<WithPackageNameModel>> {\n    return daoQueryWithPackageName(packageName)\n        .toSingle(emptyList())\n        .map { it }\n  }","prompt":""},{"id":2939,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryQueryDao","requiredType":[],"content":"@Query(\n      \"SELECT ${PadLockEntryDb.COLUMN_PACKAGE_NAME}, ${PadLockEntryDb.COLUMN_ACTIVITY_NAME}, ${PadLockEntryDb.COLUMN_WHITELIST} FROM ${PadLockEntryDb.TABLE_NAME} WHERE ${PadLockEntryDb.COLUMN_PACKAGE_NAME} = :packageName\"\n  )\n  // We intentionally do not ask for everything\n  @SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)\n  @CheckResult\n  internal abstract fun daoQueryWithPackageName(packageName: String): Maybe<List<PadLockEntryDb>>","prompt":""},{"id":2940,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryQueryDao","requiredType":["data class PadLockEntryModelnull"],"content":"override fun queryWithPackageActivityName(\n    packageName: String,\n    activityName: String\n  ): Single<PadLockEntryModel> {\n    return daoQueryWithPackageActivityName(\n        packageName, activityName, PadLockDbModels.PACKAGE_ACTIVITY_NAME\n    )\n        .firstOrError()\n        .map { it }\n  }","prompt":""},{"id":2941,"identifierName":"com.pyamsoft.padlock.base.database.DbEntryQueryDao","requiredType":[],"content":"@Query(\n      \"SELECT * FROM ${PadLockEntryDb.TABLE_NAME} WHERE ${PadLockEntryDb.COLUMN_PACKAGE_NAME} = :packageName AND (${PadLockEntryDb.COLUMN_ACTIVITY_NAME} = :defaultPackageActivityName OR ${PadLockEntryDb.COLUMN_ACTIVITY_NAME} = :activityName) ORDER BY CASE WHEN ${PadLockEntryDb.COLUMN_ACTIVITY_NAME} = :defaultPackageActivityName THEN 1 WHEN ${PadLockEntryDb.COLUMN_ACTIVITY_NAME} = :activityName THEN 0 END ASC LIMIT 1\"\n  )\n  @CheckResult\n  internal abstract fun daoQueryWithPackageActivityName(\n    packageName: String,\n    activityName: String,\n    defaultPackageActivityName: String\n  ): Flowable<PadLockEntryDb>","prompt":""},{"id":2942,"identifierName":"org.fossasia.openevent.general.auth.UserDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertUser(user: User)","prompt":""},{"id":2943,"identifierName":"org.fossasia.openevent.general.auth.UserDao","requiredType":[],"content":"@Query(\"DELETE FROM User WHERE id = :id\")\n    fun deleteUser(id: Long)","prompt":""},{"id":2944,"identifierName":"org.fossasia.openevent.general.auth.UserDao","requiredType":[],"content":"@Query(\"SELECT * from User WHERE id = :id\")\n    fun getUser(id: Long): Single<User>","prompt":""},{"id":2945,"identifierName":"com.sbgapps.scoreit.cache.db.PlayerDao","requiredType":[],"content":"@Query(\"SELECT * FROM players WHERE gameId = :gameId\")\n    fun getPlayers(gameId: Long): List<PlayerData>","prompt":""},{"id":2946,"identifierName":"com.sbgapps.scoreit.cache.db.PlayerDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun savePlayer(player: PlayerData)","prompt":""},{"id":2947,"identifierName":"com.sbgapps.scoreit.cache.db.PlayerDao","requiredType":[],"content":"@Update\n    fun updatePlayer(player: PlayerData)","prompt":""},{"id":2948,"identifierName":"com.afterroot.allusive2.database.PointerDao","requiredType":[],"content":"@Query(\"SELECT * FROM pointers ORDER BY pointer_name\")\n    fun getAll(): LiveData<List<RoomPointer>>","prompt":""},{"id":2949,"identifierName":"com.afterroot.allusive2.database.PointerDao","requiredType":["data class RoomPointer( @PrimaryKey(autoGenerate = true) @ColumnInfo(index = true, name = BaseColumns._ID) val id: Int = 0, @ColumnInfo val pointer_name: String?, @ColumnInfo val file_name: String?, @ColumnInfo val pointer_desc: String?, @ColumnInfo val uploader_id: String, @ColumnInfo val uploader_name: String )"],"content":"@Insert\n    suspend fun add(vararg pointer: RoomPointer)","prompt":""},{"id":2950,"identifierName":"com.afterroot.allusive2.database.PointerDao","requiredType":["data class RoomPointer( @PrimaryKey(autoGenerate = true) @ColumnInfo(index = true, name = BaseColumns._ID) val id: Int = 0, @ColumnInfo val pointer_name: String?, @ColumnInfo val file_name: String?, @ColumnInfo val pointer_desc: String?, @ColumnInfo val uploader_id: String, @ColumnInfo val uploader_name: String )"],"content":"@Delete\n    suspend fun delete(pointer: RoomPointer)","prompt":""},{"id":2951,"identifierName":"com.afterroot.allusive2.database.PointerDao","requiredType":["data class RoomPointer( @PrimaryKey(autoGenerate = true) @ColumnInfo(index = true, name = BaseColumns._ID) val id: Int = 0, @ColumnInfo val pointer_name: String?, @ColumnInfo val file_name: String?, @ColumnInfo val pointer_desc: String?, @ColumnInfo val uploader_id: String, @ColumnInfo val uploader_name: String )"],"content":"@Query(\"SELECT * FROM pointers WHERE file_name LIKE :fileName\")\n    suspend fun exists(fileName: String): List<RoomPointer>","prompt":""},{"id":2952,"identifierName":"com.afterroot.allusive2.database.MyDatabase","requiredType":[],"content":"abstract fun pointerDao(): PointerDao","prompt":""},{"id":2953,"identifierName":"com.ak47.cms.cms.dao.FocusLiveNewsRepository","requiredType":[],"content":"@Query(\"select count(*) from focus_live_news where item_id = :item_id\", nativeQuery = true)\n    fun countByItemId(@Param(\"item_id\") item_id: String): Int","prompt":""},{"id":2954,"identifierName":"com.ak47.cms.cms.dao.FocusLiveNewsRepository","requiredType":[],"content":"@Query(\"SELECT a from #{#entityName} a  where a.type = :type   order by a.display_time desc\")\n    fun findFocusLiveNewsPage(@Param(\"type\") type: String, pageable: Pageable): Page<FocusLiveNews>","prompt":""},{"id":2955,"identifierName":"com.ak47.cms.cms.dao.FocusLiveNewsRepository","requiredType":[],"content":"@Modifying\n    @Transactional\n    @Query(\"delete from focus_live_news where item_id = :item_id\", nativeQuery = true)\n    fun deleteFocusLiveNewsByItemId(@Param(\"item_id\") item_id: String): Int","prompt":""},{"id":2956,"identifierName":"com.ayatk.biblio.infrastructure.database.dao.IndexDao","requiredType":[],"content":"@Query(\"SELECT * FROM `index` WHERE novel_code = :code\")\n  fun getAllIndexByCode(code: String): Flowable<List<IndexEntity>>","prompt":""},{"id":2957,"identifierName":"com.ayatk.biblio.infrastructure.database.dao.IndexDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insert(indexes: List<IndexEntity>)","prompt":""},{"id":2958,"identifierName":"com.ayatk.biblio.infrastructure.database.dao.IndexDao","requiredType":[],"content":"@Delete\n  fun delete(indexes: List<IndexEntity>)","prompt":""},{"id":2959,"identifierName":"io.github.sdsstudios.ScoreKeeper.Database.Dao.ScoresDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_NAME WHERE $KEY_GAME_ID IN (:arg0)\")\n    abstract fun deleteByGameId(vararg ids: Long)","prompt":""},{"id":2960,"identifierName":"io.github.sdsstudios.ScoreKeeper.Database.Dao.ScoresDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_NAME WHERE $KEY_GAME_ID IN (:arg1) AND $KEY_PLAYER_ID IN (:arg0)\")\n    abstract fun deleteByPlayerAndGameId(playerId: Long, gameId: Long)","prompt":""},{"id":2961,"identifierName":"com.pluscubed.velociraptor.api.cache.WayDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun put(ways: List<Way>): List<Long>","prompt":""},{"id":2962,"identifierName":"com.pluscubed.velociraptor.api.cache.WayDao","requiredType":[],"content":"// https://stackoverflow.com/a/39298241\n    @Transaction\n    @Query(\n            \"\"\"\n        SELECT * FROM way\n        WHERE clat between :lat - 0.01 and :lat + 0.01 and clon between :lon - 0.01 and :lon + 0.01\n        ORDER BY ((:lat - clat)*(:lat - clat) + ((:lon - clon)*(:lon - clon)* :coslat2)) ASC\n        LIMIT 10\n        \"\"\"\n    )\n    fun selectByCoord(lat: Double, coslat2: Double, lon: Double): List<Way>","prompt":""},{"id":2963,"identifierName":"com.pluscubed.velociraptor.api.cache.WayDao","requiredType":[],"content":"@Query(\n            \"\"\"\n        DELETE FROM way\n        WHERE :timestamp - timestamp >  604800000;\n    \"\"\"\n    )\n    fun cleanup(timestamp: Long)","prompt":""},{"id":2964,"identifierName":"com.pluscubed.velociraptor.api.cache.WayDao","requiredType":[],"content":"@Query(\"DELETE FROM way\")\n    fun clear()","prompt":""},{"id":2965,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.franchise.RoomCollectionService","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(data: RoomCollection): Long","prompt":""},{"id":2966,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.franchise.RoomCollectionService","requiredType":[],"content":"@Query(\"select collection.* from collection \" +\n            \"LEFT JOIN game_collection ON collection.id = game_collection.collectionId \" +\n            \"WHERE game_collection.gameId = :id\")\n    fun findForGame(id: Int): Flowable<List<RoomCollection>>","prompt":""},{"id":2967,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.franchise.RoomCollectionService","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertGameCollection(data: RoomGameCollection): Long","prompt":""},{"id":2968,"identifierName":"com.nicoladefiorenze.room.database.dao.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user\")\n    fun getAll(): List<User>","prompt":""},{"id":2969,"identifierName":"com.nicoladefiorenze.room.database.dao.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user\")\n    fun getAllWithObservables(): Flowable<List<User>>","prompt":""},{"id":2970,"identifierName":"com.nicoladefiorenze.room.database.dao.UserDao","requiredType":[],"content":"@Insert\n    fun insertAll(vararg users: User)","prompt":""},{"id":2971,"identifierName":"com.nicoladefiorenze.room.database.dao.UserDao","requiredType":[],"content":"@Delete\n    fun delete(user: User)","prompt":""},{"id":2972,"identifierName":"org.tasks.data.TaskAttachmentDao","requiredType":[],"content":"@Query(\"SELECT * FROM attachment WHERE task = :task\")\n    suspend fun getAttachmentsForTask(task: Long): List<Attachment>","prompt":""},{"id":2973,"identifierName":"org.tasks.data.TaskAttachmentDao","requiredType":[],"content":"@Query(\"SELECT attachment_file.* FROM attachment_file INNER JOIN attachment ON attachment_file.file_uuid = attachment.file_uuid WHERE task = :task\")\n    suspend fun getAttachments(task: Long): List<TaskAttachment>","prompt":""},{"id":2974,"identifierName":"org.tasks.data.TaskAttachmentDao","requiredType":[],"content":"@Query(\"SELECT * FROM attachment_file\")\n    suspend fun getAttachments(): List<TaskAttachment>","prompt":""},{"id":2975,"identifierName":"org.tasks.data.TaskAttachmentDao","requiredType":[],"content":"@Query(\"SELECT * FROM attachment_file WHERE file_uuid = :remoteId\")\n    suspend fun getAttachment(remoteId: String): TaskAttachment?","prompt":""},{"id":2976,"identifierName":"org.tasks.data.TaskAttachmentDao","requiredType":[],"content":"@Query(\"DELETE FROM attachment WHERE task = :taskId AND file_uuid = :attachment\")\n    suspend fun delete(taskId: Long, attachment: String)","prompt":""},{"id":2977,"identifierName":"org.tasks.data.TaskAttachmentDao","requiredType":[],"content":"@Query(\"DELETE FROM attachment WHERE task = :taskId AND file_uuid IN (:attachments)\")\n    suspend fun delete(taskId: Long, attachments: List<String>)","prompt":""},{"id":2978,"identifierName":"org.tasks.data.TaskAttachmentDao","requiredType":[],"content":"@Insert\n    suspend fun insert(attachments: List<Attachment>)","prompt":""},{"id":2979,"identifierName":"org.tasks.data.TaskAttachmentDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(attachment: TaskAttachment)","prompt":""},{"id":2980,"identifierName":"org.tasks.data.TaskAttachmentDao","requiredType":[],"content":"@Update\n    suspend fun update(attachment: TaskAttachment)","prompt":""},{"id":2981,"identifierName":"org.tasks.data.TaskAttachmentDao","requiredType":[],"content":"@Delete\n    fun delete(value: List<TaskAttachment>)","prompt":""},{"id":2982,"identifierName":"io.github.rosariopfernandes.rollapass.dao.WordDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun createWords(words: List<Word>)","prompt":""},{"id":2983,"identifierName":"io.github.rosariopfernandes.rollapass.dao.WordDao","requiredType":[],"content":"@Query(\"SELECT * FROM Word\")\n    fun getWords(): LiveData<List<Word>>","prompt":""},{"id":2984,"identifierName":"us.mikeandwan.photos.database.AuthorizationDao","requiredType":[],"content":"@Query(\"SELECT * FROM authorization WHERE id = :id\")\n    fun getAuthorization(id: Int): Flow<Authorization?>","prompt":""},{"id":2985,"identifierName":"us.mikeandwan.photos.database.AuthorizationDao","requiredType":[],"content":"@Query(\"DELETE FROM authorization WHERE id = :id\")\n    suspend fun deleteAuthorization(id: Int)","prompt":""},{"id":2986,"identifierName":"us.mikeandwan.photos.database.AuthorizationDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun setAuthorization(authorization: Authorization)","prompt":""},{"id":2987,"identifierName":"com.google.android.gms.location.sample.locationupdatesbackgroundkotlin.data.db.MyLocationDao","requiredType":[],"content":"@Query(\"SELECT * FROM my_location_table ORDER BY date DESC\")\n    fun getLocations(): LiveData<List<MyLocationEntity>>","prompt":""},{"id":2988,"identifierName":"com.google.android.gms.location.sample.locationupdatesbackgroundkotlin.data.db.MyLocationDao","requiredType":[],"content":"@Query(\"SELECT * FROM my_location_table WHERE id=(:id)\")\n    fun getLocation(id: UUID): LiveData<MyLocationEntity>","prompt":""},{"id":2989,"identifierName":"com.google.android.gms.location.sample.locationupdatesbackgroundkotlin.data.db.MyLocationDao","requiredType":[],"content":"@Update\n    fun updateLocation(myLocationEntity: MyLocationEntity)","prompt":""},{"id":2990,"identifierName":"com.google.android.gms.location.sample.locationupdatesbackgroundkotlin.data.db.MyLocationDao","requiredType":[],"content":"@Insert\n    fun addLocation(myLocationEntity: MyLocationEntity)","prompt":""},{"id":2991,"identifierName":"com.google.android.gms.location.sample.locationupdatesbackgroundkotlin.data.db.MyLocationDao","requiredType":[],"content":"@Insert\n    fun addLocations(myLocationEntities: List<MyLocationEntity>)","prompt":""},{"id":2992,"identifierName":"androidx.paging.samples.shared.RemoteKeyDao","requiredType":[],"content":"// Normally suspend when using Kotlin Coroutines, but sync version allows this Dao to be used\n    // in both Java and Kotlin samples.\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertOrReplace(remoteKey: RemoteKey)","prompt":""},{"id":2993,"identifierName":"androidx.paging.samples.shared.RemoteKeyDao","requiredType":[],"content":"@Query(\"SELECT * FROM remote_keys WHERE label = :query\")\n    fun remoteKeyByQuery(query: String): RemoteKey","prompt":""},{"id":2994,"identifierName":"androidx.paging.samples.shared.RemoteKeyDao","requiredType":[],"content":"@Query(\"SELECT * FROM remote_keys WHERE label = :query\")\n    fun remoteKeyByQuerySingle(query: String): Single<RemoteKey>","prompt":""},{"id":2995,"identifierName":"androidx.paging.samples.shared.RemoteKeyDao","requiredType":[],"content":"@Query(\"SELECT * FROM remote_keys WHERE label = :query\")\n    fun remoteKeyByQueryFuture(query: String): ListenableFuture<RemoteKey>","prompt":""},{"id":2996,"identifierName":"androidx.paging.samples.shared.RemoteKeyDao","requiredType":[],"content":"// Normally suspend when using Kotlin Coroutines, but sync version allows this Dao to be used\n    // in both Java and Kotlin samples.\n    @Query(\"DELETE FROM remote_keys WHERE label = :query\")\n    fun deleteByQuery(query: String)","prompt":""},{"id":2997,"identifierName":"androidx.room.integration.kotlintestapp.dao.DerivedDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Query(\"SELECT * FROM author WHERE authorId = :authorId\")\n    fun getAuthor(authorId: String): Author","prompt":""},{"id":2998,"identifierName":"androidx.room.integration.kotlintestapp.dao.DerivedDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Transaction\n    suspend fun insertAndDelete(author: Author) {\n        suspendInsert(author)\n        suspendDelete(author)\n    }","prompt":""},{"id":2999,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Inserts the carId and its escrow token into the database. */\n  @Insert(entity = Credential::class, onConflict = OnConflictStrategy.REPLACE)\n  suspend fun storeToken(tokenAndId: TokenAndId)","prompt":""},{"id":3000,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Updates the [carId] with its handle. Returns the number of record updated. */\n  @Update(entity = Credential::class) suspend fun storeHandle(handleAndId: HandleAndId): Int","prompt":""},{"id":3001,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Returns the credential for [carId]; `null` if [carId] does not exist in the database. */\n  @Query(\"SELECT * FROM credentials WHERE carId = :carId\")\n  suspend fun getCredential(carId: UUID): Credential?","prompt":""},{"id":3002,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Returns the escrow token for [carId]; `null` if [carId] does not exist in the database. */\n  @Query(\"SELECT token FROM credentials WHERE carId = :carId\")\n  suspend fun getToken(carId: UUID): ByteArray?","prompt":""},{"id":3003,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Deletes stored data for the given [carId]. */\n  @Query(\"DELETE FROM credentials WHERE carId = :carId\") suspend fun clearCredential(carId: UUID)","prompt":""},{"id":3004,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Deletes unlock history for the given [carId]. */\n  @Query(\"DELETE FROM unlock_history WHERE carId = :carId\")\n  suspend fun clearUnlockHistory(carId: UUID)","prompt":""},{"id":3005,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Deletes all stored credentials. */\n  @Query(\"DELETE FROM credentials\") suspend fun clearAllCredentials()","prompt":""},{"id":3006,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Deletes all stored unlock history. */\n  @Query(\"DELETE FROM unlock_history\") suspend fun clearAllUnlockHistory()","prompt":""},{"id":3007,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Inserts a [UnlockHistory] into the database. */\n  @Insert suspend fun storeUnlockHistory(unlockHistory: UnlockHistory)","prompt":""},{"id":3008,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Deletes unlock history for the given [carId] that are older than [cutoff]. */\n  @Query(\"DELETE FROM unlock_history WHERE carId = :carId AND instant < :cutoff\")\n  suspend fun clearUnlockHistoryBefore(carId: UUID, cutoff: Instant)","prompt":""},{"id":3009,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Returns the unlock history for the given [carId]. */\n  @Query(\"SELECT * FROM unlock_history WHERE carId = :carId\")\n  suspend fun getUnlockHistory(carId: UUID): List<UnlockHistory>","prompt":""},{"id":3010,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Inserts the given feature state sync message to send to the `carId` into the database. */\n  @Insert(entity = FeatureState::class, onConflict = OnConflictStrategy.REPLACE)\n  suspend fun storeFeatureState(stateAndId: StateAndId)","prompt":""},{"id":3011,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/**\n   * Returns any feature state sync messages that should be sent to the car with the given [carId].\n   */\n  @Query(\"SELECT * FROM feature_state WHERE carId = :carId\")\n  suspend fun getFeatureState(carId: UUID): FeatureState?","prompt":""},{"id":3012,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Deletes any stored feature state sync messages for a car with the given [carId]. */\n  @Query(\"DELETE FROM feature_state WHERE carId = :carId\")\n  suspend fun clearFeatureState(carId: UUID)","prompt":""},{"id":3013,"identifierName":"com.google.android.libraries.car.trusteddevice.storage.TrustedDeviceDao","requiredType":[],"content":"/** Deletes all stored feature state sync messages. */\n  @Query(\"DELETE FROM feature_state\") suspend fun clearAllFeatureState()","prompt":""},{"id":3014,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Query(\"SELECT * FROM shows WHERE trakt_id = :id\")\n    abstract suspend fun getShowWithTraktId(id: Int): TiviShow?","prompt":""},{"id":3015,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Query(\"SELECT * FROM shows WHERE id IN (:ids)\")\n    abstract fun getShowsWithIds(ids: List<Long>): Flow<List<TiviShow>>","prompt":""},{"id":3016,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Query(\"SELECT * FROM shows WHERE tmdb_id = :id\")\n    abstract suspend fun getShowWithTmdbId(id: Int): TiviShow?","prompt":""},{"id":3017,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":["data class TiviShow( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") override val id: Long = 0, @ColumnInfo(name = \"title\") val title: String? = null, @ColumnInfo(name = \"original_title\") val originalTitle: String? = null, @ColumnInfo(name = \"trakt_id\") override val traktId: Int? = null, @ColumnInfo(name = \"tmdb_id\") override val tmdbId: Int? = null, @ColumnInfo(name = \"imdb_id\") val imdbId: String? = null, @ColumnInfo(name = \"overview\") val summary: String? = null, @ColumnInfo(name = \"homepage\") val homepage: String? = null, @ColumnInfo(name = \"trakt_rating\") val traktRating: Float? = null, @ColumnInfo(name = \"trakt_votes\") val traktVotes: Int? = null, @ColumnInfo(name = \"certification\") val certification: String? = null, @ColumnInfo(name = \"first_aired\") val firstAired: OffsetDateTime? = null, @ColumnInfo(name = \"country\") val country: String? = null, @ColumnInfo(name = \"network\") val network: String? = null, @ColumnInfo(name = \"network_logo_path\") val networkLogoPath: String? = null, @ColumnInfo(name = \"runtime\") val runtime: Int? = null, @ColumnInfo(name = \"genres\") val _genres: String? = null, @ColumnInfo(name = \"last_trakt_data_update\") val traktDataUpdate: OffsetDateTime? = null, @ColumnInfo(name = \"status\") val status: ShowStatus? = null, @ColumnInfo(name = \"airs_day\") val airsDay: DayOfWeek? = null, @ColumnInfo(name = \"airs_time\") val airsTime: LocalTime? = null, @ColumnInfo(name = \"airs_tz\") val airsTimeZone: ZoneId? = null )"],"content":"@Query(\"SELECT * FROM shows WHERE id = :id\")\n    abstract fun getShowWithIdFlow(id: Long): Flow<TiviShow>","prompt":""},{"id":3018,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM shows WHERE id = :id\")\n    abstract suspend fun getShowWithIdDetailed(id: Long): ShowDetailed?","prompt":""},{"id":3019,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":["data class ShowDetailednull"],"content":"@Transaction\n    @Query(\"SELECT * FROM shows WHERE id = :id\")\n    abstract fun getShowDetailedWithIdFlow(id: Long): Flow<ShowDetailed>","prompt":""},{"id":3020,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Query(\"SELECT * FROM shows WHERE id = :id\")\n    abstract suspend fun getShowWithId(id: Long): TiviShow?","prompt":""},{"id":3021,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":["data class TiviShow( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") override val id: Long = 0, @ColumnInfo(name = \"title\") val title: String? = null, @ColumnInfo(name = \"original_title\") val originalTitle: String? = null, @ColumnInfo(name = \"trakt_id\") override val traktId: Int? = null, @ColumnInfo(name = \"tmdb_id\") override val tmdbId: Int? = null, @ColumnInfo(name = \"imdb_id\") val imdbId: String? = null, @ColumnInfo(name = \"overview\") val summary: String? = null, @ColumnInfo(name = \"homepage\") val homepage: String? = null, @ColumnInfo(name = \"trakt_rating\") val traktRating: Float? = null, @ColumnInfo(name = \"trakt_votes\") val traktVotes: Int? = null, @ColumnInfo(name = \"certification\") val certification: String? = null, @ColumnInfo(name = \"first_aired\") val firstAired: OffsetDateTime? = null, @ColumnInfo(name = \"country\") val country: String? = null, @ColumnInfo(name = \"network\") val network: String? = null, @ColumnInfo(name = \"network_logo_path\") val networkLogoPath: String? = null, @ColumnInfo(name = \"runtime\") val runtime: Int? = null, @ColumnInfo(name = \"genres\") val _genres: String? = null, @ColumnInfo(name = \"last_trakt_data_update\") val traktDataUpdate: OffsetDateTime? = null, @ColumnInfo(name = \"status\") val status: ShowStatus? = null, @ColumnInfo(name = \"airs_day\") val airsDay: DayOfWeek? = null, @ColumnInfo(name = \"airs_time\") val airsTime: LocalTime? = null, @ColumnInfo(name = \"airs_tz\") val airsTimeZone: ZoneId? = null )"],"content":"suspend fun getShowWithIdOrThrow(id: Long): TiviShow {\n        return getShowWithId(id)\n            ?: throw IllegalArgumentException(\"No show with id $id in database\")\n    }","prompt":""},{"id":3022,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Query(\"SELECT trakt_id FROM shows WHERE id = :id\")\n    abstract suspend fun getTraktIdForShowId(id: Long): Int?","prompt":""},{"id":3023,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Query(\"SELECT tmdb_id FROM shows WHERE id = :id\")\n    abstract suspend fun getTmdbIdForShowId(id: Long): Int?","prompt":""},{"id":3024,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Query(\"SELECT id FROM shows WHERE trakt_id = :traktId\")\n    abstract suspend fun getIdForTraktId(traktId: Int): Long?","prompt":""},{"id":3025,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Query(\"SELECT id FROM shows WHERE tmdb_id = :tmdbId\")\n    abstract suspend fun getIdForTmdbId(tmdbId: Int): Long?","prompt":""},{"id":3026,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Query(\"DELETE FROM shows WHERE id = :id\")\n    abstract suspend fun delete(id: Long)","prompt":""},{"id":3027,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":[],"content":"@Query(\"DELETE FROM shows\")\n    abstract suspend fun deleteAll()","prompt":""},{"id":3028,"identifierName":"app.tivi.data.daos.TiviShowDao","requiredType":["data class TiviShow( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") override val id: Long = 0, @ColumnInfo(name = \"title\") val title: String? = null, @ColumnInfo(name = \"original_title\") val originalTitle: String? = null, @ColumnInfo(name = \"trakt_id\") override val traktId: Int? = null, @ColumnInfo(name = \"tmdb_id\") override val tmdbId: Int? = null, @ColumnInfo(name = \"imdb_id\") val imdbId: String? = null, @ColumnInfo(name = \"overview\") val summary: String? = null, @ColumnInfo(name = \"homepage\") val homepage: String? = null, @ColumnInfo(name = \"trakt_rating\") val traktRating: Float? = null, @ColumnInfo(name = \"trakt_votes\") val traktVotes: Int? = null, @ColumnInfo(name = \"certification\") val certification: String? = null, @ColumnInfo(name = \"first_aired\") val firstAired: OffsetDateTime? = null, @ColumnInfo(name = \"country\") val country: String? = null, @ColumnInfo(name = \"network\") val network: String? = null, @ColumnInfo(name = \"network_logo_path\") val networkLogoPath: String? = null, @ColumnInfo(name = \"runtime\") val runtime: Int? = null, @ColumnInfo(name = \"genres\") val _genres: String? = null, @ColumnInfo(name = \"last_trakt_data_update\") val traktDataUpdate: OffsetDateTime? = null, @ColumnInfo(name = \"status\") val status: ShowStatus? = null, @ColumnInfo(name = \"airs_day\") val airsDay: DayOfWeek? = null, @ColumnInfo(name = \"airs_time\") val airsTime: LocalTime? = null, @ColumnInfo(name = \"airs_tz\") val airsTimeZone: ZoneId? = null )"],"content":"suspend fun getIdOrSavePlaceholder(show: TiviShow): Long {\n        val idForTraktId: Long? = if (show.traktId != null) getIdForTraktId(show.traktId) else null\n        val idForTmdbId: Long? = if (show.tmdbId != null) getIdForTmdbId(show.tmdbId) else null\n\n        if (idForTraktId != null && idForTmdbId != null) {\n            return if (idForTmdbId == idForTraktId) {\n                // Great, the entities are matching\n                idForTraktId\n            } else {\n                val showForTmdbId = getShowWithIdOrThrow(idForTmdbId)\n                val showForTraktId = getShowWithIdOrThrow(idForTraktId)\n                deleteEntity(showForTmdbId)\n                return insertOrUpdate(mergeShows(showForTraktId, showForTraktId, showForTmdbId))\n            }\n        }\n\n        if (idForTraktId != null) {\n            // If we get here, we only have a entity with the trakt id\n            return idForTraktId\n        }\n        if (idForTmdbId != null) {\n            // If we get here, we only have a entity with the tmdb id\n            return idForTmdbId\n        }\n\n        // TODO add fuzzy search on name or slug\n\n        return insert(show)\n    }","prompt":""},{"id":3029,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testPrimitiveToItemType_NodeTypes() {\n        assertThat(primitiveToItemType(\"array-node()\"), `is`(\"array-node()\"))\n        assertThat(primitiveToItemType(\"attribute()\"), `is`(\"attribute()\"))\n        assertThat(primitiveToItemType(\"binary()\"), `is`(\"binary()\"))\n        assertThat(primitiveToItemType(\"boolean-node()\"), `is`(\"boolean-node()\"))\n        assertThat(primitiveToItemType(\"comment()\"), `is`(\"comment()\"))\n        assertThat(primitiveToItemType(\"document-node()\"), `is`(\"document-node()\"))\n        assertThat(primitiveToItemType(\"element()\"), `is`(\"element()\"))\n        assertThat(primitiveToItemType(\"node()\"), `is`(\"node()\"))\n        assertThat(primitiveToItemType(\"null-node()\"), `is`(\"null-node()\"))\n        assertThat(primitiveToItemType(\"number-node()\"), `is`(\"number-node()\"))\n        assertThat(primitiveToItemType(\"object-node()\"), `is`(\"object-node()\"))\n        assertThat(primitiveToItemType(\"processing-instruction()\"), `is`(\"processing-instruction()\"))\n        assertThat(primitiveToItemType(\"text()\"), `is`(\"text()\"))\n    }","prompt":""},{"id":3030,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testPrimitiveToItemType_XMLSchema() {\n        assertThat(primitiveToItemType(\"anyURI\"), `is`(\"xs:anyURI\"))\n        assertThat(primitiveToItemType(\"base64Binary\"), `is`(\"xs:base64Binary\"))\n        assertThat(primitiveToItemType(\"boolean\"), `is`(\"xs:boolean\"))\n        assertThat(primitiveToItemType(\"date\"), `is`(\"xs:date\"))\n        assertThat(primitiveToItemType(\"dateTime\"), `is`(\"xs:dateTime\"))\n        assertThat(primitiveToItemType(\"dayTimeDuration\"), `is`(\"xs:dayTimeDuration\"))\n        assertThat(primitiveToItemType(\"decimal\"), `is`(\"xs:decimal\"))\n        assertThat(primitiveToItemType(\"double\"), `is`(\"xs:double\"))\n        assertThat(primitiveToItemType(\"duration\"), `is`(\"xs:duration\"))\n        assertThat(primitiveToItemType(\"float\"), `is`(\"xs:float\"))\n        assertThat(primitiveToItemType(\"gDay\"), `is`(\"xs:gDay\"))\n        assertThat(primitiveToItemType(\"gMonth\"), `is`(\"xs:gMonth\"))\n        assertThat(primitiveToItemType(\"gMonthDay\"), `is`(\"xs:gMonthDay\"))\n        assertThat(primitiveToItemType(\"gYear\"), `is`(\"xs:gYear\"))\n        assertThat(primitiveToItemType(\"gYearMonth\"), `is`(\"xs:gYearMonth\"))\n        assertThat(primitiveToItemType(\"hexBinary\"), `is`(\"xs:hexBinary\"))\n        assertThat(primitiveToItemType(\"integer\"), `is`(\"xs:integer\"))\n        assertThat(primitiveToItemType(\"QName\"), `is`(\"xs:QName\"))\n        assertThat(primitiveToItemType(\"string\"), `is`(\"xs:string\"))\n        assertThat(primitiveToItemType(\"time\"), `is`(\"xs:time\"))\n        assertThat(primitiveToItemType(\"untypedAtomic\"), `is`(\"xs:untypedAtomic\"))\n        assertThat(primitiveToItemType(\"yearMonthDuration\"), `is`(\"xs:yearMonthDuration\"))\n    }","prompt":""},{"id":3031,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"@Query(\"()\")\n    fun testEmptySequence() {\n        val item = Item.create(\"()\", \"empty-sequence()\")\n\n        assertThat(item.content, `is`(\"()\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"empty-sequence()\"))\n\n        assertThat(item.toString(), `is`(\"()\"))\n    }","prompt":""},{"id":3032,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testFromBigDecimal() {\n        val item = Item.fromType(BigDecimal.valueOf(15, 1))\n\n        assertThat(item.content, `is`(\"1.5\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"xs:decimal\"))\n    }","prompt":""},{"id":3033,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testFromBigInteger() {\n        val item = Item.fromType(BigInteger.valueOf(15))\n\n        assertThat(item.content, `is`(\"15\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"xs:integer\"))\n    }","prompt":""},{"id":3034,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testFromBoolean() {\n        val item = Item.fromType(true)\n\n        assertThat(item.content, `is`(\"true\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"xs:boolean\"))\n    }","prompt":""},{"id":3035,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testFromByte() {\n        val item = Item.fromType(20.toByte())\n\n        assertThat(item.content, `is`(\"20\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"xs:byte\"))\n    }","prompt":""},{"id":3036,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testFromDouble() {\n        val item = Item.fromType(1.5)\n\n        assertThat(item.content, `is`(\"1.5\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"xs:double\"))\n    }","prompt":""},{"id":3037,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testFromFloat() {\n        val item = Item.fromType(1.5f)\n\n        assertThat(item.content, `is`(\"1.5\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"xs:float\"))\n    }","prompt":""},{"id":3038,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testFromInteger() {\n        val item = Item.fromType(15)\n\n        assertThat(item.content, `is`(\"15\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"xs:int\"))\n    }","prompt":""},{"id":3039,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testFromLong() {\n        val item = Item.fromType(15.toLong())\n\n        assertThat(item.content, `is`(\"15\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"xs:long\"))\n    }","prompt":""},{"id":3040,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testFromShort() {\n        val item = Item.fromType(15.toShort())\n\n        assertThat(item.content, `is`(\"15\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"xs:short\"))\n    }","prompt":""},{"id":3041,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testFromString() {\n        val item = Item.fromType(\"abc\")\n\n        assertThat(item.content, `is`(\"abc\"))\n        assertThat<String>(item.contentType, `is`(\"text/plain\"))\n        assertThat(item.itemType, `is`(\"xs:string\"))\n    }","prompt":""},{"id":3042,"identifierName":"uk.co.reecedunn.intellij.plugin.marklogic.tests.api.ItemTest","requiredType":[],"content":"fun testWithMimeType() {\n        val item = Item.withMimeType(\"<>\", \"text/turtle\")\n\n        assertThat(item.content, `is`(\"<>\"))\n        assertThat<String>(item.contentType, `is`(\"text/turtle\"))\n        assertThat(item.itemType, `is`(\"xs:string\"))\n    }","prompt":""},{"id":3043,"identifierName":"org.stepik.android.cache.mobile_tiers.dao.LightSkuDao","requiredType":[],"content":"@Query(\"SELECT * From LightSku WHERE id IN (:ids)\")\n    fun getLightSkus(ids: List<String>): Single<List<LightSku>>","prompt":""},{"id":3044,"identifierName":"org.stepik.android.cache.mobile_tiers.dao.LightSkuDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun saveLightSkus(items: List<LightSku>): Completable","prompt":""},{"id":3045,"identifierName":"com.github.devjn.githubsearch.db.dao.UserDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(vararg users: User)","prompt":""},{"id":3046,"identifierName":"com.github.devjn.githubsearch.db.dao.UserDao","requiredType":[],"content":"@Delete\n    fun remove(user: User)","prompt":""},{"id":3047,"identifierName":"com.github.devjn.githubsearch.db.dao.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user\")\n    fun getAllUsers(): List<User>","prompt":""},{"id":3048,"identifierName":"com.github.devjn.githubsearch.db.dao.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user\")\n    fun getAllUsersLive(): LiveData<List<User>>","prompt":""},{"id":3049,"identifierName":"com.github.devjn.githubsearch.db.dao.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user WHERE id = (:id)\")\n    fun getUser(id: Long): User?","prompt":""},{"id":3050,"identifierName":"org.tasks.data.UserActivityDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insert(userActivity: UserActivity)","prompt":""},{"id":3051,"identifierName":"org.tasks.data.UserActivityDao","requiredType":[],"content":"@Update\n    abstract suspend fun update(userActivity: UserActivity)","prompt":""},{"id":3052,"identifierName":"org.tasks.data.UserActivityDao","requiredType":[],"content":"@Delete\n    abstract suspend fun delete(userActivity: UserActivity)","prompt":""},{"id":3053,"identifierName":"org.tasks.data.UserActivityDao","requiredType":[],"content":"@Query(\"SELECT * FROM userActivity WHERE target_id = :taskUuid ORDER BY created_at DESC \")\n    abstract fun watchComments(taskUuid: String): Flow<List<UserActivity>>","prompt":""},{"id":3054,"identifierName":"org.tasks.data.UserActivityDao","requiredType":[],"content":"@Query(\"SELECT userActivity.* FROM userActivity INNER JOIN tasks ON tasks._id = :task WHERE target_id = tasks.remoteId\")\n    abstract suspend fun getComments(task: Long): List<UserActivity>","prompt":""},{"id":3055,"identifierName":"org.tasks.data.UserActivityDao","requiredType":[],"content":"@Query(\"SELECT * FROM userActivity\")\n    abstract suspend fun getComments(): List<UserActivity>","prompt":""},{"id":3056,"identifierName":"org.tasks.data.UserActivityDao","requiredType":[],"content":"suspend fun createNew(item: UserActivity) {\n        if (item.created == null || item.created == 0L) {\n            item.created = DateUtilities.now()\n        }\n        if (Task.isUuidEmpty(item.remoteId)) {\n            item.remoteId = UUIDHelper.newUUID()\n        }\n        insert(item)\n    }","prompt":""},{"id":3057,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.ticket.EventDao","requiredType":[],"content":"@Query(\"SELECT * FROM events where id = :id\")\n    fun getEventById(id: Int): Event?","prompt":""},{"id":3058,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.ticket.EventDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(events: List<Event>)","prompt":""},{"id":3059,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.ticket.EventDao","requiredType":[],"content":"@Query(\"UPDATE events SET dismissed = 1 WHERE id = :eventId\")\n    fun setDismissed(eventId: Int)","prompt":""},{"id":3060,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.ticket.EventDao","requiredType":[],"content":"@Query(\"DELETE FROM events \" +\n            \"WHERE end_time < date('now') \" +\n            \"AND NOT EXISTS (SELECT * FROM tickets WHERE tickets.event_id = events.id)\")\n    fun removePastEventsWithoutTicket()","prompt":""},{"id":3061,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.ticket.EventDao","requiredType":[],"content":"@Query(\"DELETE FROM events\")\n    fun removeAll()","prompt":""},{"id":3062,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.ticket.EventDao","requiredType":[],"content":"@Query(\"SELECT events.* FROM events, kino \" +\n            \"WHERE events.kino =:kinoId \" +\n            \"LIMIT 1\")\n    fun getEventByMovie(kinoId: String): Flowable<Event>","prompt":""},{"id":3063,"identifierName":"de.tum.`in`.tumcampusapp.component.ui.ticket.EventDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM events, kino \" +\n            \"WHERE kino.link =:eventLink \" +\n            \"LIMIT 1\")\n    fun getKinoCountForEvent(eventLink: String): Int","prompt":""},{"id":3064,"identifierName":"biz.eventually.atpl.data.dao.SourceDao","requiredType":[],"content":"@Query(\"SELECT * FROM source\")\n    abstract fun getAll(): LiveData<List<Source>>","prompt":""},{"id":3065,"identifierName":"biz.eventually.atpl.data.dao.SourceDao","requiredType":[],"content":"@Query(\"SELECT idWeb FROM source\")\n    abstract fun getIds(): List<Long>","prompt":""},{"id":3066,"identifierName":"biz.eventually.atpl.data.dao.SourceDao","requiredType":[],"content":"@Query(\"SELECT * FROM source WHERE idWeb = :idWeb\")\n    abstract fun findById(idWeb: Long): Source?","prompt":""},{"id":3067,"identifierName":"com.example.subscriptions.data.disk.db.SubscriptionStatusDao","requiredType":[],"content":"@Query(\"SELECT * FROM subscriptions\")\n    fun getAll(): Flow<List<SubscriptionStatus>>","prompt":""},{"id":3068,"identifierName":"com.example.subscriptions.data.disk.db.SubscriptionStatusDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertAll(subscriptions: List<SubscriptionStatus>)","prompt":""},{"id":3069,"identifierName":"com.example.subscriptions.data.disk.db.SubscriptionStatusDao","requiredType":[],"content":"@Query(\"DELETE FROM subscriptions\")\n    suspend fun deleteAll()","prompt":""},{"id":3070,"identifierName":"org.walleth.data.chaininfo.ChainInfoDAO","requiredType":[],"content":"@Query(\"SELECT * FROM chains ORDER by `order` DESC\")\n    suspend fun getAll(): List<ChainInfo>","prompt":""},{"id":3071,"identifierName":"org.walleth.data.chaininfo.ChainInfoDAO","requiredType":[],"content":"@Query(\"UPDATE chains SET softDeleted=0\")\n    suspend fun undeleteAll()","prompt":""},{"id":3072,"identifierName":"org.walleth.data.chaininfo.ChainInfoDAO","requiredType":[],"content":"@Query(\"DELETE FROM chains where softDeleted = 1\")\n    suspend fun deleteAllSoftDeleted()","prompt":""},{"id":3073,"identifierName":"org.walleth.data.chaininfo.ChainInfoDAO","requiredType":[],"content":"@Query(\"SELECT * FROM chains WHERE chainId = :chain\")\n    suspend fun getByChainId(chain: BigInteger): ChainInfo?","prompt":""},{"id":3074,"identifierName":"org.walleth.data.chaininfo.ChainInfoDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun upsert(entry: ChainInfo)","prompt":""},{"id":3075,"identifierName":"org.walleth.data.chaininfo.ChainInfoDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun upsert(entry: List<ChainInfo>)","prompt":""},{"id":3076,"identifierName":"com.google.android.ground.persistence.local.room.dao.UserDao","requiredType":[],"content":"@Transaction\n  @Query(\"SELECT * FROM user WHERE id = :id\")\n  fun findById(id: String): Maybe<UserEntity>","prompt":""},{"id":3077,"identifierName":"com.uncmorfi.models.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM users\")\n    suspend fun getAll(): List<User>","prompt":""},{"id":3078,"identifierName":"com.uncmorfi.models.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM users WHERE card IN (:cards)\")\n    suspend fun getByCard(vararg cards: String): List<User>","prompt":""},{"id":3079,"identifierName":"com.uncmorfi.models.UserDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insertUser(vararg users: User): List<Long>","prompt":""},{"id":3080,"identifierName":"com.uncmorfi.models.UserDao","requiredType":[],"content":"@Update\n    suspend fun updateFullUser(vararg users: User)","prompt":""},{"id":3081,"identifierName":"com.uncmorfi.models.UserDao","requiredType":[],"content":"@Query(\"\"\"\n        UPDATE users SET\n        type = :type,\n        image = :image,\n        balance= :balance,\n        expiration= :expiration,\n        lastUpdate= :lastUpdate\n        WHERE card = :card\n        \"\"\")\n    suspend fun updatePartialUser(card: String,\n                                  type: String?,\n                                  image: String?,\n                                  balance: Int,\n                                  expiration: Calendar,\n                                  lastUpdate: Calendar)","prompt":""},{"id":3082,"identifierName":"com.uncmorfi.models.UserDao","requiredType":[],"content":"@Delete\n    suspend fun delete(user: User)","prompt":""},{"id":3083,"identifierName":"com.uncmorfi.models.UserDao","requiredType":[],"content":"// Inserta o actualiza los usuarios\n    // Devuelve la cantidad de filas afectadas\n    @Transaction\n    suspend fun upsertUser(vararg users: User): Int {\n        val insertResult = insertUser(*users)\n        val updateList = mutableListOf<User>()\n\n        for (i in insertResult.indices) {\n            if (insertResult[i] == -1L) {\n                updateList.add(users[i])\n            }\n        }\n\n        for (u in updateList) {\n            updatePartialUser(u.card, u.type, u.image, u.balance, u.expiration, u.lastUpdate)\n        }\n\n        return updateList.count()\n    }","prompt":""},{"id":3084,"identifierName":"com.emogoth.android.phone.mimi.db.dao.ArchiveAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.ARCHIVES_TABLE}\")\n    abstract fun getAll(): Flowable<List<Archive>>","prompt":""},{"id":3085,"identifierName":"com.emogoth.android.phone.mimi.db.dao.ArchiveAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.ARCHIVES_TABLE} WHERE ${Archive.BOARD_NAME} = :boardName\")\n    abstract fun getAllForBoard(boardName: String): Flowable<List<Archive>>","prompt":""},{"id":3086,"identifierName":"com.emogoth.android.phone.mimi.db.dao.ArchiveAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.ARCHIVES_TABLE}\")\n    abstract fun clear()","prompt":""},{"id":3087,"identifierName":"com.orgzly.android.db.dao.NotePropertyDao","requiredType":["data class NoteProperty( @ColumnInfo(name = \"note_id\") val noteId: Long, val position: Int, val name: String, val value: String )"],"content":"@Query(\"SELECT * FROM note_properties WHERE note_id = :noteId ORDER BY position\")\n    abstract fun get(noteId: Long): List<NoteProperty>","prompt":""},{"id":3088,"identifierName":"com.orgzly.android.db.dao.NotePropertyDao","requiredType":["data class NoteProperty( @ColumnInfo(name = \"note_id\") val noteId: Long, val position: Int, val name: String, val value: String )"],"content":"@Query(\"SELECT * FROM note_properties WHERE note_id = :noteId AND name = :name ORDER BY position\")\n    abstract fun get(noteId: Long, name: String): List<NoteProperty>","prompt":""},{"id":3089,"identifierName":"com.orgzly.android.db.dao.NotePropertyDao","requiredType":["data class NoteProperty( @ColumnInfo(name = \"note_id\") val noteId: Long, val position: Int, val name: String, val value: String )"],"content":"@Query(\"SELECT * FROM note_properties\")\n    abstract fun getAll(): List<NoteProperty>","prompt":""},{"id":3090,"identifierName":"com.orgzly.android.db.dao.NotePropertyDao","requiredType":[],"content":"@Transaction\n    open fun upsert(noteId: Long, name: String, value: String) {\n        val properties = get(noteId, name)\n\n        if (properties.isEmpty()) {\n            // Insert new\n            val position = getNextAvailablePosition(noteId)\n            insert(NoteProperty(noteId, position, name, value))\n\n        } else {\n            // Update first\n            update(properties.first().copy(value = value))\n\n            // Delete others\n            for (i in 1 until properties.size) {\n                delete(properties[i])\n            }\n        }\n    }","prompt":""},{"id":3091,"identifierName":"com.orgzly.android.db.dao.NotePropertyDao","requiredType":[],"content":"private fun getNextAvailablePosition(noteId: Long): Int {\n        return getLastPosition(noteId).let {\n            if (it != null) it + 1 else 1\n        }\n    }","prompt":""},{"id":3092,"identifierName":"com.orgzly.android.db.dao.NotePropertyDao","requiredType":[],"content":"@Query(\"SELECT MAX(position) FROM note_properties WHERE note_id = :noteId\")\n    abstract fun getLastPosition(noteId: Long): Int?","prompt":""},{"id":3093,"identifierName":"com.orgzly.android.db.dao.NotePropertyDao","requiredType":[],"content":"@Query(\"DELETE FROM note_properties WHERE note_id = :noteId\")\n    abstract fun delete(noteId: Long)","prompt":""},{"id":3094,"identifierName":"com.devrel.android.fitactions.model.FitDatabase","requiredType":[],"content":"/**\n     * @return an instance of FitActivityDao\n     */\n    abstract fun fitActivityDao(): FitActivityDao","prompt":""},{"id":3095,"identifierName":"com.devrel.android.fitactions.model.FitActivityDao","requiredType":[],"content":"/**\n     * @param max define a max result count.\n     * @return a list of FitActivity items ordered by date\n     */\n    @Query(\"SELECT * FROM fit_activities ORDER BY date DESC LIMIT :max\")\n    fun getAll(max: Int = -1): LiveData<List<FitActivity>>","prompt":""},{"id":3096,"identifierName":"com.devrel.android.fitactions.model.FitActivityDao","requiredType":[],"content":"/**\n     * @param max define a max result count.\n     * @return a list of FitActivity items ordered by date\n     */\n    @Query(\"SELECT * FROM fit_activities WHERE type == :type ORDER BY date DESC LIMIT :max\")\n    fun getAllOfType(type: FitActivity.Type, max: Int = -1): LiveData<List<FitActivity>>","prompt":""},{"id":3097,"identifierName":"com.devrel.android.fitactions.model.FitActivityDao","requiredType":[],"content":"/**\n     * @return a FitStats of the user\n     */\n    @Query(\"SELECT COUNT(*) as totalCount, SUM(distanceMeters) as totalDistanceMeters, SUM(durationMs) as totalDurationMs FROM fit_activities\")\n    fun getStats(): LiveData<FitStats>","prompt":""},{"id":3098,"identifierName":"com.devrel.android.fitactions.model.FitActivityDao","requiredType":[],"content":"/**\n     * Get an activity by ID\n     */\n    @Query(\"SELECT * FROM fit_activities WHERE id == :id\")\n    fun getById(id: String): LiveData<FitActivity>","prompt":""},{"id":3099,"identifierName":"com.devrel.android.fitactions.model.FitActivityDao","requiredType":[],"content":"/**\n     * Insert a new FitActivity in the DB\n     */\n    @Insert\n    fun insert(fitActivity: FitActivity)","prompt":""},{"id":3100,"identifierName":"com.devrel.android.fitactions.model.FitActivityDao","requiredType":[],"content":"/**\n     * Delete the given FitActivity from DB\n     */\n    @Delete\n    fun delete(fitActivity: FitActivity)","prompt":""},{"id":3101,"identifierName":"com.devrel.android.fitactions.model.Converters","requiredType":[],"content":"@TypeConverter\n    fun fromType(value: FitActivity.Type): Int {\n        return value.ordinal\n    }","prompt":""},{"id":3102,"identifierName":"com.devrel.android.fitactions.model.Converters","requiredType":[],"content":"@TypeConverter\n    fun toType(value: Int): FitActivity.Type {\n        val values = FitActivity.Type.values()\n        return if (value < values.size) values[value] else FitActivity.Type.UNKNOWN\n    }","prompt":""},{"id":3103,"identifierName":".UserRepository","requiredType":[],"content":"@Query(\"FROM User u WHERE u.username = :#{#username}\")\n    fun findUserByUsername(@Param(\"username\") usernameParam: String): User?","prompt":""},{"id":3104,"identifierName":"com.easy.kotlin.picturecrawler.dao.SearchKeyWordRepository","requiredType":[],"content":"@Modifying\n    @Transactional\n    @Query(value = \"INSERT INTO `search_key_word` (`deleted_date`, `gmt_created`, `gmt_modified`, `is_deleted`, `key_word`) VALUES (now(), now(), now(), '0', :keyWord) ON DUPLICATE KEY UPDATE `gmt_modified` = now()\", nativeQuery = true)\n    fun saveOnNoDuplicateKey(@Param(\"keyWord\") keyWord: String): Int","prompt":""},{"id":3105,"identifierName":"com.easy.kotlin.picturecrawler.dao.SearchKeyWordRepository","requiredType":["data class SearchKeyWordnull"],"content":"@Query(\"SELECT a from #{#entityName} a where a.isDeleted=0 order by a.id desc\")\n    override fun findAll(pageable: Pageable): Page<SearchKeyWord>","prompt":""},{"id":3106,"identifierName":"com.easy.kotlin.picturecrawler.dao.SearchKeyWordRepository","requiredType":["data class SearchKeyWordnull"],"content":"@Query(\"SELECT a from #{#entityName} a where a.isDeleted=0 and a.keyWord like %:searchText% order by a.id desc\")\n    fun search(@Param(\"searchText\") searchText: String, pageable: Pageable): Page<SearchKeyWord>","prompt":""},{"id":3107,"identifierName":"com.easy.kotlin.picturecrawler.dao.SearchKeyWordRepository","requiredType":["data class SearchKeyWordnull"],"content":"@Modifying\n    @Transactional\n    @Query(\"update search_key_word a set a.total_image = (select count(*) from image i where i.is_deleted=0 and i.category like concat('%',a.key_word,'%'))\", nativeQuery = true)\n    fun batchUpdateTotalImage()","prompt":""},{"id":3108,"identifierName":"io.ipoli.android.common.persistence.EntityReminderRepository","requiredType":[],"content":"fun findNextReminderTime(afterTime: ZonedDateTime = ZonedDateTime.now(ZoneId.systemDefault())): LocalDateTime?","prompt":""},{"id":3109,"identifierName":"io.ipoli.android.common.persistence.EntityReminderRepository","requiredType":[],"content":"fun snooze(\n        date: LocalDate,\n        time: Time,\n        entityType: EntityReminder.EntityType,\n        entityId: String,\n        duration: Duration<Minute>\n    )","prompt":""},{"id":3110,"identifierName":"io.ipoli.android.common.persistence.EntityReminderRepository","requiredType":[],"content":"fun save(entities: List<EntityReminder>)","prompt":""},{"id":3111,"identifierName":"io.ipoli.android.common.persistence.RoomEntityReminderRepository","requiredType":[],"content":"override fun findNextReminderTime(afterTime: ZonedDateTime): LocalDateTime? {\n        val currentDateMillis = afterTime.toLocalDate().startOfDayUTC()\n\n        val millisOfDay = afterTime.toLocalTime().toSecondOfDay().seconds.millisValue\n\n        val r = dao.findAfter(currentDateMillis, millisOfDay) ?: return null\n\n        return LocalDateTime.of(\n            r.date.startOfDayUTC,\n            LocalTime.ofSecondOfDay(r.millisOfDay.milliseconds.asSeconds.longValue)\n        )\n    }","prompt":""},{"id":3112,"identifierName":"io.ipoli.android.common.persistence.RoomEntityReminderRepository","requiredType":[],"content":"override fun snooze(\n        date: LocalDate,\n        time: Time,\n        entityType: EntityReminder.EntityType,\n        entityId: String,\n        duration: Duration<Minute>\n    ) {\n        val newTime = time.plus(duration.intValue)\n        val newDate = if (newTime < time)\n            date.plusDays(1)\n        else\n            date\n\n        dao.snooze(\n            entityId = entityId,\n            entityType = entityType.name,\n            oldDate = date.startOfDayUTC(),\n            oldMillisOfDay = time.toMillisOfDay(),\n            newDate = newDate.startOfDayUTC(),\n            newMillisOfDay = newTime.toMillisOfDay()\n        )\n    }","prompt":""},{"id":3113,"identifierName":"io.ipoli.android.common.persistence.RoomEntityReminderRepository","requiredType":[],"content":"override fun save(entities: List<EntityReminder>) {\n        dao.saveAll(entities.map { toDatabaseObject(it) })\n    }","prompt":""},{"id":3114,"identifierName":"io.ipoli.android.common.persistence.RoomEntityReminderRepository","requiredType":[],"content":"private fun toDatabaseObject(entityReminder: EntityReminder) =\n        RoomEntityReminder(\n            id = entityReminder.id,\n            date = entityReminder.date.startOfDayUTC(),\n            millisOfDay = entityReminder.time.toMillisOfDay(),\n            entityType = entityReminder.entityType.name,\n            entityId = entityReminder.entityId\n        )","prompt":""},{"id":3115,"identifierName":"io.ipoli.android.common.persistence.EntityReminderDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.FAIL)\n    fun save(entity: RoomEntityReminder)","prompt":""},{"id":3116,"identifierName":"io.ipoli.android.common.persistence.EntityReminderDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.FAIL)\n    fun saveAll(entities: List<RoomEntityReminder>)","prompt":""},{"id":3117,"identifierName":"io.ipoli.android.common.persistence.EntityReminderDao","requiredType":[],"content":"@Query(\"DELETE FROM entity_reminders WHERE entityId = :entityId\")\n    fun purgeForEntity(entityId: String)","prompt":""},{"id":3118,"identifierName":"io.ipoli.android.common.persistence.EntityReminderDao","requiredType":[],"content":"@Query(\"DELETE FROM entity_reminders WHERE entityId IN (:entityIds)\")\n    fun purgeForEntities(entityIds: List<String>)","prompt":""},{"id":3119,"identifierName":"io.ipoli.android.common.persistence.EntityReminderDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        UPDATE entity_reminders\n        SET date = :newDate, millisOfDay = :newMillisOfDay\n        WHERE entityType = :entityType AND entityId = :entityId AND date = :oldDate AND millisOfDay = :oldMillisOfDay\n        \"\"\"\n    )\n    fun snooze(\n        entityId: String,\n        entityType: String,\n        oldDate: Long,\n        oldMillisOfDay: Long,\n        newDate: Long,\n        newMillisOfDay: Long\n    )","prompt":""},{"id":3120,"identifierName":"io.ipoli.android.common.persistence.EntityReminderDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT *\n        FROM entity_reminders\n        WHERE date >= :date AND millisOfDay > :millisOfDay\n        ORDER BY date ASC, millisOfDay ASC\n        LIMIT 1\n        \"\"\"\n    )\n    fun findAfter(date: Long, millisOfDay: Long): RoomEntityReminder?","prompt":""},{"id":3121,"identifierName":"com.therenegadecoder.poplibrary.backend.BookDAO","requiredType":[],"content":"@Query(\"SELECT * from book_table ORDER BY title ASC\")\n    fun getAllBooks(): LiveData<List<Book>>","prompt":""},{"id":3122,"identifierName":"com.therenegadecoder.poplibrary.backend.BookDAO","requiredType":["data class Book( val isbn13: String? = null, val title: String? = null, val author: String? = null, val editor: String? = null, val language: String? = null, val coverImageURL: String? = null, val pageCount: Int? = null, val dateOfPublication: Date? = null, val lexileLevel: Lexile? = null, val fountasAndPinell: FountasAndPinell? = null )"],"content":"@Insert\n    suspend fun insert(book: Book)","prompt":""},{"id":3123,"identifierName":"com.therenegadecoder.poplibrary.backend.BookDAO","requiredType":[],"content":"@Query(\"DELETE FROM book_table\")\n    suspend fun deleteAll()","prompt":""},{"id":3124,"identifierName":"ro.edi.novelty.data.db.dao.NewsStateDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM news_state\")\n    abstract fun deleteAll()","prompt":""},{"id":3125,"identifierName":"ro.edi.novelty.data.db.dao.NewsStateDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM news_state WHERE feed_id = :feedId\")\n    abstract fun deleteAll(feedId: Int)","prompt":""},{"id":3126,"identifierName":"com.orgzly.android.db.dao.AppLogDao","requiredType":[],"content":"@Query(\"SELECT * FROM app_logs WHERE name = :name ORDER BY timestamp\")\n    abstract fun getFlow(name: String): Flow<List<AppLog>>","prompt":""},{"id":3127,"identifierName":"net.blakelee.coinprofits.repository.db.HoldingsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertHoldings(holdings: Holdings)","prompt":""},{"id":3128,"identifierName":"net.blakelee.coinprofits.repository.db.HoldingsDao","requiredType":[],"content":"@Query(\"SELECT COUNT(id) FROM holdings\")\n    fun getHoldingsCount(): Flowable<Int>","prompt":""},{"id":3129,"identifierName":"net.blakelee.coinprofits.repository.db.HoldingsDao","requiredType":[],"content":"@Query(\"SELECT * FROM holdings INNER JOIN coin on coin.id = holdings.id WHERE holdings.id = :id LIMIT 1\")\n    fun getHoldingsTransactions(id: String): Maybe<HoldingsTransactions>","prompt":""},{"id":3130,"identifierName":"net.blakelee.coinprofits.repository.db.HoldingsDao","requiredType":[],"content":"@Query(\"SELECT *, (price / (SELECT price FROM coin WHERE id = 'ethereum')) AS price_eth \" +\n            \"FROM holdings \" +\n            \"INNER JOIN coin \" +\n            \"   ON coin.id = holdings.id \" +\n            \"ORDER BY holdings.itemOrder\")\n    fun getHoldingsCombined(): Flowable<List<HoldingsCombined>>","prompt":""},{"id":3131,"identifierName":"net.blakelee.coinprofits.repository.db.HoldingsDao","requiredType":[],"content":"@Query(\"SELECT coin.id, coin.name, coin.symbol, holdings.itemOrder FROM holdings INNER JOIN coin on coin.id = holdings.id ORDER BY holdings.itemOrder\")\n    fun getHoldingsOverview(): Flowable<List<HoldingsOverview>>","prompt":""},{"id":3132,"identifierName":"net.blakelee.coinprofits.repository.db.HoldingsDao","requiredType":[],"content":"@Query(\"SELECT * FROM holdings ORDER BY itemOrder\")\n    fun getHoldings(): Flowable<List<Holdings>>","prompt":""},{"id":3133,"identifierName":"net.blakelee.coinprofits.repository.db.HoldingsDao","requiredType":[],"content":"@Update\n    fun updateHoldings(vararg holdings: Holdings)","prompt":""},{"id":3134,"identifierName":"net.blakelee.coinprofits.repository.db.HoldingsDao","requiredType":[],"content":"@Delete\n    fun deleteHoldings(holdings: Holdings)","prompt":""},{"id":3135,"identifierName":"com.marktony.zhihudaily.database.dao.DoubanMomentContentDao","requiredType":[],"content":"@Query(\"SELECT * FROM douban_moment_content WHERE id = :id\")\n    fun queryContentById(id: Int): DoubanMomentContent?","prompt":""},{"id":3136,"identifierName":"com.marktony.zhihudaily.database.dao.DoubanMomentContentDao","requiredType":["data class DoubanMomentContent( @ColumnInfo(name = \"display_style\") @Expose @SerializedName(\"display_style\") val displayStyle: Int, @ColumnInfo(name = \"short_url\") @Expose @SerializedName(\"short_url\") val shortUrl: String, @ColumnInfo(name = \"abstract\") @Expose @SerializedName(\"abstract\") val abs: String, @ColumnInfo(name = \"app_css\") @Expose @SerializedName(\"app_css\") val appCss: Int, @ColumnInfo(name = \"like_count\") @Expose @SerializedName(\"like_count\") val likeCount: Int, @ColumnInfo(name = \"thumbs\") @Expose @SerializedName(\"thumbs\") val thumbs: List<DoubanMomentNewsThumbs>, @ColumnInfo(name = \"created_time\") @Expose @SerializedName(\"created_time\") val createdTime: String, @ColumnInfo(name = \"id\") @PrimaryKey @Expose @SerializedName(\"id\") val id: Int = 0, @ColumnInfo(name = \"is_editor_choice\") @Expose @SerializedName(\"is_editor_choice\") val isEditorChoice: Boolean, @ColumnInfo(name = \"original_url\") @Expose @SerializedName(\"original_url\") val originalUrl: String, @ColumnInfo(name = \"content\") @Expose @SerializedName(\"content\") val content: String, @ColumnInfo(name = \"share_pic_url\") @Expose @SerializedName(\"share_pic_url\") val sharePicUrl: String, @ColumnInfo(name = \"type\") @Expose @SerializedName(\"type\") val type: String, @ColumnInfo(name = \"is_liked\") @Expose @SerializedName(\"is_liked\") val isLiked: Boolean, @ColumnInfo(name = \"photos\") @Expose @SerializedName(\"photos\") val photos: List<DoubanMomentNewsThumbs>, @ColumnInfo(name = \"published_time\") @Expose @SerializedName(\"published_time\") val publishedTime: String, @ColumnInfo(name = \"url\") @Expose @SerializedName(\"url\") val url: String, @ColumnInfo(name = \"column\") @Expose @SerializedName(\"column\") val column: String, @ColumnInfo(name = \"comments_count\") @Expose @SerializedName(\"comments_count\") val commentsCount: Int, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String )"],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(content: DoubanMomentContent)","prompt":""},{"id":3137,"identifierName":"com.marktony.zhihudaily.database.dao.DoubanMomentContentDao","requiredType":["data class DoubanMomentContent( @ColumnInfo(name = \"display_style\") @Expose @SerializedName(\"display_style\") val displayStyle: Int, @ColumnInfo(name = \"short_url\") @Expose @SerializedName(\"short_url\") val shortUrl: String, @ColumnInfo(name = \"abstract\") @Expose @SerializedName(\"abstract\") val abs: String, @ColumnInfo(name = \"app_css\") @Expose @SerializedName(\"app_css\") val appCss: Int, @ColumnInfo(name = \"like_count\") @Expose @SerializedName(\"like_count\") val likeCount: Int, @ColumnInfo(name = \"thumbs\") @Expose @SerializedName(\"thumbs\") val thumbs: List<DoubanMomentNewsThumbs>, @ColumnInfo(name = \"created_time\") @Expose @SerializedName(\"created_time\") val createdTime: String, @ColumnInfo(name = \"id\") @PrimaryKey @Expose @SerializedName(\"id\") val id: Int = 0, @ColumnInfo(name = \"is_editor_choice\") @Expose @SerializedName(\"is_editor_choice\") val isEditorChoice: Boolean, @ColumnInfo(name = \"original_url\") @Expose @SerializedName(\"original_url\") val originalUrl: String, @ColumnInfo(name = \"content\") @Expose @SerializedName(\"content\") val content: String, @ColumnInfo(name = \"share_pic_url\") @Expose @SerializedName(\"share_pic_url\") val sharePicUrl: String, @ColumnInfo(name = \"type\") @Expose @SerializedName(\"type\") val type: String, @ColumnInfo(name = \"is_liked\") @Expose @SerializedName(\"is_liked\") val isLiked: Boolean, @ColumnInfo(name = \"photos\") @Expose @SerializedName(\"photos\") val photos: List<DoubanMomentNewsThumbs>, @ColumnInfo(name = \"published_time\") @Expose @SerializedName(\"published_time\") val publishedTime: String, @ColumnInfo(name = \"url\") @Expose @SerializedName(\"url\") val url: String, @ColumnInfo(name = \"column\") @Expose @SerializedName(\"column\") val column: String, @ColumnInfo(name = \"comments_count\") @Expose @SerializedName(\"comments_count\") val commentsCount: Int, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String )"],"content":"@Update\n    fun update(content: DoubanMomentContent)","prompt":""},{"id":3138,"identifierName":"com.marktony.zhihudaily.database.dao.DoubanMomentContentDao","requiredType":["data class DoubanMomentContent( @ColumnInfo(name = \"display_style\") @Expose @SerializedName(\"display_style\") val displayStyle: Int, @ColumnInfo(name = \"short_url\") @Expose @SerializedName(\"short_url\") val shortUrl: String, @ColumnInfo(name = \"abstract\") @Expose @SerializedName(\"abstract\") val abs: String, @ColumnInfo(name = \"app_css\") @Expose @SerializedName(\"app_css\") val appCss: Int, @ColumnInfo(name = \"like_count\") @Expose @SerializedName(\"like_count\") val likeCount: Int, @ColumnInfo(name = \"thumbs\") @Expose @SerializedName(\"thumbs\") val thumbs: List<DoubanMomentNewsThumbs>, @ColumnInfo(name = \"created_time\") @Expose @SerializedName(\"created_time\") val createdTime: String, @ColumnInfo(name = \"id\") @PrimaryKey @Expose @SerializedName(\"id\") val id: Int = 0, @ColumnInfo(name = \"is_editor_choice\") @Expose @SerializedName(\"is_editor_choice\") val isEditorChoice: Boolean, @ColumnInfo(name = \"original_url\") @Expose @SerializedName(\"original_url\") val originalUrl: String, @ColumnInfo(name = \"content\") @Expose @SerializedName(\"content\") val content: String, @ColumnInfo(name = \"share_pic_url\") @Expose @SerializedName(\"share_pic_url\") val sharePicUrl: String, @ColumnInfo(name = \"type\") @Expose @SerializedName(\"type\") val type: String, @ColumnInfo(name = \"is_liked\") @Expose @SerializedName(\"is_liked\") val isLiked: Boolean, @ColumnInfo(name = \"photos\") @Expose @SerializedName(\"photos\") val photos: List<DoubanMomentNewsThumbs>, @ColumnInfo(name = \"published_time\") @Expose @SerializedName(\"published_time\") val publishedTime: String, @ColumnInfo(name = \"url\") @Expose @SerializedName(\"url\") val url: String, @ColumnInfo(name = \"column\") @Expose @SerializedName(\"column\") val column: String, @ColumnInfo(name = \"comments_count\") @Expose @SerializedName(\"comments_count\") val commentsCount: Int, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String )"],"content":"@Delete\n    fun delete(content: DoubanMomentContent)","prompt":""},{"id":3139,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertReadingList(list: ReadingList): Long","prompt":""},{"id":3140,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updateReadingList(list: ReadingList)","prompt":""},{"id":3141,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"@Delete\n    fun deleteReadingList(list: ReadingList)","prompt":""},{"id":3142,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"@Query(\"SELECT * FROM ReadingList\")\n    fun getListsWithoutContents(): List<ReadingList>","prompt":""},{"id":3143,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":[],"content":"@Query(\"SELECT * FROM ReadingList WHERE id = :id\")\n    fun getListById(id: Long): ReadingList?","prompt":""},{"id":3144,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"@Query(\"SELECT * FROM ReadingList WHERE id IN (:readingListIds)\")\n    suspend fun getListsByIds(readingListIds: Set<Long>): List<ReadingList>","prompt":""},{"id":3145,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":[],"content":"@Query(\"UPDATE ReadingList SET remoteId = -1\")\n    fun markAllListsUnsynced()","prompt":""},{"id":3146,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"fun getAllLists(): List<ReadingList> {\n        val lists = getListsWithoutContents()\n        lists.forEach {\n            AppDatabase.instance.readingListPageDao().populateListPages(it)\n        }\n        return lists.toMutableList()\n    }","prompt":""},{"id":3147,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":[],"content":"fun getListById(id: Long, populatePages: Boolean): ReadingList? {\n        return getListById(id)?.apply {\n            if (populatePages) {\n                AppDatabase.instance.readingListPageDao().populateListPages(this)\n            }\n        }\n    }","prompt":""},{"id":3148,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"fun getAllListsWithUnsyncedPages(): List<ReadingList> {\n        val lists = getListsWithoutContents()\n        val pages = AppDatabase.instance.readingListPageDao().getAllPagesToBeSynced()\n        pages.forEach { page ->\n            lists.first { it.id == page.listId }.apply { this.pages.add(page) }\n        }\n        return lists\n    }","prompt":""},{"id":3149,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"fun updateList(list: ReadingList, queueForSync: Boolean) {\n        updateLists(listOf(list), queueForSync)\n    }","prompt":""},{"id":3150,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":[],"content":"fun updateLists(lists: List<ReadingList>, queueForSync: Boolean) {\n        for (list in lists) {\n            if (queueForSync) {\n                list.dirty = true\n            }\n            list.touch()\n            updateReadingList(list)\n        }\n        if (queueForSync) {\n            ReadingListSyncAdapter.manualSync()\n        }\n    }","prompt":""},{"id":3151,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"fun deleteList(list: ReadingList, queueForSync: Boolean = true) {\n        if (list.isDefault) {\n            L.w(\"Attempted to delete the default list.\")\n            return\n        }\n        deleteReadingList(list)\n        if (queueForSync) {\n            ReadingListSyncAdapter.manualSyncWithDeleteList(list)\n        }\n    }","prompt":""},{"id":3152,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"suspend fun getListsFromPageOccurrences(pages: List<ReadingListPage>): List<ReadingList> {\n        val lists = getListsByIds(pages.map { it.listId }.toSet())\n        pages.forEach { page ->\n            lists.filter { it.id == page.listId }.map { it.pages.add(page) }\n        }\n        return lists\n    }","prompt":""},{"id":3153,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"fun createList(title: String, description: String?): ReadingList {\n        if (title.isEmpty()) {\n            L.w(\"Attempted to create list with empty title (default).\")\n            return getDefaultList()\n        }\n        return createNewList(title, description)\n    }","prompt":""},{"id":3154,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"fun getDefaultList(): ReadingList {\n        return getListsWithoutContents().find { it.isDefault } ?: run {\n            L.w(\"(Re)creating default list.\")\n            createNewList(\"\", WikipediaApp.instance.getString(R.string.default_reading_list_description))\n        }\n    }","prompt":""},{"id":3155,"identifierName":"org.wikipedia.readinglist.db.ReadingListDao","requiredType":["data class ReadingList(var dbTitle: String, var description: String?, var mtime: Long = System.currentTimeMillis(), var atime: Long = mtime, var id: Long = 0, val pages: MutableList<ReadingListPage> = mutableListOf(), var sizeBytes: Long = 0, var dirty: Boolean = true, var remoteId: Long = 0)"],"content":"private fun createNewList(title: String, description: String?): ReadingList {\n        val protoList = ReadingList(title, description)\n        protoList.id = insertReadingList(protoList)\n        return protoList\n    }","prompt":""},{"id":3156,"identifierName":"com.simplemobiletools.musicplayer.interfaces.AlbumsDao","requiredType":["data class Album( @PrimaryKey(autoGenerate = true) val id: Long, @ColumnInfo(name = \"artist\") val artist: String, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"cover_art\") val coverArt: String, @ColumnInfo(name = \"year\") val year: Int, @ColumnInfo(name = \"track_cnt\") var trackCnt: Int, @ColumnInfo(name = \"artist_id\") var artistId: Long )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(album: Album): Long","prompt":""},{"id":3157,"identifierName":"com.simplemobiletools.musicplayer.interfaces.AlbumsDao","requiredType":["data class Album( @PrimaryKey(autoGenerate = true) val id: Long, @ColumnInfo(name = \"artist\") val artist: String, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"cover_art\") val coverArt: String, @ColumnInfo(name = \"year\") val year: Int, @ColumnInfo(name = \"track_cnt\") var trackCnt: Int, @ColumnInfo(name = \"artist_id\") var artistId: Long )"],"content":"@Query(\"SELECT * FROM albums\")\n    fun getAll(): List<Album>","prompt":""},{"id":3158,"identifierName":"com.simplemobiletools.musicplayer.interfaces.AlbumsDao","requiredType":["data class Album( @PrimaryKey(autoGenerate = true) val id: Long, @ColumnInfo(name = \"artist\") val artist: String, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"cover_art\") val coverArt: String, @ColumnInfo(name = \"year\") val year: Int, @ColumnInfo(name = \"track_cnt\") var trackCnt: Int, @ColumnInfo(name = \"artist_id\") var artistId: Long )"],"content":"@Query(\"SELECT * FROM albums WHERE artist_id = :artistId\")\n    fun getArtistAlbums(artistId: Long): List<Album>","prompt":""},{"id":3159,"identifierName":"com.simplemobiletools.musicplayer.interfaces.AlbumsDao","requiredType":[],"content":"@Query(\"DELETE FROM albums WHERE id = :id\")\n    fun deleteAlbum(id: Long)","prompt":""},{"id":3160,"identifierName":"com.akhbulatov.wordkeeper.data.global.local.database.wordcategory.WordCategoryDao","requiredType":[],"content":"@Query(\"SELECT * FROM categories\")\n    fun getAllWordCategories(): Flow<List<WordCategoryDbModel>>","prompt":""},{"id":3161,"identifierName":"com.akhbulatov.wordkeeper.data.global.local.database.wordcategory.WordCategoryDao","requiredType":[],"content":"@Insert\n    suspend fun insertWordCategory(model: WordCategoryDbModel)","prompt":""},{"id":3162,"identifierName":"com.akhbulatov.wordkeeper.data.global.local.database.wordcategory.WordCategoryDao","requiredType":[],"content":"@Update\n    suspend fun updateWordCategory(model: WordCategoryDbModel)","prompt":""},{"id":3163,"identifierName":"com.akhbulatov.wordkeeper.data.global.local.database.wordcategory.WordCategoryDao","requiredType":[],"content":"@Delete\n    suspend fun deleteWordCategory(model: WordCategoryDbModel)","prompt":""},{"id":3164,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM patch\")\n    suspend fun count(): Int","prompt":""},{"id":3165,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":[],"content":"@Query(\"SELECT * FROM patch WHERE active = 1 LIMIT 1\")\n    fun getActivePatch(): Flow<PatchEntity?>","prompt":""},{"id":3166,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":[],"content":"@Query(\"SELECT * FROM patch ORDER BY title\")\n    fun getAllPatches(): PagingSource<Int, PatchEntity>","prompt":""},{"id":3167,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":[],"content":"@Query(\"DELETE FROM patch WHERE title = :title\")\n    suspend fun deletePatch(title: String): Int","prompt":""},{"id":3168,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":["data class PagingSourcenull"],"content":"@Query(\"UPDATE patch SET active = 0 WHERE active = 1\")\n    suspend fun internalResetActive()","prompt":""},{"id":3169,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":[],"content":"@Query(\"UPDATE patch SET active = 1 WHERE title = :title\")\n    suspend fun internalSetActive(title: String): Int","prompt":""},{"id":3170,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.ABORT)\n    suspend fun internalInsertPatch(patch: PatchEntity): Long","prompt":""},{"id":3171,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun internalReplacePatch(patch: PatchEntity): Long","prompt":""},{"id":3172,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":[],"content":"@Transaction\n    suspend fun selectPatch(title: String): Int {\n        internalResetActive()\n        return internalSetActive(title)\n    }","prompt":""},{"id":3173,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":[],"content":"@Transaction\n    suspend fun insertPatch(patch: PatchEntity): Long {\n        internalResetActive()\n        return internalInsertPatch(patch)\n    }","prompt":""},{"id":3174,"identifierName":"net.simno.dmach.db.PatchDao","requiredType":[],"content":"@Transaction\n    suspend fun replacePatch(patch: PatchEntity): Long {\n        internalResetActive()\n        return internalReplacePatch(patch)\n    }","prompt":""},{"id":3175,"identifierName":"com.waz.zclient.storage.db.property.PropertiesDao","requiredType":[],"content":"@Query(\"SELECT * FROM Properties\")\n    suspend fun allProperties(): List<PropertiesEntity>","prompt":""},{"id":3176,"identifierName":"com.waz.zclient.storage.db.property.PropertiesDao","requiredType":[],"content":"@Query(\"SELECT * FROM Properties ORDER BY `key` LIMIT :batchSize OFFSET :start\")\n    override suspend fun nextBatch(start: Int, batchSize: Int): List<PropertiesEntity>?","prompt":""},{"id":3177,"identifierName":"com.waz.zclient.storage.db.property.PropertiesDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM Properties\")\n    override suspend fun count(): Int","prompt":""},{"id":3178,"identifierName":"com.waz.zclient.storage.db.messages.LikesDao","requiredType":[],"content":"@Query(\"SELECT * FROM Likings\")\n    suspend fun allLikes(): List<LikesEntity>","prompt":""},{"id":3179,"identifierName":"com.waz.zclient.storage.db.messages.LikesDao","requiredType":[],"content":"@Query(\"SELECT * FROM Likings ORDER BY message_id, user_id LIMIT :batchSize OFFSET :start\")\n    override suspend fun nextBatch(start: Int, batchSize: Int): List<LikesEntity>?","prompt":""},{"id":3180,"identifierName":"com.waz.zclient.storage.db.messages.LikesDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM Likings\")\n    override suspend fun count(): Int","prompt":""},{"id":3181,"identifierName":"com.simplemobiletools.notes.pro.interfaces.WidgetsDao","requiredType":["data class Widget( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"widget_id\") var widgetId: Int, @ColumnInfo(name = \"note_id\") var noteId: Long, @ColumnInfo(name = \"widget_bg_color\") var widgetBgColor: Int, @ColumnInfo(name = \"widget_text_color\") var widgetTextColor: Int, @ColumnInfo(name = \"widget_show_title\") var widgetShowTitle: Boolean)"],"content":"@Query(\"SELECT * FROM widgets\")\n    fun getWidgets(): List<Widget>","prompt":""},{"id":3182,"identifierName":"com.simplemobiletools.notes.pro.interfaces.WidgetsDao","requiredType":[],"content":"@Query(\"SELECT * FROM widgets WHERE widget_id = :widgetId\")\n    fun getWidgetWithWidgetId(widgetId: Int): Widget?","prompt":""},{"id":3183,"identifierName":"com.simplemobiletools.notes.pro.interfaces.WidgetsDao","requiredType":["data class Widget( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"widget_id\") var widgetId: Int, @ColumnInfo(name = \"note_id\") var noteId: Long, @ColumnInfo(name = \"widget_bg_color\") var widgetBgColor: Int, @ColumnInfo(name = \"widget_text_color\") var widgetTextColor: Int, @ColumnInfo(name = \"widget_show_title\") var widgetShowTitle: Boolean)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertOrUpdate(widget: Widget): Long","prompt":""},{"id":3184,"identifierName":"com.simplemobiletools.notes.pro.interfaces.WidgetsDao","requiredType":[],"content":"@Query(\"DELETE FROM widgets WHERE note_id = :noteId\")\n    fun deleteNoteWidgets(noteId: Long)","prompt":""},{"id":3185,"identifierName":"com.simplemobiletools.notes.pro.interfaces.WidgetsDao","requiredType":[],"content":"@Query(\"DELETE FROM widgets WHERE widget_id = :widgetId\")\n    fun deleteWidgetId(widgetId: Int)","prompt":""},{"id":3186,"identifierName":"data.tinder.recommendation.RecommendationUserInstagramDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertInstagram(instagram: RecommendationUserInstagramEntity)","prompt":""},{"id":3187,"identifierName":"data.tinder.recommendation.RecommendationUserInstagramDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserInstagramEntity WHERE username=:username\")\n  @Transaction\n  fun selectInstagramByUsername(username: String): List<RecommendationUserInstagramWithRelatives>","prompt":""},{"id":3188,"identifierName":"app.ss.storage.db.dao.ReadHighlightsDao","requiredType":[],"content":"@Query(\"SELECT * FROM highlights WHERE readIndex = :readIndex\")\n    fun get(readIndex: String): ReadHighlightsEntity?","prompt":""},{"id":3189,"identifierName":"com.waz.zclient.storage.db.assets.UploadAssetsDao","requiredType":[],"content":"@Query(\"SELECT * FROM UploadAssets\")\n    suspend fun allUploadAssets(): List<UploadAssetsEntity>","prompt":""},{"id":3190,"identifierName":"com.waz.zclient.storage.db.assets.UploadAssetsDao","requiredType":[],"content":"@Insert\n    suspend fun insertUploadAsset(asset: UploadAssetsEntity)","prompt":""},{"id":3191,"identifierName":"com.github.stakkato95.kmusic.mvp.repository.room.TrackDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertTracks(playerTracks: List<PlayerTrack>)","prompt":""},{"id":3192,"identifierName":"com.github.stakkato95.kmusic.mvp.repository.room.TrackDao","requiredType":[],"content":"@Query(\"SELECT * FROM PlayerTrack\")\n    fun getAllTracks(): Flowable<List<PlayerTrack>>","prompt":""},{"id":3193,"identifierName":"voice.data.repo.internals.dao.BookmarkDao","requiredType":[],"content":"@Query(\"DELETE FROM bookmark2 WHERE id = :id\")\n  suspend fun deleteBookmark(id: Bookmark.Id)","prompt":""},{"id":3194,"identifierName":"voice.data.repo.internals.dao.BookmarkDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  suspend fun addBookmark(bookmark: Bookmark)","prompt":""},{"id":3195,"identifierName":"voice.data.repo.internals.dao.BookmarkDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark2 WHERE chapterId IN(:chapters)\")\n  suspend fun allForChapters(chapters: List<@JvmSuppressWildcards Chapter.Id>): List<Bookmark>","prompt":""},{"id":3196,"identifierName":"org.stepik.android.cache.course_purchase.dao.BillingPurchasePayloadDao","requiredType":["data class BillingPurchasePayload( @PrimaryKey val orderId: String, val courseId: Long, val profileId: Long, val obfuscatedAccountId: String, val obfuscatedProfileId: String, val promoCode: String? )"],"content":"@Query(\"SELECT * FROM BillingPurchasePayload WHERE orderId = :orderId\")\n    fun getBillingPurchasePayload(orderId: String): Single<BillingPurchasePayload>","prompt":""},{"id":3197,"identifierName":"org.stepik.android.cache.course_purchase.dao.BillingPurchasePayloadDao","requiredType":["data class BillingPurchasePayload( @PrimaryKey val orderId: String, val courseId: Long, val profileId: Long, val obfuscatedAccountId: String, val obfuscatedProfileId: String, val promoCode: String? )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun saveBillingPurchasePayload(billingPurchasePayload: BillingPurchasePayload): Completable","prompt":""},{"id":3198,"identifierName":"org.stepik.android.cache.course_purchase.dao.BillingPurchasePayloadDao","requiredType":[],"content":"@Query(\"DELETE FROM BillingPurchasePayload WHERE orderId = :orderId\")\n    fun deleteBillingPurchasePayload(orderId: String): Completable","prompt":""},{"id":3199,"identifierName":"com.crossbowffs.quotelock.modules.custom.database.CustomQuoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${CustomQuoteContract.TABLE}\")\n    fun getAll(): Flow<List<CustomQuoteEntity>>","prompt":""},{"id":3200,"identifierName":"com.crossbowffs.quotelock.modules.custom.database.CustomQuoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${CustomQuoteContract.TABLE} WHERE ${CustomQuoteContract.ID} = :id\")\n    fun getById(id: Long): Flow<CustomQuoteEntity?>","prompt":""},{"id":3201,"identifierName":"com.crossbowffs.quotelock.modules.custom.database.CustomQuoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${CustomQuoteContract.TABLE} ORDER BY RANDOM() LIMIT 1\")\n    fun getRandomItem(): Flow<CustomQuoteEntity?>","prompt":""},{"id":3202,"identifierName":"com.crossbowffs.quotelock.modules.custom.database.CustomQuoteDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insert(quote: CustomQuoteEntity): Long?","prompt":""},{"id":3203,"identifierName":"com.crossbowffs.quotelock.modules.custom.database.CustomQuoteDao","requiredType":[],"content":"@Update\n    suspend fun update(quote: CustomQuoteEntity)","prompt":""},{"id":3204,"identifierName":"com.crossbowffs.quotelock.modules.custom.database.CustomQuoteDao","requiredType":[],"content":"@Query(\"DELETE FROM ${CustomQuoteContract.TABLE} WHERE ${CustomQuoteContract.ID} = :id\")\n    suspend fun delete(id: Long): Int","prompt":""},{"id":3205,"identifierName":"com.crossbowffs.quotelock.modules.custom.database.CustomQuoteDatabase","requiredType":[],"content":"abstract fun dao(): CustomQuoteDao","prompt":""},{"id":3206,"identifierName":"com.google.android.apps.muzei.room.ProviderDao","requiredType":[],"content":"@Query(\"SELECT * FROM provider\")\n    abstract suspend fun getCurrentProvider(): Provider?","prompt":""},{"id":3207,"identifierName":"com.google.android.apps.muzei.room.ProviderDao","requiredType":[],"content":"@Transaction\n    open suspend fun select(authority: String) {\n        deleteAll()\n        insert(Provider(authority))\n    }","prompt":""},{"id":3208,"identifierName":"com.google.android.apps.muzei.room.ProviderDao","requiredType":[],"content":"@Insert\n    internal abstract suspend fun insert(provider: Provider)","prompt":""},{"id":3209,"identifierName":"com.google.android.apps.muzei.room.ProviderDao","requiredType":[],"content":"@Update\n    abstract suspend fun update(provider: Provider)","prompt":""},{"id":3210,"identifierName":"com.google.android.apps.muzei.room.ProviderDao","requiredType":[],"content":"@Delete\n    abstract suspend fun delete(provider: Provider)","prompt":""},{"id":3211,"identifierName":"com.google.android.apps.muzei.room.ProviderDao","requiredType":[],"content":"@Query(\"DELETE FROM provider\")\n    internal abstract suspend fun deleteAll()","prompt":""},{"id":3212,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.WorkoutDao","requiredType":[],"content":"@Query(\"select * from workouts\")\n    fun getAllWorkouts(): Flowable<List<WorkoutObject>>","prompt":""},{"id":3213,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.WorkoutDao","requiredType":[],"content":"@Query(\"select * from workouts where id = :id\")\n    fun findWorkoutById(id: Long): WorkoutObject","prompt":""},{"id":3214,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.WorkoutDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertWorkout(workoutObject: WorkoutObject)","prompt":""},{"id":3215,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.WorkoutDao","requiredType":[],"content":"@Update(onConflict = REPLACE)\n    fun updateWorkout(workoutObject: WorkoutObject)","prompt":""},{"id":3216,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.WorkoutDao","requiredType":[],"content":"@Delete\n    fun deleteWorkout(workoutObject: WorkoutObject)","prompt":""},{"id":3217,"identifierName":"info.nightscout.androidaps.insight.database.InsightDatabaseDao","requiredType":[],"content":"@Query(\"SELECT * from $DATABASE_INSIGHT_BOLUS_IDS WHERE pumpSerial = :pumpSerial AND timestamp >= :timestamp - 259200000 AND timestamp <= :timestamp + 259200000 AND bolusID = :bolusID\")\n    abstract fun getInsightBolusID(pumpSerial: String, bolusID: Int, timestamp: Long): InsightBolusID?","prompt":""},{"id":3218,"identifierName":"info.nightscout.androidaps.insight.database.InsightDatabaseDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun createOrUpdate(insightBolusID: InsightBolusID)","prompt":""},{"id":3219,"identifierName":"info.nightscout.androidaps.insight.database.InsightDatabaseDao","requiredType":[],"content":"@Query(\"SELECT * from $DATABASE_INSIGHT_HISTORY_OFFSETS WHERE pumpSerial = :pumpSerial\")\n    abstract fun getInsightHistoryOffset(pumpSerial: String): InsightHistoryOffset?","prompt":""},{"id":3220,"identifierName":"info.nightscout.androidaps.insight.database.InsightDatabaseDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun createOrUpdate(insightHistoryOffset: InsightHistoryOffset)","prompt":""},{"id":3221,"identifierName":"info.nightscout.androidaps.insight.database.InsightDatabaseDao","requiredType":[],"content":"@Query(\"SELECT * from $DATABASE_INSIGHT_PUMP_IDS WHERE pumpSerial = :pumpSerial AND (eventType = :pumpStopped OR eventType = :pumpPaused) AND timestamp < :timestamp  ORDER BY timestamp DESC\")\n    abstract fun getPumpStoppedEvent(pumpSerial: String, timestamp: Long, pumpStopped: EventType, pumpPaused: EventType): InsightPumpID?","prompt":""},{"id":3222,"identifierName":"info.nightscout.androidaps.insight.database.InsightDatabaseDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun createOrUpdate(insightPumpID: InsightPumpID)","prompt":""},{"id":3223,"identifierName":"com.ayatk.biblio.infrastructure.database.dao.BookmarkDao","requiredType":[],"content":"@Query(\"SELECT * FROM bookmark\")\n  fun getAllBookmark(): Flowable<List<BookmarkEntity>>","prompt":""},{"id":3224,"identifierName":"com.ayatk.biblio.infrastructure.database.dao.BookmarkDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insert(bookmarks: List<BookmarkEntity>)","prompt":""},{"id":3225,"identifierName":"com.ayatk.biblio.infrastructure.database.dao.BookmarkDao","requiredType":["data class BookmarkEntity( @PrimaryKey var id: UUID, @ColumnInfo(name = \"novel_code\", index = true) var code: String, @ColumnInfo(index = true) var page: Int, var memo: String )"],"content":"@Delete\n  fun delete(bookmark: BookmarkEntity)","prompt":""},{"id":3226,"identifierName":"com.github.perseacado.aquasketch.frontend.media.MediaRepository","requiredType":[],"content":"@Query(\"{ 'userId': ?0, 'id': ?1 }\")\n    fun findById(userId: String, id: String): Media","prompt":""},{"id":3227,"identifierName":"de.stefanmedack.ccctv.persistence.daos.PlayPositionDao","requiredType":[],"content":"@Query(\"SELECT events.* FROM Events INNER JOIN play_positions WHERE events.id = play_positions.event_id ORDER BY created_at DESC\")\n    fun getPlayedEvents(): Flowable<List<Event>>","prompt":""},{"id":3228,"identifierName":"de.stefanmedack.ccctv.persistence.daos.PlayPositionDao","requiredType":[],"content":"@Query(\"SELECT seconds FROM play_positions WHERE event_id = :eventId\")\n    fun getPlaybackSeconds(eventId: String) : Single<Int>","prompt":""},{"id":3229,"identifierName":"de.stefanmedack.ccctv.persistence.daos.PlayPositionDao","requiredType":["data class PlayPosition( @ColumnInfo(name = \"event_id\") val eventId: String, @ColumnInfo(name = \"seconds\") val seconds: Int = 0, @ColumnInfo(name = \"created_at\") val createdAt: OffsetDateTime = OffsetDateTime.now() )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(playPosition: PlayPosition)","prompt":""},{"id":3230,"identifierName":"de.stefanmedack.ccctv.persistence.daos.PlayPositionDao","requiredType":["data class PlayPosition( @ColumnInfo(name = \"event_id\") val eventId: String, @ColumnInfo(name = \"seconds\") val seconds: Int = 0, @ColumnInfo(name = \"created_at\") val createdAt: OffsetDateTime = OffsetDateTime.now() )"],"content":"@Delete\n    fun delete(playPosition: PlayPosition)","prompt":""},{"id":3231,"identifierName":"com.moviereel.data.db.dao.MovieUpcomingDao","requiredType":["data class MovieUpcomingEntitynull"],"content":"// ****************** CREATE ************************\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertMovieUpcoming(vararg movieUpcomingEntity: MovieUpcomingEntity)","prompt":""},{"id":3232,"identifierName":"com.moviereel.data.db.dao.MovieUpcomingDao","requiredType":[],"content":"// ****************** READ ************************\n    @Query(\"select * from movie_upcoming\")\n    fun getAllMoviesUpcoming(): Flowable<List<MovieUpcomingEntity>>","prompt":""},{"id":3233,"identifierName":"com.moviereel.data.db.dao.MovieUpcomingDao","requiredType":["data class MovieUpcomingEntitynull"],"content":"@Query(\"select * from movie_upcoming where id = :id\")\n    fun getMovieUpcomingById(id: Long): Flowable<MovieUpcomingEntity>","prompt":""},{"id":3234,"identifierName":"com.moviereel.data.db.dao.MovieUpcomingDao","requiredType":["data class MovieUpcomingEntitynull"],"content":"@Update\n    fun updateMovieUpcoming(vararg movieUpcomingEntity: MovieUpcomingEntity)","prompt":""},{"id":3235,"identifierName":"com.moviereel.data.db.dao.MovieUpcomingDao","requiredType":["data class MovieUpcomingEntitynull"],"content":"@Delete\n    fun deleteMovieUpcoming(movieUpcomingEntity: MovieUpcomingEntity)","prompt":""},{"id":3236,"identifierName":"pl.org.seva.events.comm.CommsDao","requiredType":[],"content":"suspend infix fun delete(comm: Comm) = delete(Comm.Entity(comm))","prompt":""},{"id":3237,"identifierName":"pl.org.seva.events.comm.CommsDao","requiredType":[],"content":"open suspend infix fun add(comm: Comm) = insert(Comm.Entity(comm))","prompt":""},{"id":3238,"identifierName":"pl.org.seva.events.comm.CommsDao","requiredType":[],"content":"suspend fun getAllValues() = getAll().map { it.value() }","prompt":""},{"id":3239,"identifierName":"pl.org.seva.events.comm.CommsDao","requiredType":[],"content":"suspend infix fun add(comms: Collection<Comm>) = insert(comms.map { Comm.Entity(it) })","prompt":""},{"id":3240,"identifierName":"pl.org.seva.events.comm.CommsDao","requiredType":[],"content":"@Query(\"select * from ${EventsDb.COMM_TABLE}\")\n    abstract suspend fun getAll(): List<Comm.Entity>","prompt":""},{"id":3241,"identifierName":"pl.org.seva.events.comm.CommsDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insert(comm: Comm.Entity)","prompt":""},{"id":3242,"identifierName":"pl.org.seva.events.comm.CommsDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insert(comms: Collection<Comm.Entity>)","prompt":""},{"id":3243,"identifierName":"pl.org.seva.events.comm.CommsDao","requiredType":[],"content":"@Delete\n    abstract suspend fun delete(comm: Comm.Entity)","prompt":""},{"id":3244,"identifierName":"pl.org.seva.events.comm.CommsDao","requiredType":[],"content":"@Update\n    abstract suspend fun update(comm: Comm.Entity)","prompt":""},{"id":3245,"identifierName":"pl.org.seva.events.comm.CommsDao","requiredType":[],"content":"@Query(\"delete from ${EventsDb.COMM_TABLE}\")\n    abstract suspend fun clear()","prompt":""},{"id":3246,"identifierName":"com.example.android.inventory.database.ItemsDao","requiredType":[],"content":"@Query(\"SELECT * FROM Item\")\n    fun getAllItems(): LiveData<List<Item>>","prompt":""},{"id":3247,"identifierName":"com.example.android.inventory.database.ItemsDao","requiredType":["data class Itemnull"],"content":"@Insert\n    fun addItem(@NonNull item: Item): Long","prompt":""},{"id":3248,"identifierName":"com.example.android.inventory.database.ItemsDao","requiredType":["data class Itemnull"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updateItem(@NonNull item: Item): Int","prompt":""},{"id":3249,"identifierName":"com.example.android.inventory.database.ItemsDao","requiredType":["data class Itemnull"],"content":"@Delete\n    fun deleteItem(@NonNull item: Item): Int","prompt":""},{"id":3250,"identifierName":"com.example.android.inventory.database.ItemsDao","requiredType":[],"content":"@Query(\"DELETE FROM Item\")\n    fun deleteAllItems()","prompt":""},{"id":3251,"identifierName":"org.github.snt.dao.api.repo.spring.NoteSpringDataRepo","requiredType":[],"content":"@Query(\"select t from Note t where t.parentId = ?1\")\n    fun findByParentId(parentId: Long): List<Note>","prompt":""},{"id":3252,"identifierName":"com.example.inventory.data.ItemDao","requiredType":[],"content":"@Query(\"SELECT * from item ORDER BY name ASC\")\n    fun getItems(): Flow<List<Item>>","prompt":""},{"id":3253,"identifierName":"com.example.inventory.data.ItemDao","requiredType":[],"content":"@Query(\"SELECT * from item WHERE id = :id\")\n    fun getItem(id: Int): Flow<Item>","prompt":""},{"id":3254,"identifierName":"com.example.inventory.data.ItemDao","requiredType":[],"content":"// Specify the conflict strategy as IGNORE, when the user tries to add an\n    // existing Item into the database Room ignores the conflict.\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insert(item: Item)","prompt":""},{"id":3255,"identifierName":"com.example.inventory.data.ItemDao","requiredType":[],"content":"@Update\n    suspend fun update(item: Item)","prompt":""},{"id":3256,"identifierName":"com.example.inventory.data.ItemDao","requiredType":[],"content":"@Delete\n    suspend fun delete(item: Item)","prompt":""},{"id":3257,"identifierName":"io.sweers.catchup.data.ServiceDao","requiredType":[],"content":"@Query(\"SELECT * FROM pages WHERE type = :type AND page = 0 AND expiration > :expiration\")\n  fun getFirstServicePage(type: String, expiration: Instant): Maybe<ServicePage>","prompt":""},{"id":3258,"identifierName":"io.sweers.catchup.data.ServiceDao","requiredType":[],"content":"@Query(\"SELECT * FROM pages WHERE type = :type AND page = 0 ORDER BY expiration DESC\")\n  fun getFirstServicePage(type: String): Maybe<ServicePage>","prompt":""},{"id":3259,"identifierName":"io.sweers.catchup.data.ServiceDao","requiredType":[],"content":"@Query(\"SELECT * FROM pages WHERE type = :type AND page = :page ORDER BY expiration DESC\")\n  fun getFirstServicePage(type: String, page: String): Maybe<ServicePage>","prompt":""},{"id":3260,"identifierName":"io.sweers.catchup.data.ServiceDao","requiredType":[],"content":"@Query(\"SELECT * FROM pages WHERE type = :type AND page = :page AND sessionId = :sessionId\")\n  fun getServicePage(type: String, page: String, sessionId: Long): Maybe<ServicePage>","prompt":""},{"id":3261,"identifierName":"io.sweers.catchup.data.ServiceDao","requiredType":["data class CatchUpItem( @PrimaryKey val id: Long, val title: String, val description: String? = null, val timestamp: Instant?, val score: Pair<String, Int>? = null, val tag: String? = null, val author: String? = null, val source: String? = null, val itemClickUrl: String? = null, @Embedded val summarizationInfo: SummarizationInfo? = null, @Embedded val imageInfo: ImageInfo? = null, @Embedded val mark: Mark? = null, val detailKey: String? = null )"],"content":"@Query(\"SELECT * FROM items WHERE id = :id\")\n  fun getItemById(id: Long): Maybe<CatchUpItem>","prompt":""},{"id":3262,"identifierName":"io.sweers.catchup.data.ServiceDao","requiredType":[],"content":"@Query(\"SELECT * FROM items WHERE id IN(:ids)\")\n  fun getItemByIds(ids: Array<Long>): Maybe<List<CatchUpItem>>","prompt":""},{"id":3263,"identifierName":"io.sweers.catchup.data.ServiceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun putPage(page: ServicePage): Completable","prompt":""},{"id":3264,"identifierName":"io.sweers.catchup.data.ServiceDao","requiredType":["data class CatchUpItem( @PrimaryKey val id: Long, val title: String, val description: String? = null, val timestamp: Instant?, val score: Pair<String, Int>? = null, val tag: String? = null, val author: String? = null, val source: String? = null, val itemClickUrl: String? = null, @Embedded val summarizationInfo: SummarizationInfo? = null, @Embedded val imageInfo: ImageInfo? = null, @Embedded val mark: Mark? = null, val detailKey: String? = null )","data class Keepnull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun putItem(item: CatchUpItem)","prompt":""},{"id":3265,"identifierName":"io.sweers.catchup.data.ServiceDao","requiredType":["data class CatchUpItem( @PrimaryKey val id: Long, val title: String, val description: String? = null, val timestamp: Instant?, val score: Pair<String, Int>? = null, val tag: String? = null, val author: String? = null, val source: String? = null, val itemClickUrl: String? = null, @Embedded val summarizationInfo: SummarizationInfo? = null, @Embedded val imageInfo: ImageInfo? = null, @Embedded val mark: Mark? = null, val detailKey: String? = null )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun putItems(vararg item: CatchUpItem): Completable","prompt":""},{"id":3266,"identifierName":"backend.model.challenges.ChallengeRepository","requiredType":[],"content":"fun findByTeamId(teamId: Long): Iterable<Challenge>","prompt":""},{"id":3267,"identifierName":"backend.model.challenges.ChallengeRepository","requiredType":[],"content":"@Query(\"Select c from Challenge c where c.registeredSponsor.account.id = :id\")\n    fun findBySponsorAccountId(@Param(\"id\") sponsorId: Long): Iterable<Challenge>","prompt":""},{"id":3268,"identifierName":"backend.model.challenges.ChallengeRepository","requiredType":[],"content":"fun findChallengeProveProjectionById(challengeId: Long): ChallengeProofProjection","prompt":""},{"id":3269,"identifierName":"backend.model.challenges.ChallengeRepository","requiredType":["data class UnregisteredSponsornull"],"content":"@Query(\"select s from Challenge c join c.registeredSponsor as s where c.team.event.id = :eventId\")\n    fun findAllRegisteredSponsorsWithChallengesAtEvent(@Param(\"eventId\") eventId: Long): Iterable<Sponsor>","prompt":""},{"id":3270,"identifierName":"backend.model.challenges.ChallengeRepository","requiredType":["data class UnregisteredSponsornull"],"content":"@Query(\"select s from Challenge c join c.unregisteredSponsor as s where c.team.event.id = :eventId\")\n    fun findAllUnregisteredSponsorsWithChallengesAtEvent(@Param(\"eventId\") eventId: Long): Iterable<UnregisteredSponsor>","prompt":""},{"id":3271,"identifierName":"backend.model.challenges.ChallengeRepository","requiredType":[],"content":"@Query(\"select c from Challenge c where c.team.event.id in :eventIds\")\n    fun findAllChallengesForEvents(@Param(\"eventIds\") eventIds: Iterable<Long>): Iterable<Challenge>","prompt":""},{"id":3272,"identifierName":"androidx.paging.compose.demos.room.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM Users ORDER BY name COLLATE NOCASE ASC\")\n    fun allUsers(): PagingSource<Int, User>","prompt":""},{"id":3273,"identifierName":"androidx.paging.compose.demos.room.UserDao","requiredType":["data class PagingSourcenull"],"content":"@Insert\n    fun insert(user: User)","prompt":""},{"id":3274,"identifierName":"androidx.paging.compose.demos.room.UserDao","requiredType":["data class PagingSourcenull"],"content":"@Delete\n    fun delete(user: User)","prompt":""},{"id":3275,"identifierName":"androidx.paging.compose.demos.room.UserDao","requiredType":["data class PagingSourcenull"],"content":"@Update\n    fun update(user: User)","prompt":""},{"id":3276,"identifierName":"androidx.paging.compose.demos.room.UserDao","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM users\")\n    fun clearAll()","prompt":""},{"id":3277,"identifierName":"androidx.paging.compose.demos.room.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM users ORDER BY RANDOM() LIMIT 1\")\n    fun getRandomUser(): User?","prompt":""},{"id":3278,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookContent2Dao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  suspend fun insert(content2: BookContent2)","prompt":""},{"id":3279,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookContent2Dao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  suspend fun insert(content2: List<BookContent2>)","prompt":""},{"id":3280,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookContent2Dao","requiredType":[],"content":"@Query(\"SELECT * FROM content2 WHERE id = :id\")\n  suspend fun byId(id: Book2.Id): BookContent2?","prompt":""},{"id":3281,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.BookContent2Dao","requiredType":[],"content":"@Query(\"SELECT * FROM content2 WHERE isActive = :isActive\")\n  suspend fun all(isActive: Boolean): List<BookContent2>","prompt":""},{"id":3282,"identifierName":"com.stronganizer.android.data.source.local.db.dao.UserDao","requiredType":[],"content":"@Insert fun insertAll(vararg users: User)","prompt":""},{"id":3283,"identifierName":"com.stronganizer.android.data.source.local.db.dao.UserDao","requiredType":[],"content":"@Update fun update(user: User)","prompt":""},{"id":3284,"identifierName":"com.stronganizer.android.data.source.local.db.dao.UserDao","requiredType":[],"content":"@Delete fun delete(user: User)","prompt":""},{"id":3285,"identifierName":"com.stronganizer.android.data.source.local.db.dao.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user WHERE id = :id\") fun findById(id: Int): LiveData<User>","prompt":""},{"id":3286,"identifierName":"com.stronganizer.android.data.source.local.db.dao.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user\") fun findAll(): LiveData<List<User>>","prompt":""},{"id":3287,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.genre.RoomGenreService","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(data: RoomGenre): Long","prompt":""},{"id":3288,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.genre.RoomGenreService","requiredType":[],"content":"@Query(\"select genre.* from genre \" +\n            \"LEFT JOIN game_genre ON genre.id = game_genre.genreId \" +\n            \"WHERE game_genre.gameId = :id\")\n    fun findForGame(id: Int): Flowable<List<RoomGenre>>","prompt":""},{"id":3289,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.genre.RoomGenreService","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertGameGenre(data: RoomGameGenre): Long","prompt":""},{"id":3290,"identifierName":"com.marknkamau.justjava.data.db.CartDao","requiredType":["data class CartProductEntity( @PrimaryKey(autoGenerate = true) val id: Long, @ColumnInfo(name = \"product_id\") var productId: Long, @ColumnInfo(name = \"product_name\") var productName: String, @ColumnInfo(name = \"product_base_price\") var productBasePrice: Double, @ColumnInfo(name = \"total_price\") var totalPrice: Double, @ColumnInfo(name = \"quantity\") var quantity: Int )"],"content":"@Insert\n    suspend fun addItem(orderItem: CartProductEntity): Long","prompt":""},{"id":3291,"identifierName":"com.marknkamau.justjava.data.db.CartDao","requiredType":["data class CartOptionEntity( @PrimaryKey(autoGenerate = true) var id: Long, @ColumnInfo(name = \"choice_id\") var choiceId: Long, @ColumnInfo(name = \"choice_name\") var choiceName: String, @ColumnInfo(name = \"option_id\") var optionId: Long, @ColumnInfo(name = \"option_name\") var optionName: String, @ColumnInfo(name = \"option_price\") var optionPrice: Double, @ColumnInfo(name = \"cart_products_row_id\") var cartProductsRowId: Long )"],"content":"@Insert\n    suspend fun addItem(option: CartOptionEntity): Long","prompt":""},{"id":3292,"identifierName":"com.marknkamau.justjava.data.db.CartDao","requiredType":["data class CartItem( @Embedded val cartItem: CartProductEntity, @Relation(parentColumn = \"id\", entityColumn = \"cart_products_row_id\") var options: List<CartOptionEntity> )"],"content":"@Query(\"SELECT * FROM cart_products\")\n    suspend fun getAllWithOptions(): List<CartItem>","prompt":""},{"id":3293,"identifierName":"com.marknkamau.justjava.data.db.CartDao","requiredType":[],"content":"@Query(\"SELECT SUM(total_price) from cart_products\")\n    suspend fun getTotal(): String","prompt":""},{"id":3294,"identifierName":"com.marknkamau.justjava.data.db.CartDao","requiredType":["data class CartProductEntity( @PrimaryKey(autoGenerate = true) val id: Long, @ColumnInfo(name = \"product_id\") var productId: Long, @ColumnInfo(name = \"product_name\") var productName: String, @ColumnInfo(name = \"product_base_price\") var productBasePrice: Double, @ColumnInfo(name = \"total_price\") var totalPrice: Double, @ColumnInfo(name = \"quantity\") var quantity: Int )"],"content":"@Delete\n    suspend fun deleteItem(item: CartProductEntity)","prompt":""},{"id":3295,"identifierName":"com.marknkamau.justjava.data.db.CartDao","requiredType":[],"content":"@Query(\"DELETE FROM cart_products\")\n    suspend fun deleteAll()","prompt":""},{"id":3296,"identifierName":"com.marknkamau.justjava.data.db.CartDao","requiredType":["data class CartProductEntity( @PrimaryKey(autoGenerate = true) val id: Long, @ColumnInfo(name = \"product_id\") var productId: Long, @ColumnInfo(name = \"product_name\") var productName: String, @ColumnInfo(name = \"product_base_price\") var productBasePrice: Double, @ColumnInfo(name = \"total_price\") var totalPrice: Double, @ColumnInfo(name = \"quantity\") var quantity: Int )"],"content":"@Update\n    suspend fun updateItem(item: CartProductEntity)","prompt":""},{"id":3297,"identifierName":"org.wikipedia.notifications.db.NotificationDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertNotifications(notifications: List<Notification>)","prompt":""},{"id":3298,"identifierName":"org.wikipedia.notifications.db.NotificationDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun updateNotification(notification: Notification)","prompt":""},{"id":3299,"identifierName":"org.wikipedia.notifications.db.NotificationDao","requiredType":[],"content":"@Delete\n    suspend fun deleteNotification(notification: Notification)","prompt":""},{"id":3300,"identifierName":"org.wikipedia.notifications.db.NotificationDao","requiredType":[],"content":"@Query(\"SELECT * FROM Notification\")\n    fun getAllNotifications(): Flow<List<Notification>>","prompt":""},{"id":3301,"identifierName":"org.wikipedia.notifications.db.NotificationDao","requiredType":[],"content":"@Query(\"SELECT * FROM Notification WHERE `wiki` IN (:wiki)\")\n    fun getNotificationsByWiki(wiki: List<String>): Flow<List<Notification>>","prompt":""},{"id":3302,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Query(\"SELECT * FROM Bookmark\")\n    fun all(): List<Bookmark>","prompt":""},{"id":3303,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Query(\"SELECT * FROM Bookmark WHERE parent = :folderName\")\n    fun findByParent(folderName: String): List<Bookmark>","prompt":""},{"id":3304,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Query(\"SELECT * FROM Bookmark WHERE title LIKE :query LIMIT :limit\")\n    fun search(query: String, limit: Int): List<Bookmark>","prompt":""},{"id":3305,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun add(bookmark: Bookmark)","prompt":""},{"id":3306,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Delete\n    fun delete(bookmark: Bookmark)","prompt":""},{"id":3307,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Query(\"DELETE FROM Bookmark\")\n    fun clear()","prompt":""},{"id":3308,"identifierName":"info.nightscout.androidaps.database.daos.APSResultLinkDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_APS_RESULT_LINKS WHERE id = :id\")\n    override fun findById(id: Long): APSResultLink?","prompt":""},{"id":3309,"identifierName":"info.nightscout.androidaps.database.daos.APSResultLinkDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_APS_RESULTS\")\n    override fun deleteAllEntries()","prompt":""},{"id":3310,"identifierName":"info.nightscout.androidaps.database.daos.APSResultLinkDao","requiredType":["data class APSResultLink( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = null, var apsResultId: Long, var smbId: Long? = null, var tbrId: Long? = null )"],"content":"@Query(\"SELECT * FROM $TABLE_APS_RESULT_LINKS WHERE dateCreated > :since AND dateCreated <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<APSResultLink>","prompt":""},{"id":3311,"identifierName":"com.ak47.cms.cms.dao.FinanceInfoCalendarRespository","requiredType":[],"content":"@Query(\"select count(*) from finance_info_calendar where item_id = :item_id\", nativeQuery = true)\n    fun countByItemId(@Param(\"item_id\") item_id: String): Int","prompt":""},{"id":3312,"identifierName":"com.ak47.cms.cms.dao.FinanceInfoCalendarRespository","requiredType":[],"content":"@Query(\"SELECT a from #{#entityName} a  where  date(a.date_stamp) = date(:date_stamp)  order by a.timestamp desc\")\n    fun findFinanceInfoCalendarAll(@Param(\"date_stamp\") date_stamp: Date): MutableList<FinanceInfoCalendar>","prompt":""},{"id":3313,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrderMetaDataDao","requiredType":["data class OrderMetaDataEntity( @ColumnInfo(name = \"localSiteId\") val localSiteId: LocalId, val id: Long, val orderId: Long, val key: String, val value: String )"],"content":"@Insert(onConflict = REPLACE)\n    abstract fun insertOrUpdateMetaData(metaDataEntity: OrderMetaDataEntity)","prompt":""},{"id":3314,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrderMetaDataDao","requiredType":["data class OrderMetaDataEntity( @ColumnInfo(name = \"localSiteId\") val localSiteId: LocalId, val id: Long, val orderId: Long, val key: String, val value: String )"],"content":"@Query(\"SELECT * FROM OrderMetaData WHERE orderId = :orderId AND localSiteId = :localSiteId\")\n    abstract suspend fun getOrderMetaData(orderId: Long, localSiteId: LocalId): List<OrderMetaDataEntity>","prompt":""},{"id":3315,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrderMetaDataDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM OrderMetaData WHERE orderId = :orderId AND localSiteId = :localSiteId\")\n    abstract suspend fun getOrderMetaDataCount(orderId: Long, localSiteId: LocalId): Int","prompt":""},{"id":3316,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrderMetaDataDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM OrderMetaData WHERE localSiteId = :localSiteId AND orderId = :orderId\")\n    abstract fun deleteOrderMetaData(localSiteId: LocalId, orderId: Long)","prompt":""},{"id":3317,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrderMetaDataDao","requiredType":[],"content":"@Transaction\n    open fun updateOrderMetaData(\n        orderId: Long,\n        localSiteId: LocalId,\n        metaData: List<OrderMetaDataEntity>\n    ) {\n        deleteOrderMetaData(localSiteId, orderId)\n        metaData.forEach {\n            insertOrUpdateMetaData(it)\n        }\n    }","prompt":""},{"id":3318,"identifierName":"org.wordpress.android.fluxc.persistence.dao.OrderMetaDataDao","requiredType":[],"content":"suspend fun hasOrderMetaData(orderId: Long, localSiteId: LocalId): Boolean {\n        return getOrderMetaDataCount(orderId, localSiteId) > 0\n    }","prompt":""},{"id":3319,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT * FROM article ORDER BY lastModified DESC\")\n    fun getAllWithContent(): List<Article>","prompt":""},{"id":3320,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT id, title, lastModified, length FROM article ORDER BY lastModified DESC\")\n    fun orderByLastModified(): PagingSource<Int, SearchResult>","prompt":""},{"id":3321,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT id, title, lastModified, length FROM article ORDER BY title DESC\")\n    fun orderByName(): PagingSource<Int, SearchResult>","prompt":""},{"id":3322,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT id, title, lastModified, length FROM article ORDER BY length DESC, lastModified DESC\")\n    fun orderByLength(): PagingSource<Int, SearchResult>","prompt":""},{"id":3323,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT id, title, lastModified, length FROM article WHERE title LIKE :title ORDER BY lastModified DESC\")\n    fun filter(title: String): PagingSource<Int, SearchResult>","prompt":""},{"id":3324,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT contentText FROM article WHERE title = :title LIMIT 1\")\n    fun findContentByTitle(title: String): String?","prompt":""},{"id":3325,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT * FROM article WHERE title LIKE :title LIMIT 1\")\n    fun findFirst(title: String): Article?","prompt":""},{"id":3326,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT article.id, article.title, article.lastModified, article.length FROM article JOIN articleFts ON (article.id = articleFts.docid) WHERE articleFts MATCH :query ORDER BY lastModified DESC\")\n    fun search(query: String): PagingSource<Int, SearchResult>","prompt":""},{"id":3327,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":["data class PagingSourcenull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(entity: Article)","prompt":""},{"id":3328,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":["data class PagingSourcenull"],"content":"@Transaction\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(entities: Collection<Article>)","prompt":""},{"id":3329,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM article WHERE article.id = :id\")\n    fun delete(id: Int)","prompt":""},{"id":3330,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM article\")\n    fun deleteAll()","prompt":""},{"id":3331,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT * FROM article WHERE article.id = :articleId\")\n    fun findArticleById(articleId: Int): Article","prompt":""},{"id":3332,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT article.id, article.title, article.lastModified, article.length FROM article WHERE article.id IN (:articleIds)\")\n    fun findByIds(articleIds: List<Int>): PagingSource<Int, SearchResult>","prompt":""},{"id":3333,"identifierName":"jp.toastkid.article_viewer.article.ArticleRepository","requiredType":[],"content":"@Query(\"SELECT COUNT(article.title) FROM article WHERE article.title = :title\")\n    fun exists(title: String): Int","prompt":""},{"id":3334,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM GlobalAddonGroupEntity WHERE siteRemoteId = :siteRemoteId\")\n    abstract fun observeGlobalAddonsForSite(siteRemoteId: Long): Flow<List<GlobalAddonGroupWithAddons>>","prompt":""},{"id":3335,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM AddonEntity WHERE siteRemoteId = :siteRemoteId AND productRemoteId = :productRemoteId\")\n    abstract fun observeSingleProductAddons(siteRemoteId: Long, productRemoteId: Long): Flow<List<AddonWithOptions>>","prompt":""},{"id":3336,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertGroup(globalAddonGroupEntity: GlobalAddonGroupEntity): Long","prompt":""},{"id":3337,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertAddons(addonEntities: AddonEntity): Long","prompt":""},{"id":3338,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertAddonOptions(vararg addonOptions: AddonOptionEntity)","prompt":""},{"id":3339,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"@Query(\"DELETE FROM GlobalAddonGroupEntity WHERE siteRemoteId = :siteRemoteId\")\n    abstract suspend fun deleteGlobalAddonsForSite(siteRemoteId: Long)","prompt":""},{"id":3340,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"@Query(\"DELETE FROM AddonEntity WHERE productRemoteId = :productRemoteId AND siteRemoteId = :siteRemoteId\")\n    abstract suspend fun deleteAddonsForSpecifiedProduct(productRemoteId: Long, siteRemoteId: Long)","prompt":""},{"id":3341,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"@Transaction\n    open suspend fun cacheGroups(\n        globalAddonGroups: List<GlobalAddonGroup>,\n        siteRemoteId: Long\n    ) {\n        deleteGlobalAddonsForSite(siteRemoteId)\n\n        globalAddonGroups.forEach { group ->\n            val entity = ToDatabaseAddonGroupMapper.toEntityModel(\n                    domain = group,\n                    siteRemoteId = siteRemoteId\n            )\n            val globalAddonGroupEntityId = insertGroup(entity)\n            insertAddonEntity(group.addons, globalAddonGroupEntityId)\n        }\n    }","prompt":""},{"id":3342,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"@Transaction\n    open suspend fun cacheProductAddons(\n        productRemoteId: Long,\n        siteRemoteId: Long,\n        addons: List<Addon>\n    ) {\n        deleteAddonsForSpecifiedProduct(productRemoteId = productRemoteId, siteRemoteId = siteRemoteId)\n\n        addons.forEach { addon ->\n\n            val addonEntity = ToDatabaseAddonsMapper.toEntityModel(\n                    domain = addon,\n                    productBasedIdentification = ProductBasedIdentification(\n                            siteRemoteId = siteRemoteId,\n                            productRemoteId = productRemoteId\n                    )\n            )\n            val addonEntityId = insertAddons(addonEntity)\n\n            if (addon is HasOptions) {\n                insertAddonOptionEntity(addon.options, addonEntityId)\n            }\n        }\n    }","prompt":""},{"id":3343,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"private suspend fun insertAddonEntity(\n        addons: List<Addon>,\n        groupId: Long\n    ) {\n        addons.forEach { addon ->\n            val addonEntity = ToDatabaseAddonsMapper.toEntityModel(\n                    domain = addon,\n                    globalGroupLocalId = groupId\n            )\n            val addonEntityId = insertAddons(addonEntity)\n\n            if (addon is HasOptions) {\n                insertAddonOptionEntity(addon.options, addonEntityId)\n            }\n        }\n    }","prompt":""},{"id":3344,"identifierName":"org.wordpress.android.fluxc.persistence.dao.AddonsDao","requiredType":[],"content":"private suspend fun insertAddonOptionEntity(\n        options: List<HasOptions.Option>?,\n        addonEntityId: Long\n    ) {\n        options?.forEach { addonOption ->\n            DatabaseAddonOptionMapper.toLocalEntity(addonOption, addonEntityId)\n            val addonOptionEntity = DatabaseAddonOptionMapper.toLocalEntity(\n                    addonLocalId = addonEntityId,\n                    domain = addonOption\n            )\n            insertAddonOptions(addonOptionEntity)\n        }\n    }","prompt":""},{"id":3345,"identifierName":"me.liuqingwen.android.projectparcelabledata.DatabaseHelper","requiredType":[],"content":"fun getContactById(id:Long) = this.contactDao.findContactById(id)","prompt":""},{"id":3346,"identifierName":"me.liuqingwen.android.projectparcelabledata.DatabaseHelper","requiredType":[],"content":"fun getAllContacts() = this.contactDao.findAllContacts()","prompt":""},{"id":3347,"identifierName":"me.liuqingwen.android.projectparcelabledata.DatabaseHelper","requiredType":[],"content":"fun addContacts(vararg contact:Contact) = this.contactDao.insertContacts(*contact)","prompt":""},{"id":3348,"identifierName":"me.liuqingwen.android.projectparcelabledata.DatabaseHelper","requiredType":[],"content":"fun modifyContacts(vararg contact:Contact) = this.contactDao.updateContacts(*contact)","prompt":""},{"id":3349,"identifierName":"me.liuqingwen.android.projectparcelabledata.DatabaseHelper","requiredType":[],"content":"fun removeContacts(vararg contact:Contact) = this.contactDao.deleteContacts(*contact)","prompt":""},{"id":3350,"identifierName":"me.liuqingwen.android.projectparcelabledata.Contact","requiredType":[],"content":"override fun writeToParcel(parcel: Parcel, flags: Int)\n    {\n        parcel.writeLong(this.id)\n        parcel.writeString(this.name)\n        parcel.writeString(this.phone)\n        parcel.writeLong(this.birthday)\n        parcel.writeString(this.address)\n        parcel.writeString(this.profile)\n        parcel.writeByte(if (this.isStarContact) 1 else 0)\n        parcel.writeString(this.info)\n    }","prompt":""},{"id":3351,"identifierName":"me.liuqingwen.android.projectparcelabledata.Contact","requiredType":[],"content":"override fun describeContents(): Int = 0","prompt":""},{"id":3352,"identifierName":"me.liuqingwen.android.projectparcelabledata.ContactDao","requiredType":[],"content":"@Query(\"SELECT * FROM contact WHERE id = :arg0\")\n    fun findContactById(id:Long):Contact?","prompt":""},{"id":3353,"identifierName":"me.liuqingwen.android.projectparcelabledata.ContactDao","requiredType":[],"content":"@Query(\"SELECT * FROM contact\")\n    fun findAllContacts():List<Contact>","prompt":""},{"id":3354,"identifierName":"me.liuqingwen.android.projectparcelabledata.ContactDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertContacts(vararg contact:Contact)","prompt":""},{"id":3355,"identifierName":"me.liuqingwen.android.projectparcelabledata.ContactDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.ABORT)\n    fun updateContacts(vararg contact:Contact)","prompt":""},{"id":3356,"identifierName":"me.liuqingwen.android.projectparcelabledata.ContactDao","requiredType":[],"content":"@Delete\n    fun deleteContacts(vararg contact:Contact)","prompt":""},{"id":3357,"identifierName":"me.liuqingwen.android.projectparcelabledata.AppDatabase","requiredType":[],"content":"abstract fun contactDao():ContactDao","prompt":""},{"id":3358,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.WidgetsDao","requiredType":["data class Widget( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"widget_id\") var widgetId: Int, @ColumnInfo(name = \"period\") var period: Int)"],"content":"@Query(\"SELECT * FROM widgets\")\n    fun getWidgets(): List<Widget>","prompt":""},{"id":3359,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.WidgetsDao","requiredType":[],"content":"@Query(\"SELECT * FROM widgets WHERE widget_id = :widgetId\")\n    fun getWidgetWithWidgetId(widgetId: Int): Widget?","prompt":""},{"id":3360,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.WidgetsDao","requiredType":["data class Widget( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"widget_id\") var widgetId: Int, @ColumnInfo(name = \"period\") var period: Int)"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertOrUpdate(widget: Widget): Long","prompt":""},{"id":3361,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.WidgetsDao","requiredType":[],"content":"@Query(\"DELETE FROM widgets WHERE widget_id = :widgetId\")\n    fun deleteWidgetId(widgetId: Int)","prompt":""},{"id":3362,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun inserts(statuses: MutableList<Status>): MutableList<Long>","prompt":""},{"id":3363,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":["data class Statusconstructor( @NonNull @SerializedName(\"id\") var id: String = \"\", @NonNull var uid: String = \"\", @SerializedName(\"text\") var text: String? = null, @SerializedName(\"source\") var source: String? = null, @SerializedName(\"location\") var location: String? = null, @Ignore @SerializedName(\"user\") var user: Player? = null, @SerializedName(\"created_at\") var createdAt: Date? = null, @Embedded(prefix = \"player_\") var playerExtracts: PlayerExtracts? = null, @Embedded(prefix = \"photo_\") @SerializedName(\"photo\") var photos: Photos? = null, @SerializedName(\"favorited\") var favorited: Boolean = false, var pathFlag: Int = 0 )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(status: Status): Long","prompt":""},{"id":3364,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updates(statuses: MutableList<Status>): Int","prompt":""},{"id":3365,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":["data class Statusconstructor( @NonNull @SerializedName(\"id\") var id: String = \"\", @NonNull var uid: String = \"\", @SerializedName(\"text\") var text: String? = null, @SerializedName(\"source\") var source: String? = null, @SerializedName(\"location\") var location: String? = null, @Ignore @SerializedName(\"user\") var user: Player? = null, @SerializedName(\"created_at\") var createdAt: Date? = null, @Embedded(prefix = \"player_\") var playerExtracts: PlayerExtracts? = null, @Embedded(prefix = \"photo_\") @SerializedName(\"photo\") var photos: Photos? = null, @SerializedName(\"favorited\") var favorited: Boolean = false, var pathFlag: Int = 0 )"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun update(status: Status): Int","prompt":""},{"id":3366,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":[],"content":"@Query(\"SELECT * FROM statuses WHERE id = :id AND uid = :uniqueId LIMIT 1\")\n    fun query(id: String, uniqueId: String): Status?","prompt":""},{"id":3367,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":[],"content":"@Query(\"SELECT * FROM statuses WHERE pathFlag & :path = :path  AND uid = :uniqueId ORDER BY createdAt DESC LIMIT 1\")\n    fun first(path: Int, uniqueId: String): Status?","prompt":""},{"id":3368,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":["data class Statusconstructor( @NonNull @SerializedName(\"id\") var id: String = \"\", @NonNull var uid: String = \"\", @SerializedName(\"text\") var text: String? = null, @SerializedName(\"source\") var source: String? = null, @SerializedName(\"location\") var location: String? = null, @Ignore @SerializedName(\"user\") var user: Player? = null, @SerializedName(\"created_at\") var createdAt: Date? = null, @Embedded(prefix = \"player_\") var playerExtracts: PlayerExtracts? = null, @Embedded(prefix = \"photo_\") @SerializedName(\"photo\") var photos: Photos? = null, @SerializedName(\"favorited\") var favorited: Boolean = false, var pathFlag: Int = 0 )"],"content":"@Query(\"SELECT * FROM statuses WHERE pathFlag & :path = :path AND uid = :uniqueId ORDER BY createdAt DESC LIMIT :limit\")\n    fun loadInitial(uniqueId: String, path: Int, limit: Int): MutableList<Status>","prompt":""},{"id":3369,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":["data class Statusconstructor( @NonNull @SerializedName(\"id\") var id: String = \"\", @NonNull var uid: String = \"\", @SerializedName(\"text\") var text: String? = null, @SerializedName(\"source\") var source: String? = null, @SerializedName(\"location\") var location: String? = null, @Ignore @SerializedName(\"user\") var user: Player? = null, @SerializedName(\"created_at\") var createdAt: Date? = null, @Embedded(prefix = \"player_\") var playerExtracts: PlayerExtracts? = null, @Embedded(prefix = \"photo_\") @SerializedName(\"photo\") var photos: Photos? = null, @SerializedName(\"favorited\") var favorited: Boolean = false, var pathFlag: Int = 0 )"],"content":"@Query(\"SELECT * FROM statuses WHERE pathFlag & :path = :path AND uid = :uniqueId ORDER BY createdAt DESC LIMIT :limit OFFSET :offset\")\n    fun loadAfter(uniqueId: String, path: Int, limit: Int, offset: Int): MutableList<Status>","prompt":""},{"id":3370,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":[],"content":"@Query(\"SELECT * FROM statuses WHERE pathFlag & :path = :path AND\" +\n            \" uid = :uniqueId\" +\n            \" ORDER BY createdAt DESC\")\n    fun loadAll(uniqueId: String, path: Int): DataSource.Factory<Int, Status>","prompt":""},{"id":3371,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":[],"content":"@Query(\"DELETE FROM statuses WHERE pathFlag & :path = :path\" +\n            \" AND uid = :uniqueId\")\n    fun deleteAll(path: Int, uniqueId: String)","prompt":""},{"id":3372,"identifierName":"com.sinyuk.fanfou.domain.db.dao.StatusDao","requiredType":["data class Statusconstructor( @NonNull @SerializedName(\"id\") var id: String = \"\", @NonNull var uid: String = \"\", @SerializedName(\"text\") var text: String? = null, @SerializedName(\"source\") var source: String? = null, @SerializedName(\"location\") var location: String? = null, @Ignore @SerializedName(\"user\") var user: Player? = null, @SerializedName(\"created_at\") var createdAt: Date? = null, @Embedded(prefix = \"player_\") var playerExtracts: PlayerExtracts? = null, @Embedded(prefix = \"photo_\") @SerializedName(\"photo\") var photos: Photos? = null, @SerializedName(\"favorited\") var favorited: Boolean = false, var pathFlag: Int = 0 )"],"content":"@Delete\n    fun delete(data: Status)","prompt":""},{"id":3373,"identifierName":"de.tum.`in`.tumcampusapp.component.tumui.calendar.WidgetsTimetableBlacklistDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(widgetsTimetableBlacklist: WidgetsTimetableBlacklist)","prompt":""},{"id":3374,"identifierName":"de.tum.`in`.tumcampusapp.component.tumui.calendar.WidgetsTimetableBlacklistDao","requiredType":[],"content":"@Delete\n    fun delete(widgetsTimetableBlacklist: WidgetsTimetableBlacklist)","prompt":""},{"id":3375,"identifierName":"de.tum.`in`.tumcampusapp.component.tumui.calendar.WidgetsTimetableBlacklistDao","requiredType":[],"content":"@Query(\"DELETE FROM widgets_timetable_blacklist\")\n    fun flush()","prompt":""},{"id":3376,"identifierName":"ru.molkov.collapsarserver.repository.ApodRepository","requiredType":[],"content":"@Query(\"SELECT a FROM Apod a WHERE a.date = :date\")\n    fun findByDate(@Param(\"date\") date: Date): Apod?","prompt":""},{"id":3377,"identifierName":"de.ph1b.audiobook.data.repo.internals.BookMetaDataDao","requiredType":["data class BookMetaData( @ColumnInfo(name = \"id\") @PrimaryKey val id: UUID, @ColumnInfo(name = \"type\") val type: Book.Type, @ColumnInfo(name = \"author\") val author: String?, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"root\") val root: String, @ColumnInfo(name = \"addedAtMillis\") val addedAtMillis: Long )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insert(metaData: BookMetaData)","prompt":""},{"id":3378,"identifierName":"de.ph1b.audiobook.data.repo.internals.BookMetaDataDao","requiredType":["data class BookMetaData( @ColumnInfo(name = \"id\") @PrimaryKey val id: UUID, @ColumnInfo(name = \"type\") val type: Book.Type, @ColumnInfo(name = \"author\") val author: String?, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"root\") val root: String, @ColumnInfo(name = \"addedAtMillis\") val addedAtMillis: Long )"],"content":"@Query(\"SELECT * FROM bookMetaData WHERE id = :id\")\n  fun byId(id: UUID): BookMetaData","prompt":""},{"id":3379,"identifierName":"de.ph1b.audiobook.data.repo.internals.BookMetaDataDao","requiredType":["data class BookMetaData( @ColumnInfo(name = \"id\") @PrimaryKey val id: UUID, @ColumnInfo(name = \"type\") val type: Book.Type, @ColumnInfo(name = \"author\") val author: String?, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"root\") val root: String, @ColumnInfo(name = \"addedAtMillis\") val addedAtMillis: Long )"],"content":"@Delete\n  fun delete(metaData: BookMetaData)","prompt":""},{"id":3380,"identifierName":"de.ph1b.audiobook.data.repo.internals.BookMetaDataDao","requiredType":[],"content":"@Query(\"UPDATE bookMetaData SET name = :name WHERE id = :id\")\n  fun updateBookName(id: UUID, name: String)","prompt":""},{"id":3381,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.PurchaseDao","requiredType":[],"content":"@Query(\"SELECT * FROM purchase_table\")\n    fun getPurchases(): List<CachedPurchase>","prompt":""},{"id":3382,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.PurchaseDao","requiredType":[],"content":"@Insert\n    fun insert(purchase: CachedPurchase)","prompt":""},{"id":3383,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.PurchaseDao","requiredType":[],"content":"@Transaction\n    fun insert(purchases: List<Purchase>) {\n        purchases.forEach {\n            insert(CachedPurchase(data = it))\n        }\n    }","prompt":""},{"id":3384,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.PurchaseDao","requiredType":[],"content":"@Delete\n    fun delete(vararg purchases: CachedPurchase)","prompt":""},{"id":3385,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.PurchaseDao","requiredType":[],"content":"@Query(\"DELETE FROM purchase_table\")\n    fun deleteAll()","prompt":""},{"id":3386,"identifierName":"com.uwetrottmann.seriesguide.billing.localdb.PurchaseDao","requiredType":[],"content":"@Query(\"DELETE FROM purchase_table WHERE data = :purchase\")\n    fun delete(purchase: Purchase)","prompt":""},{"id":3387,"identifierName":"be.florien.anyflow.data.local.dao.OrderDao","requiredType":[],"content":"@Query(\"SELECT * FROM dborder ORDER BY priority\")\n    abstract fun all(): LiveData<List<DbOrder>>","prompt":""},{"id":3388,"identifierName":"be.florien.anyflow.data.local.dao.OrderDao","requiredType":[],"content":"@Query(\"SELECT * FROM dborder ORDER BY priority\")\n    abstract fun list(): List<DbOrder>","prompt":""},{"id":3389,"identifierName":"be.florien.anyflow.data.local.dao.OrderDao","requiredType":[],"content":"@Query(\"DELETE FROM dborder\")\n    abstract suspend fun deleteAll()","prompt":""},{"id":3390,"identifierName":"be.florien.anyflow.data.local.dao.OrderDao","requiredType":[],"content":"@Transaction\n    open suspend fun replaceBy(filters: List<DbOrder>) {\n        deleteAll()\n        insert(filters)\n    }","prompt":""},{"id":3391,"identifierName":"com.google.samples.apps.sunflower.data.GardenPlantingDao","requiredType":[],"content":"@Query(\"SELECT * FROM garden_plantings\")\n    fun getGardenPlantings(): Flow<List<GardenPlanting>>","prompt":""},{"id":3392,"identifierName":"com.google.samples.apps.sunflower.data.GardenPlantingDao","requiredType":[],"content":"@Query(\"SELECT EXISTS(SELECT 1 FROM garden_plantings WHERE plant_id = :plantId LIMIT 1)\")\n    fun isPlanted(plantId: String): Flow<Boolean>","prompt":""},{"id":3393,"identifierName":"com.google.samples.apps.sunflower.data.GardenPlantingDao","requiredType":[],"content":"/**\n     * This query will tell Room to query both the [Plant] and [GardenPlanting] tables and handle\n     * the object mapping.\n     */\n    @Transaction\n    @Query(\"SELECT * FROM plants WHERE id IN (SELECT DISTINCT(plant_id) FROM garden_plantings)\")\n    fun getPlantedGardens(): Flow<List<PlantAndGardenPlantings>>","prompt":""},{"id":3394,"identifierName":"com.google.samples.apps.sunflower.data.GardenPlantingDao","requiredType":[],"content":"@Insert\n    suspend fun insertGardenPlanting(gardenPlanting: GardenPlanting): Long","prompt":""},{"id":3395,"identifierName":"com.google.samples.apps.sunflower.data.GardenPlantingDao","requiredType":[],"content":"@Delete\n    suspend fun deleteGardenPlanting(gardenPlanting: GardenPlanting)","prompt":""},{"id":3396,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeRepository","requiredType":["data class DailyChallenge( override val id: String = \"\", val date: LocalDate, val questIds: List<String> = emptyList(), val isCompleted: Boolean = false, val reward: Reward? = null, override val createdAt: Instant = Instant.now(), override val updatedAt: Instant = Instant.now(), val removedAt: Instant? = null )"],"content":"fun findAllForSync(lastSync: Duration<Millisecond>): List<DailyChallenge>","prompt":""},{"id":3397,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeRepository","requiredType":[],"content":"fun findDailyChallengeStreak(currentDate: LocalDate = LocalDate.now()): Int","prompt":""},{"id":3398,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeRepository","requiredType":[],"content":"fun findForDate(currentDate: LocalDate = LocalDate.now()): DailyChallenge?","prompt":""},{"id":3399,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeRepository","requiredType":["data class DailyChallenge( override val id: String = \"\", val date: LocalDate, val questIds: List<String> = emptyList(), val isCompleted: Boolean = false, val reward: Reward? = null, override val createdAt: Instant = Instant.now(), override val updatedAt: Instant = Instant.now(), val removedAt: Instant? = null )"],"content":"fun save(entity: DailyChallenge): DailyChallenge","prompt":""},{"id":3400,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeRepository","requiredType":["data class DailyChallenge( override val id: String = \"\", val date: LocalDate, val questIds: List<String> = emptyList(), val isCompleted: Boolean = false, val reward: Reward? = null, override val createdAt: Instant = Instant.now(), override val updatedAt: Instant = Instant.now(), val removedAt: Instant? = null )"],"content":"fun save(entities: List<DailyChallenge>): List<DailyChallenge>","prompt":""},{"id":3401,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeRepository","requiredType":["data class DailyChallenge( override val id: String = \"\", val date: LocalDate, val questIds: List<String> = emptyList(), val isCompleted: Boolean = false, val reward: Reward? = null, override val createdAt: Instant = Instant.now(), override val updatedAt: Instant = Instant.now(), val removedAt: Instant? = null )"],"content":"fun findAll(): List<DailyChallenge>","prompt":""},{"id":3402,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeDao","requiredType":[],"content":"@android.arch.persistence.room.Query(\"SELECT * FROM daily_challenges\")\n    abstract fun findAll(): List<RoomDailyChallenge>","prompt":""},{"id":3403,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeDao","requiredType":[],"content":"@android.arch.persistence.room.Query(\"SELECT * FROM daily_challenges WHERE date = :date\")\n    abstract fun findForDate(date: Long): RoomDailyChallenge?","prompt":""},{"id":3404,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeDao","requiredType":[],"content":"@android.arch.persistence.room.Query(\"SELECT * FROM daily_challenges WHERE date < :date AND isCompleted = 0 ORDER BY date DESC LIMIT 1\")\n    abstract fun findLastIncomplete(date: Long): RoomDailyChallenge?","prompt":""},{"id":3405,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeDao","requiredType":[],"content":"@android.arch.persistence.room.Query(\"SELECT COUNT(*) FROM daily_challenges WHERE isCompleted = 1 AND date < :date\")\n    abstract fun countCompletedBefore(date: Long): Int","prompt":""},{"id":3406,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeDao","requiredType":[],"content":"@android.arch.persistence.room.Query(\"SELECT COUNT(*) FROM daily_challenges WHERE date > :startDate AND date <= :endDate AND isCompleted = 1\")\n    abstract fun countInRange(startDate: Long, endDate: Long): Int","prompt":""},{"id":3407,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.DailyChallengeDao","requiredType":[],"content":"@Query(\"SELECT * FROM daily_challenges $FIND_SYNC_QUERY\")\n    abstract fun findAllForSync(lastSync: Long): List<RoomDailyChallenge>","prompt":""},{"id":3408,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.RoomDailyChallengeRepository","requiredType":[],"content":"override fun findAllForSync(lastSync: Duration<Millisecond>) =\n        dao.findAllForSync(lastSync.millisValue).map { toEntityObject(it) }","prompt":""},{"id":3409,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.RoomDailyChallengeRepository","requiredType":[],"content":"override fun findAll() = dao.findAll().map { toEntityObject(it) }","prompt":""},{"id":3410,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.RoomDailyChallengeRepository","requiredType":[],"content":"override fun findDailyChallengeStreak(currentDate: LocalDate): Int {\n        val lastIncomplete = dao.findLastIncomplete(currentDate.startOfDayUTC())\n        return if (lastIncomplete == null) {\n            dao.countCompletedBefore(currentDate.startOfDayUTC())\n        } else {\n            dao.countInRange(lastIncomplete.date, currentDate.startOfDayUTC())\n        }\n    }","prompt":""},{"id":3411,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.RoomDailyChallengeRepository","requiredType":[],"content":"override fun findForDate(currentDate: LocalDate) =\n        dao.findForDate(currentDate.startOfDayUTC())?.let { toEntityObject(it) }","prompt":""},{"id":3412,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.RoomDailyChallengeRepository","requiredType":["data class DailyChallenge( override val id: String = \"\", val date: LocalDate, val questIds: List<String> = emptyList(), val isCompleted: Boolean = false, val reward: Reward? = null, override val createdAt: Instant = Instant.now(), override val updatedAt: Instant = Instant.now(), val removedAt: Instant? = null )"],"content":"override fun save(entity: DailyChallenge): DailyChallenge {\n        val rEntity = toDatabaseObject(entity)\n        dao.save(rEntity)\n        return entity.copy(id = rEntity.id)\n    }","prompt":""},{"id":3413,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.RoomDailyChallengeRepository","requiredType":["data class DailyChallenge( override val id: String = \"\", val date: LocalDate, val questIds: List<String> = emptyList(), val isCompleted: Boolean = false, val reward: Reward? = null, override val createdAt: Instant = Instant.now(), override val updatedAt: Instant = Instant.now(), val removedAt: Instant? = null )"],"content":"override fun save(entities: List<DailyChallenge>): List<DailyChallenge> {\n        val rEntities = entities.map { toDatabaseObject(it) }\n        dao.saveAll(rEntities)\n        return rEntities.mapIndexed { i, rdc ->\n            entities[i].copy(id = rdc.id)\n        }\n    }","prompt":""},{"id":3414,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.RoomDailyChallengeRepository","requiredType":[],"content":"override fun toEntityObject(dbObject: RoomDailyChallenge) =\n        DailyChallenge(\n            id = dbObject.id,\n            date = dbObject.date.startOfDayUTC,\n            questIds = dbObject.questIds,\n            isCompleted = dbObject.isCompleted,\n            reward = dbObject.coins?.let {\n                val dbBounty = DbBounty(dbObject.bounty!!.toMutableMap())\n                Reward(\n                    attributePoints = dbObject.attributePoints!!.map { a ->\n                        Player.AttributeType.valueOf(\n                            a.key\n                        ) to a.value.toInt()\n                    }.toMap(),\n                    healthPoints = 0,\n                    experience = dbObject.experience!!.toInt(),\n                    coins = dbObject.coins.toInt(),\n                    bounty = when {\n                        dbBounty.type == DbBounty.Type.NONE.name -> Quest.Bounty.None\n                        dbBounty.type == DbBounty.Type.FOOD.name -> Quest.Bounty.Food(\n                            Food.valueOf(\n                                dbBounty.name!!\n                            )\n                        )\n                        else -> throw IllegalArgumentException(\"Unknown bounty type ${dbBounty.type}\")\n                    }\n                )\n            },\n            createdAt = dbObject.createdAt.instant,\n            updatedAt = dbObject.updatedAt.instant,\n            removedAt = dbObject.removedAt?.instant\n        )","prompt":""},{"id":3415,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.RoomDailyChallengeRepository","requiredType":["data class DailyChallenge( override val id: String = \"\", val date: LocalDate, val questIds: List<String> = emptyList(), val isCompleted: Boolean = false, val reward: Reward? = null, override val createdAt: Instant = Instant.now(), override val updatedAt: Instant = Instant.now(), val removedAt: Instant? = null )"],"content":"override fun toDatabaseObject(entity: DailyChallenge) =\n        RoomDailyChallenge(\n            id = if (entity.id.isEmpty()) UUID.randomUUID().toString() else entity.id,\n            date = entity.date.startOfDayUTC(),\n            questIds = entity.questIds,\n            isCompleted = entity.isCompleted,\n            experience = entity.reward?.experience?.toLong(),\n            coins = entity.reward?.coins?.toLong(),\n            attributePoints = entity.reward?.attributePoints?.map { a -> a.key.name to a.value.toLong() }?.toMap(),\n            bounty = entity.reward?.let {\n                DbBounty().apply {\n                    type = when (it.bounty) {\n                        is Quest.Bounty.None -> DbBounty.Type.NONE.name\n                        is Quest.Bounty.Food -> DbBounty.Type.FOOD.name\n                    }\n                    name = if (it.bounty is Quest.Bounty.Food) it.bounty.food.name else null\n                }.map\n            },\n            createdAt = entity.createdAt.toEpochMilli(),\n            updatedAt = System.currentTimeMillis(),\n            removedAt = entity.removedAt?.toEpochMilli()\n        )","prompt":""},{"id":3416,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.FirestoreDailyChallengeRepository","requiredType":["data class DailyChallenge( override val id: String = \"\", val date: LocalDate, val questIds: List<String> = emptyList(), val isCompleted: Boolean = false, val reward: Reward? = null, override val createdAt: Instant = Instant.now(), override val updatedAt: Instant = Instant.now(), val removedAt: Instant? = null )"],"content":"override fun toEntityObject(dataMap: MutableMap<String, Any?>): DailyChallenge {\n        val dc = DbDailyChallenge(dataMap.withDefault {\n            null\n        })\n        return DailyChallenge(\n            id = dc.id,\n            date = dc.date.startOfDayUTC,\n            questIds = dc.questIds,\n            isCompleted = dc.isCompleted,\n            reward = dc.coins?.let {\n                val dbBounty = DbBounty(dc.bounty!!.toMutableMap())\n                Reward(\n                    attributePoints = dc.attributePoints!!.map { a ->\n                        Player.AttributeType.valueOf(\n                            a.key\n                        ) to a.value.toInt()\n                    }.toMap(),\n                    healthPoints = 0,\n                    experience = dc.experience!!.toInt(),\n                    coins = dc.coins!!.toInt(),\n                    bounty = when {\n                        dbBounty.type == DbBounty.Type.NONE.name -> Quest.Bounty.None\n                        dbBounty.type == DbBounty.Type.FOOD.name -> Quest.Bounty.Food(\n                            Food.valueOf(\n                                dbBounty.name!!\n                            )\n                        )\n                        else -> throw IllegalArgumentException(\"Unknown bounty type ${dbBounty.type}\")\n                    }\n                )\n            },\n            createdAt = dc.createdAt.instant,\n            updatedAt = dc.updatedAt.instant,\n            removedAt = dc.removedAt?.instant\n        )\n    }","prompt":""},{"id":3417,"identifierName":"io.ipoli.android.dailychallenge.data.persistence.FirestoreDailyChallengeRepository","requiredType":["data class DailyChallenge( override val id: String = \"\", val date: LocalDate, val questIds: List<String> = emptyList(), val isCompleted: Boolean = false, val reward: Reward? = null, override val createdAt: Instant = Instant.now(), override val updatedAt: Instant = Instant.now(), val removedAt: Instant? = null )"],"content":"override fun toDatabaseObject(entity: DailyChallenge) =\n        DbDailyChallenge().also {\n            it.id = entity.id\n            it.date = entity.date.startOfDayUTC()\n            it.questIds = entity.questIds\n            it.isCompleted = entity.isCompleted\n            entity.reward?.let { r ->\n                it.experience = r.experience.toLong()\n                it.coins = r.coins.toLong()\n                it.attributePoints =\n                    r.attributePoints.map { a -> a.key.name to a.value.toLong() }.toMap()\n                it.bounty = DbBounty().apply {\n                    type = when (r.bounty) {\n                        is Quest.Bounty.None -> DbBounty.Type.NONE.name\n                        is Quest.Bounty.Food -> DbBounty.Type.FOOD.name\n                    }\n                    name = if (r.bounty is Quest.Bounty.Food) r.bounty.food.name else null\n                }.map\n            }\n            it.createdAt = entity.createdAt.toEpochMilli()\n            it.updatedAt = entity.updatedAt.toEpochMilli()\n            it.removedAt = entity.removedAt?.toEpochMilli()\n        }","prompt":""},{"id":3418,"identifierName":"rynkbit.tk.coffeelist.db.dao.ItemDao","requiredType":[],"content":"@Query(\"select * from item\")\n    override fun findAll(): Flowable<List<DatabaseItem>>","prompt":""},{"id":3419,"identifierName":"rynkbit.tk.coffeelist.db.dao.ItemDao","requiredType":[],"content":"@Query(\"select * from item where id = :itemId\")\n    fun findById(itemId: Int): Single<DatabaseItem>","prompt":""},{"id":3420,"identifierName":"rynkbit.tk.coffeelist.db.dao.ItemDao","requiredType":[],"content":"@Query(\"update item set name = :name where id = :id\")\n    fun updateName(id: Int, name: String): Single<Int>","prompt":""},{"id":3421,"identifierName":"rynkbit.tk.coffeelist.db.dao.ItemDao","requiredType":[],"content":"@Query(\"update item set price = :price where id = :id\")\n    fun updatePrice(id: Int, price: Double): Single<Int>","prompt":""},{"id":3422,"identifierName":"rynkbit.tk.coffeelist.db.dao.ItemDao","requiredType":[],"content":"@Query(\"update item set stock = :stock where id = :id\")\n    fun updateStock(id: Int, stock: Int): Single<Int>","prompt":""},{"id":3423,"identifierName":"rynkbit.tk.coffeelist.db.dao.ItemDao","requiredType":[],"content":"@Query(\"delete from item\")\n    fun deleteAll(): Single<Unit>","prompt":""},{"id":3424,"identifierName":"com.simplemobiletools.gallery.interfaces.MediumDao","requiredType":[],"content":"@Query(\"SELECT * FROM media\")\n    fun getAll(): List<Medium>","prompt":""},{"id":3425,"identifierName":"com.simplemobiletools.gallery.interfaces.MediumDao","requiredType":[],"content":"@Query(\"SELECT filename, full_path, parent_path, last_modified, date_taken, size, type FROM media WHERE parent_path = :path\")\n    fun getMediaFromPath(path: String): List<Medium>","prompt":""},{"id":3426,"identifierName":"com.simplemobiletools.gallery.interfaces.MediumDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insert(medium: Medium)","prompt":""},{"id":3427,"identifierName":"com.simplemobiletools.gallery.interfaces.MediumDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertAll(media: List<Medium>)","prompt":""},{"id":3428,"identifierName":"com.simplemobiletools.gallery.interfaces.MediumDao","requiredType":[],"content":"@Query(\"DELETE FROM media WHERE full_path = :path\")\n    fun deleteMediumPath(path: String)","prompt":""},{"id":3429,"identifierName":"com.google.samples.apps.sunflower.data.PlantDao","requiredType":[],"content":"@Query(\"SELECT * FROM plants ORDER BY name\")\n    fun getPlants(): LiveData<List<Plant>>","prompt":""},{"id":3430,"identifierName":"com.google.samples.apps.sunflower.data.PlantDao","requiredType":[],"content":"@Query(\"SELECT * FROM plants WHERE growZoneNumber = :growZoneNumber ORDER BY name\")\n    fun getPlantsWithGrowZoneNumber(growZoneNumber: Int): LiveData<List<Plant>>","prompt":""},{"id":3431,"identifierName":"com.google.samples.apps.sunflower.data.PlantDao","requiredType":[],"content":"@Query(\"SELECT * FROM plants WHERE id = :plantId\")\n    fun getPlant(plantId: String): LiveData<Plant>","prompt":""},{"id":3432,"identifierName":"com.google.samples.apps.sunflower.data.PlantDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertAll(plants: List<Plant>)","prompt":""},{"id":3433,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM users WHERE is_me != 0\")\n    abstract fun observeMe(): Flow<TraktUser?>","prompt":""},{"id":3434,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM users WHERE username = :username\")\n    abstract fun observeTraktUser(username: String): Flow<TraktUser?>","prompt":""},{"id":3435,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM users WHERE username = :username\")\n    internal abstract suspend fun getTraktUser(username: String): TraktUser?","prompt":""},{"id":3436,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"suspend fun getUser(username: String) = when (username) {\n        \"me\" -> getMe()\n        else -> getTraktUser(username)\n    }","prompt":""},{"id":3437,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM users WHERE is_me != 0\")\n    abstract suspend fun getMe(): TraktUser?","prompt":""},{"id":3438,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"@Suppress(\"FunctionName\")\n    @Query(\"SELECT id FROM users WHERE username = :username\")\n    internal abstract suspend fun _getIdForUsername(username: String): Long?","prompt":""},{"id":3439,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"@Query(\"SELECT id FROM users WHERE is_me != 0\")\n    abstract suspend fun getIdForMe(): Long?","prompt":""},{"id":3440,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"suspend fun getIdForUsername(username: String) = when (username) {\n        \"me\" -> getIdForMe()\n        else -> _getIdForUsername(username)\n    }","prompt":""},{"id":3441,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"@Query(\"DELETE FROM users WHERE username = :username\")\n    abstract suspend fun deleteWithUsername(username: String)","prompt":""},{"id":3442,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"@Query(\"DELETE FROM users WHERE is_me != 0\")\n    abstract suspend fun deleteMe()","prompt":""},{"id":3443,"identifierName":"app.tivi.data.daos.UserDao","requiredType":["data class TraktUser( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") override val id: Long = 0, @ColumnInfo(name = \"username\") val username: String, @ColumnInfo(name = \"name\") val name: String? = null, @ColumnInfo(name = \"joined_date\") val joined: OffsetDateTime? = null, @ColumnInfo(name = \"location\") val location: String? = null, @ColumnInfo(name = \"about\") val about: String? = null, @ColumnInfo(name = \"avatar_url\") val avatarUrl: String? = null, @ColumnInfo(name = \"vip\") val vip: Boolean? = null, @ColumnInfo(name = \"is_me\") val isMe: Boolean = false )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract override suspend fun insert(entity: TraktUser): Long","prompt":""},{"id":3444,"identifierName":"app.tivi.data.daos.UserDao","requiredType":[],"content":"@Query(\"DELETE FROM users\")\n    abstract suspend fun deleteAll()","prompt":""},{"id":3445,"identifierName":"ru.fantlab.android.data.db.response.SearchDao","requiredType":[],"content":"@Query(\"SELECT search_query FROM search WHERE user_id == :userId\")\n\tfun get(userId: Int): Single<List<String>>","prompt":""},{"id":3446,"identifierName":"ru.fantlab.android.data.db.response.SearchDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n\tfun save(search: Search)","prompt":""},{"id":3447,"identifierName":"org.stepik.android.cache.wishlist.dao.WishlistDao","requiredType":[],"content":"@Query(\"SELECT * FROM `WishlistEntry` WHERE course == :courseId LIMIT 1\")\n    abstract fun getWishlistEntry(courseId: Long): Maybe<WishlistEntry>","prompt":""},{"id":3448,"identifierName":"org.stepik.android.cache.wishlist.dao.WishlistDao","requiredType":[],"content":"@Query(\"SELECT * FROM WishlistEntry ORDER BY createDate DESC\")\n    abstract fun getWishlistEntries(): Single<List<WishlistEntry>>","prompt":""},{"id":3449,"identifierName":"org.stepik.android.cache.wishlist.dao.WishlistDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertWishlistEntry(wishlistEntry: WishlistEntry): Completable","prompt":""},{"id":3450,"identifierName":"org.stepik.android.cache.wishlist.dao.WishlistDao","requiredType":[],"content":"@Transaction\n    open fun insertWishlistEntriesNew(wishlistEntries: List<WishlistEntry>) {\n        clearTable()\n        insertWishlistEntries(wishlistEntries)\n    }","prompt":""},{"id":3451,"identifierName":"org.stepik.android.cache.wishlist.dao.WishlistDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertWishlistEntries(wishlistEntries: List<WishlistEntry>)","prompt":""},{"id":3452,"identifierName":"org.stepik.android.cache.wishlist.dao.WishlistDao","requiredType":[],"content":"@Query(\"DELETE FROM `WishlistEntry` WHERE course == :courseId\")\n    abstract fun deleteWishlistEntry(courseId: Long): Completable","prompt":""},{"id":3453,"identifierName":"org.stepik.android.cache.wishlist.dao.WishlistDao","requiredType":[],"content":"@Query(\"DELETE FROM `WishlistEntry`\")\n    abstract fun clearTable()","prompt":""},{"id":3454,"identifierName":"mil.nga.giat.mage.data.feed.FeedLocalDao","requiredType":[],"content":"@Transaction\n    fun upsert(feed: FeedLocal) {\n        val id = insert(feed)\n        if (id == -1L) {\n            update(feed)\n        }\n    }","prompt":""},{"id":3455,"identifierName":"mil.nga.giat.mage.data.feed.FeedLocalDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(feed: FeedLocal): Long","prompt":""},{"id":3456,"identifierName":"mil.nga.giat.mage.data.feed.FeedLocalDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.IGNORE)\n    fun update(feed: FeedLocal)","prompt":""},{"id":3457,"identifierName":"mil.nga.giat.mage.data.feed.FeedLocalDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM feed WHERE event_remote_id = :eventId\")\n    fun getFeeds(eventId: String): List<FeedAndLocal>","prompt":""},{"id":3458,"identifierName":"mil.nga.giat.mage.data.feed.FeedLocalDao","requiredType":[],"content":"@Query(\"DELETE FROM feed_local\")\n    fun destroy()","prompt":""},{"id":3459,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestRepository","requiredType":[],"content":"fun findAllActive(currentDate: LocalDate = LocalDate.now()): List<RepeatingQuest>","prompt":""},{"id":3460,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestRepository","requiredType":[],"content":"fun findActiveNotForChallenge(\n        challengeId: String,\n        currentDate: LocalDate = LocalDate.now()\n    ): List<RepeatingQuest>","prompt":""},{"id":3461,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestRepository","requiredType":[],"content":"fun findAllForChallenge(challengeId: String): List<RepeatingQuest>","prompt":""},{"id":3462,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestRepository","requiredType":[],"content":"fun generateId(): String","prompt":""},{"id":3463,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestRepository","requiredType":[],"content":"fun remove(ids: List<String>)","prompt":""},{"id":3464,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestRepository","requiredType":[],"content":"fun removeFromChallenge(repeatingQuest: RepeatingQuest): RepeatingQuest","prompt":""},{"id":3465,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"SELECT * FROM repeating_quests\")\n    abstract fun findAll(): List<RoomRepeatingQuest>","prompt":""},{"id":3466,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"SELECT * FROM repeating_quests WHERE id = :id\")\n    abstract fun findById(id: String): RoomRepeatingQuest","prompt":""},{"id":3467,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"SELECT * FROM repeating_quests WHERE removedAt IS NULL\")\n    abstract fun listenForNotRemoved(): LiveData<List<RoomRepeatingQuest>>","prompt":""},{"id":3468,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"SELECT * FROM repeating_quests WHERE id = :id\")\n    abstract fun listenById(id: String): LiveData<RoomRepeatingQuest>","prompt":""},{"id":3469,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"UPDATE repeating_quests $REMOVE_QUERY\")\n    abstract fun remove(id: String, currentTimeMillis: Long = System.currentTimeMillis())","prompt":""},{"id":3470,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"UPDATE repeating_quests $UNDO_REMOVE_QUERY\")\n    abstract fun undoRemove(id: String, currentTimeMillis: Long = System.currentTimeMillis())","prompt":""},{"id":3471,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"SELECT * FROM repeating_quests WHERE removedAt IS NULL AND challengeId = :challengeId\")\n    abstract fun findAllForChallenge(challengeId: String): List<RoomRepeatingQuest>","prompt":""},{"id":3472,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"SELECT * FROM repeating_quests WHERE removedAt IS NULL AND (repeatPattern_endDate IS NULL OR repeatPattern_endDate >= :date)\")\n    abstract fun findAllActive(date: Long): List<RoomRepeatingQuest>","prompt":""},{"id":3473,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"SELECT * FROM repeating_quests WHERE removedAt IS NULL AND (repeatPattern_endDate IS NULL OR repeatPattern_endDate >= :date) AND (challengeId IS NULL OR challengeId != :challengeId)\")\n    abstract fun findActiveNotForChallenge(\n        challengeId: String,\n        date: Long\n    ): List<RoomRepeatingQuest>","prompt":""},{"id":3474,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    abstract fun saveTags(joins: List<RoomRepeatingQuest.Companion.RoomTagJoin>)","prompt":""},{"id":3475,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"DELETE FROM repeating_quest_tag_join WHERE repeatingQuestId = :repeatingQuestId\")\n    abstract fun deleteAllTags(repeatingQuestId: String)","prompt":""},{"id":3476,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"DELETE FROM repeating_quest_tag_join WHERE repeatingQuestId IN (:repeatingQuestIds)\")\n    abstract fun deleteAllTags(repeatingQuestIds: List<String>)","prompt":""},{"id":3477,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"SELECT * FROM repeating_quests $FIND_SYNC_QUERY\")\n    abstract fun findAllForSync(lastSync: Long): List<RoomRepeatingQuest>","prompt":""},{"id":3478,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"UPDATE repeating_quests SET removedAt = :currentTimeMillis, updatedAt = :currentTimeMillis WHERE id IN (:ids)\")\n    abstract fun remove(ids: List<String>, currentTimeMillis: Long = System.currentTimeMillis())","prompt":""},{"id":3479,"identifierName":"io.ipoli.android.repeatingquest.persistence.RepeatingQuestDao","requiredType":[],"content":"@Query(\"UPDATE repeating_quests SET updatedAt = :currentTimeMillis, challengeId = NULL WHERE id = :id\")\n    abstract fun removeFromChallenge(\n        id: String,\n        currentTimeMillis: Long = System.currentTimeMillis()\n    )","prompt":""},{"id":3480,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun findAllForSync(lastSync: Duration<Millisecond>) =\n        dao.findAllForSync(lastSync.millisValue).map { toEntityObject(it) }","prompt":""},{"id":3481,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun createTagJoin(\n        entityId: String,\n        tagId: String\n    ) = RoomRepeatingQuest.Companion.RoomTagJoin(entityId, tagId)","prompt":""},{"id":3482,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun newIdForEntity(id: String, entity: RepeatingQuest) = entity.copy(id = id)","prompt":""},{"id":3483,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun saveTags(joins: List<RoomRepeatingQuest.Companion.RoomTagJoin>) =\n        dao.saveTags(joins)","prompt":""},{"id":3484,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun deleteAllTags(entityId: String) = dao.deleteAllTags(entityId)","prompt":""},{"id":3485,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun findAllActive(currentDate: LocalDate) =\n        dao.findAllActive(currentDate.startOfDayUTC()).map { toEntityObject(it) }","prompt":""},{"id":3486,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun findActiveNotForChallenge(\n        challengeId: String,\n        currentDate: LocalDate\n    ) =\n        dao.findActiveNotForChallenge(\n            challengeId,\n            currentDate.startOfDayUTC()\n        ).map { toEntityObject(it) }","prompt":""},{"id":3487,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun findAllForChallenge(challengeId: String) =\n        dao.findAllForChallenge(challengeId).map { toEntityObject(it) }","prompt":""},{"id":3488,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun generateId() = UUID.randomUUID().toString()","prompt":""},{"id":3489,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun remove(ids: List<String>) {\n        dao.remove(ids)\n    }","prompt":""},{"id":3490,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun findById(id: String) = toEntityObject(dao.findById(id))","prompt":""},{"id":3491,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun findAll() = dao.findAll().map { toEntityObject(it) }","prompt":""},{"id":3492,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun listenById(\n        id: String\n    ) =\n        dao.listenById(id).notifySingle()","prompt":""},{"id":3493,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun listenForAll() =\n        dao.listenForNotRemoved().notify()","prompt":""},{"id":3494,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun remove(entity: RepeatingQuest) {\n        remove(entity.id)\n    }","prompt":""},{"id":3495,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun remove(id: String) {\n        dao.remove(id)\n    }","prompt":""},{"id":3496,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun undoRemove(id: String) {\n        dao.undoRemove(id)\n    }","prompt":""},{"id":3497,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun removeFromChallenge(repeatingQuest: RepeatingQuest): RepeatingQuest {\n        val currentTime = System.currentTimeMillis()\n        dao.removeFromChallenge(repeatingQuest.id, currentTime)\n        return repeatingQuest.copy(\n            challengeId = null,\n            updatedAt = currentTime.instant\n        )\n    }","prompt":""},{"id":3498,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun toEntityObject(dbObject: RoomRepeatingQuest) =\n        RepeatingQuest(\n            id = dbObject.id,\n            name = dbObject.name,\n            color = Color.valueOf(dbObject.color),\n            icon = dbObject.icon?.let {\n                Icon.valueOf(it)\n            },\n            tags = tagDao.findForRepeatingQuest(dbObject.id).map { tagMapper.toEntityObject(it) },\n            startTime = dbObject.startMinute?.let { Time.of(it.toInt()) },\n            duration = dbObject.duration.toInt(),\n            priority = Priority.valueOf(dbObject.priority),\n            preferredStartTime = TimePreference.valueOf(dbObject.preferredStartTime),\n            reminders = dbObject.reminders.map {\n                val cr = DbReminder(it)\n                val type = DbReminder.Type.valueOf(cr.type)\n                when (type) {\n                    DbReminder.Type.RELATIVE ->\n                        Reminder.Relative(cr.message, cr.minutesFromStart!!.toLong())\n\n                    DbReminder.Type.FIXED ->\n                        Reminder.Fixed(\n                            cr.message,\n                            cr.date!!.startOfDayUTC,\n                            Time.of(cr.minute!!.toInt())\n                        )\n                }\n\n            },\n            repeatPattern = createRepeatPattern(dbObject.repeatPattern),\n            subQuests = dbObject.subQuests.map {\n                val dsq = DbSubQuest(it)\n                SubQuest(\n                    name = dsq.name,\n                    completedAtDate = dsq.completedAtDate?.startOfDayUTC,\n                    completedAtTime = dsq.completedAtMinute?.let { Time.of(it.toInt()) }\n                )\n            },\n            challengeId = dbObject.challengeId,\n            note = dbObject.note,\n            updatedAt = dbObject.updatedAt.instant,\n            createdAt = dbObject.createdAt.instant,\n            removedAt = dbObject.removedAt?.instant\n        )","prompt":""},{"id":3499,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"override fun toDatabaseObject(entity: RepeatingQuest) =\n        RoomRepeatingQuest(\n            id = if (entity.id.isEmpty()) UUID.randomUUID().toString() else entity.id,\n            name = entity.name,\n            color = entity.color.name,\n            icon = entity.icon?.name,\n            duration = entity.duration.toLong(),\n            priority = entity.priority.name,\n            preferredStartTime = entity.preferredStartTime.name,\n            startMinute = entity.startTime?.toMinuteOfDay()?.toLong(),\n            reminders = entity.reminders.map {\n                createDbReminder(it).map\n            },\n            subQuests = entity.subQuests.map {\n                DbSubQuest().apply {\n                    name = it.name\n                    completedAtDate = it.completedAtDate?.startOfDayUTC()\n                    completedAtMinute = it.completedAtTime?.toMinuteOfDay()?.toLong()\n                }.map\n            },\n            repeatPattern = createRoomRepeatingPattern(entity.repeatPattern),\n            challengeId = entity.challengeId,\n            note = entity.note,\n            updatedAt = System.currentTimeMillis(),\n            createdAt = entity.createdAt.toEpochMilli(),\n            removedAt = entity.removedAt?.toEpochMilli()\n        )","prompt":""},{"id":3500,"identifierName":"io.ipoli.android.repeatingquest.persistence.RoomRepeatingQuestRepository","requiredType":[],"content":"private fun createDbReminder(reminder: Reminder): DbReminder {\n        val cr = DbReminder()\n        cr.message = reminder.message\n        when (reminder) {\n\n            is Reminder.Fixed -> {\n                cr.type = DbReminder.Type.FIXED.name\n                cr.date = reminder.date.startOfDayUTC()\n                cr.minute = reminder.time.toMinuteOfDay().toLong()\n            }\n\n            is Reminder.Relative -> {\n                cr.type = DbReminder.Type.RELATIVE.name\n                cr.minutesFromStart = reminder.minutesFromStart\n            }\n        }\n        return cr\n    }","prompt":""},{"id":3501,"identifierName":"io.ipoli.android.repeatingquest.persistence.FirestoreRepeatingQuestRepository","requiredType":[],"content":"override fun toEntityObject(dataMap: MutableMap<String, Any?>): RepeatingQuest {\n\n        val rq = DbRepeatingQuest(dataMap.withDefault {\n            null\n        })\n\n        return RepeatingQuest(\n            id = rq.id,\n            name = rq.name,\n            color = Color.valueOf(rq.color),\n            icon = rq.icon?.let {\n                Icon.valueOf(it)\n            },\n            tags = rq.tags.values.map {\n                createTag(it)\n            },\n            startTime = rq.startMinute?.let { Time.of(it.toInt()) },\n            duration = rq.duration.toInt(),\n            priority = Priority.valueOf(rq.priority),\n            preferredStartTime = TimePreference.valueOf(rq.preferredStartTime),\n            reminders = rq.reminders.map {\n                val cr = DbReminder(it)\n                val type = DbReminder.Type.valueOf(cr.type)\n                when (type) {\n                    DbReminder.Type.RELATIVE ->\n                        Reminder.Relative(cr.message, cr.minutesFromStart!!.toLong())\n\n                    DbReminder.Type.FIXED ->\n                        Reminder.Fixed(\n                            cr.message,\n                            cr.date!!.startOfDayUTC,\n                            Time.of(cr.minute!!.toInt())\n                        )\n                }\n\n            },\n            repeatPattern = createRepeatPattern(createDbRepeatPattern(rq)),\n            subQuests = rq.subQuests.map {\n                val dsq = DbSubQuest(it)\n                SubQuest(\n                    name = dsq.name,\n                    completedAtDate = dsq.completedAtDate?.startOfDayUTC,\n                    completedAtTime = dsq.completedAtMinute?.let { Time.of(it.toInt()) }\n                )\n            },\n            challengeId = rq.challengeId,\n            note = rq.note,\n            updatedAt = rq.updatedAt.instant,\n            createdAt = rq.createdAt.instant,\n            removedAt = rq.removedAt?.instant\n        )\n    }","prompt":""},{"id":3502,"identifierName":"io.ipoli.android.repeatingquest.persistence.FirestoreRepeatingQuestRepository","requiredType":[],"content":"private fun createDbRepeatPattern(rq: DbRepeatingQuest): DbRepeatPattern {\n        val data = rq.repeatPattern\n\n        if (!data.containsKey(\"lastScheduledPeriodStart\")) {\n            data[\"lastScheduledPeriodStart\"] = null\n        }\n        if (!data.containsKey(\"skipEveryXPeriods\")) {\n            if (data.containsKey(\"xDays\")) {\n                data[\"type\"] = DAILY.name\n                data[\"skipEveryXPeriods\"] = data[\"xDays\"].toString().toInt() - 1\n            } else {\n                data[\"skipEveryXPeriods\"] = 0\n            }\n        }\n\n        return DbRepeatPattern(data)\n    }","prompt":""},{"id":3503,"identifierName":"io.ipoli.android.repeatingquest.persistence.FirestoreRepeatingQuestRepository","requiredType":[],"content":"override fun toDatabaseObject(entity: RepeatingQuest): DbRepeatingQuest {\n        val rq = DbRepeatingQuest()\n        rq.id = entity.id\n        rq.name = entity.name\n        rq.tags = entity.tags.map { it.id to createDbTag(it).map }.toMap()\n        rq.color = entity.color.name\n        rq.icon = entity.icon?.name\n        rq.duration = entity.duration.toLong()\n        rq.priority = entity.priority.name\n        rq.preferredStartTime = entity.preferredStartTime.name\n        rq.startMinute = entity.startTime?.toMinuteOfDay()?.toLong()\n        rq.reminders = entity.reminders.map {\n            createDbReminder(it).map\n        }\n        rq.subQuests = entity.subQuests.map {\n            DbSubQuest().apply {\n                name = it.name\n                completedAtDate = it.completedAtDate?.startOfDayUTC()\n                completedAtMinute = it.completedAtTime?.toMinuteOfDay()?.toLong()\n            }.map\n        }\n        rq.repeatPattern = createDbRepeatingPattern(entity.repeatPattern).map\n        rq.challengeId = entity.challengeId\n        rq.note = entity.note\n        rq.updatedAt = entity.updatedAt.toEpochMilli()\n        rq.createdAt = entity.createdAt.toEpochMilli()\n        rq.removedAt = entity.removedAt?.toEpochMilli()\n        return rq\n    }","prompt":""},{"id":3504,"identifierName":"io.ipoli.android.repeatingquest.persistence.FirestoreRepeatingQuestRepository","requiredType":[],"content":"private fun createDbRepeatingPattern(repeatPattern: RepeatPattern): DbRepeatPattern {\n        val rp = DbRepeatPattern()\n        rp.startDate = repeatPattern.startDate.startOfDayUTC()\n        rp.endDate = repeatPattern.endDate?.startOfDayUTC()\n        rp.lastScheduledPeriodStart = repeatPattern.lastScheduledPeriodStart?.startOfDayUTC()\n        rp.skipEveryXPeriods = repeatPattern.skipEveryXPeriods.toLong()\n\n        when (repeatPattern) {\n            is RepeatPattern.Daily -> {\n                rp.type = DAILY.name\n            }\n            is RepeatPattern.Weekly -> {\n                rp.type = WEEKLY.name\n                rp.daysOfWeek = repeatPattern.daysOfWeek.map {\n                    it.name\n                }\n            }\n            is RepeatPattern.Monthly -> {\n                rp.type = MONTHLY.name\n                rp.daysOfMonth = repeatPattern.daysOfMonth.map { it.toLong() }\n            }\n            is RepeatPattern.Yearly -> {\n                rp.type = YEARLY.name\n                rp.dayOfMonth = repeatPattern.dayOfMonth.toLong()\n                rp.month = repeatPattern.month.name\n            }\n\n            is RepeatPattern.Flexible.Weekly -> {\n                rp.type = FLEXIBLE_WEEKLY.name\n                rp.timesPerWeek = repeatPattern.timesPerWeek.toLong()\n                rp.preferredDays = repeatPattern.preferredDays.map {\n                    it.name\n                }\n            }\n            is RepeatPattern.Flexible.Monthly -> {\n                rp.type = FLEXIBLE_MONTHLY.name\n                rp.timesPerMonth = repeatPattern.timesPerMonth.toLong()\n                rp.preferredDays = repeatPattern.preferredDays.map { it.toString() }\n            }\n        }\n        return rp\n    }","prompt":""},{"id":3505,"identifierName":"io.ipoli.android.repeatingquest.persistence.FirestoreRepeatingQuestRepository","requiredType":[],"content":"private fun createDbReminder(reminder: Reminder): DbReminder {\n        val cr = DbReminder()\n        cr.message = reminder.message\n        when (reminder) {\n\n            is Reminder.Fixed -> {\n                cr.type = DbReminder.Type.FIXED.name\n                cr.date = reminder.date.startOfDayUTC()\n                cr.minute = reminder.time.toMinuteOfDay().toLong()\n            }\n\n            is Reminder.Relative -> {\n                cr.type = DbReminder.Type.RELATIVE.name\n                cr.minutesFromStart = reminder.minutesFromStart\n            }\n        }\n        return cr\n    }","prompt":""},{"id":3506,"identifierName":"io.ipoli.android.repeatingquest.persistence.FirestoreRepeatingQuestRepository","requiredType":[],"content":"private fun createDbTag(tag: Tag) =\n        DbEmbedTag().apply {\n            id = tag.id\n            name = tag.name\n            isFavorite = tag.isFavorite\n            color = tag.color.name\n            icon = tag.icon?.name\n        }","prompt":""},{"id":3507,"identifierName":"io.ipoli.android.repeatingquest.persistence.FirestoreRepeatingQuestRepository","requiredType":[],"content":"private fun createTag(dataMap: MutableMap<String, Any?>) =\n        with(\n            DbEmbedTag(dataMap.withDefault {\n                null\n            })\n        ) {\n            Tag(\n                id = id,\n                name = name,\n                color = Color.valueOf(color),\n                icon = icon?.let {\n                    Icon.valueOf(it)\n                },\n                isFavorite = isFavorite\n            )\n        }","prompt":""},{"id":3508,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM artists WHERE name NOT IN (:names)\")\n    abstract suspend fun deleteExcept(names: Set<String>): Int","prompt":""},{"id":3509,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM artists ORDER BY page ASC, search_index ASC\")\n    abstract override fun entries(): Flow<List<Artist>>","prompt":""},{"id":3510,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Transaction\n    @Query(\"SELECT * FROM artists WHERE params = :params and page = :page ORDER BY page ASC, search_index ASC\")\n    abstract override fun entriesObservable(params: DatmusicSearchParams, page: Int): Flow<List<Artist>>","prompt":""},{"id":3511,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM artists ORDER BY page ASC, search_index ASC LIMIT :count OFFSET :offset\")\n    abstract override fun entriesObservable(count: Int, offset: Int): Flow<List<Artist>>","prompt":""},{"id":3512,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM artists ORDER BY page ASC, search_index ASC\")\n    abstract override fun entriesPagingSource(): PagingSource<Int, Artist>","prompt":""},{"id":3513,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Transaction\n    @Query(\"SELECT * FROM artists WHERE params = :params ORDER BY page ASC, search_index ASC\")\n    abstract override fun entriesPagingSource(params: DatmusicSearchParams): PagingSource<Int, Artist>","prompt":""},{"id":3514,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":["data class Artist( @SerialName(\"id\") @ColumnInfo(name = \"id\") override val id: ArtistId = \"\", @SerialName(\"name\") @ColumnInfo(name = \"name\") val name: String = UNKNOWN_ARTIST, @SerialName(\"domain\") @ColumnInfo(name = \"domain\") val domain: String = \"\", @SerialName(\"photo\") @ColumnInfo(name = \"photo\") val _photo: List<Photo> = listOf(), @SerialName(\"audios\") @ColumnInfo(name = \"audios\") val audios: List<Audio> = emptyList(), @SerialName(\"albums\") @ColumnInfo(name = \"albums\") val albums: List<Album> = emptyList(), @Transient @ColumnInfo(name = \"params\") override var params: String = defaultParams, @Transient @ColumnInfo(name = \"page\") override var page: Int = defaultPage, @Transient @ColumnInfo(name = \"details_fetched\") val detailsFetched: Boolean = false, @PrimaryKey val primaryKey: String = \"\", @Transient @ColumnInfo(name = \"search_index\") val searchIndex: Int = 0, )"],"content":"@Transaction\n    @Query(\"SELECT * FROM artists WHERE id = :id ORDER BY details_fetched\")\n    abstract override fun entry(id: String): Flow<Artist>","prompt":""},{"id":3515,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM artists WHERE id in (:ids)\")\n    abstract override fun entriesById(ids: List<String>): Flow<List<Artist>>","prompt":""},{"id":3516,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM artists WHERE id = :id\")\n    abstract override fun entryNullable(id: String): Flow<Artist?>","prompt":""},{"id":3517,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":[],"content":"@Query(\"DELETE FROM artists WHERE id = :id\")\n    abstract override suspend fun delete(id: String): Int","prompt":""},{"id":3518,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"DELETE FROM artists WHERE params = :params\")\n    abstract override suspend fun delete(params: DatmusicSearchParams): Int","prompt":""},{"id":3519,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"DELETE FROM artists WHERE params = :params and page = :page\")\n    abstract override suspend fun delete(params: DatmusicSearchParams, page: Int): Int","prompt":""},{"id":3520,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":[],"content":"@Query(\"DELETE FROM artists\")\n    abstract override suspend fun deleteAll(): Int","prompt":""},{"id":3521,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"SELECT MAX(page) from artists WHERE params = :params\")\n    abstract override suspend fun getLastPage(params: DatmusicSearchParams): Int?","prompt":""},{"id":3522,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":["data class DatmusicSearchParams( val query: String, val captchaSolution: CaptchaSolution? = null, val types: List<BackendType> = listOf(BackendType.AUDIOS), val page: Int = 0, )"],"content":"@Query(\"SELECT COUNT(*) from artists where params = :params\")\n    abstract override suspend fun count(params: DatmusicSearchParams): Int","prompt":""},{"id":3523,"identifierName":"tm.alashow.datmusic.data.db.daos.ArtistsDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) from artists where id = :id\")\n    abstract override suspend fun has(id: String): Int","prompt":""},{"id":3524,"identifierName":"io.github.dmi3coder.scorsero.data.source.local.ScoreDao","requiredType":[],"content":"@Query(\"SELECT * FROM score\")\n  fun subscribeAll(): Flowable<List<Score>>","prompt":""},{"id":3525,"identifierName":"io.github.dmi3coder.scorsero.data.source.local.ScoreDao","requiredType":["data class Score()"],"content":"@Query(\"SELECT * FROM score\")\n  fun getAll(): List<Score>","prompt":""},{"id":3526,"identifierName":"io.github.dmi3coder.scorsero.data.source.local.ScoreDao","requiredType":["data class Score()"],"content":"@Query(\"SELECT * FROM score WHERE $CREATION_DATE_BETWEEN_ARGS\")\n  fun getAllForDate(fromDate: Long, toDate: Long): List<Score>","prompt":""},{"id":3527,"identifierName":"io.github.dmi3coder.scorsero.data.source.local.ScoreDao","requiredType":[],"content":"@Query(\"SELECT * FROM score WHERE $CREATION_DATE_BETWEEN_ARGS\")\n  fun subscribeAllForDate(fromDate: Long, toDate: Long): Flowable<List<Score>>","prompt":""},{"id":3528,"identifierName":"io.github.dmi3coder.scorsero.data.source.local.ScoreDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM score WHERE $CREATION_DATE_BETWEEN_ARGS AND $NOT_COMPLETED\")\n  fun subscribeElementCount(fromDate: Long, toDate: Long): Flowable<Int>","prompt":""},{"id":3529,"identifierName":"io.github.dmi3coder.scorsero.data.source.local.ScoreDao","requiredType":["data class Score()"],"content":"@Insert(onConflict = OnConflictStrategy.FAIL)\n  fun insert(vararg score: Score)","prompt":""},{"id":3530,"identifierName":"io.github.dmi3coder.scorsero.data.source.local.ScoreDao","requiredType":["data class Score()"],"content":"@Update\n  fun update(vararg scores: Score)","prompt":""},{"id":3531,"identifierName":"io.github.dmi3coder.scorsero.data.source.local.ScoreDao","requiredType":["data class Score()"],"content":"@Delete\n  fun delete(vararg scores: Score)","prompt":""},{"id":3532,"identifierName":"org.tvheadend.data.dao.ServerProfileDao","requiredType":[],"content":"@Query(\"SELECT p.* FROM server_profiles AS p \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND p.type = '\" + HTSP_PROFILE + \"'\")\n    fun loadHtspPlaybackProfilesSync(): List<ServerProfileEntity>","prompt":""},{"id":3533,"identifierName":"org.tvheadend.data.dao.ServerProfileDao","requiredType":[],"content":"@Query(\"SELECT p.* FROM server_profiles AS p \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND p.type = '\" + HTTP_PROFILE + \"'\")\n    fun loadHttpPlaybackProfilesSync(): List<ServerProfileEntity>","prompt":""},{"id":3534,"identifierName":"org.tvheadend.data.dao.ServerProfileDao","requiredType":[],"content":"@Query(\"SELECT p.* FROM server_profiles AS p \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND p.type = '\" + RECORDING_PROFILE + \"'\")\n    fun loadAllRecordingProfilesSync(): List<ServerProfileEntity>","prompt":""},{"id":3535,"identifierName":"org.tvheadend.data.dao.ServerProfileDao","requiredType":[],"content":"@Insert\n    fun insert(serverProfile: ServerProfileEntity)","prompt":""},{"id":3536,"identifierName":"org.tvheadend.data.dao.ServerProfileDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(serverProfiles: List<ServerProfileEntity>)","prompt":""},{"id":3537,"identifierName":"org.tvheadend.data.dao.ServerProfileDao","requiredType":[],"content":"@Update\n    fun update(serverProfile: ServerProfileEntity)","prompt":""},{"id":3538,"identifierName":"org.tvheadend.data.dao.ServerProfileDao","requiredType":[],"content":"@Delete\n    fun delete(serverProfile: ServerProfileEntity)","prompt":""},{"id":3539,"identifierName":"org.tvheadend.data.dao.ServerProfileDao","requiredType":[],"content":"@Query(\"DELETE FROM server_profiles\")\n    fun deleteAll()","prompt":""},{"id":3540,"identifierName":"org.tvheadend.data.dao.ServerProfileDao","requiredType":[],"content":"@Query(\"SELECT p.* FROM server_profiles AS p \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND p.id = :id\")\n    fun loadProfileByIdSync(id: Int): ServerProfileEntity?","prompt":""},{"id":3541,"identifierName":"org.tvheadend.data.dao.ServerProfileDao","requiredType":[],"content":"@Query(\"SELECT p.* FROM server_profiles AS p \" +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND p.uuid = :uuid\")\n    fun loadProfileByUuidSync(uuid: String): ServerProfileEntity?","prompt":""},{"id":3542,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":[],"content":"@Query(\"SELECT * FROM streams\")\n    abstract override fun getAll(): Flowable<List<StreamEntity>>","prompt":""},{"id":3543,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":[],"content":"@Query(\"DELETE FROM streams\")\n    abstract override fun deleteAll(): Int","prompt":""},{"id":3544,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":[],"content":"@Query(\"SELECT * FROM streams WHERE service_id = :serviceId\")\n    abstract override fun listByService(serviceId: Int): Flowable<List<StreamEntity>>","prompt":""},{"id":3545,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":[],"content":"@Query(\"SELECT * FROM streams WHERE url = :url AND service_id = :serviceId\")\n    abstract fun getStream(serviceId: Long, url: String): Flowable<List<StreamEntity>>","prompt":""},{"id":3546,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":[],"content":"@Query(\"UPDATE streams SET uploader_url = :uploaderUrl WHERE url = :url AND service_id = :serviceId\")\n    abstract fun setUploaderUrl(serviceId: Long, url: String, uploaderUrl: String): Completable","prompt":""},{"id":3547,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":["data class StreamEntity( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = STREAM_ID) var uid: Long = 0, @ColumnInfo(name = STREAM_SERVICE_ID) var serviceId: Int, @ColumnInfo(name = STREAM_URL) var url: String, @ColumnInfo(name = STREAM_TITLE) var title: String, @ColumnInfo(name = STREAM_TYPE) var streamType: StreamType, @ColumnInfo(name = STREAM_DURATION) var duration: Long, @ColumnInfo(name = STREAM_UPLOADER) var uploader: String, @ColumnInfo(name = STREAM_THUMBNAIL_URL) var thumbnailUrl: String? = null, @ColumnInfo(name = STREAM_VIEWS) var viewCount: Long? = null, @ColumnInfo(name = STREAM_TEXTUAL_UPLOAD_DATE) var textualUploadDate: String? = null, @ColumnInfo(name = STREAM_UPLOAD_DATE) var uploadDate: OffsetDateTime? = null, @ColumnInfo(name = STREAM_IS_UPLOAD_DATE_APPROXIMATION) var isUploadDateApproximation: Boolean? = null )"],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    internal abstract fun silentInsertInternal(stream: StreamEntity): Long","prompt":""},{"id":3548,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    internal abstract fun silentInsertAllInternal(streams: List<StreamEntity>): List<Long>","prompt":""},{"id":3549,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":[],"content":"@Query(\"SELECT COUNT(*) != 0 FROM streams WHERE url = :url AND service_id = :serviceId\")\n    internal abstract fun exists(serviceId: Int, url: String): Boolean","prompt":""},{"id":3550,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT uid, stream_type, textual_upload_date, upload_date, is_upload_date_approximation, duration \n        FROM streams WHERE url = :url AND service_id = :serviceId\n        \"\"\"\n    )\n    internal abstract fun getMinimalStreamForCompare(serviceId: Int, url: String): StreamCompareFeed?","prompt":""},{"id":3551,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":["data class StreamEntity( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = STREAM_ID) var uid: Long = 0, @ColumnInfo(name = STREAM_SERVICE_ID) var serviceId: Int, @ColumnInfo(name = STREAM_URL) var url: String, @ColumnInfo(name = STREAM_TITLE) var title: String, @ColumnInfo(name = STREAM_TYPE) var streamType: StreamType, @ColumnInfo(name = STREAM_DURATION) var duration: Long, @ColumnInfo(name = STREAM_UPLOADER) var uploader: String, @ColumnInfo(name = STREAM_THUMBNAIL_URL) var thumbnailUrl: String? = null, @ColumnInfo(name = STREAM_VIEWS) var viewCount: Long? = null, @ColumnInfo(name = STREAM_TEXTUAL_UPLOAD_DATE) var textualUploadDate: String? = null, @ColumnInfo(name = STREAM_UPLOAD_DATE) var uploadDate: OffsetDateTime? = null, @ColumnInfo(name = STREAM_IS_UPLOAD_DATE_APPROXIMATION) var isUploadDateApproximation: Boolean? = null )"],"content":"@Transaction\n    open fun upsert(newerStream: StreamEntity): Long {\n        val uid = silentInsertInternal(newerStream)\n\n        if (uid != -1L) {\n            newerStream.uid = uid\n            return uid\n        }\n\n        compareAndUpdateStream(newerStream)\n\n        update(newerStream)\n        return newerStream.uid\n    }","prompt":""},{"id":3552,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":[],"content":"@Transaction\n    open fun upsertAll(streams: List<StreamEntity>): List<Long> {\n        val insertUidList = silentInsertAllInternal(streams)\n\n        val streamIds = ArrayList<Long>(streams.size)\n        for ((index, uid) in insertUidList.withIndex()) {\n            val newerStream = streams[index]\n            if (uid != -1L) {\n                streamIds.add(uid)\n                newerStream.uid = uid\n                continue\n            }\n\n            compareAndUpdateStream(newerStream)\n            streamIds.add(newerStream.uid)\n        }\n\n        update(streams)\n        return streamIds\n    }","prompt":""},{"id":3553,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":["data class StreamEntity( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = STREAM_ID) var uid: Long = 0, @ColumnInfo(name = STREAM_SERVICE_ID) var serviceId: Int, @ColumnInfo(name = STREAM_URL) var url: String, @ColumnInfo(name = STREAM_TITLE) var title: String, @ColumnInfo(name = STREAM_TYPE) var streamType: StreamType, @ColumnInfo(name = STREAM_DURATION) var duration: Long, @ColumnInfo(name = STREAM_UPLOADER) var uploader: String, @ColumnInfo(name = STREAM_THUMBNAIL_URL) var thumbnailUrl: String? = null, @ColumnInfo(name = STREAM_VIEWS) var viewCount: Long? = null, @ColumnInfo(name = STREAM_TEXTUAL_UPLOAD_DATE) var textualUploadDate: String? = null, @ColumnInfo(name = STREAM_UPLOAD_DATE) var uploadDate: OffsetDateTime? = null, @ColumnInfo(name = STREAM_IS_UPLOAD_DATE_APPROXIMATION) var isUploadDateApproximation: Boolean? = null )","data class ColumnInfo( /** * Name of the column in the database. Defaults to the field name if not set. * * @return Name of the column in the database. */ val name: String = INHERIT_FIELD_NAME, /** * The type affinity for the column, which will be used when constructing the database. * * If it is not specified, the value defaults to [UNDEFINED] and Room resolves it based * on the field's type and available TypeConverters. * * See [SQLite types documentation](https://www.sqlite.org/datatype3.html) for details. * * @return The type affinity of the column. This is either [UNDEFINED], [TEXT], * [INTEGER], [REAL], or [BLOB]. */ @SuppressWarnings(\"unused\") @get:SQLiteTypeAffinity val typeAffinity: Int = UNDEFINED, /** * Convenience method to index the field. * * If you would like to create a composite index instead, see: [Index]. * * @return True if this field should be indexed, false otherwise. Defaults to false. */ val index: Boolean = false, /** * The collation sequence for the column, which will be used when constructing the database. * * The default value is [UNSPECIFIED]. In that case, Room does not add any * collation sequence to the column, and SQLite treats it like [BINARY]. * * @return The collation sequence of the column. This is either [UNSPECIFIED], * [BINARY], [NOCASE], [RTRIM], [LOCALIZED] or [UNICODE]. */ @get:Collate val collate: Int = UNSPECIFIED, /** * The default value for this column. * * ``` * @ColumnInfo(defaultValue = \"No name\") * public name: String * * @ColumnInfo(defaultValue = \"0\") * public flag: Int * ``` * * Note that the default value you specify here will _NOT_ be used if you simply * insert the [Entity] with [Insert]. In that case, any value assigned in * Java/Kotlin will be used. Use [Query] with an `INSERT` statement * and skip this column there in order to use this default value. * * NULL, CURRENT_TIMESTAMP and other SQLite constant values are interpreted as such. If you want * to use them as strings for some reason, surround them with single-quotes. * * ``` * @ColumnInfo(defaultValue = \"NULL\") * public description: String? * * @ColumnInfo(defaultValue = \"'NULL'\") * public name: String * ``` * * You can also use constant expressions by surrounding them with parentheses. * * ``` * @ColumnInfo(defaultValue = \"('Created at' || CURRENT_TIMESTAMP)\") * public notice: String * ``` * * @return The default value for this column. * @see [VALUE_UNSPECIFIED] */ val defaultValue: String = VALUE_UNSPECIFIED, )"],"content":"private fun compareAndUpdateStream(newerStream: StreamEntity) {\n        val existentMinimalStream = getMinimalStreamForCompare(newerStream.serviceId, newerStream.url)\n            ?: throw IllegalStateException(\"Stream cannot be null just after insertion.\")\n        newerStream.uid = existentMinimalStream.uid\n\n        if (!StreamTypeUtil.isLiveStream(newerStream.streamType)) {\n\n            // Use the existent upload date if the newer stream does not have a better precision\n            // (i.e. is an approximation). This is done to prevent unnecessary changes.\n            val hasBetterPrecision =\n                newerStream.uploadDate != null && newerStream.isUploadDateApproximation != true\n            if (existentMinimalStream.uploadDate != null && !hasBetterPrecision) {\n                newerStream.uploadDate = existentMinimalStream.uploadDate\n                newerStream.textualUploadDate = existentMinimalStream.textualUploadDate\n                newerStream.isUploadDateApproximation = existentMinimalStream.isUploadDateApproximation\n            }\n\n            if (existentMinimalStream.duration > 0 && newerStream.duration < 0) {\n                newerStream.duration = existentMinimalStream.duration\n            }\n        }\n    }","prompt":""},{"id":3554,"identifierName":"org.schabi.newpipe.database.stream.dao.StreamDAO","requiredType":[],"content":"@Query(\n        \"\"\"\n        DELETE FROM streams WHERE\n\n        NOT EXISTS (SELECT 1 FROM stream_history sh\n        WHERE sh.stream_id = streams.uid)\n\n        AND NOT EXISTS (SELECT 1 FROM playlist_stream_join ps\n        WHERE ps.stream_id = streams.uid)\n\n        AND NOT EXISTS (SELECT 1 FROM feed f\n        WHERE f.stream_id = streams.uid)\n        \"\"\"\n    )\n    abstract fun deleteOrphans(): Int","prompt":""},{"id":3555,"identifierName":"com.sbgapps.scoreit.cache.db.UniversalGameDao","requiredType":["data class UniversalGameData( @PrimaryKey(autoGenerate = true) val id: Long? = null, var name: String )"],"content":"@Query(\"SELECT * FROM games\")\n    fun getAllGames(): List<UniversalGameData>","prompt":""},{"id":3556,"identifierName":"com.sbgapps.scoreit.cache.db.UniversalGameDao","requiredType":["data class UniversalGameData( @PrimaryKey(autoGenerate = true) val id: Long? = null, var name: String )"],"content":"@Query(\"SELECT * FROM games WHERE id = :id\")\n    fun getGame(id: Long): UniversalGameData","prompt":""},{"id":3557,"identifierName":"com.sbgapps.scoreit.cache.db.UniversalGameDao","requiredType":["data class UniversalGameData( @PrimaryKey(autoGenerate = true) val id: Long? = null, var name: String )"],"content":"@Query(\"SELECT * FROM games WHERE name = :name\")\n    fun getGame(name: String): UniversalGameData","prompt":""},{"id":3558,"identifierName":"com.sbgapps.scoreit.cache.db.UniversalGameDao","requiredType":["data class UniversalGameData( @PrimaryKey(autoGenerate = true) val id: Long? = null, var name: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertGame(game: UniversalGameData): Long","prompt":""},{"id":3559,"identifierName":"com.sbgapps.scoreit.cache.db.UniversalGameDao","requiredType":[],"content":"@Query(\"DELETE FROM games WHERE id = :id\")\n    fun deleteGame(id: Long)","prompt":""},{"id":3560,"identifierName":"com.github.vhromada.catalog.repository.MusicRepository","requiredType":["data class Music( /** * ID */ @Id @SequenceGenerator(name = \"music_generator\", sequenceName = \"music_sq\", allocationSize = 1) @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"music_generator\") var id: Int?, /** * UUID */ val uuid: String, /** * Name */ @Column(name = \"music_name\") var name: String, /** * Normalized name */ @Column(name = \"normalized_music_name\") var normalizedName: String, /** * URL to english Wikipedia page about music */ @Column(name = \"wiki_en\") var wikiEn: String?, /** * URL to czech Wikipedia page about music */ @Column(name = \"wiki_cz\") var wikiCz: String?, /** * Count of media */ @Column(name = \"media_count\") var mediaCount: Int, /** * Note */ var note: String?, /** * Songs */ @OneToMany(mappedBy = \"music\", fetch = FetchType.EAGER, cascade = [CascadeType.ALL], orphanRemoval = true) @OrderBy(\"id\") @Fetch(FetchMode.SELECT) val songs: MutableList<Song> )"],"content":"/**\n     * Finds music by UUID.\n     *\n     * @param uuid UUID\n     * @return music\n     */\n    fun findByUuid(uuid: String): Optional<Music>","prompt":""},{"id":3561,"identifierName":"com.github.vhromada.catalog.repository.MusicRepository","requiredType":["data class MusicStatistics( /** * Count of music */ val count: Long, /** * Count of media */ val mediaCount: Long? )"],"content":"/**\n     * Returns statistics.\n     *\n     * @return statistics\n     */\n    @Query(\"SELECT new com.github.vhromada.catalog.domain.io.MusicStatistics(COUNT(m.id), SUM(m.mediaCount)) FROM Music m\")\n    fun getStatistics(): MusicStatistics","prompt":""},{"id":3562,"identifierName":"com.google.android.ground.persistence.local.room.dao.SubmissionDao","requiredType":["data class SubmissionEntity( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"location_of_interest_id\") val locationOfInterestId: String, @ColumnInfo(name = \"job_id\") val jobId: String, @ColumnInfo(name = \"state\") var state: EntityState, @ColumnInfo(name = \"responses\") var responses: String?, @Embedded(prefix = \"created_\") val created: AuditInfoEntity, @Embedded(prefix = \"modified_\") var lastModified: AuditInfoEntity, )"],"content":"/** Returns the submission with the specified UUID, if found. */\n  @Query(\"SELECT * FROM submission WHERE id = :submissionId\")\n  fun findById(submissionId: String): Maybe<SubmissionEntity>","prompt":""},{"id":3563,"identifierName":"com.google.android.ground.persistence.local.room.dao.SubmissionDao","requiredType":[],"content":"/**\n   * Returns the list submissions associated with the specified location of interest, task and\n   * state.\n   */\n  @Query(\n    \"SELECT * FROM submission \" +\n      \"WHERE location_of_interest_id = :locationOfInterestId \" +\n      \"AND job_id = :jobId AND state = :state\"\n  )\n  fun findByLocationOfInterestId(\n    locationOfInterestId: String,\n    jobId: String,\n    state: EntityState\n  ): Single<List<SubmissionEntity>>","prompt":""},{"id":3564,"identifierName":"com.google.samples.apps.iosched.shared.data.db.CodelabFtsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(codelabs: List<CodelabFtsEntity>)","prompt":""},{"id":3565,"identifierName":"com.google.samples.apps.iosched.shared.data.db.CodelabFtsDao","requiredType":[],"content":"@Query(\"SELECT codelabId FROM codelabsFts WHERE codelabsFts MATCH :query\")\n    fun searchAllCodelabs(query: String): List<String>","prompt":""},{"id":3566,"identifierName":"app.tivi.data.daos.WatchedShowDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM watched_entries WHERE show_id = :showId\")\n    abstract suspend fun entryWithShowId(showId: Long): WatchedShowEntry?","prompt":""},{"id":3567,"identifierName":"app.tivi.data.daos.WatchedShowDao","requiredType":[],"content":"@Transaction\n    @Query(ENTRY_QUERY_ORDER_LAST_WATCHED)\n    abstract suspend fun entries(): List<WatchedShowEntry>","prompt":""},{"id":3568,"identifierName":"app.tivi.data.daos.WatchedShowDao","requiredType":[],"content":"@Transaction\n    @Query(ENTRY_QUERY_ORDER_LAST_WATCHED)\n    abstract fun entriesObservable(): Flow<List<WatchedShowEntry>>","prompt":""},{"id":3569,"identifierName":"app.tivi.data.daos.WatchedShowDao","requiredType":["data class SortOptionnull"],"content":"fun observePagedList(\n        filter: String?,\n        sort: SortOption\n    ): PagingSource<Int, WatchedShowEntryWithShow> {\n        val filtered = filter != null && filter.isNotEmpty()\n        return when (sort) {\n            SortOption.LAST_WATCHED -> {\n                if (filtered) {\n                    pagedListLastWatchedFilter(\"*$filter*\")\n                } else {\n                    pagedListLastWatched()\n                }\n            }\n            SortOption.ALPHABETICAL -> {\n                if (filtered) {\n                    pagedListAlphaFilter(\"*$filter*\")\n                } else {\n                    pagedListAlpha()\n                }\n            }\n            else -> throw IllegalArgumentException(\"$sort option is not supported\")\n        }\n    }","prompt":""},{"id":3570,"identifierName":"app.tivi.data.daos.WatchedShowDao","requiredType":[],"content":"@Transaction\n    @Query(ENTRY_QUERY_ORDER_LAST_WATCHED)\n    protected abstract fun pagedListLastWatched(): PagingSource<Int, WatchedShowEntryWithShow>","prompt":""},{"id":3571,"identifierName":"app.tivi.data.daos.WatchedShowDao","requiredType":[],"content":"@Transaction\n    @Query(ENTRY_QUERY_ORDER_LAST_WATCHED_FILTER)\n    protected abstract fun pagedListLastWatchedFilter(filter: String): PagingSource<Int, WatchedShowEntryWithShow>","prompt":""},{"id":3572,"identifierName":"app.tivi.data.daos.WatchedShowDao","requiredType":[],"content":"@Transaction\n    @Query(ENTRY_QUERY_ORDER_ALPHA)\n    protected abstract fun pagedListAlpha(): PagingSource<Int, WatchedShowEntryWithShow>","prompt":""},{"id":3573,"identifierName":"app.tivi.data.daos.WatchedShowDao","requiredType":[],"content":"@Transaction\n    @Query(ENTRY_QUERY_ORDER_ALPHA_FILTER)\n    protected abstract fun pagedListAlphaFilter(filter: String): PagingSource<Int, WatchedShowEntryWithShow>","prompt":""},{"id":3574,"identifierName":"app.tivi.data.daos.WatchedShowDao","requiredType":["data class PagingSourcenull"],"content":"@Query(\"DELETE FROM watched_entries\")\n    abstract override suspend fun deleteAll()","prompt":""},{"id":3575,"identifierName":"com.github.vhromada.catalog.repository.SongRepository","requiredType":["data class Song( /** * ID */ @Id @SequenceGenerator(name = \"song_generator\", sequenceName = \"songs_sq\", allocationSize = 1) @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"song_generator\") var id: Int?, /** * UUID */ val uuid: String, /** * Name */ @Column(name = \"song_name\") var name: String, /** * Length */ @Column(name = \"song_length\") var length: Int, /** * Note */ var note: String?, /** * Music */ @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = \"music\") var music: Music? = null )"],"content":"/**\n     * Returns songs by music's ID.\n     *\n     * @param id       music's ID\n     * @param pageable paging information\n     * @return songs\n     */\n    fun findAllByMusicId(id: Int, pageable: Pageable): Page<Song>","prompt":""},{"id":3576,"identifierName":"com.github.vhromada.catalog.repository.SongRepository","requiredType":["data class Song( /** * ID */ @Id @SequenceGenerator(name = \"song_generator\", sequenceName = \"songs_sq\", allocationSize = 1) @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"song_generator\") var id: Int?, /** * UUID */ val uuid: String, /** * Name */ @Column(name = \"song_name\") var name: String, /** * Length */ @Column(name = \"song_length\") var length: Int, /** * Note */ var note: String?, /** * Music */ @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = \"music\") var music: Music? = null )"],"content":"/**\n     * Finds song by UUID.\n     *\n     * @param uuid UUID\n     * @return song\n     */\n    fun findByUuid(uuid: String): Optional<Song>","prompt":""},{"id":3577,"identifierName":"com.github.vhromada.catalog.repository.SongRepository","requiredType":["data class SongStatistics( /** * Count of songs */ val count: Long, /** * Length */ val length: Long? )"],"content":"/**\n     * Returns statistics.\n     *\n     * @return statistics\n     */\n    @Query(\"SELECT new com.github.vhromada.catalog.domain.io.SongStatistics(COUNT(s.id), SUM(s.length)) FROM Song s\")\n    fun getStatistics(): SongStatistics","prompt":""},{"id":3578,"identifierName":"com.qfleng.um.database.dao.StringKeyDataDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${DbConst.STRING_KEY_DATA_TABLE_NAME} WHERE `key` == :key\")\n    fun loadByKey(key: String): StringKeyData?","prompt":""},{"id":3579,"identifierName":"com.qfleng.um.database.dao.StringKeyDataDao","requiredType":["data class StringKeyDatanull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(skd: StringKeyData)","prompt":""},{"id":3580,"identifierName":"com.qfleng.um.database.dao.StringKeyDataDao","requiredType":["data class StringKeyDatanull"],"content":"@Delete\n    fun delete(user: StringKeyData)","prompt":""},{"id":3581,"identifierName":"com.qfleng.um.database.dao.StringKeyDataDao","requiredType":[],"content":"@Query(\"DELETE FROM ${DbConst.STRING_KEY_DATA_TABLE_NAME}\")\n    fun deleteAll()","prompt":""},{"id":3582,"identifierName":"info.nightscout.androidaps.database.daos.FoodDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_FOODS WHERE id = :id\")\n    override fun findById(id: Long): Food?","prompt":""},{"id":3583,"identifierName":"info.nightscout.androidaps.database.daos.FoodDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_FOODS\")\n    override fun deleteAllEntries()","prompt":""},{"id":3584,"identifierName":"info.nightscout.androidaps.database.daos.FoodDao","requiredType":[],"content":"@Query(\"SELECT id FROM $TABLE_FOODS ORDER BY id DESC limit 1\")\n    fun getLastId(): Maybe<Long>","prompt":""},{"id":3585,"identifierName":"info.nightscout.androidaps.database.daos.FoodDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_FOODS WHERE nightscoutId = :nsId AND referenceId IS NULL\")\n    fun findByNSId(nsId: String): Food?","prompt":""},{"id":3586,"identifierName":"info.nightscout.androidaps.database.daos.FoodDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_FOODS WHERE isValid = 1 AND referenceId IS NULL ORDER BY id DESC\")\n    fun getFoodData(): Single<List<Food>>","prompt":""},{"id":3587,"identifierName":"info.nightscout.androidaps.database.daos.FoodDao","requiredType":[],"content":"// This query will be used with v3 to get all changed records\n    @Query(\"SELECT * FROM $TABLE_FOODS WHERE id > :id AND referenceId IS NULL OR id IN (SELECT DISTINCT referenceId FROM $TABLE_FOODS WHERE id > :id) ORDER BY id ASC\")\n    fun getModifiedFrom(id: Long): Single<List<Food>>","prompt":""},{"id":3588,"identifierName":"info.nightscout.androidaps.database.daos.FoodDao","requiredType":[],"content":"// for WS we need 1 record only\n    @Query(\"SELECT * FROM $TABLE_FOODS WHERE id > :id ORDER BY id ASC limit 1\")\n    fun getNextModifiedOrNewAfter(id: Long): Maybe<Food>","prompt":""},{"id":3589,"identifierName":"info.nightscout.androidaps.database.daos.FoodDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_FOODS WHERE id = :referenceId\")\n    fun getCurrentFromHistoric(referenceId: Long): Maybe<Food>","prompt":""},{"id":3590,"identifierName":"com.example.demoaerisproject.data.room.MyPlaceDao","requiredType":[],"content":"@Query(\"SELECT * from my_place_table\")\n    fun getAllMyPlaces(): Flow<List<MyPlace>>","prompt":""},{"id":3591,"identifierName":"com.example.demoaerisproject.data.room.MyPlaceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(myPlace: MyPlace)","prompt":""},{"id":3592,"identifierName":"com.example.demoaerisproject.data.room.MyPlaceDao","requiredType":[],"content":"@Query(\"DELETE FROM my_place_table\")\n    suspend fun deleteAll()","prompt":""},{"id":3593,"identifierName":"com.example.demoaerisproject.data.room.MyPlaceDao","requiredType":[],"content":"@Query(\"DELETE FROM my_place_table WHERE name = :selected\")\n    suspend fun deleteByName(selected: String)","prompt":""},{"id":3594,"identifierName":"com.example.demoaerisproject.data.room.MyPlaceDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun update(myPlace: MyPlace)","prompt":""},{"id":3595,"identifierName":"com.example.demoaerisproject.data.room.MyPlaceDao","requiredType":[],"content":"@Query(\"UPDATE my_place_table SET myLoc = 0\")\n    suspend fun resetMyLocFalse()","prompt":""},{"id":3596,"identifierName":"com.bnsantos.offline.db.CommentDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg comment: Comment)","prompt":""},{"id":3597,"identifierName":"com.bnsantos.offline.db.CommentDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(comments: List<Comment>)","prompt":""},{"id":3598,"identifierName":"com.bnsantos.offline.db.CommentDao","requiredType":[],"content":"@Query(\"SELECT * FROM Comment ORDER BY createdAt ASC\")\n    fun read(): LiveData<List<Comment>>","prompt":""},{"id":3599,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user\")\n    abstract fun getUsers(): List<User>","prompt":""},{"id":3600,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user WHERE age = :age\")\n    abstract fun getUserWithAge(age: Int): List<User>","prompt":""},{"id":3601,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.UserDao","requiredType":[],"content":"@Delete\n    abstract fun deleteUsers(vararg users: User)","prompt":""},{"id":3602,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.UserDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertUser(user: User): Long","prompt":""},{"id":3603,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user\")\n    abstract fun getUserWithCars(): List<UserWitCars>","prompt":""},{"id":3604,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.UserDao","requiredType":[],"content":"@Query(\"SELECT u.* FROM user u JOIN car c WHERE c.name = :name\")\n    abstract fun getUsersWithCar(name: String): List<User>","prompt":""},{"id":3605,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.UserDao","requiredType":[],"content":"@Transaction\n    open fun replaceUser(old: User, new: User) {\n        insertUser(new)\n        deleteUsers(old)\n    }","prompt":""},{"id":3606,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.UserDao","requiredType":[],"content":"@Transaction\n    open fun replaceUserWithError(old: User, new: User) {\n        insertUser(new)\n        if (true) {\n            throw IllegalStateException()\n        }\n        deleteUsers(old)\n    }","prompt":""},{"id":3607,"identifierName":"com.thanksmister.iot.mqtt.alarmpanel.persistence.DarkSkyDao","requiredType":[],"content":"/**\n     * Get all items\n     * @return list of all weather data items.\n     */\n    @Query(\"SELECT * FROM DarkSky\")\n    fun getItems(): Flowable<List<DarkSky>>","prompt":""},{"id":3608,"identifierName":"com.thanksmister.iot.mqtt.alarmpanel.persistence.DarkSkyDao","requiredType":[],"content":"/**\n     * Insert an item in the database. If the message already exists, replace it.\n     * @param user the message to be inserted.\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertItem(item: DarkSky)","prompt":""},{"id":3609,"identifierName":"com.thanksmister.iot.mqtt.alarmpanel.persistence.DarkSkyDao","requiredType":[],"content":"/**\n     * Delete all items.\n     */\n    @Query(\"DELETE FROM DarkSky\")\n    fun deleteAllItems()","prompt":""},{"id":3610,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUS_CALCULATOR_RESULTS WHERE id = :id\")\n    override fun findById(id: Long): BolusCalculatorResult?","prompt":""},{"id":3611,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_BOLUS_CALCULATOR_RESULTS\")\n\n    override fun deleteAllEntries()","prompt":""},{"id":3612,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":[],"content":"@Query(\"SELECT id FROM $TABLE_BOLUS_CALCULATOR_RESULTS ORDER BY id DESC limit 1\")\n    fun getLastId(): Maybe<Long>","prompt":""},{"id":3613,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUS_CALCULATOR_RESULTS WHERE timestamp = :timestamp AND referenceId IS NULL\")\n    fun findByTimestamp(timestamp: Long): BolusCalculatorResult?","prompt":""},{"id":3614,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUS_CALCULATOR_RESULTS WHERE nightscoutId = :nsId AND referenceId IS NULL\")\n    fun findByNSId(nsId: String): BolusCalculatorResult?","prompt":""},{"id":3615,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUS_CALCULATOR_RESULTS WHERE isValid = 1 AND timestamp >= :timestamp AND referenceId IS NULL ORDER BY id DESC\")\n    fun getBolusCalculatorResultsFromTime(timestamp: Long): Single<List<BolusCalculatorResult>>","prompt":""},{"id":3616,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUS_CALCULATOR_RESULTS WHERE timestamp >= :timestamp AND referenceId IS NULL ORDER BY id DESC\")\n    fun getBolusCalculatorResultsIncludingInvalidFromTime(timestamp: Long): Single<List<BolusCalculatorResult>>","prompt":""},{"id":3617,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":[],"content":"// This query will be used with v3 to get all changed records\n    @Query(\"SELECT * FROM $TABLE_BOLUS_CALCULATOR_RESULTS WHERE id > :id AND referenceId IS NULL OR id IN (SELECT DISTINCT referenceId FROM $TABLE_BOLUS_CALCULATOR_RESULTS WHERE id > :id) ORDER BY id ASC\")\n    fun getModifiedFrom(id: Long): Single<List<BolusCalculatorResult>>","prompt":""},{"id":3618,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":["data class BolusCalculatorResult( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var targetBGLow: Double, var targetBGHigh: Double, var isf: Double, var ic: Double, var bolusIOB: Double, var wasBolusIOBUsed: Boolean, var basalIOB: Double, var wasBasalIOBUsed: Boolean, var glucoseValue: Double, var wasGlucoseUsed: Boolean, var glucoseDifference: Double, var glucoseInsulin: Double, var glucoseTrend: Double, var wasTrendUsed: Boolean, var trendInsulin: Double, var cob: Double, var wasCOBUsed: Boolean, var cobInsulin: Double, var carbs: Double, var wereCarbsUsed: Boolean, var carbsInsulin: Double, var otherCorrection: Double, var wasSuperbolusUsed: Boolean, var superbolusInsulin: Double, var wasTempTargetUsed: Boolean, var totalInsulin: Double, var percentageCorrection: Int, var profileName: String, var note: String )"],"content":"// for WS we need 1 record only\n    @Query(\"SELECT * FROM $TABLE_BOLUS_CALCULATOR_RESULTS WHERE id > :id ORDER BY id ASC limit 1\")\n    fun getNextModifiedOrNewAfter(id: Long): Maybe<BolusCalculatorResult>","prompt":""},{"id":3619,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":["data class BolusCalculatorResult( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var targetBGLow: Double, var targetBGHigh: Double, var isf: Double, var ic: Double, var bolusIOB: Double, var wasBolusIOBUsed: Boolean, var basalIOB: Double, var wasBasalIOBUsed: Boolean, var glucoseValue: Double, var wasGlucoseUsed: Boolean, var glucoseDifference: Double, var glucoseInsulin: Double, var glucoseTrend: Double, var wasTrendUsed: Boolean, var trendInsulin: Double, var cob: Double, var wasCOBUsed: Boolean, var cobInsulin: Double, var carbs: Double, var wereCarbsUsed: Boolean, var carbsInsulin: Double, var otherCorrection: Double, var wasSuperbolusUsed: Boolean, var superbolusInsulin: Double, var wasTempTargetUsed: Boolean, var totalInsulin: Double, var percentageCorrection: Int, var profileName: String, var note: String )"],"content":"@Query(\"SELECT * FROM $TABLE_BOLUS_CALCULATOR_RESULTS WHERE id = :referenceId\")\n    fun getCurrentFromHistoric(referenceId: Long): Maybe<BolusCalculatorResult>","prompt":""},{"id":3620,"identifierName":"info.nightscout.androidaps.database.daos.BolusCalculatorResultDao","requiredType":["data class BolusCalculatorResult( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = null, override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var targetBGLow: Double, var targetBGHigh: Double, var isf: Double, var ic: Double, var bolusIOB: Double, var wasBolusIOBUsed: Boolean, var basalIOB: Double, var wasBasalIOBUsed: Boolean, var glucoseValue: Double, var wasGlucoseUsed: Boolean, var glucoseDifference: Double, var glucoseInsulin: Double, var glucoseTrend: Double, var wasTrendUsed: Boolean, var trendInsulin: Double, var cob: Double, var wasCOBUsed: Boolean, var cobInsulin: Double, var carbs: Double, var wereCarbsUsed: Boolean, var carbsInsulin: Double, var otherCorrection: Double, var wasSuperbolusUsed: Boolean, var superbolusInsulin: Double, var wasTempTargetUsed: Boolean, var totalInsulin: Double, var percentageCorrection: Int, var profileName: String, var note: String )"],"content":"@Query(\"SELECT * FROM $TABLE_BOLUS_CALCULATOR_RESULTS WHERE dateCreated > :since AND dateCreated <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<BolusCalculatorResult>","prompt":""},{"id":3621,"identifierName":"data.tinder.recommendation.RecommendationUserSchoolDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertSchool(school: RecommendationUserSchoolEntity)","prompt":""},{"id":3622,"identifierName":"data.tinder.recommendation.RecommendationUserSchoolDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserSchoolEntity WHERE id=:id\")\n  fun selectSchoolById(id: String): List<RecommendationUserSchoolEntity>","prompt":""},{"id":3623,"identifierName":"androidx.work.impl.model.WorkProgressDao","requiredType":[],"content":"/**\n     * Inserts a [WorkProgress] into the database.\n     *\n     * @param progress The [WorkProgress]\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(progress: WorkProgress)","prompt":""},{"id":3624,"identifierName":"androidx.work.impl.model.WorkProgressDao","requiredType":[],"content":"/**\n     * Deletes a [WorkProgress] from the database.\n     *\n     * @param workSpecId The [WorkSpec] id\n     */\n    @Query(\"DELETE from WorkProgress where work_spec_id=:workSpecId\")\n    fun delete(workSpecId: String)","prompt":""},{"id":3625,"identifierName":"androidx.work.impl.model.WorkProgressDao","requiredType":[],"content":"/**\n     * Removes all [WorkProgress] entries from the [WorkProgress] table.\n     */\n    @Query(\"DELETE FROM WorkProgress\")\n    fun deleteAll()","prompt":""},{"id":3626,"identifierName":"androidx.work.impl.model.WorkProgressDao","requiredType":[],"content":"/**\n     * @param workSpecId The [String] workSpec id\n     * @return The progress [Data] associated with the given [String] workSpec id.\n     */\n    @Query(\"SELECT progress FROM WorkProgress WHERE work_spec_id=:workSpecId\")\n    fun getProgressForWorkSpecId(workSpecId: String): Data?","prompt":""},{"id":3627,"identifierName":"com.chandilsachin.diettracker.database.FoodDao","requiredType":[],"content":"/**\n     * Returns food details of a food given by food_id\n     */\n    @Query(\"SELECT * FROM $ALL_FOOD_LIST WHERE $ID=:arg0\")\n    fun getFoodDetails(food_id:Long):Food","prompt":""},{"id":3628,"identifierName":"com.chandilsachin.diettracker.database.FoodDao","requiredType":[],"content":"@Query(\"SELECT * FROM $ALL_FOOD_LIST\")\n    fun getAllFoodList():LiveData<List<Food>>","prompt":""},{"id":3629,"identifierName":"com.chandilsachin.diettracker.database.FoodDao","requiredType":[],"content":"/**\n     * Inserts food items in all_food_list\n     */\n    @Insert(onConflict = REPLACE)\n    fun addFoodList(list:List<Food>)","prompt":""},{"id":3630,"identifierName":"com.chandilsachin.diettracker.database.FoodDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun saveFood(food:PersonalizedFood)","prompt":""},{"id":3631,"identifierName":"com.chandilsachin.diettracker.database.FoodDao","requiredType":[],"content":"@Delete\n    fun deleteDietFood(food:PersonalizedFood):Int","prompt":""},{"id":3632,"identifierName":"com.chandilsachin.diettracker.database.FoodDao","requiredType":["data class Datenull"],"content":"@Query(\"SELECT * FROM $PERSONALISED_FOOD_LIST WHERE $FOOD_ID=:arg0 and $DATE=:arg1\")\n    fun getFood(foodId:Long, date:Date):PersonalizedFood?","prompt":""},{"id":3633,"identifierName":"com.chandilsachin.diettracker.database.FoodDao","requiredType":["data class Datenull"],"content":"//@Query(\"SELECT * FROM $ALL_FOOD_LIST where $ID in (select $FOOD_ID from $PERSONALISED_FOOD_LIST where $DATE = :arg0)\")\n    @Query(\"SELECT $ID,$NAME,$DESC,$PROTEIN,$CARBS,$FAT,$CALORIES,$PERSONALISED_FOOD_LIST.$QUANTITY FROM $ALL_FOOD_LIST,$PERSONALISED_FOOD_LIST where $ID = $PERSONALISED_FOOD_LIST.$FOOD_ID and $DATE = :arg0\")\n    fun getFood(date:Date):List<DietFood>","prompt":""},{"id":3634,"identifierName":"com.chandilsachin.diettracker.database.FoodDao","requiredType":["data class Datenull"],"content":"@Query(\"SELECT $DATE FROM $PERSONALISED_FOOD_LIST ORDER BY $DATE LIMIT 1\")\n    fun getLastDateOfListing():Date","prompt":""},{"id":3635,"identifierName":"com.emogoth.android.phone.mimi.db.dao.FilterAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.FILTERS_TABLE}\")\n    abstract fun getAll(): Single<List<Filter>>","prompt":""},{"id":3636,"identifierName":"com.emogoth.android.phone.mimi.db.dao.FilterAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.FILTERS_TABLE} WHERE ${Filter.BOARD_NAME} = :boardName\")\n    abstract fun getFiltersByBoard(boardName: String): Single<List<Filter>>","prompt":""},{"id":3637,"identifierName":"com.emogoth.android.phone.mimi.db.dao.FilterAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.FILTERS_TABLE} WHERE ${Filter.NAME} = :name\")\n    abstract fun getFiltersByName(name: String): Single<List<Filter>>","prompt":""},{"id":3638,"identifierName":"com.emogoth.android.phone.mimi.db.dao.FilterAccess","requiredType":["data class Filternull"],"content":"@Query(\"SELECT * FROM ${MimiDatabase.FILTERS_TABLE} WHERE ${Filter.BOARD_NAME} = :boardName AND ${Filter.NAME} = :filterName\")\n    abstract fun getFilter(boardName: String, filterName: String): Single<Filter>","prompt":""},{"id":3639,"identifierName":"com.emogoth.android.phone.mimi.db.dao.FilterAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.FILTERS_TABLE} WHERE ${Filter.BOARD_NAME} = :boardName AND ${Filter.NAME} = :filterName\")\n    abstract fun removeFilter(boardName: String, filterName: String): Single<Int>","prompt":""},{"id":3640,"identifierName":"com.simplemobiletools.musicplayer.interfaces.QueueItemsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(queueItems: List<QueueItem>)","prompt":""},{"id":3641,"identifierName":"com.simplemobiletools.musicplayer.interfaces.QueueItemsDao","requiredType":["data class QueueItem( @ColumnInfo(name = \"track_id\") var trackId: Long, @ColumnInfo(name = \"track_order\") var trackOrder: Int, @ColumnInfo(name = \"is_current\") var isCurrent: Boolean, @ColumnInfo(name = \"last_position\") var lastPosition: Int )"],"content":"@Query(\"SELECT * FROM queue_items ORDER BY track_order\")\n    fun getAll(): List<QueueItem>","prompt":""},{"id":3642,"identifierName":"com.simplemobiletools.musicplayer.interfaces.QueueItemsDao","requiredType":[],"content":"@Query(\"UPDATE queue_items SET is_current = 0\")\n    fun resetCurrent()","prompt":""},{"id":3643,"identifierName":"com.simplemobiletools.musicplayer.interfaces.QueueItemsDao","requiredType":[],"content":"@Query(\"UPDATE queue_items SET is_current = 1, last_position = :lastPosition WHERE track_id = :trackId\")\n    fun saveCurrentTrack(trackId: Long, lastPosition: Int)","prompt":""},{"id":3644,"identifierName":"com.simplemobiletools.musicplayer.interfaces.QueueItemsDao","requiredType":[],"content":"@Query(\"UPDATE queue_items SET track_order = :order WHERE track_id = :trackId\")\n    fun setOrder(trackId: Long, order: Int)","prompt":""},{"id":3645,"identifierName":"com.simplemobiletools.musicplayer.interfaces.QueueItemsDao","requiredType":[],"content":"@Query(\"DELETE FROM queue_items WHERE track_id = :trackId\")\n    fun removeQueueItem(trackId: Long)","prompt":""},{"id":3646,"identifierName":"com.simplemobiletools.musicplayer.interfaces.QueueItemsDao","requiredType":[],"content":"@Query(\"DELETE FROM queue_items\")\n    fun deleteAllItems()","prompt":""},{"id":3647,"identifierName":"data.tinder.recommendation.RecommendationUserCommonFriendDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertCommonFriend(commonFriend: RecommendationUserCommonFriendEntity)","prompt":""},{"id":3648,"identifierName":"data.tinder.recommendation.RecommendationUserCommonFriendDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserCommonFriendEntity WHERE id=:id\")\n  @Transaction\n  fun selectCommonFriendById(id: String)\n      : List<RecommendationUserCommonFriendWithRelatives>","prompt":""},{"id":3649,"identifierName":"fr.free.nrw.commons.customselector.database.UploadedStatusDao","requiredType":[],"content":"/**\n     * Insert into uploaded status.\n     */\n    @Insert( onConflict = OnConflictStrategy.REPLACE )\n    abstract suspend fun insert(uploadedStatus: UploadedStatus)","prompt":""},{"id":3650,"identifierName":"fr.free.nrw.commons.customselector.database.UploadedStatusDao","requiredType":[],"content":"/**\n     * Update uploaded status entry.\n     */\n    @Update\n    abstract suspend fun update(uploadedStatus: UploadedStatus)","prompt":""},{"id":3651,"identifierName":"fr.free.nrw.commons.customselector.database.UploadedStatusDao","requiredType":[],"content":"/**\n     * Delete uploaded status entry.\n     */\n    @Delete\n    abstract suspend fun delete(uploadedStatus: UploadedStatus)","prompt":""},{"id":3652,"identifierName":"fr.free.nrw.commons.customselector.database.UploadedStatusDao","requiredType":[],"content":"/**\n     * Query uploaded status with image sha1.\n     */\n    @Query(\"SELECT * FROM uploaded_table WHERE imageSHA1 = (:imageSHA1) \")\n    abstract suspend fun getFromImageSHA1(imageSHA1 : String) : UploadedStatus?","prompt":""},{"id":3653,"identifierName":"fr.free.nrw.commons.customselector.database.UploadedStatusDao","requiredType":[],"content":"/**\n     * Query uploaded status with modified image sha1.\n     */\n    @Query(\"SELECT * FROM uploaded_table WHERE modifiedImageSHA1 = (:modifiedImageSHA1) \")\n    abstract suspend fun getFromModifiedImageSHA1(modifiedImageSHA1 : String) : UploadedStatus?","prompt":""},{"id":3654,"identifierName":"fr.free.nrw.commons.customselector.database.UploadedStatusDao","requiredType":[],"content":"/**\n     * Asynchronous insert into uploaded status table.\n     */\n    suspend fun insertUploaded(uploadedStatus: UploadedStatus) {\n        uploadedStatus.lastUpdated = Calendar.getInstance().time\n        insert(uploadedStatus)\n    }","prompt":""},{"id":3655,"identifierName":"fr.free.nrw.commons.customselector.database.UploadedStatusDao","requiredType":[],"content":"/**\n     * Check whether the imageSHA1 is present in database\n     */\n    @Query(\"SELECT COUNT() FROM uploaded_table WHERE imageSHA1 = (:imageSHA1) AND imageResult = (:imageResult) \")\n    abstract suspend fun findByImageSHA1(imageSHA1 : String, imageResult: Boolean): Int","prompt":""},{"id":3656,"identifierName":"fr.free.nrw.commons.customselector.database.UploadedStatusDao","requiredType":[],"content":"/**\n     * Check whether the modifiedImageSHA1 is present in database\n     */\n    @Query(\"SELECT COUNT() FROM uploaded_table WHERE modifiedImageSHA1 = (:modifiedImageSHA1) AND modifiedImageResult = (:modifiedImageResult) \")\n    abstract suspend fun findByModifiedImageSHA1(modifiedImageSHA1 : String,\n                                                 modifiedImageResult: Boolean): Int","prompt":""},{"id":3657,"identifierName":"fr.free.nrw.commons.customselector.database.UploadedStatusDao","requiredType":[],"content":"/**\n     * Asynchronous image sha1 query.\n     */\n    suspend fun getUploadedFromImageSHA1(imageSHA1: String):UploadedStatus? {\n        return getFromImageSHA1(imageSHA1)\n    }","prompt":""},{"id":3658,"identifierName":"xxx.jq.AccountRepository","requiredType":[],"content":"fun findByAccountId(accountId: String): Account?","prompt":""},{"id":3659,"identifierName":"xxx.jq.AccountRepository","requiredType":[],"content":"fun countByAccountId(accountId: String): Int","prompt":""},{"id":3660,"identifierName":"xxx.jq.QuizRepository","requiredType":["data class Quiz( @Id @GeneratedValue override var id: Long? = null, @Version var version: Long = -1, @CreatedDate var createDate: LocalDateTime = LocalDateTime.MIN, @LastModifiedDate var updateDate: LocalDateTime = LocalDateTime.MIN, @CreatedBy @ManyToOne(fetch = FetchType.LAZY) var createdBy: Account = Account(), @field:NotBlank(message = \"問題名は必ず入力してください。\") var title: String = \"\", @field:NotBlank(message = \"問題文は必ず入力してください。\") var content: String = \"\", @field:NotBlank(message = \"ソースは必ず入力してください。\") @Column(columnDefinition = \"TEXT\") var source: String = \"\", @Valid @OneToMany(cascade = arrayOf(CascadeType.ALL)) @field:NotNull(message = \"選択肢は必ず設定してください。\") @field:Size(min = 2, max = 6, message = \"選択肢は2つ以上6つ以下で設定してください。\") var choices: MutableList<Choice> = ArrayList(), @Column(columnDefinition = \"TEXT\") var explanation: String = \"\", var answerCount: Long = 0, var correctCount: Long = 0, var executeTime: Duration = Duration.ZERO, @ManyToOne @JoinColumn(nullable = false) @field:NotNull(message = \"カテゴリーは必ず選択してください。\") var category: Category = Category() )"],"content":"@Query(\"select q from Quiz q order by RAND()\")\n    fun findRandomAll(): List<Quiz>","prompt":""},{"id":3661,"identifierName":"xxx.jq.ResultHeaderRepository","requiredType":["data class ResultHeader( @Id @GeneratedValue override var id: Long? = null, @Version var version: Long = -1, @CreatedBy @MtoO var createdBy: Account = Account(), @CreatedDate var createDate: LocalDateTime = LocalDateTime.MIN, @field:NotNull var executeTime: Duration = Duration.ZERO, var answerCount: Int = 0, var correctCount: Int = 0, @ManyToMany(cascade = arrayOf(CascadeType.PERSIST)) var results: MutableList<Result> = ArrayList(), var aggregate: Boolean = false )"],"content":"fun findByCreatedByOrderByCreateDateDesc(account: Account): List<ResultHeader>","prompt":""},{"id":3662,"identifierName":"xxx.jq.ResultHeaderRepository","requiredType":["data class ResultHeader( @Id @GeneratedValue override var id: Long? = null, @Version var version: Long = -1, @CreatedBy @MtoO var createdBy: Account = Account(), @CreatedDate var createDate: LocalDateTime = LocalDateTime.MIN, @field:NotNull var executeTime: Duration = Duration.ZERO, var answerCount: Int = 0, var correctCount: Int = 0, @ManyToMany(cascade = arrayOf(CascadeType.PERSIST)) var results: MutableList<Result> = ArrayList(), var aggregate: Boolean = false )"],"content":"fun findTop100ByAggregateOrderByCreateDateAsc(bool: Boolean?): List<ResultHeader>","prompt":""},{"id":3663,"identifierName":"xxx.jq.ResultHeaderRepository","requiredType":["data class ResultHeader( @Id @GeneratedValue override var id: Long? = null, @Version var version: Long = -1, @CreatedBy @MtoO var createdBy: Account = Account(), @CreatedDate var createDate: LocalDateTime = LocalDateTime.MIN, @field:NotNull var executeTime: Duration = Duration.ZERO, var answerCount: Int = 0, var correctCount: Int = 0, @ManyToMany(cascade = arrayOf(CascadeType.PERSIST)) var results: MutableList<Result> = ArrayList(), var aggregate: Boolean = false )"],"content":"fun findTop20ByCreatedByOrderByCreateDateDesc(account: Account): List<ResultHeader>","prompt":""},{"id":3664,"identifierName":"xxx.jq.ResultHeaderRepository","requiredType":["data class ResultHeader( @Id @GeneratedValue override var id: Long? = null, @Version var version: Long = -1, @CreatedBy @MtoO var createdBy: Account = Account(), @CreatedDate var createDate: LocalDateTime = LocalDateTime.MIN, @field:NotNull var executeTime: Duration = Duration.ZERO, var answerCount: Int = 0, var correctCount: Int = 0, @ManyToMany(cascade = arrayOf(CascadeType.PERSIST)) var results: MutableList<Result> = ArrayList(), var aggregate: Boolean = false )"],"content":"fun findByCreatedBy(account: Account): List<ResultHeader>","prompt":""},{"id":3665,"identifierName":"xxx.jq.ResultHeaderRepository","requiredType":["data class ResultHeader( @Id @GeneratedValue override var id: Long? = null, @Version var version: Long = -1, @CreatedBy @MtoO var createdBy: Account = Account(), @CreatedDate var createDate: LocalDateTime = LocalDateTime.MIN, @field:NotNull var executeTime: Duration = Duration.ZERO, var answerCount: Int = 0, var correctCount: Int = 0, @ManyToMany(cascade = arrayOf(CascadeType.PERSIST)) var results: MutableList<Result> = ArrayList(), var aggregate: Boolean = false )"],"content":"fun findByCreatedBy(account: Account, pageable: Pageable): Page<ResultHeader>","prompt":""},{"id":3666,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":["data class Category( @PrimaryKey var title: String, @ColumnInfo(name = \"icon_name\") var iconCode: String = \"archive\" )"],"content":"suspend fun add(title: String, iconCode: String): Category {\n        return Category(title, iconCode).also { add(it) }\n    }","prompt":""},{"id":3667,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":["data class Category( @PrimaryKey var title: String, @ColumnInfo(name = \"icon_name\") var iconCode: String = \"archive\" )"],"content":"@Insert(onConflict = REPLACE)\n    abstract suspend fun add(category: Category)","prompt":""},{"id":3668,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    abstract suspend fun addAll(categories: List<Category>)","prompt":""},{"id":3669,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":["data class Category( @PrimaryKey var title: String, @ColumnInfo(name = \"icon_name\") var iconCode: String = \"archive\" )"],"content":"@Update(onConflict = REPLACE)\n    abstract suspend fun update(category: Category)","prompt":""},{"id":3670,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":["data class Category( @PrimaryKey var title: String, @ColumnInfo(name = \"icon_name\") var iconCode: String = \"archive\" )"],"content":"@Query(\"SELECT * FROM category\")\n    abstract suspend fun getAll(): List<Category>","prompt":""},{"id":3671,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":[],"content":"@Query(\"SELECT * FROM category WHERE title = :title LIMIT 1\")\n    abstract suspend fun get(title: String): Category?","prompt":""},{"id":3672,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":["data class Category( @PrimaryKey var title: String, @ColumnInfo(name = \"icon_name\") var iconCode: String = \"archive\" )"],"content":"@Delete\n    abstract suspend fun delete(category: Category)","prompt":""},{"id":3673,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":[],"content":"@Delete\n    abstract suspend fun delete(categories: List<Category>)","prompt":""},{"id":3674,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":[],"content":"suspend fun clear() {\n        delete(getAll())\n    }","prompt":""},{"id":3675,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":["data class Category( @PrimaryKey var title: String, @ColumnInfo(name = \"icon_name\") var iconCode: String = \"archive\" )"],"content":"suspend fun deleteWithUpdatingPackages(context: Context, category: Category) {\n        val packDatabase = PackageDatabase.getInstance(context)\n        for (item in packDatabase.data) {\n            if (item.categoryTitle == category.title) {\n                item.categoryTitle = null\n            }\n        }\n        packDatabase.save()\n        delete(category)\n    }","prompt":""},{"id":3676,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":[],"content":"suspend fun clearWithUpdatingPackages(context: Context) {\n        val packDatabase = PackageDatabase.getInstance(context)\n        for (item in packDatabase.data) {\n            item.categoryTitle = null\n        }\n        packDatabase.save()\n        clear()\n    }","prompt":""},{"id":3677,"identifierName":"info.papdt.express.helper.dao.CategoryDao","requiredType":[],"content":"suspend fun addDefaultCategories(context: Context) {\n        for ((titleRes, iconCode) in DEFAULT_CATEGORIES_PAIRS) {\n            add(context.getString(titleRes), iconCode)\n        }\n    }","prompt":""},{"id":3678,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTopicDao","requiredType":["data class BlacklistedTopicDbModel( @PrimaryKey(autoGenerate = true) var id: Long = 0L, @ColumnInfo(name = \"topic_name\") var topicName: String = \"\", @ColumnInfo(name = \"topic_id\") var topicId: Int = 0, @ColumnInfo(name = \"date_added\") var dateAdded: Date = Date() )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertTopic(topic: BlacklistedTopicDbModel): Long","prompt":""},{"id":3679,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTopicDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertTopics(topics: List<BlacklistedTopicDbModel>): List<Long>","prompt":""},{"id":3680,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTopicDao","requiredType":["data class BlacklistedTopicDbModel( @PrimaryKey(autoGenerate = true) var id: Long = 0L, @ColumnInfo(name = \"topic_name\") var topicName: String = \"\", @ColumnInfo(name = \"topic_id\") var topicId: Int = 0, @ColumnInfo(name = \"date_added\") var dateAdded: Date = Date() )"],"content":"@Query(\"SELECT * FROM ${YapTalkerDatabase.TOPICS_BLACKLIST_TABLE} WHERE topic_name LIKE :name\")\n    abstract fun getTopicByName(name: String): Single<BlacklistedTopicDbModel>","prompt":""},{"id":3681,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTopicDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${YapTalkerDatabase.TOPICS_BLACKLIST_TABLE}\")\n    abstract fun getAllTopics(): Single<List<BlacklistedTopicDbModel>>","prompt":""},{"id":3682,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTopicDao","requiredType":["data class BlacklistedTopicDbModel( @PrimaryKey(autoGenerate = true) var id: Long = 0L, @ColumnInfo(name = \"topic_name\") var topicName: String = \"\", @ColumnInfo(name = \"topic_id\") var topicId: Int = 0, @ColumnInfo(name = \"date_added\") var dateAdded: Date = Date() )"],"content":"@Query(\"SELECT * FROM ${YapTalkerDatabase.TOPICS_BLACKLIST_TABLE}\")\n    abstract fun getAllTopicIds(): List<BlacklistedTopicDbModel>","prompt":""},{"id":3683,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTopicDao","requiredType":[],"content":"@Query(\"DELETE FROM ${YapTalkerDatabase.TOPICS_BLACKLIST_TABLE}  WHERE topic_name LIKE :name\")\n    abstract fun deleteTopicByName(name: String): Int","prompt":""},{"id":3684,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTopicDao","requiredType":[],"content":"@Query(\"DELETE FROM ${YapTalkerDatabase.TOPICS_BLACKLIST_TABLE}  WHERE topic_id LIKE :id\")\n    abstract fun deleteTopicById(id: Int): Int","prompt":""},{"id":3685,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTopicDao","requiredType":[],"content":"@Query(\"DELETE FROM ${YapTalkerDatabase.TOPICS_BLACKLIST_TABLE}  WHERE date_added <= :threshold\")\n    abstract fun deleteTopicByDate(threshold: Long): Int","prompt":""},{"id":3686,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTopicDao","requiredType":[],"content":"@Query(\"DELETE FROM ${YapTalkerDatabase.TOPICS_BLACKLIST_TABLE}\")\n    abstract fun deleteAllTopics()","prompt":""},{"id":3687,"identifierName":"com.sedsoftware.yaptalker.data.database.dao.BlacklistedTopicDao","requiredType":[],"content":"fun getBlacklistedTopicIds(): Single<Set<Int>> =\n        getAllTopics()\n            .map { topics -> topics.map { it.topicId } }\n            .map { ids -> ids.toSet() }","prompt":""},{"id":3688,"identifierName":"com.google.android.gms.location.sample.activityrecognition.data.db.ActivityTransitionDao","requiredType":[],"content":"@Insert\n    suspend fun insert(records: List<ActivityTransitionRecord>)","prompt":""},{"id":3689,"identifierName":"com.google.android.gms.location.sample.activityrecognition.data.db.ActivityTransitionDao","requiredType":[],"content":"@Query(\"DELETE FROM ActivityTransitionRecord\")\n    suspend fun deleteAll()","prompt":""},{"id":3690,"identifierName":"com.google.android.gms.location.sample.activityrecognition.data.db.ActivityTransitionDao","requiredType":[],"content":"@Query(\"SELECT * FROM ActivityTransitionRecord ORDER BY timestamp DESC LIMIT 20\")\n    fun getMostRecent(): Flow<List<ActivityTransitionRecord>>","prompt":""},{"id":3691,"identifierName":"me.nya_n.notificationnotifier.data.repository.source.FilterConditionDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(cond: FilterCondition)","prompt":""},{"id":3692,"identifierName":"me.nya_n.notificationnotifier.data.repository.source.FilterConditionDao","requiredType":[],"content":"@Delete\n    fun delete(cond: FilterCondition)","prompt":""},{"id":3693,"identifierName":"me.nya_n.notificationnotifier.data.repository.source.FilterConditionDao","requiredType":[],"content":"@Query(\"select * from conditions where target_package_name = :targetPackageName\")\n    fun get(targetPackageName: String): FilterCondition?","prompt":""},{"id":3694,"identifierName":"me.nya_n.notificationnotifier.data.repository.source.FilterConditionDao","requiredType":[],"content":"@Query(\"select * from conditions\")\n    fun getAll(): List<FilterCondition>","prompt":""},{"id":3695,"identifierName":"me.nya_n.notificationnotifier.data.repository.source.FilterConditionDao","requiredType":[],"content":"@Query(\"delete from conditions\")\n    fun clear()","prompt":""},{"id":3696,"identifierName":"androidx.room.integration.kotlintestapp.dao.AbstractDao","requiredType":[],"content":"// For verifying b/123466702\n    @Query(\"DELETE FROM book\")\n    internal abstract suspend fun deleteAllBooksSuspend()","prompt":""},{"id":3697,"identifierName":"androidx.room.integration.kotlintestapp.dao.AbstractDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Insert\n    abstract fun addBooks(vararg books: Book)","prompt":""},{"id":3698,"identifierName":"androidx.room.integration.kotlintestapp.dao.AbstractDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Insert\n    abstract fun addAuthors(vararg authors: Author)","prompt":""},{"id":3699,"identifierName":"androidx.room.integration.kotlintestapp.dao.AbstractDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )","data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Transaction\n    open suspend fun insertBookAndAuthorSuspend(book: Book, author: Author) {\n        addBooks(book)\n        addAuthors(author)\n    }","prompt":""},{"id":3700,"identifierName":"com.waz.zclient.storage.db.buttons.ButtonsDao","requiredType":[],"content":"@Query(\"SELECT * FROM Buttons\")\n    suspend fun allButtons(): List<ButtonsEntity>","prompt":""},{"id":3701,"identifierName":"com.waz.zclient.storage.db.buttons.ButtonsDao","requiredType":[],"content":"@Query(\"SELECT * FROM Buttons ORDER BY message_id, button_id LIMIT :batchSize OFFSET :start\")\n    override suspend fun nextBatch(start: Int, batchSize: Int): List<ButtonsEntity>?","prompt":""},{"id":3702,"identifierName":"com.waz.zclient.storage.db.buttons.ButtonsDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM Buttons\")\n    override suspend fun count(): Int","prompt":""},{"id":3703,"identifierName":"com.example.android.observability.persistence.UserDao","requiredType":[],"content":"/**\n     * Get a user by id.\n\n     * @return the user from the table with a specific id.\n     */\n    @Query(\"SELECT * FROM Users WHERE userid = :id\")\n    fun getUserById(id: String): Flowable<User>","prompt":""},{"id":3704,"identifierName":"com.example.android.observability.persistence.UserDao","requiredType":[],"content":"/**\n     * Insert a user in the database. If the user already exists, replace it.\n\n     * @param user the user to be inserted.\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertUser(user: User): Completable","prompt":""},{"id":3705,"identifierName":"com.example.android.observability.persistence.UserDao","requiredType":[],"content":"/**\n     * Delete all users.\n     */\n    @Query(\"DELETE FROM Users\")\n    fun deleteAllUsers()","prompt":""},{"id":3706,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM ${Document.TABLE_NAME_DOCUMENTS}\")\n    fun getAllDocumentWithPagesAsFlow(): Flow<List<DocumentWithPages>>","prompt":""},{"id":3707,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM ${Document.TABLE_NAME_DOCUMENTS}\")\n    fun getAllDocumentWithPages(): List<DocumentWithPages>","prompt":""},{"id":3708,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":["data class LockState(val id: String)"],"content":"@Transaction\n    @Query(\"SELECT * FROM ${Document.TABLE_NAME_DOCUMENTS} WHERE NOT ${Document.KEY_LOCK_STATE} = :state\")\n    fun getAllLockedDocumentWithPages(state: LockState = LockState.NONE): List<DocumentWithPages>","prompt":""},{"id":3709,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM ${Document.TABLE_NAME_DOCUMENTS} WHERE ${Document.KEY_ID} =:documentId\")\n    suspend fun getDocumentWithPages(documentId: UUID): DocumentWithPages?","prompt":""},{"id":3710,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${Document.TABLE_NAME_DOCUMENTS} WHERE ${Document.KEY_ID} =:documentId\")\n    suspend fun getDocument(documentId: UUID): Document?","prompt":""},{"id":3711,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM ${Document.TABLE_NAME_DOCUMENTS} WHERE ${Document.KEY_ID} =:documentId\")\n    fun getDocumentWithPagesAsFlow(documentId: UUID): Flow<DocumentWithPages?>","prompt":""},{"id":3712,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${Page.TABLE_NAME_PAGES} WHERE ${Page.KEY_ID} =:pageId\")\n    fun getPageAsFlow(pageId: UUID): Flow<Page?>","prompt":""},{"id":3713,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${Page.TABLE_NAME_PAGES} WHERE ${Page.KEY_ID} =:pageId\")\n    fun getPage(pageId: UUID): Page?","prompt":""},{"id":3714,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM ${Document.TABLE_NAME_DOCUMENTS} WHERE ${Document.KEY_IS_ACTIVE} = 1\")\n    fun getActiveDocumentasFlow(): Flow<DocumentWithPages?>","prompt":""},{"id":3715,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM ${Document.TABLE_NAME_DOCUMENTS} WHERE ${Document.KEY_IS_ACTIVE} = 1\")\n    fun getActiveDocument(): DocumentWithPages?","prompt":""},{"id":3716,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":["data class Document( @PrimaryKey @ColumnInfo(name = KEY_ID) val id: UUID, @ColumnInfo(name = KEY_TITLE) var title: String, /** * Represents a custom optional file prefix. */ @ColumnInfo(name = KEY_FILE_PREFIX) var filePrefix: String? = null, /** * Represents the active state of a document, only one document can be active. */ @ColumnInfo(name = KEY_IS_ACTIVE) var isActive: Boolean, /** * Represents the lock state of a document. */ @ColumnInfo(name = KEY_LOCK_STATE) var lockState: LockState = LockState.NONE, /** * Represents the active state of a document, only one document can be active. */ @Embedded(prefix = KEY_META_DATA_PREFIX) var metaData: MetaData? = null, /** * Represents the transkribus upload id, which is used to associate uploads of documents with an id. * A soon as the upload is entirely finished, this id correponds to the document id of the Transkribus BE. * * see [Upload] or [TranskribusAPIService] for more information. */ @ColumnInfo(name = KEY_TRANSKRIBUS_UPLOAD_ID) var uploadId: Int? = null )","data class Keepnull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertDocument(document: Document)","prompt":""},{"id":3717,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":["data class Document( @PrimaryKey @ColumnInfo(name = KEY_ID) val id: UUID, @ColumnInfo(name = KEY_TITLE) var title: String, /** * Represents a custom optional file prefix. */ @ColumnInfo(name = KEY_FILE_PREFIX) var filePrefix: String? = null, /** * Represents the active state of a document, only one document can be active. */ @ColumnInfo(name = KEY_IS_ACTIVE) var isActive: Boolean, /** * Represents the lock state of a document. */ @ColumnInfo(name = KEY_LOCK_STATE) var lockState: LockState = LockState.NONE, /** * Represents the active state of a document, only one document can be active. */ @Embedded(prefix = KEY_META_DATA_PREFIX) var metaData: MetaData? = null, /** * Represents the transkribus upload id, which is used to associate uploads of documents with an id. * A soon as the upload is entirely finished, this id correponds to the document id of the Transkribus BE. * * see [Upload] or [TranskribusAPIService] for more information. */ @ColumnInfo(name = KEY_TRANSKRIBUS_UPLOAD_ID) var uploadId: Int? = null )","data class Keepnull"],"content":"@Delete\n    fun deleteDocument(document: Document)","prompt":""},{"id":3718,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":["data class Page( /** * Uniquely identifies the page. */ @PrimaryKey @ColumnInfo(name = KEY_ID) val id: UUID, /** * The id of [Document] to which the page belongs to. */ @ColumnInfo(name = KEY_DOC_ID) val docId: UUID, /** * The hash of the page file. */ @ColumnInfo(name = KEY_FILE_HASH) var fileHash: String, /** * The ordering index of the page, across all pages in a single document. */ @ColumnInfo(name = KEY_INDEX) val index: Int, /** * The rotation of the page. The exif info is saved separately into the file, this * column is necessary to keep track of file changes in the DB. */ @ColumnInfo(name = KEY_ROTATION) var rotation: Rotation, /** * Represents the page file type. */ @ColumnInfo(name = KEY_FILE_TYPE) val fileType: PageFileType, /** * Represents the processing state of the page. */ @ColumnInfo(name = KEY_POST_PROCESSING_STATE) var postProcessingState: PostProcessingState, /** * Represents the export state of the page. */ @ColumnInfo(name = KEY_EXPORT_STATE) var exportState: ExportState, /** * An optional (cropping) boundary with 4 points. */ @Embedded(prefix = KEY_SINGLE_PAGE_BOUNDARY_PREFIX) var singlePageBoundary: SinglePageBoundary?, @Embedded(prefix = KEY_UPLOAD_PREFIX) var transkribusUpload: Upload = Upload(), /** * Represents the old legacy absolute file path, which is just used to check * if a page has not been already migrated, if the migration is performed multiple times. * * Do not use this any further, this will be soon deleted. */ @ColumnInfo(name = KEY_LEGACY_ABSOLUTE_FILE_PATH) var legacyFilePath: String? = null, )","data class Keepnull"],"content":"@Delete\n    fun deletePage(page: Page)","prompt":""},{"id":3719,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":["data class Keepnull"],"content":"@Delete\n    fun deletePages(page: List<Page>)","prompt":""},{"id":3720,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":["data class Keepnull"],"content":"@Query(\"UPDATE ${Document.TABLE_NAME_DOCUMENTS} SET ${Document.KEY_IS_ACTIVE}=0\")\n    fun setAllDocumentsInactive()","prompt":""},{"id":3721,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":["data class Keepnull"],"content":"@Query(\"UPDATE ${Document.TABLE_NAME_DOCUMENTS} SET ${Document.KEY_TRANSKRIBUS_UPLOAD_ID}=:uploadId WHERE ${Document.KEY_ID} =:documentId\")\n    fun updateUploadIdForDoc(documentId: UUID, uploadId: Int?)","prompt":""},{"id":3722,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":["data class Keepnull"],"content":"@Query(\"UPDATE ${Document.TABLE_NAME_DOCUMENTS} SET ${Document.KEY_IS_ACTIVE}=1 WHERE ${Document.KEY_ID} =:documentId\")\n    fun setDocumentActive(documentId: UUID)","prompt":""},{"id":3723,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":["data class Document( @PrimaryKey @ColumnInfo(name = KEY_ID) val id: UUID, @ColumnInfo(name = KEY_TITLE) var title: String, /** * Represents a custom optional file prefix. */ @ColumnInfo(name = KEY_FILE_PREFIX) var filePrefix: String? = null, /** * Represents the active state of a document, only one document can be active. */ @ColumnInfo(name = KEY_IS_ACTIVE) var isActive: Boolean, /** * Represents the lock state of a document. */ @ColumnInfo(name = KEY_LOCK_STATE) var lockState: LockState = LockState.NONE, /** * Represents the active state of a document, only one document can be active. */ @Embedded(prefix = KEY_META_DATA_PREFIX) var metaData: MetaData? = null, /** * Represents the transkribus upload id, which is used to associate uploads of documents with an id. * A soon as the upload is entirely finished, this id correponds to the document id of the Transkribus BE. * * see [Upload] or [TranskribusAPIService] for more information. */ @ColumnInfo(name = KEY_TRANSKRIBUS_UPLOAD_ID) var uploadId: Int? = null )"],"content":"@Query(\"SELECT * FROM ${Document.TABLE_NAME_DOCUMENTS} WHERE ${Document.KEY_TITLE} =:documentTitle\")\n    suspend fun getDocumentsByTitle(documentTitle: String): List<Document>","prompt":""},{"id":3724,"identifierName":"at.ac.tuwien.caa.docscan.db.dao.DocumentDao","requiredType":["data class LockState(val id: String)","data class Keepnull"],"content":"@Query(\"UPDATE ${Document.TABLE_NAME_DOCUMENTS} SET ${Document.KEY_LOCK_STATE} = :state WHERE ${Document.KEY_ID} = :documentId\")\n    fun setDocumentLock(documentId: UUID, state: LockState)","prompt":""},{"id":3725,"identifierName":"de.ph1b.audiobook.data.repo.internals.ChapterDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insert(chapters: List<Chapter>)","prompt":""},{"id":3726,"identifierName":"de.ph1b.audiobook.data.repo.internals.ChapterDao","requiredType":["data class Chapter( @ColumnInfo(name = \"file\") val file: File, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"duration\") val duration: Int, @ColumnInfo(name = \"fileLastModified\") val fileLastModified: Long, @ColumnInfo(name = \"marks\") val marks: SparseArrayCompat<String>, @ColumnInfo(name = \"bookId\") val bookId: UUID, @ColumnInfo(name = \"id\") @PrimaryKey(autoGenerate = true) val id: Long = 0L )"],"content":"@Query(\"SELECT * FROM chapters WHERE bookId = :bookId\")\n  fun byBookId(bookId: UUID): List<Chapter>","prompt":""},{"id":3727,"identifierName":"de.ph1b.audiobook.data.repo.internals.ChapterDao","requiredType":[],"content":"@Query(\"DELETE FROM chapters WHERE bookId = :bookId\")\n  fun deleteByBookId(bookId: UUID)","prompt":""},{"id":3728,"identifierName":"com.nmote.jwti.repository.MongoUserRepository","requiredType":[],"content":"@Query(\"{ accounts : { \\$elemMatch: { accountId: ?0, socialService: ?1 } } }\")\n    override fun findBySocialAccount(accountId: String, socialService: String): Optional<User>","prompt":""},{"id":3729,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":[],"content":"@Language(\"RoomSql\")\n    @Query(\"\"\"\n        SELECT\n            count(*) totalCount,\n            sum(CASE WHEN isFavorite = 1 THEN 1 ELSE 0 END) favoritesCount,\n            sum(CASE WHEN lastPlayedAt IS NOT NULL THEN 1 ELSE 0 END) recentsCount\n        FROM games\n        \"\"\")\n    fun selectCounts(): Single<GameLibraryCounts>","prompt":""},{"id":3730,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":[],"content":"@Query(\"SELECT * FROM games ORDER BY title ASC, id DESC\")\n    fun selectAll(): DataSource.Factory<Int, Game>","prompt":""},{"id":3731,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":["data class Game( @PrimaryKey(autoGenerate = true) val id: Int = 0, val fileName: String, val fileUri: Uri, val title: String, val systemId: String, val developer: String?, val coverFrontUrl: String?, val lastIndexedAt: Long, val lastPlayedAt: Long? = null, val isFavorite: Boolean = false )"],"content":"@Query(\"SELECT * FROM games WHERE id = :id\")\n    fun selectById(id: Int): Maybe<Game>","prompt":""},{"id":3732,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":["data class Game( @PrimaryKey(autoGenerate = true) val id: Int = 0, val fileName: String, val fileUri: Uri, val title: String, val systemId: String, val developer: String?, val coverFrontUrl: String?, val lastIndexedAt: Long, val lastPlayedAt: Long? = null, val isFavorite: Boolean = false )"],"content":"@Query(\"SELECT * FROM games WHERE fileUri = :fileUri\")\n    fun selectByFileUri(fileUri: String): Maybe<Game>","prompt":""},{"id":3733,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":[],"content":"@Query(\"SELECT * FROM games WHERE lastIndexedAt < :lastIndexedAt\")\n    fun selectByLastIndexedAtLessThan(lastIndexedAt: Long): Single<List<Game>>","prompt":""},{"id":3734,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":[],"content":"@Query(\"SELECT * FROM games WHERE lastPlayedAt IS NOT NULL ORDER BY lastPlayedAt DESC\")\n    fun selectRecentlyPlayed(): DataSource.Factory<Int, Game>","prompt":""},{"id":3735,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":[],"content":"@Query(\"SELECT * FROM games WHERE isFavorite = 1 ORDER BY lastPlayedAt DESC\")\n    fun selectFavorites(): DataSource.Factory<Int, Game>","prompt":""},{"id":3736,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":[],"content":"@Query(\"SELECT * FROM games WHERE systemId = :systemId ORDER BY title ASC, id DESC\")\n    fun selectBySystem(systemId: String): DataSource.Factory<Int, Game>","prompt":""},{"id":3737,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT systemId FROM games ORDER BY systemId ASC\")\n    fun selectSystems(): Single<List<String>>","prompt":""},{"id":3738,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":["data class Game( @PrimaryKey(autoGenerate = true) val id: Int = 0, val fileName: String, val fileUri: Uri, val title: String, val systemId: String, val developer: String?, val coverFrontUrl: String?, val lastIndexedAt: Long, val lastPlayedAt: Long? = null, val isFavorite: Boolean = false )","data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Insert\n    fun insert(game: Game)","prompt":""},{"id":3739,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Delete\n    fun delete(games: List<Game>)","prompt":""},{"id":3740,"identifierName":"com.codebutler.retrograde.lib.library.db.dao.GameDao","requiredType":["data class Game( @PrimaryKey(autoGenerate = true) val id: Int = 0, val fileName: String, val fileUri: Uri, val title: String, val systemId: String, val developer: String?, val coverFrontUrl: String?, val lastIndexedAt: Long, val lastPlayedAt: Long? = null, val isFavorite: Boolean = false )","data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Update\n    fun update(game: Game)","prompt":""},{"id":3741,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"SELECT refresh, consistentSize, MIN(portraitTextSize) AS portrait, MIN(landscapeTextSize) AS landscape FROM configuration, widget LIMIT 1\")\n    fun configWithSizes() : ConfigurationWithSizes","prompt":""},{"id":3742,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"SELECT refresh, consistentSize, MIN(portraitTextSize) AS portrait, MIN(landscapeTextSize) AS landscape FROM configuration, widget LIMIT 1\")\n    fun configWithSizesAsFlow() : Flow<ConfigurationWithSizes>","prompt":""},{"id":3743,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"SELECT * FROM configuration LIMIT 1\")\n    fun configAsFlow(): Flow<Configuration>","prompt":""},{"id":3744,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"SELECT * FROM configuration LIMIT 1\")\n    fun config(): Configuration","prompt":""},{"id":3745,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"SELECT * FROM widget WHERE widgetId = :widgetId\")\n    fun getByWidgetId(widgetId: Int): Widget?","prompt":""},{"id":3746,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"SELECT * FROM widget WHERE widgetId = :widgetId\")\n    fun getByWidgetIdFlow(widgetId: Int): Flow<Widget?>","prompt":""},{"id":3747,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Update\n    suspend fun update(widget: Widget)","prompt":""},{"id":3748,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"SELECT * FROM widget ORDER BY widgetId\")\n    suspend fun getAll() : List<Widget>","prompt":""},{"id":3749,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"SELECT * FROM widget ORDER BY widgetId\")\n    fun getAllAsFlow() : Flow<List<Widget>>","prompt":""},{"id":3750,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"DELETE FROM widget WHERE widgetId IN(:widgetIds)\")\n    suspend fun delete(widgetIds: IntArray)","prompt":""},{"id":3751,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(widget: Widget) : Long","prompt":""},{"id":3752,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Update\n    suspend fun update(config: Configuration)","prompt":""},{"id":3753,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"SELECT * FROM widget WHERE id = :id\")\n    fun getAsFlow(id: Int): Flow<Widget?>","prompt":""},{"id":3754,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"SELECT * FROM widget WHERE id = :id\")\n    fun get(id: Int): Widget?","prompt":""},{"id":3755,"identifierName":"com.brentpanther.bitcoinwidget.db.WidgetDao","requiredType":[],"content":"@Query(\"DELETE FROM widget WHERE widgetId NOT IN (:widgetIds)\")\n    fun deleteOrphans(widgetIds: IntArray)","prompt":""},{"id":3756,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.EventTypesDao","requiredType":[],"content":"@Query(\"SELECT * FROM event_types ORDER BY title ASC\")\n    fun getEventTypes(): List<EventType>","prompt":""},{"id":3757,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.EventTypesDao","requiredType":[],"content":"@Query(\"SELECT * FROM event_types WHERE id = :id\")\n    fun getEventTypeWithId(id: Long): EventType?","prompt":""},{"id":3758,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.EventTypesDao","requiredType":[],"content":"@Query(\"SELECT id FROM event_types WHERE title = :title COLLATE NOCASE\")\n    fun getEventTypeIdWithTitle(title: String): Long?","prompt":""},{"id":3759,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.EventTypesDao","requiredType":[],"content":"@Query(\"SELECT id FROM event_types WHERE title = :title AND caldav_calendar_id = 0 COLLATE NOCASE\")\n    fun getLocalEventTypeIdWithTitle(title: String): Long?","prompt":""},{"id":3760,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.EventTypesDao","requiredType":[],"content":"@Query(\"SELECT id FROM event_types WHERE type = :classId\")\n    fun getEventTypeIdWithClass(classId: Int): Long?","prompt":""},{"id":3761,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.EventTypesDao","requiredType":[],"content":"@Query(\"SELECT id FROM event_types WHERE type = :classId AND caldav_calendar_id = 0\")\n    fun getLocalEventTypeIdWithClass(classId: Int): Long?","prompt":""},{"id":3762,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.EventTypesDao","requiredType":[],"content":"@Query(\"SELECT * FROM event_types WHERE caldav_calendar_id = :calendarId\")\n    fun getEventTypeWithCalDAVCalendarId(calendarId: Int): EventType?","prompt":""},{"id":3763,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.EventTypesDao","requiredType":[],"content":"@Query(\"DELETE FROM event_types WHERE caldav_calendar_id IN (:ids)\")\n    fun deleteEventTypesWithCalendarId(ids: List<Int>)","prompt":""},{"id":3764,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.EventTypesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertOrUpdate(eventType: EventType): Long","prompt":""},{"id":3765,"identifierName":"com.simplemobiletools.calendar.pro.interfaces.EventTypesDao","requiredType":[],"content":"@Delete\n    fun deleteEventTypes(eventTypes: List<EventType>)","prompt":""},{"id":3766,"identifierName":"org.stepik.android.cache.mobile_tiers.dao.MobileTiersDao","requiredType":[],"content":"@Query(\"SELECT * FROM MobileTier WHERE course IN (:ids)\")\n    fun getMobileTiers(ids: List<Long>): Single<List<MobileTier>>","prompt":""},{"id":3767,"identifierName":"org.stepik.android.cache.mobile_tiers.dao.MobileTiersDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun saveMobileTiers(items: List<MobileTier>): Completable","prompt":""},{"id":3768,"identifierName":"doit.study.droid.data.local.dao.QuestionDao","requiredType":["data class Question( @PrimaryKey @NonNull // Read only val id: Int, val text: String, val wrong: List<String>, val right: List<String>, val docLink: String, val wrongCounter: Int = 0, val rightCounter: Int = 0, val consecutiveRightCounter: Int = 0, val lastViewedAt: Long = Date().time, val studiedAt: Long = 0 )"],"content":"@Query(\"select * from Question\")\n    suspend fun getQuestions(): List<Question>","prompt":""},{"id":3769,"identifierName":"doit.study.droid.data.local.dao.QuestionDao","requiredType":[],"content":"@Query(\"select * from Question where id = :id\")\n    suspend fun getQuestionById(id: Int): Question?","prompt":""},{"id":3770,"identifierName":"doit.study.droid.data.local.dao.QuestionDao","requiredType":["data class Question( @PrimaryKey @NonNull // Read only val id: Int, val text: String, val wrong: List<String>, val right: List<String>, val docLink: String, val wrongCounter: Int = 0, val rightCounter: Int = 0, val consecutiveRightCounter: Int = 0, val lastViewedAt: Long = Date().time, val studiedAt: Long = 0 )"],"content":"@Query(\"select distinct Q.* from Question as Q inner join QuestionTagJoin as QTJ on Q.id = QTJ.questionId inner join Tag as T on T.id = QTJ.tagId where T.name = :tag\")\n    suspend fun getQuestionsByTag(tag: String): List<Question>","prompt":""},{"id":3771,"identifierName":"doit.study.droid.data.local.dao.QuestionDao","requiredType":["data class Question( @PrimaryKey @NonNull // Read only val id: Int, val text: String, val wrong: List<String>, val right: List<String>, val docLink: String, val wrongCounter: Int = 0, val rightCounter: Int = 0, val consecutiveRightCounter: Int = 0, val lastViewedAt: Long = Date().time, val studiedAt: Long = 0 )"],"content":"// TODO: migrate to ABORT strategy\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertQuestion(question: Question)","prompt":""},{"id":3772,"identifierName":"doit.study.droid.data.local.dao.QuestionDao","requiredType":["data class Question( @PrimaryKey @NonNull // Read only val id: Int, val text: String, val wrong: List<String>, val right: List<String>, val docLink: String, val wrongCounter: Int = 0, val rightCounter: Int = 0, val consecutiveRightCounter: Int = 0, val lastViewedAt: Long = Date().time, val studiedAt: Long = 0 )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertQuestions(vararg questions: Question)","prompt":""},{"id":3773,"identifierName":"doit.study.droid.data.local.dao.QuestionDao","requiredType":[],"content":"@Query(\"update Question set wrongCounter = :wrongCount, rightCounter = :rightCount, studiedAt = :studiedAt where id = :id\")\n    suspend fun updateStatistics(id: Int, wrongCount: Int, rightCount: Int, studiedAt: Long)","prompt":""},{"id":3774,"identifierName":"moe.feng.nhentai.dao.BookDao","requiredType":["data class Booknull"],"content":"/**\n\t * Get all books from cache\n\t * @return All cached books list\n\t */\n\t@Query(\"SELECT * from ${Book.TAG}\")\n\tfun getAllBooks(): List<Book>","prompt":""},{"id":3775,"identifierName":"moe.feng.nhentai.dao.BookDao","requiredType":["data class Booknull"],"content":"/**\n\t * Get favourite books\n\t * @return Favourite books list\n\t */\n\t@Query(\"SELECT * from ${Book.TAG} WHERE isFavourite = 1\")\n\tfun getFavouriteBooks(): List<Book>","prompt":""},{"id":3776,"identifierName":"moe.feng.nhentai.dao.BookDao","requiredType":["data class Booknull"],"content":"/**\n\t * Get book by id\n\t * @return Specific id cached book\n\t */\n\t@Query(\"SELECT * from ${Book.TAG} WHERE bookId = :bookId\")\n\tfun getBook(bookId: Int): Book","prompt":""},{"id":3777,"identifierName":"moe.feng.nhentai.dao.BookDao","requiredType":["data class Booknull"],"content":"/**\n\t * Insert book(s) to cache\n\t * @param books Books being inserted\n\t */\n\t@Insert(onConflict = OnConflictStrategy.REPLACE)\n\tfun insert(vararg books: Book)","prompt":""},{"id":3778,"identifierName":"moe.feng.nhentai.dao.BookDao","requiredType":["data class Booknull"],"content":"/**\n\t * Delete book from cache\n\t * @param books Book being deleted\n\t */\n\t@Delete\n\tfun delete(book: Book)","prompt":""},{"id":3779,"identifierName":"com.jamieadkins.gwent.database.CollectionDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(entity: CollectionEntity): Long","prompt":""},{"id":3780,"identifierName":"com.jamieadkins.gwent.database.CollectionDao","requiredType":[],"content":"@Query(\"UPDATE ${GwentDatabase.COLLECTION_TABLE} SET count = :count WHERE cardId = :cardId AND variationId = :variationId\")\n    fun updateCardCount(cardId: String, variationId: String, count: Int)","prompt":""},{"id":3781,"identifierName":"com.jamieadkins.gwent.database.CollectionDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${GwentDatabase.COLLECTION_TABLE} WHERE cardId = :cardId AND variationId = :variationId\")\n    fun getCollectionCardCount(cardId: String, variationId: String): Maybe<CollectionEntity>","prompt":""},{"id":3782,"identifierName":"com.jamieadkins.gwent.database.CollectionDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${GwentDatabase.COLLECTION_TABLE}\")\n    fun getCollection(): Flowable<List<CollectionEntity>>","prompt":""},{"id":3783,"identifierName":"com.jamieadkins.gwent.database.CollectionDao","requiredType":[],"content":"@Query(\"SELECT * FROM ${GwentDatabase.COLLECTION_TABLE}\")\n    fun getCollectionOnce(): Single<List<CollectionEntity>>","prompt":""},{"id":3784,"identifierName":"app.ss.storage.db.dao.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user LIMIT 1\")\n    fun getCurrent(): UserEntity?","prompt":""},{"id":3785,"identifierName":"app.ss.storage.db.dao.UserDao","requiredType":[],"content":"@Query(\"SELECT * FROM user LIMIT 1\")\n    suspend fun get(): UserEntity?","prompt":""},{"id":3786,"identifierName":"app.ss.storage.db.dao.UserDao","requiredType":["data class UserEntity( @PrimaryKey val uid: String, val displayName: String?, val email: String?, val photo: String?, val emailVerified: Boolean, val phoneNumber: String?, val isAnonymous: Boolean, val tenantId: String?, val stsTokenManager: AccountToken )"],"content":"@Query(\"SELECT * FROM user LIMIT 1\")\n    fun getAsFlow(): Flow<UserEntity>","prompt":""},{"id":3787,"identifierName":"app.ss.storage.db.dao.UserDao","requiredType":[],"content":"@Query(\"DELETE FROM user\")\n    suspend fun clear()","prompt":""},{"id":3788,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Inserts a [BlobEntity]. Uses ignore strategy if unique constraint error on id or key/dtdName\n   * pair is encountered. Returns the id of the inserted/replaced blob, or -1 if the insert was\n   * ignored. This is a helper method and should only be called from\n   * [insertOrUpdateBlobWithPackages] so Blob and Package table stay in sync.\n   */\n  @Insert(onConflict = OnConflictStrategy.IGNORE)\n  suspend fun insertBlobIfAbsent(entity: BlobEntity): Long","prompt":""},{"id":3789,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Inserts a [PackageEntity]. Uses abort strategy if unique constraint error on blobId/packageName\n   * pair is encountered, which rolls back the transaction and throws an exception. Returns the row\n   * id of the inserted package if insert is successful. This is a helper method and should only be\n   * called from [insertOrUpdateBlobWithPackages]so Blob and Package table stay in sync.\n   */\n  @Insert(onConflict = OnConflictStrategy.ABORT)\n  suspend fun insertPackageIfAbsent(blobPackage: PackageEntity): Long","prompt":""},{"id":3790,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Inserts a [BlobEntity] and its associated [PackageEntities][PackageEntity] or updates an\n   * existing [BlobEntity] (does not update associated packages).\n   */\n  @Transaction\n  suspend fun insertOrUpdateBlobWithPackages(\n    entity: BlobEntity,\n    packages: List<String>,\n    threshold: Long\n  ) {\n    var id = insertBlobIfAbsent(entity)\n    // An id of -1 here means that the insert was ignored due to uniqueness constraints.\n    if (id == -1L) {\n      val currentEntity =\n        blobEntityWithPackagesByKeyAndDtdNameNoTtlCheck(entity.key, entity.dtdName) ?: return\n      if (currentEntity.isExpired(threshold)) {\n        removeBlobEntityById(currentEntity.blobEntity.id)\n        id = insertBlobIfAbsent(entity)\n      } else {\n        update(\n          UpdateBlobEntity(currentEntity.blobEntity.id, entity.updateTimestampMillis, entity.blob)\n        )\n        return\n      }\n    }\n    // The following lines are only reached if the entity was inserted, either immediately on the\n    // first try or after deleting it if it was expired.\n    packages.forEach { insertPackageIfAbsent(PackageEntity(id, it)) }\n  }","prompt":""},{"id":3791,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Inserts a collection of [BlobEntities][BlobEntity] and their associated [PackageEntities]\n   * [PackageEntity]. If any of the [BlobEntities][BlobEntity] already exist, it is updated\n   * (associated packages not updated).\n   */\n  @Transaction\n  suspend fun insertOrUpdateBlobsWithPackages(\n    blobsWithPackagesMap: Map<BlobEntity, List<String>>,\n    dtdName: String,\n    quotaInfo: QuotaInfo,\n    threshold: Long\n  ) {\n    require(blobsWithPackagesMap.size <= quotaInfo.maxRowCount) {\n      \"Number of entities to insert exceeds quota limit.\"\n    }\n\n    blobsWithPackagesMap.entries.forEach {\n      insertOrUpdateBlobWithPackages(it.key, it.value, threshold)\n    }\n\n    val rowCount = countBlobsByDtdName(dtdName)\n    if (rowCount <= quotaInfo.maxRowCount) {\n      return\n    }\n    val numRowsToDelete = rowCount - quotaInfo.minRowsAfterTrim\n    if (quotaInfo.trimOrder == TrimOrder.NEWEST) {\n      removeNewestBlobEntitiesByDtdName(dtdName, numRowsToDelete)\n    } else {\n      removeOldestBlobEntitiesByDtdName(dtdName, numRowsToDelete)\n    }\n  }","prompt":""},{"id":3792,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Performs a partial update of a [BlobEntity], only updating the updateTimestamp and serialized\n   * blob.\n   */\n  @Update(entity = BlobEntity::class) suspend fun update(updateBlobEntity: UpdateBlobEntity): Int","prompt":""},{"id":3793,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/** Queries the DB for a [BlobEntity] and associated [PackageEntity]s by key/dtdName pair. */\n  @Transaction\n  @Query(\n    \"\"\"\n    SELECT * FROM ${BlobEntity.TABLE_NAME}\n    WHERE ${BlobEntity.KEY} = :key\n      AND ${BlobEntity.DTD_NAME} = :dtdName\n      AND ${BlobEntity.CREATED_TIMESTAMP_MILLIS} >= :threshold\n    \"\"\"\n  )\n  suspend fun blobEntityWithPackagesByKeyAndDtdName(\n    key: String,\n    dtdName: String,\n    threshold: Long\n  ): BlobEntityWithPackages?","prompt":""},{"id":3794,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Queries the DB for a [BlobEntity] and associated [PackageEntity]s by key/dtdName pair without\n   * checking if the entity is expired. This is a helper function for\n   * [insertOrUpdateBlobWithPackages] and shouldn't be called directly by any other function.\n   */\n  @Transaction\n  @Query(\n    \"\"\"\n    SELECT * FROM ${BlobEntity.TABLE_NAME}\n    WHERE ${BlobEntity.KEY} = :key\n      AND ${BlobEntity.DTD_NAME} = :dtdName\n    \"\"\"\n  )\n  suspend fun blobEntityWithPackagesByKeyAndDtdNameNoTtlCheck(\n    key: String,\n    dtdName: String,\n  ): BlobEntityWithPackages?","prompt":""},{"id":3795,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Queries the DB for [BlobEntities][BlobEntity] and their associated [PackageEntities]\n   * [PackageEntity] by dtdName.\n   */\n  @Transaction\n  @Query(\n    \"\"\"\n      SELECT * FROM ${BlobEntity.TABLE_NAME} \n      WHERE ${BlobEntity.DTD_NAME} = :dtdName\n        AND ${BlobEntity.CREATED_TIMESTAMP_MILLIS} >= :threshold\n    \"\"\"\n  )\n  suspend fun blobEntitiesWithPackagesByDtdName(\n    dtdName: String,\n    threshold: Long\n  ): List<BlobEntityWithPackages>","prompt":""},{"id":3796,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Queries the DB for [BlobEntities][BlobEntity] and their associated [PackageEntities]\n   * [PackageEntity] by locusId/dtdName pair.\n   */\n  @Transaction\n  @Query(\n    \"\"\"\n    SELECT * FROM ${BlobEntity.TABLE_NAME}\n    WHERE ${BlobEntity.LOCUS_ID} = :locusId\n      AND ${BlobEntity.DTD_NAME} = :dtdName\n      AND ${BlobEntity.CREATED_TIMESTAMP_MILLIS} >= :threshold\n    \"\"\"\n  )\n  suspend fun blobEntitiesWithPackagesByLocusIdAndDtdName(\n    locusId: String,\n    dtdName: String,\n    threshold: Long\n  ): List<BlobEntityWithPackages>","prompt":""},{"id":3797,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Queries the DB for [BlobEntities][BlobEntity] and their associated [PackageEntities]\n   * [PackageEntity] by packageName/dtdName pair.\n   */\n  @Transaction\n  @Query(\n    \"\"\"\n    SELECT * FROM ${PackageEntity.TABLE_NAME}\n    JOIN Blobs ON ${PackageEntity.TABLE_NAME}.${PackageEntity.BLOB_ID} = ${BlobEntity.TABLE_NAME}.${BlobEntity.ID}\n    WHERE ${PackageEntity.TABLE_NAME}.${PackageEntity.PACKAGE_NAME} = :packageName\n      AND ${BlobEntity.TABLE_NAME}.${BlobEntity.DTD_NAME} = :dtdName\n      AND ${BlobEntity.CREATED_TIMESTAMP_MILLIS} >= :threshold\n    \"\"\"\n  )\n  suspend fun blobEntitiesWithPackagesByPackageNameAndDtdName(\n    packageName: String,\n    dtdName: String,\n    threshold: Long\n  ): Map<PackageEntity, List<BlobEntityWithPackages>>","prompt":""},{"id":3798,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/** Queries the DB for [PackageEntities][PackageEntity] by packageName. */\n  @Query(\n    \"SELECT * FROM ${PackageEntity.TABLE_NAME} WHERE ${PackageEntity.PACKAGE_NAME} = :packageName\"\n  )\n  suspend fun packagesByPackageName(packageName: String): List<PackageEntity>","prompt":""},{"id":3799,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/** Queries the DB for a [PackageEntities][PackageEntity] by blobId. */\n  @Query(\"SELECT * FROM ${PackageEntity.TABLE_NAME} WHERE ${PackageEntity.BLOB_ID} = :blobId\")\n  suspend fun packagesByBlobId(blobId: Long): List<PackageEntity>","prompt":""},{"id":3800,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Deletes a [BlobEntity] with specified id. Any [PackageEntities][PackageEntity] with blobId\n   * equal to the entity's id will also be deleted.\n   */\n  @Query(\"DELETE FROM ${BlobEntity.TABLE_NAME} WHERE ${BlobEntity.ID} = :id\")\n  suspend fun removeBlobEntityById(id: Long): Int","prompt":""},{"id":3801,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Deletes a [BlobEntity] with specified key/dtdName pair. Any [PackageEntities][PackageEntity]\n   * with blobId equal to the entity's id will also be deleted.\n   */\n  @Query(\n    \"\"\"\n    DELETE FROM ${BlobEntity.TABLE_NAME}\n    WHERE ${BlobEntity.KEY} = :key\n      AND ${BlobEntity.DTD_NAME} = :dtdName\n    \"\"\"\n  )\n  suspend fun removeBlobEntityByKeyAndDtdName(key: String, dtdName: String)","prompt":""},{"id":3802,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Deletes [PackageEntities][PackageEntity] with specified blobId. This is a helper method and\n   * should not be called directly. It is used when [BlobEntities][BlobEntity] are inserted/replaced\n   * to ensure its associated [PackageEntities][PackageEntity] stay up to date. In all other\n   * circumstances, to delete [PackageEntities][PackageEntity], any of the functions that delete a\n   * [BlobEntity] should be called instead as they will also delete any associated [PackageEntities]\n   * [PackageEntity].\n   */\n  @Query(\"DELETE FROM ${PackageEntity.TABLE_NAME} WHERE ${PackageEntity.BLOB_ID} = :blobId\")\n  suspend fun removePackagesByBlobId(blobId: Long)","prompt":""},{"id":3803,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Deletes [BlobEntities][BlobEntity] with specified packageName. Any [PackageEntities]\n   * [PackageEntity] with blobIds equal to the deleted entities' ids will also be deleted.\n   */\n  @Transaction\n  suspend fun removeBlobAndPackageEntitiesByPackageName(packageName: String): Int {\n    val packageEntities = packagesByPackageName(packageName)\n    return packageEntities.map { it.blobId }.toSet().sumOf { removeBlobEntityById(it) }\n  }","prompt":""},{"id":3804,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/** Deletes [BlobEntities][BlobEntity] with specified dtdName. */\n  @Query(\"DELETE FROM ${BlobEntity.TABLE_NAME} WHERE ${BlobEntity.DTD_NAME} = :dtdName\")\n  suspend fun removeBlobEntitiesByDtdName(dtdName: String)","prompt":""},{"id":3805,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Deletes all [BlobEntities][BlobEntity]. This method should only be called by BlobStore\n   * Management.\n   */\n  @Query(\"DELETE FROM ${BlobEntity.TABLE_NAME}\") suspend fun removeAllBlobEntities(): Int","prompt":""},{"id":3806,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Deletes expired [BlobEntities][BlobEntity] with specified dtdName based on the provided ttl\n   * threshold time. This method should only be called by BlobStore Management.\n   */\n  @Query(\n    \"\"\"\n    DELETE FROM ${BlobEntity.TABLE_NAME}\n    WHERE ${BlobEntity.DTD_NAME} = :dtdName\n      AND ${BlobEntity.CREATED_TIMESTAMP_MILLIS} < :threshold\n    \"\"\"\n  )\n  suspend fun removeExpiredBlobEntitiesByDtdName(dtdName: String, threshold: Long): Int","prompt":""},{"id":3807,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Deletes [BlobEntities][BlobEntity] with specified dtdName between the time period between the\n   * provided start and end times. Returns the number of rows deleted. This method should only be\n   * called by BlobStore Management.\n   */\n  @Query(\n    \"\"\"\n    DELETE FROM ${BlobEntity.TABLE_NAME}\n    WHERE ${BlobEntity.CREATED_TIMESTAMP_MILLIS} >= :startTimeMillis\n      AND ${BlobEntity.CREATED_TIMESTAMP_MILLIS} < :endTimeMillis\n    \"\"\"\n  )\n  suspend fun removeBlobEntitiesCreatedBetween(startTimeMillis: Long, endTimeMillis: Long): Int","prompt":""},{"id":3808,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Deletes the specified number of [BlobEntities][BlobEntity] with provided dtdName, deleting\n   * oldest ones first. This method should only be called by BlobStore Management.\n   */\n  @Query(\n    \"\"\"\n    DELETE FROM ${BlobEntity.TABLE_NAME}\n    WHERE ${BlobEntity.ID} IN (\n      SELECT ${BlobEntity.ID} FROM ${BlobEntity.TABLE_NAME}\n      WHERE ${BlobEntity.DTD_NAME} = :dtdName\n      ORDER BY ${BlobEntity.ID} ASC LIMIT :numRowsToDelete\n    )\n    \"\"\"\n  )\n  suspend fun removeOldestBlobEntitiesByDtdName(dtdName: String, numRowsToDelete: Int)","prompt":""},{"id":3809,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Deletes the specified number of [BlobEntities][BlobEntity] with provided dtdName, deleting\n   * newest ones first. This method should only be called by BlobStore Management.\n   */\n  @Query(\n    \"\"\"\n    DELETE FROM ${BlobEntity.TABLE_NAME}\n    WHERE ${BlobEntity.ID} IN (\n      SELECT ${BlobEntity.ID} FROM ${BlobEntity.TABLE_NAME}\n      WHERE ${BlobEntity.DTD_NAME} = :dtdName\n      ORDER BY ${BlobEntity.ID} DESC LIMIT :numRowsToDelete\n    )\n    \"\"\"\n  )\n  suspend fun removeNewestBlobEntitiesByDtdName(dtdName: String, numRowsToDelete: Int)","prompt":""},{"id":3810,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/** Returns the number of [BlobEntities][BlobEntity] with specified dtdName stored in the DB. */\n  @Query(\"SELECT COUNT(1) FROM ${BlobEntity.TABLE_NAME} WHERE ${BlobEntity.DTD_NAME} = :dtdName\")\n  suspend fun countBlobsByDtdName(dtdName: String): Int","prompt":""},{"id":3811,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Returns list of distinct package names in package table. This is a helper function and should\n   * not be called directly.\n   */\n  @Query(\"SELECT * FROM ${PackageEntity.TABLE_NAME}\") suspend fun allPackages(): List<PackageEntity>","prompt":""},{"id":3812,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"/**\n   * Deletes all entities and packages associated with those entities that are not in the provided\n   * allowed packages list. Returns the number of rows deleted.\n   */\n  @Transaction\n  suspend fun deleteNotAllowedPackages(allowedPackages: Set<String>): Int {\n    val packagesToRemove = allPackages().map { it.packageName }.distinct() - allowedPackages\n    return packagesToRemove.sumOf { removeBlobAndPackageEntitiesByPackageName(it) }\n  }","prompt":""},{"id":3813,"identifierName":"com.google.android.libraries.pcc.chronicle.storage.blobstore.db.BlobDao","requiredType":[],"content":"private fun BlobEntityWithPackages.isExpired(threshold: Long): Boolean =\n    blobEntity.createdTimestampMillis < threshold","prompt":""},{"id":3814,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"/**\n   * for private use only\n   * must be marked public for Room\n   * so we use the underscore to discourage use\n   */\n\n  // if an update has successfully launched at least once, we treat it as launchable\n  // even if it has also failed to launch at least once\n  @Query(\"SELECT * FROM updates WHERE scope_key = :scopeKey AND (successful_launch_count > 0 OR failed_launch_count < 1) AND status IN (:statuses);\")\n  abstract fun _loadLaunchableUpdatesForProjectWithStatuses(scopeKey: String?, statuses: List<UpdateStatus>): List<UpdateEntity>","prompt":""},{"id":3815,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"@Query(\"SELECT * FROM updates WHERE id = :id;\")\n  abstract fun _loadUpdatesWithId(id: UUID): List<UpdateEntity>","prompt":""},{"id":3816,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"@Query(\"SELECT assets.* FROM assets INNER JOIN updates ON updates.launch_asset_id = assets.id WHERE updates.id = :id;\")\n  abstract fun _loadLaunchAsset(id: UUID): AssetEntity","prompt":""},{"id":3817,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":[],"content":"@Query(\"UPDATE updates SET keep = 1 WHERE id = :id;\")\n  abstract fun _keepUpdate(id: UUID)","prompt":""},{"id":3818,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateStatusnull"],"content":"@Query(\"UPDATE updates SET status = :status WHERE id = :id;\")\n  abstract fun _markUpdateWithStatus(status: UpdateStatus, id: UUID)","prompt":""},{"id":3819,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"@Update\n  abstract fun _updateUpdate(update: UpdateEntity)","prompt":""},{"id":3820,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateStatusnull"],"content":"@Query(\n    \"UPDATE updates SET status = :status WHERE id IN (\" +\n      \"SELECT DISTINCT update_id FROM updates_assets WHERE asset_id IN (:missingAssetIds));\"\n  )\n  abstract fun _markUpdatesWithMissingAssets(missingAssetIds: List<Long>, status: UpdateStatus)","prompt":""},{"id":3821,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"/**\n   * for public use\n   */\n  @Query(\"SELECT * FROM updates;\")\n  abstract fun loadAllUpdates(): List<UpdateEntity>","prompt":""},{"id":3822,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"fun loadLaunchableUpdatesForScope(scopeKey: String?): List<UpdateEntity> {\n    return _loadLaunchableUpdatesForProjectWithStatuses(\n      scopeKey,\n      listOf(UpdateStatus.READY, UpdateStatus.EMBEDDED, UpdateStatus.DEVELOPMENT)\n    )\n  }","prompt":""},{"id":3823,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateStatusnull","data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"@Query(\"SELECT * FROM updates WHERE status = :status;\")\n  abstract fun loadAllUpdatesWithStatus(status: UpdateStatus): List<UpdateEntity>","prompt":""},{"id":3824,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":[],"content":"fun loadUpdateWithId(id: UUID): UpdateEntity? {\n    val updateEntities = _loadUpdatesWithId(id)\n    return if (updateEntities.isNotEmpty()) updateEntities[0] else null\n  }","prompt":""},{"id":3825,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"fun loadLaunchAsset(id: UUID): AssetEntity {\n    val assetEntity = _loadLaunchAsset(id)\n    assetEntity.isLaunchAsset = true\n    return assetEntity\n  }","prompt":""},{"id":3826,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"@Insert\n  abstract fun insertUpdate(update: UpdateEntity)","prompt":""},{"id":3827,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"fun setUpdateScopeKey(update: UpdateEntity, newScopeKey: String) {\n    update.scopeKey = newScopeKey\n    _updateUpdate(update)\n  }","prompt":""},{"id":3828,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"@Transaction\n  open fun markUpdateFinished(update: UpdateEntity, hasSkippedEmbeddedAssets: Boolean) {\n    var statusToMark = UpdateStatus.READY\n    if (update.status === UpdateStatus.DEVELOPMENT) {\n      statusToMark = UpdateStatus.DEVELOPMENT\n    } else if (hasSkippedEmbeddedAssets) {\n      statusToMark = UpdateStatus.EMBEDDED\n    }\n    _markUpdateWithStatus(statusToMark, update.id)\n    _keepUpdate(update.id)\n  }","prompt":""},{"id":3829,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"fun markUpdateFinished(update: UpdateEntity) {\n    markUpdateFinished(update, false)\n  }","prompt":""},{"id":3830,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"fun markUpdateAccessed(update: UpdateEntity) {\n    update.lastAccessed = Date()\n    _updateUpdate(update)\n  }","prompt":""},{"id":3831,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"fun incrementSuccessfulLaunchCount(update: UpdateEntity) {\n    update.successfulLaunchCount++\n    _updateUpdate(update)\n  }","prompt":""},{"id":3832,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"fun incrementFailedLaunchCount(update: UpdateEntity) {\n    update.failedLaunchCount++\n    _updateUpdate(update)\n  }","prompt":""},{"id":3833,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":[],"content":"fun markUpdatesWithMissingAssets(missingAssets: List<AssetEntity>) {\n    val missingAssetIds = mutableListOf<Long>()\n    for (asset in missingAssets) {\n      missingAssetIds.add(asset.id)\n    }\n    _markUpdatesWithMissingAssets(missingAssetIds, UpdateStatus.PENDING)\n  }","prompt":""},{"id":3834,"identifierName":"expo.modules.updates.db.dao.UpdateDao","requiredType":[],"content":"@Delete\n  abstract fun deleteUpdates(updates: List<UpdateEntity>)","prompt":""},{"id":3835,"identifierName":"ca.six.archi.cfl.core.db.PlantDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertPreviousPlant(plant: PrevPlant)","prompt":""},{"id":3836,"identifierName":"ca.six.archi.cfl.core.db.PlantDao","requiredType":[],"content":"@Query(\"SELECT * FROM prev_plant\")\n    fun getPreviousPlant(): PrevPlant","prompt":""},{"id":3837,"identifierName":"ca.six.archi.cfl.core.db.PlantDao","requiredType":[],"content":"// Entity是Plant, 变成\"表名\"就会是小写plant\n    @Query(\"SELECT * FROM prev_plant\")\n    fun getPreviousPlantAsLiveData(): LiveData<PrevPlant>","prompt":""},{"id":3838,"identifierName":"ca.six.archi.cfl.core.db.PlantDao","requiredType":[],"content":"@Query(\"SELECT * FROM prev_plant\")\n    fun getPreviousPlantAsFlow(): Flow<PrevPlant>","prompt":""},{"id":3839,"identifierName":"com.waz.zclient.storage.db.messages.MessageContentIndexDao","requiredType":[],"content":"@Query(\"SELECT * FROM MessageContentIndex\")\n    suspend fun allMessageContentIndexes(): List<MessageContentIndexEntity>","prompt":""},{"id":3840,"identifierName":"com.android.tv.classics.models.TvMediaCollectionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM tvmediacollection\")\n    fun findAll(): List<TvMediaCollection>","prompt":""},{"id":3841,"identifierName":"com.android.tv.classics.models.TvMediaCollectionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM tvmediacollection WHERE id LIKE :id LIMIT 1\")\n    fun findById(id: String): TvMediaCollection?","prompt":""},{"id":3842,"identifierName":"com.android.tv.classics.models.TvMediaCollectionDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg item: TvMediaCollection)","prompt":""},{"id":3843,"identifierName":"com.android.tv.classics.models.TvMediaCollectionDAO","requiredType":[],"content":"@Update\n    fun update(item: TvMediaCollection)","prompt":""},{"id":3844,"identifierName":"com.android.tv.classics.models.TvMediaCollectionDAO","requiredType":[],"content":"@Delete\n    fun delete(item: TvMediaCollection)","prompt":""},{"id":3845,"identifierName":"com.android.tv.classics.models.TvMediaCollectionDAO","requiredType":[],"content":"@Query(\"DELETE FROM tvmediacollection\")\n    fun truncate()","prompt":""},{"id":3846,"identifierName":"backend.model.user.UserRepository","requiredType":[],"content":"fun findByEmail(email: String): User","prompt":""},{"id":3847,"identifierName":"backend.model.user.UserRepository","requiredType":[],"content":"fun findByActivationToken(token: String): User","prompt":""},{"id":3848,"identifierName":"backend.model.user.UserRepository","requiredType":[],"content":"fun findByChangeEmailToken(token: String): User","prompt":""},{"id":3849,"identifierName":"backend.model.user.UserRepository","requiredType":[],"content":"@Query(\"select case when count(e) > 0 then true else false end from UserAccount e where e.email = ?1\")\n    fun existsByEmail(email: String): Boolean","prompt":""},{"id":3850,"identifierName":"backend.model.user.UserRepository","requiredType":[],"content":"@Query(\"from UserAccount u where u.firstname like concat('%',:search,'%') or u.lastname like concat('%',:search,'%') or u.email like concat('%',:search,'%')\")\n    fun searchByString(@Param(\"search\") search: String): List<UserAccount>","prompt":""},{"id":3851,"identifierName":"backend.model.user.UserRepository","requiredType":[],"content":"@Query(\"from Sponsor s\")\n    fun findAllSponsors(): Iterable<Sponsor>","prompt":""},{"id":3852,"identifierName":"backend.model.user.UserRepository","requiredType":[],"content":"@Query(\"select u from UserAccount u join u.blockedBy b where b.id = :userid\")\n    fun findAllUsersBlockedByUser(@Param(\"userid\") userId: Long): List<UserAccount>","prompt":""},{"id":3853,"identifierName":"backend.model.user.UserRepository","requiredType":[],"content":"@Query(\"select u from UserAccount u join u.userRoles r where KEY(r) = :role\")\n    fun findAllUsersByRole(@Param(\"role\") role: Class<out UserRole>): List<UserAccount>","prompt":""},{"id":3854,"identifierName":"net.kourlas.voipms_sms.database.daos.DraftDao","requiredType":[],"content":"@Query(\"DELETE FROM ${Draft.TABLE_NAME}\")\n    suspend fun deleteAll()","prompt":""},{"id":3855,"identifierName":"net.kourlas.voipms_sms.database.daos.DraftDao","requiredType":[],"content":"@Query(\n        \"DELETE FROM ${Draft.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact\"\n    )\n    suspend fun deleteConversation(did: String, contact: String)","prompt":""},{"id":3856,"identifierName":"net.kourlas.voipms_sms.database.daos.DraftDao","requiredType":[],"content":"@Query(\n        \"DELETE FROM ${Draft.TABLE_NAME} WHERE ${Draft.COLUMN_DID} NOT IN(:dids)\"\n    )\n    suspend fun deleteWithoutDids(dids: Set<String>)","prompt":""},{"id":3857,"identifierName":"net.kourlas.voipms_sms.database.daos.DraftDao","requiredType":[],"content":"@Query(\n        \"SELECT * FROM ${Draft.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact\"\n    )\n    suspend fun getConversation(did: String, contact: String): Draft?","prompt":""},{"id":3858,"identifierName":"net.kourlas.voipms_sms.database.daos.DraftDao","requiredType":["data class Draft( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0, @ColumnInfo(name = COLUMN_DID) val did: String, @ColumnInfo(name = COLUMN_CONTACT) val contact: String, @ColumnInfo(name = COLUMN_MESSAGE) val text: String )"],"content":"@Query(\n        \"SELECT * FROM ${Draft.TABLE_NAME} WHERE ${Draft.COLUMN_DID} IN(:dids) ORDER BY ${Draft.COLUMN_DID} DESC, ${Draft.COLUMN_CONTACT} DESC\"\n    )\n    suspend fun getConversations(dids: Set<String>): List<Draft>","prompt":""},{"id":3859,"identifierName":"net.kourlas.voipms_sms.database.daos.DraftDao","requiredType":["data class Draft( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0, @ColumnInfo(name = COLUMN_DID) val did: String, @ColumnInfo(name = COLUMN_CONTACT) val contact: String, @ColumnInfo(name = COLUMN_MESSAGE) val text: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun update(draft: Draft)","prompt":""},{"id":3860,"identifierName":"io.rg.mp.persistence.dao.FailedSpreadsheetDao","requiredType":[],"content":"@Query(\"SELECT * FROM failedSpreadsheet\")\n    fun all() : Single<List<FailedSpreadsheet>>","prompt":""},{"id":3861,"identifierName":"io.rg.mp.persistence.dao.FailedSpreadsheetDao","requiredType":[],"content":"@Query(\"DELETE FROM failedSpreadsheet WHERE spreadsheetId = :spreadsheetId\")\n    fun delete(spreadsheetId: String)","prompt":""},{"id":3862,"identifierName":"io.rg.mp.persistence.dao.FailedSpreadsheetDao","requiredType":[],"content":"@Insert\n    fun insert(vararg failedSpreadsheets: FailedSpreadsheet)","prompt":""},{"id":3863,"identifierName":"de.tutao.tutanota.data.UserInfoDao","requiredType":[],"content":"@Query(\"SELECT * FROM User\")\n\tabstract fun observeUsers(): LiveData<List<User>>","prompt":""},{"id":3864,"identifierName":"de.tutao.tutanota.data.UserInfoDao","requiredType":[],"content":"@Query(\"SELECT * FROM PushIdentifierKey WHERE pushIdentifierId = :pushIdentifier\")\n\tabstract fun getPushIdentifierKey(pushIdentifier: String): PushIdentifierKey?","prompt":""},{"id":3865,"identifierName":"de.tutao.tutanota.data.UserInfoDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n\tabstract fun insertPushIdentifierKey(userInfo: PushIdentifierKey)","prompt":""},{"id":3866,"identifierName":"de.tutao.tutanota.data.UserInfoDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n\tabstract fun insertUser(user: User)","prompt":""},{"id":3867,"identifierName":"de.tutao.tutanota.data.UserInfoDao","requiredType":[],"content":"@Transaction\n\topen fun clear() {\n\t\tclearKeys()\n\t\tclearUsers()\n\t}","prompt":""},{"id":3868,"identifierName":"de.tutao.tutanota.data.UserInfoDao","requiredType":[],"content":"@Query(\"Delete FROM PushIdentifierKey\")\n\tabstract fun clearKeys()","prompt":""},{"id":3869,"identifierName":"de.tutao.tutanota.data.UserInfoDao","requiredType":[],"content":"@Query(\"Delete FROM User\")\n\tabstract fun clearUsers()","prompt":""},{"id":3870,"identifierName":"de.tutao.tutanota.data.UserInfoDao","requiredType":[],"content":"@Query(\"DELETE FROM User WHERE userId = :userId\")\n\tabstract fun deleteUser(userId: String)","prompt":""},{"id":3871,"identifierName":"pw.janyo.whatanime.repository.local.dao.HistoryDao","requiredType":[],"content":"@Insert\n    fun saveHistory(animationHistory: AnimationHistory): Long","prompt":""},{"id":3872,"identifierName":"pw.janyo.whatanime.repository.local.dao.HistoryDao","requiredType":[],"content":"@Query(\"SELECT * FROM tb_animation_history where id = :historyId LIMIT 1\")\n    fun getById(historyId: Int): AnimationHistory?","prompt":""},{"id":3873,"identifierName":"pw.janyo.whatanime.repository.local.dao.HistoryDao","requiredType":[],"content":"@Query(\"DELETE FROM tb_animation_history where id = :historyId\")\n    fun delete(historyId: Int): Int","prompt":""},{"id":3874,"identifierName":"pw.janyo.whatanime.repository.local.dao.HistoryDao","requiredType":[],"content":"@Query(\"SELECT * FROM tb_animation_history\")\n    fun queryAllHistory(): List<AnimationHistory>","prompt":""},{"id":3875,"identifierName":"pw.janyo.whatanime.repository.local.dao.HistoryDao","requiredType":[],"content":"@Update\n    fun update(animationHistory: AnimationHistory): Int","prompt":""},{"id":3876,"identifierName":"pw.janyo.whatanime.repository.local.dao.HistoryDao","requiredType":[],"content":"@Query(\"SELECT * FROM tb_animation_history WHERE origin_path = :originPath LIMIT 1\")\n    fun queryHistoryByOriginPath(originPath: String): AnimationHistory?","prompt":""},{"id":3877,"identifierName":"com.esafirm.androidplayground.flipper.FlipperDatabase","requiredType":[],"content":"abstract fun flipperDao(): FlipperDao","prompt":""},{"id":3878,"identifierName":"com.esafirm.androidplayground.flipper.FlipperDao","requiredType":[],"content":"@Query(\"SELECT * FROM flipper_data\")\n    fun getAll(): List<FlipperData>","prompt":""},{"id":3879,"identifierName":"com.esafirm.androidplayground.flipper.FlipperDao","requiredType":[],"content":"@Insert\n    fun insert(data: FlipperData)","prompt":""},{"id":3880,"identifierName":"com.esafirm.androidplayground.flipper.DatabaseHelper","requiredType":[],"content":"fun insertData(data: FlipperData) {\n        dao.insert(data)\n    }","prompt":""},{"id":3881,"identifierName":"com.esafirm.androidplayground.flipper.DatabaseHelper","requiredType":[],"content":"fun getAll(): List<FlipperData> = dao.getAll()","prompt":""},{"id":3882,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Observes list of tasks.\n     *\n     * @return all tasks.\n     */\n    @Query(\"SELECT * FROM Tasks\")\n    fun observeTasks(): LiveData<List<Task>>","prompt":""},{"id":3883,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Observes a single task.\n     *\n     * @param taskId the task id.\n     * @return the task with taskId.\n     */\n    @Query(\"SELECT * FROM Tasks WHERE entryid = :taskId\")\n    fun observeTaskById(taskId: String): LiveData<Task>","prompt":""},{"id":3884,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Select all tasks from the tasks table.\n     *\n     * @return all tasks.\n     */\n    @Query(\"SELECT * FROM Tasks\")\n    suspend fun getTasks(): List<Task>","prompt":""},{"id":3885,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Select a task by id.\n     *\n     * @param taskId the task id.\n     * @return the task with taskId.\n     */\n    @Query(\"SELECT * FROM Tasks WHERE entryid = :taskId\")\n    suspend fun getTaskById(taskId: String): Task?","prompt":""},{"id":3886,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Insert a task in the database. If the task already exists, replace it.\n     *\n     * @param task the task to be inserted.\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertTask(task: Task)","prompt":""},{"id":3887,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Update a task.\n     *\n     * @param task task to be updated\n     * @return the number of tasks updated. This should always be 1.\n     */\n    @Update\n    suspend fun updateTask(task: Task): Int","prompt":""},{"id":3888,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Update the complete status of a task\n     *\n     * @param taskId    id of the task\n     * @param completed status to be updated\n     */\n    @Query(\"UPDATE tasks SET completed = :completed WHERE entryid = :taskId\")\n    suspend fun updateCompleted(taskId: String, completed: Boolean)","prompt":""},{"id":3889,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Delete a task by id.\n     *\n     * @return the number of tasks deleted. This should always be 1.\n     */\n    @Query(\"DELETE FROM Tasks WHERE entryid = :taskId\")\n    suspend fun deleteTaskById(taskId: String): Int","prompt":""},{"id":3890,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Delete all tasks.\n     */\n    @Query(\"DELETE FROM Tasks\")\n    suspend fun deleteTasks()","prompt":""},{"id":3891,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Delete all completed tasks from the table.\n     *\n     * @return the number of tasks deleted.\n     */\n    @Query(\"DELETE FROM Tasks WHERE completed = 1\")\n    suspend fun deleteCompletedTasks(): Int","prompt":""},{"id":3892,"identifierName":"org.fossasia.openevent.general.notification.NotificationDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertNotifications(notifications: List<Notification>)","prompt":""},{"id":3893,"identifierName":"org.fossasia.openevent.general.notification.NotificationDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertNotification(notification: Notification)","prompt":""},{"id":3894,"identifierName":"org.fossasia.openevent.general.notification.NotificationDao","requiredType":[],"content":"@Query(\"SELECT * FROM Notification\")\n    fun getNotifications(): Single<List<Notification>>","prompt":""},{"id":3895,"identifierName":"com.example.jetcaster.data.room.PodcastFollowedEntryDao","requiredType":[],"content":"@Query(\"DELETE FROM podcast_followed_entries WHERE podcast_uri = :podcastUri\")\n    abstract suspend fun deleteWithPodcastUri(podcastUri: String)","prompt":""},{"id":3896,"identifierName":"com.example.jetcaster.data.room.PodcastFollowedEntryDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM podcast_followed_entries WHERE podcast_uri = :podcastUri\")\n    protected abstract suspend fun podcastFollowRowCount(podcastUri: String): Int","prompt":""},{"id":3897,"identifierName":"com.example.jetcaster.data.room.PodcastFollowedEntryDao","requiredType":[],"content":"suspend fun isPodcastFollowed(podcastUri: String): Boolean {\n        return podcastFollowRowCount(podcastUri) > 0\n    }","prompt":""},{"id":3898,"identifierName":"com.example.jetcaster.data.room.PodcastFollowedEntryDao","requiredType":["data class PodcastFollowedEntry( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") val id: Long = 0, @ColumnInfo(name = \"podcast_uri\") val podcastUri: String )"],"content":"/**\n     * The following methods should really live in a base interface. Unfortunately the Kotlin\n     * Compiler which we need to use for Compose doesn't work with.\n     * TODO: remove this once we move to a more recent Kotlin compiler\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insert(entity: PodcastFollowedEntry): Long","prompt":""},{"id":3899,"identifierName":"com.example.jetcaster.data.room.PodcastFollowedEntryDao","requiredType":["data class PodcastFollowedEntry( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") val id: Long = 0, @ColumnInfo(name = \"podcast_uri\") val podcastUri: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insertAll(vararg entity: PodcastFollowedEntry)","prompt":""},{"id":3900,"identifierName":"com.example.jetcaster.data.room.PodcastFollowedEntryDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insertAll(entities: Collection<PodcastFollowedEntry>)","prompt":""},{"id":3901,"identifierName":"com.example.jetcaster.data.room.PodcastFollowedEntryDao","requiredType":["data class PodcastFollowedEntry( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") val id: Long = 0, @ColumnInfo(name = \"podcast_uri\") val podcastUri: String )"],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun update(entity: PodcastFollowedEntry)","prompt":""},{"id":3902,"identifierName":"com.example.jetcaster.data.room.PodcastFollowedEntryDao","requiredType":["data class PodcastFollowedEntry( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"id\") val id: Long = 0, @ColumnInfo(name = \"podcast_uri\") val podcastUri: String )"],"content":"@Delete\n    abstract suspend fun delete(entity: PodcastFollowedEntry): Int","prompt":""},{"id":3903,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"@Query(\n      \"\"\"\n    SELECT * FROM accounting WHERE createTime <= :lastDate ORDER BY createTime DESC\n    LIMIT :limit\n    \"\"\"\n  )\n  fun queryPreviousAccounting(\n    lastDate: Date,\n    limit: Long\n  ): Maybe<List<Accounting>>","prompt":""},{"id":3904,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"/**\n   * @param someDayDate 日期格式为`yyyy-MM-dd`\n   */\n  @Deprecated(\"This will case bug\")\n  @Query(\n      \"\"\"\n    SELECT SUM(amount)\n    FROM accounting\n    WHERE datetime(createTime / 1000, 'unixepoch') >= date(:someDayDate) AND\n      datetime(createTime / 1000, 'unixepoch') < date(:someDayDate, '+1 day')\n    \"\"\"\n  )\n  fun sumOfDay(someDayDate: String): Float","prompt":""},{"id":3905,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"@Query(\n      \"\"\"\n    SELECT SUM(amount)\n    FROM accounting\n    WHERE datetime(createTime / 1000, 'unixepoch')\n    BETWEEN datetime(:timeInMillis, 'unixepoch')\n    AND datetime(:timeInMillis + 60 * 60 * 24, 'unixepoch')\n    \"\"\"\n  )\n  fun sumOfDay(timeInMillis: Long): Float","prompt":""},{"id":3906,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"@Query(\"SELECT * FROM accounting WHERE id = :id\")\n  fun getAccountingById(id: Int): Maybe<Accounting>","prompt":""},{"id":3907,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertAccounting(accounting: Accounting): Long","prompt":""},{"id":3908,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"@Query(\n      \"\"\"\n    SELECT SUM(amount) as total, tag_name\n    FROM accounting\n    WHERE strftime('%Y', createTime / 1000, 'unixepoch') = :year\n      AND  strftime('%m', createTime / 1000, 'unixepoch') = :month\n    GROUP BY tag_name\n    \"\"\"\n  )\n  fun getGroupingMonthTotalAmountObservable(\n    year: String,\n    month: String\n  ): Maybe<List<TagAndTotal>>","prompt":""},{"id":3909,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"@Query(\n      \"\"\"\n      SELECT SUM(amount) as total, tag_name, (SELECT createTime\n        FROM accounting\n        ORDER BY createTime\n        LIMIT 1) lastTime\n      FROM accounting\n      WHERE strftime('%Y', createTime / 1000, 'unixepoch') =\n        strftime('%Y', lastTime / 1000, 'unixepoch') AND\n        strftime('%m', createTime / 1000, 'unixepoch') =\n          strftime('%m', lastTime / 1000, 'unixepoch')\n      GROUP BY tag_name\n      \"\"\"\n  )\n  fun getGroupingTagOfLatestMonthObservable(): Maybe<List<TagAndTotal>>","prompt":""},{"id":3910,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"@Deprecated(\"This will no long used\")\n  @Query(\n      \"\"\"\n    SELECT SUM(amount) as total, tag_name\n    FROM accounting\n    WHERE strftime('%Y', createTime / 1000, 'unixepoch') = :year\n      AND  strftime('%m', createTime / 1000, 'unixepoch') = :month\n    GROUP BY tag_name\n    \"\"\"\n  )\n  fun getGroupingMonthTotalAmount(\n    year: String,\n    month: String\n  ): List<TagAndTotal>","prompt":""},{"id":3911,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"@SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)\n  @Query(\n      \"\"\"\n    SELECT SUM(amount) as total, tag_name, strftime('%Y-%m', createTime / 1000, 'unixepoch') year_month\n    FROM accounting\n    GROUP BY tag_name\n    ORDER BY year_month DESC\n    LIMIT 1\n    \"\"\"\n  )\n  fun getLastGroupingMonthTotalAmountObservable(): Maybe<List<TagAndTotal>>","prompt":""},{"id":3912,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"@Query(\n      \"\"\"\n    SELECT strftime('%Y-%m', createTime / 1000, 'unixepoch') year_month, SUM(amount) total\n    FROM accounting\n    GROUP BY year_month\n    ORDER BY year_month DESC\n    LIMIT :limit\n    \"\"\"\n  )\n  fun getMonthTotalAmount(limit: Long): Maybe<List<MonthTotal>>","prompt":""},{"id":3913,"identifierName":"com.littlegnal.accounting.db.AccountingDao","requiredType":[],"content":"@Query(\n      \"\"\"\n    DELETE FROM accounting WHERE id = :id\n    \"\"\"\n  )\n  fun deleteAccountingById(id: Int): Int","prompt":""},{"id":3914,"identifierName":"jp.sugnakys.usbserialconsole.data.LogItemDatabase","requiredType":[],"content":"abstract fun getDao(): LogItemDao","prompt":""},{"id":3915,"identifierName":"jp.sugnakys.usbserialconsole.data.LogItemDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(logItem: LogItem)","prompt":""},{"id":3916,"identifierName":"jp.sugnakys.usbserialconsole.data.LogItemDao","requiredType":[],"content":"@Query(\"SELECT * FROM LogItem order by 'timestamp' ASC\")\n    fun getAllItems(): LiveData<List<LogItem>>","prompt":""},{"id":3917,"identifierName":"jp.sugnakys.usbserialconsole.data.LogItemDao","requiredType":[],"content":"@Query(\"DELETE FROM LogItem\")\n    fun deleteAll()","prompt":""},{"id":3918,"identifierName":"com.android.example.sleepcodelab.data.db.SleepSegmentEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM sleep_segment_events_table ORDER BY start_time_millis DESC\")\n    fun getAll(): Flow<List<SleepSegmentEventEntity>>","prompt":""},{"id":3919,"identifierName":"com.android.example.sleepcodelab.data.db.SleepSegmentEventDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(sleepSegmentEventEntity: SleepSegmentEventEntity)","prompt":""},{"id":3920,"identifierName":"com.android.example.sleepcodelab.data.db.SleepSegmentEventDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertAll(sleepSegmentEventEntities: List<SleepSegmentEventEntity>)","prompt":""},{"id":3921,"identifierName":"com.android.example.sleepcodelab.data.db.SleepSegmentEventDao","requiredType":[],"content":"@Delete\n    suspend fun delete(sleepSegmentEventEntity: SleepSegmentEventEntity)","prompt":""},{"id":3922,"identifierName":"com.android.example.sleepcodelab.data.db.SleepSegmentEventDao","requiredType":[],"content":"@Query(\"DELETE FROM sleep_segment_events_table\")\n    suspend fun deleteAll()","prompt":""},{"id":3923,"identifierName":"grooves.boot.kotlin.repositories.PatientEventBlockingRepository","requiredType":[],"content":"fun findAllByAggregateIdIn(aggregateIds: List<String>): List<PatientEvent>","prompt":""},{"id":3924,"identifierName":"grooves.boot.kotlin.repositories.PatientRepository","requiredType":[],"content":"fun findAllByOrderByUniqueIdAsc(): Flux<Patient>","prompt":""},{"id":3925,"identifierName":"grooves.boot.kotlin.repositories.PatientEventRepository","requiredType":[],"content":"fun findAllByAggregateIdIn(aggregateIds: List<String>): Flux<PatientEvent>","prompt":""},{"id":3926,"identifierName":"grooves.boot.kotlin.repositories.PatientEventRepository","requiredType":[],"content":"@Query(\"{'aggregateId':?0, 'position':{'\\$gt':?1, '\\$lte':?2}}\")\n    fun findAllByPositionRange(\n        aggregateId: String,\n        lowerBoundExclusive: Long,\n        upperBoundInclusive: Long\n    ): Flux<PatientEvent>","prompt":""},{"id":3927,"identifierName":"grooves.boot.kotlin.repositories.PatientEventRepository","requiredType":[],"content":"@Query(\"{'aggregateId':?0, 'timestamp':{'\\$gt':?1, '\\$lte':?2}}\")\n    fun findAllByTimestampRange(\n        aggregateId: String,\n        lowerBoundExclusive: Date,\n        upperBoundInclusive: Date\n    ): Flux<PatientEvent>","prompt":""},{"id":3928,"identifierName":"grooves.boot.kotlin.repositories.PatientEventRepository","requiredType":[],"content":"fun findAllByAggregateIdAndTimestampLessThan(\n        aggregateId: String,\n        snapshotTime: Date\n    ): Flux<PatientEvent>","prompt":""},{"id":3929,"identifierName":"grooves.boot.kotlin.repositories.PatientAccountRepository","requiredType":[],"content":"fun findByAggregateIdAndLastEventPositionLessThan(\n        aggregateId: String,\n        maxPosition: Long\n    ): Mono<PatientAccount>","prompt":""},{"id":3930,"identifierName":"grooves.boot.kotlin.repositories.PatientAccountRepository","requiredType":[],"content":"fun findByAggregateIdAndLastEventTimestampLessThan(\n        aggregateId: String,\n        maxTimestamp: Date\n    ): Mono<PatientAccount>","prompt":""},{"id":3931,"identifierName":"grooves.boot.kotlin.repositories.PatientHealthRepository","requiredType":[],"content":"fun findByAggregateIdAndLastEventPositionLessThan(\n        aggregateId: String,\n        maxPosition: Long\n    ): Mono<PatientHealth>","prompt":""},{"id":3932,"identifierName":"grooves.boot.kotlin.repositories.PatientHealthRepository","requiredType":[],"content":"fun findByAggregateIdAndLastEventTimestampLessThan(\n        aggregateId: String,\n        maxTimestamp: Date\n    ): Mono<PatientHealth>","prompt":""},{"id":3933,"identifierName":"doit.study.droid.data.local.dao.TagDao","requiredType":["data class Tag( @PrimaryKey(autoGenerate = true) val id: Int = 0, val name: String, val selected: Boolean = false )"],"content":"@Query(\"select * from Tag\")\n    suspend fun getTags(): List<Tag>","prompt":""},{"id":3934,"identifierName":"doit.study.droid.data.local.dao.TagDao","requiredType":["data class Tag( @PrimaryKey(autoGenerate = true) val id: Int = 0, val name: String, val selected: Boolean = false )"],"content":"@Query(\"select * from Tag where id = :id\")\n    suspend fun getTag(id: Int): Tag","prompt":""},{"id":3935,"identifierName":"doit.study.droid.data.local.dao.TagDao","requiredType":["data class Tag( @PrimaryKey(autoGenerate = true) val id: Int = 0, val name: String, val selected: Boolean = false )"],"content":"@Query(\"select * from Tag where selected = :isSelected\")\n    suspend fun getTagBySelection(isSelected: Boolean): List<Tag>","prompt":""},{"id":3936,"identifierName":"doit.study.droid.data.local.dao.TagDao","requiredType":["data class Tag( @PrimaryKey(autoGenerate = true) val id: Int = 0, val name: String, val selected: Boolean = false )"],"content":"// TODO: migrate to ABORT strategy\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertTag(tag: Tag): Long","prompt":""},{"id":3937,"identifierName":"doit.study.droid.data.local.dao.TagDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertOrReplaceTag(tags: List<Tag>): List<Long>","prompt":""},{"id":3938,"identifierName":"doit.study.droid.data.local.dao.TagDao","requiredType":["data class QuestionTagJoin( @PrimaryKey(autoGenerate = true) val id: Int = 0, val questionId: Int, val tagId: Int )"],"content":"@Insert(onConflict = OnConflictStrategy.ABORT)\n    suspend fun insertQuestionTagJoin(questionTagJoin: QuestionTagJoin)","prompt":""},{"id":3939,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Query(\"SELECT * FROM $YOUTUBE_LIVE_TABLE\")\n    fun getAllYoutubeLives(): Flowable<List<LocalYoutubeLive>>","prompt":""},{"id":3940,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Query(\"SELECT * FROM $YOUTUBE_LIVE_TABLE WHERE name LIKE :name || '%'\")\n    fun findYoutubeLiveByName(name: String): Maybe<List<LocalYoutubeLive>>","prompt":""},{"id":3941,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Query(\"SELECT * FROM $YOUTUBE_LIVE_TABLE WHERE name IN (:names)\")\n    fun getYoutubeLives(names: List<String>): Flowable<List<LocalYoutubeLive>>","prompt":""},{"id":3942,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Query(\"SELECT * FROM $FAVORITE_LIVE_TABLE\")\n    fun getFavoriteYoutubeLives(): Flowable<List<LocalFavoriteLive>>","prompt":""},{"id":3943,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Query(\"SELECT * FROM $YOUTUBE_LIVE_TABLE WHERE name LIKE :liveId\")\n    fun getYoutubeLive(liveId: String): Flowable<LocalYoutubeLive>","prompt":""},{"id":3944,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun putYoutubeLives(lives: List<LocalYoutubeLive>)","prompt":""},{"id":3945,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun addYoutubeLiveToFavorites(live: LocalFavoriteLive)","prompt":""},{"id":3946,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Delete\n    fun removeYoutubeLiveFromFavorites(live: LocalFavoriteLive)","prompt":""},{"id":3947,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM $IPTV_PLAYLIST_TABLE\")\n    fun getAllIpTvPlaylist(): Flowable<List<LocalIpTvPlaylistWithChannels>>","prompt":""},{"id":3948,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Query(\"SELECT * FROM $IPTV_LIVE_TABLE WHERE playlist_id LIKE :playlistId\")\n    fun getIpTvLives(playlistId: String): Flowable<List<LocalIpTvLive>>","prompt":""},{"id":3949,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Query(\"SELECT * FROM $IPTV_LIVE_TABLE WHERE playlist_id LIKE :playlistId AND channel_name LIKE :ipTvLiveId\")\n    fun getIpTvLive(playlistId: String, ipTvLiveId: String): Flowable<LocalIpTvLive>","prompt":""},{"id":3950,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun addIpTvLiveToFavorite(ipTvLive: LocalIpTvLive)","prompt":""},{"id":3951,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Delete\n    fun removeTvLiveFromFavorite(ipTvLive: LocalIpTvLive)","prompt":""},{"id":3952,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun putIpTvPlaylist(playlist: LocalIpTvPlaylist)","prompt":""},{"id":3953,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun putAllIpTvLives(channels: List<LocalIpTvLive>)","prompt":""},{"id":3954,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM $IPTV_PLAYLIST_TABLE WHERE name LIKE :name || '%'\")\n    fun findIpPlayLists(name: String): Maybe<List<LocalIpTvPlaylistWithChannels>>","prompt":""},{"id":3955,"identifierName":"com.dbeginc.dbweatherdata.implementations.datasources.local.lives.RoomLivesDao","requiredType":[],"content":"@Query(\"SELECT * FROM $IPTV_LIVE_TABLE WHERE playlist_id LIKE :playlistId AND channel_name LIKE :name || '%'\")\n    fun findIpTvLiveWithChannelName(playlistId: String, name: String): Maybe<List<LocalIpTvLive>>","prompt":""},{"id":3956,"identifierName":"com.marktony.zhihudaily.database.dao.ZhihuDailyContentDao","requiredType":[],"content":"@Query(\"SELECT * FROM zhihu_daily_content WHERE id = :id\")\n    fun queryContentById(id: Int): ZhihuDailyContent?","prompt":""},{"id":3957,"identifierName":"com.marktony.zhihudaily.database.dao.ZhihuDailyContentDao","requiredType":["data class ZhihuDailyContent( @ColumnInfo(name = \"body\") @Expose @SerializedName(\"body\") val body: String, @ColumnInfo(name = \"image_source\") @Expose @SerializedName(\"image_source\") val imageSource: String, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String, @ColumnInfo(name = \"image\") @Expose @SerializedName(\"image\") val image: String, @ColumnInfo(name = \"share_url\") @Expose @SerializedName(\"share_url\") val shareUrl: String, @ColumnInfo(name = \"js\") @Expose @SerializedName(\"js\") val js: List<String>, @Expose @SerializedName(\"ga_prefix\") val gaPrefix: String, @ColumnInfo(name = \"images\") @Expose @SerializedName(\"images\") val images: List<String>, @ColumnInfo(name = \"type\") @Expose @SerializedName(\"type\") val type: Int, @PrimaryKey @ColumnInfo(name = \"id\") @Expose @SerializedName(\"id\") val id: Int = 0, @ColumnInfo(name = \"css\") @Expose @SerializedName(\"css\") val css: List<String> )"],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(content: ZhihuDailyContent)","prompt":""},{"id":3958,"identifierName":"com.marktony.zhihudaily.database.dao.ZhihuDailyContentDao","requiredType":["data class ZhihuDailyContent( @ColumnInfo(name = \"body\") @Expose @SerializedName(\"body\") val body: String, @ColumnInfo(name = \"image_source\") @Expose @SerializedName(\"image_source\") val imageSource: String, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String, @ColumnInfo(name = \"image\") @Expose @SerializedName(\"image\") val image: String, @ColumnInfo(name = \"share_url\") @Expose @SerializedName(\"share_url\") val shareUrl: String, @ColumnInfo(name = \"js\") @Expose @SerializedName(\"js\") val js: List<String>, @Expose @SerializedName(\"ga_prefix\") val gaPrefix: String, @ColumnInfo(name = \"images\") @Expose @SerializedName(\"images\") val images: List<String>, @ColumnInfo(name = \"type\") @Expose @SerializedName(\"type\") val type: Int, @PrimaryKey @ColumnInfo(name = \"id\") @Expose @SerializedName(\"id\") val id: Int = 0, @ColumnInfo(name = \"css\") @Expose @SerializedName(\"css\") val css: List<String> )"],"content":"@Update\n    fun update(content: ZhihuDailyContent)","prompt":""},{"id":3959,"identifierName":"com.marktony.zhihudaily.database.dao.ZhihuDailyContentDao","requiredType":["data class ZhihuDailyContent( @ColumnInfo(name = \"body\") @Expose @SerializedName(\"body\") val body: String, @ColumnInfo(name = \"image_source\") @Expose @SerializedName(\"image_source\") val imageSource: String, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String, @ColumnInfo(name = \"image\") @Expose @SerializedName(\"image\") val image: String, @ColumnInfo(name = \"share_url\") @Expose @SerializedName(\"share_url\") val shareUrl: String, @ColumnInfo(name = \"js\") @Expose @SerializedName(\"js\") val js: List<String>, @Expose @SerializedName(\"ga_prefix\") val gaPrefix: String, @ColumnInfo(name = \"images\") @Expose @SerializedName(\"images\") val images: List<String>, @ColumnInfo(name = \"type\") @Expose @SerializedName(\"type\") val type: Int, @PrimaryKey @ColumnInfo(name = \"id\") @Expose @SerializedName(\"id\") val id: Int = 0, @ColumnInfo(name = \"css\") @Expose @SerializedName(\"css\") val css: List<String> )"],"content":"@Delete\n    fun delete(content: ZhihuDailyContent)","prompt":""},{"id":3960,"identifierName":"us.mikeandwan.photos.database.PhotoCategoryDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT year FROM photo_category ORDER BY year DESC\")\n    abstract fun getYears(): Flow<List<Int>>","prompt":""},{"id":3961,"identifierName":"us.mikeandwan.photos.database.PhotoCategoryDao","requiredType":[],"content":"@Query(\"\"\"\n        SELECT pc.*\n          FROM photo_category pc\n         INNER JOIN active_id ai\n                 ON ai.type = :type\n                AND ai.id = pc.year\n         ORDER BY id DESC\n    \"\"\"\n    )\n    protected abstract fun getCategoriesForActiveYear(type: ActiveIdType): Flow<List<PhotoCategory>>","prompt":""},{"id":3962,"identifierName":"us.mikeandwan.photos.database.PhotoCategoryDao","requiredType":[],"content":"@Query(\"\"\"\n        SELECT pc.*\n          FROM photo_category pc\n         INNER JOIN active_id ai\n                 ON ai.type = :type\n                AND ai.id = pc.id\n    \"\"\")\n    abstract fun getActiveCategory(type: ActiveIdType): Flow<PhotoCategory?>","prompt":""},{"id":3963,"identifierName":"us.mikeandwan.photos.database.PhotoCategoryDao","requiredType":[],"content":"@Query(\"\"\"\n        SELECT pc.*\n          FROM photo_category pc\n         WHERE id = :id\n    \"\"\")\n    abstract fun getCategory(id: Int): Flow<PhotoCategory?>","prompt":""},{"id":3964,"identifierName":"us.mikeandwan.photos.database.PhotoCategoryDao","requiredType":[],"content":"@Query(\"\"\"\n        SELECT pc.*\n          FROM photo_category pc\n         WHERE pc.id = (SELECT MAX(id) FROM photo_category)\n    \"\"\")\n    abstract fun getMostRecentCategory(): Flow<PhotoCategory?>","prompt":""},{"id":3965,"identifierName":"us.mikeandwan.photos.database.PhotoCategoryDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun upsert(vararg categories: PhotoCategory)","prompt":""},{"id":3966,"identifierName":"us.mikeandwan.photos.database.PhotoCategoryDao","requiredType":[],"content":"fun getCategoriesForActiveYear(): Flow<List<PhotoCategory>> = getCategoriesForActiveYear(ActiveIdType.PhotoCategoryYear)","prompt":""},{"id":3967,"identifierName":"us.mikeandwan.photos.database.PhotoCategoryDao","requiredType":[],"content":"fun getActiveCategory(): Flow<PhotoCategory?> = getActiveCategory(ActiveIdType.PhotoCategory)","prompt":""},{"id":3968,"identifierName":"net.pensato.data.cassandra.sample.repository.StudentRepository","requiredType":["data class Student( @PrimaryKeyColumn(name = \"name\", ordinal = 1, type = PrimaryKeyType.PARTITIONED) var name: String, var college: String = \"\", var enrollment: LocalDateTime = LocalDateTime.now() )"],"content":"@Query(value=\"SELECT * FROM student WHERE college=?0\")\n    fun findByCollege(college: String): List<Student>;","prompt":""},{"id":3969,"identifierName":"net.pensato.data.cassandra.sample.repository.StudentRepository","requiredType":["data class Student( @PrimaryKeyColumn(name = \"name\", ordinal = 1, type = PrimaryKeyType.PARTITIONED) var name: String, var college: String = \"\", var enrollment: LocalDateTime = LocalDateTime.now() )"],"content":"@Query(\"SELECT * FROM student WHERE enrollment > ?0 ALLOW FILTERING\")\n    fun findStudentHasEnrollmentGreaterThan(enrollment: Instant): List<Student>;","prompt":""},{"id":3970,"identifierName":"org.videolan.vlc.database.CustomDirectoryDao","requiredType":["data class CustomDirectory( @PrimaryKey val path: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(customDirectory: CustomDirectory)","prompt":""},{"id":3971,"identifierName":"org.videolan.vlc.database.CustomDirectoryDao","requiredType":["data class CustomDirectory( @PrimaryKey val path: String )"],"content":"@Delete\n    fun delete(customDirectory: CustomDirectory)","prompt":""},{"id":3972,"identifierName":"org.videolan.vlc.database.CustomDirectoryDao","requiredType":["data class CustomDirectory( @PrimaryKey val path: String )"],"content":"@Query(\"SELECT * FROM CustomDirectory\")\n    fun getAll(): List<CustomDirectory>","prompt":""},{"id":3973,"identifierName":"org.videolan.vlc.database.CustomDirectoryDao","requiredType":["data class CustomDirectory( @PrimaryKey val path: String )"],"content":"@Query(\"SELECT * FROM CustomDirectory WHERE path = :path\")\n    fun get(path: String): List<CustomDirectory>","prompt":""},{"id":3974,"identifierName":"info.nightscout.androidaps.database.daos.TotalDailyDoseDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TOTAL_DAILY_DOSES WHERE id = :id\")\n    override fun findById(id: Long): TotalDailyDose?","prompt":""},{"id":3975,"identifierName":"info.nightscout.androidaps.database.daos.TotalDailyDoseDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_TOTAL_DAILY_DOSES\")\n    override fun deleteAllEntries()","prompt":""},{"id":3976,"identifierName":"info.nightscout.androidaps.database.daos.TotalDailyDoseDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TOTAL_DAILY_DOSES WHERE pumpId = :pumpId AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL\")\n    fun findByPumpIds(pumpId: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): TotalDailyDose?","prompt":""},{"id":3977,"identifierName":"info.nightscout.androidaps.database.daos.TotalDailyDoseDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TOTAL_DAILY_DOSES WHERE timestamp = :timestamp AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL\")\n    fun findByPumpTimestamp(timestamp: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): TotalDailyDose?","prompt":""},{"id":3978,"identifierName":"info.nightscout.androidaps.database.daos.TotalDailyDoseDao","requiredType":["data class TotalDailyDose( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var basalAmount: Double = 0.0, var bolusAmount: Double = 0.0, var totalAmount: Double = 0.0, var carbs: Double = 0.0 )"],"content":"@Query(\"SELECT * FROM $TABLE_TOTAL_DAILY_DOSES WHERE timestamp = :timestamp AND pumpType = :pumpType AND referenceId IS NULL\")\n    fun findByTimestamp(timestamp: Long, pumpType: InterfaceIDs.PumpType): Maybe<TotalDailyDose>","prompt":""},{"id":3979,"identifierName":"info.nightscout.androidaps.database.daos.TotalDailyDoseDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_TOTAL_DAILY_DOSES WHERE isValid = 1 AND referenceId IS NULL AND pumpType <> :exclude ORDER BY timestamp DESC LIMIT :count\")\n    fun getLastTotalDailyDoses(count: Int, exclude: InterfaceIDs.PumpType = InterfaceIDs.PumpType.CACHE): Single<List<TotalDailyDose>>","prompt":""},{"id":3980,"identifierName":"info.nightscout.androidaps.database.daos.TotalDailyDoseDao","requiredType":["data class TotalDailyDose( @PrimaryKey(autoGenerate = true) override var id: Long = 0, override var version: Int = 0, override var dateCreated: Long = -1, override var isValid: Boolean = true, override var referenceId: Long? = null, @Embedded override var interfaceIDs_backing: InterfaceIDs? = InterfaceIDs(), override var timestamp: Long, override var utcOffset: Long = TimeZone.getDefault().getOffset(timestamp).toLong(), var basalAmount: Double = 0.0, var bolusAmount: Double = 0.0, var totalAmount: Double = 0.0, var carbs: Double = 0.0 )"],"content":"@Query(\"SELECT * FROM $TABLE_TOTAL_DAILY_DOSES WHERE dateCreated > :since AND dateCreated <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<TotalDailyDose>","prompt":""},{"id":3981,"identifierName":"info.nightscout.androidaps.database.daos.TotalDailyDoseDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_TOTAL_DAILY_DOSES WHERE dateCreated >= :since AND pumpType = :pumpType\")\n    fun deleteNewerThan(since: Long, pumpType: InterfaceIDs.PumpType)","prompt":""},{"id":3982,"identifierName":"name.gyger.jmoney.category.CategoryRepository","requiredType":[],"content":"@Query(\"SELECT c FROM Category c LEFT JOIN FETCH c.children\")\n    override fun findAll(): List<Category>","prompt":""},{"id":3983,"identifierName":"androidx.room.integration.kotlintestapp.dao.DerivedDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Query(\"SELECT * FROM author WHERE authorId = :authorId\")\n    fun getAuthor(authorId: String): Author","prompt":""},{"id":3984,"identifierName":"be.florien.anyflow.data.local.dao.PlaylistDao","requiredType":[],"content":"@Query(\"SELECT * FROM playlist\")\n    fun getPlaylists(): LiveData<List<DbPlaylist>>","prompt":""},{"id":3985,"identifierName":"be.florien.anyflow.data.local.dao.PlaylistDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM playlist\")\n    fun getPlaylistsWithSongs(): LiveData<List<DbPlaylistWithSongs>>","prompt":""},{"id":3986,"identifierName":"be.florien.anyflow.data.local.dao.PlaylistDao","requiredType":[],"content":"@Query(\"SELECT * FROM playlist ORDER BY name COLLATE UNICODE\")\n    fun orderByName(): DataSource.Factory<Int, DbPlaylist>","prompt":""},{"id":3987,"identifierName":"be.florien.anyflow.data.local.dao.PlaylistDao","requiredType":[],"content":"@Query(\"SELECT * FROM playlist WHERE playlist.name LIKE :filter ORDER BY name COLLATE UNICODE\")\n    fun orderByNameFiltered(filter: String): DataSource.Factory<Int, DbPlaylist>","prompt":""},{"id":3988,"identifierName":"be.florien.anyflow.data.local.dao.PlaylistDao","requiredType":[],"content":"@Query(\"SELECT * FROM playlist WHERE playlist.name LIKE :filter ORDER BY name COLLATE UNICODE\")\n    suspend fun orderByNameFilteredList(filter: String): List<DbPlaylist>","prompt":""},{"id":3989,"identifierName":"org.softeg.slartus.forpdaplus.forum.data.db.ForumDao","requiredType":[],"content":"@Transaction\n    open suspend fun replaceAll(forums: List<ForumEntity>) {\n        deleteAll()\n        insertAll(*forums.toTypedArray())\n    }","prompt":""},{"id":3990,"identifierName":"org.softeg.slartus.forpdaplus.forum.data.db.ForumDao","requiredType":[],"content":"@Query(\"SELECT * FROM forum\")\n    abstract suspend fun getAll(): List<ForumEntity>","prompt":""},{"id":3991,"identifierName":"org.softeg.slartus.forpdaplus.forum.data.db.ForumDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertAll(vararg items: ForumEntity)","prompt":""},{"id":3992,"identifierName":"org.softeg.slartus.forpdaplus.forum.data.db.ForumDao","requiredType":[],"content":"@Query(\"DELETE FROM forum\")\n    abstract suspend fun deleteAll()","prompt":""},{"id":3993,"identifierName":"com.google.android.ground.persistence.local.room.dao.OfflineAreaDao","requiredType":[],"content":"@Query(\"SELECT * FROM offline_base_map\")\n  fun findAllOnceAndStream(): Flowable<List<OfflineAreaEntity>>","prompt":""},{"id":3994,"identifierName":"com.google.android.ground.persistence.local.room.dao.OfflineAreaDao","requiredType":["data class OfflineAreaEntity( @ColumnInfo(name = \"id\") @PrimaryKey val id: String, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"state\") val state: OfflineAreaEntityState, @ColumnInfo(name = \"north\") val north: Double, @ColumnInfo(name = \"south\") val south: Double, @ColumnInfo(name = \"east\") val east: Double, @ColumnInfo(name = \"west\") val west: Double )"],"content":"@Query(\"SELECT * FROM offline_base_map WHERE id = :id\")\n  fun findById(id: String): Maybe<OfflineAreaEntity>","prompt":""},{"id":3995,"identifierName":"fr.free.nrw.commons.upload.depicts.DepictsDao","requiredType":[],"content":"/**\n     *  insert Depicts in DepictsRoomDataBase\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insert(depictedItem: Depicts)","prompt":""},{"id":3996,"identifierName":"fr.free.nrw.commons.upload.depicts.DepictsDao","requiredType":[],"content":"/**\n     * get all Depicts from roomdatabase\n     */\n    @Query(\"Select * From depicts_table order by lastUsed DESC\")\n    abstract suspend fun getAllDepict(): List<Depicts>","prompt":""},{"id":3997,"identifierName":"fr.free.nrw.commons.upload.depicts.DepictsDao","requiredType":[],"content":"/**\n     *  get all Depicts which need to delete  from roomdatabase\n     */\n    @Query(\"Select * From depicts_table order by lastUsed DESC LIMIT :n OFFSET 10\")\n    abstract suspend fun getItemToDelete(n: Int): List<Depicts>","prompt":""},{"id":3998,"identifierName":"fr.free.nrw.commons.upload.depicts.DepictsDao","requiredType":[],"content":"/**\n     *  Delete Depicts from roomdatabase\n     */\n    @Delete\n    abstract suspend fun delete(depicts: Depicts)","prompt":""},{"id":3999,"identifierName":"fr.free.nrw.commons.upload.depicts.DepictsDao","requiredType":[],"content":"/**\n     * get all depicts from DepictsRoomDatabase\n     */\n    fun depictsList(): List<Depicts> {\n        runBlocking {\n            launch(Dispatchers.IO) {\n                allDepict = getAllDepict()\n            }\n        }\n        return allDepict\n    }","prompt":""},{"id":4000,"identifierName":"fr.free.nrw.commons.upload.depicts.DepictsDao","requiredType":[],"content":"/**\n     *  insert Depicts  in DepictsRoomDataBase\n     */\n    fun insertDepict(depictes: Depicts) {\n        runBlocking {\n            launch(Dispatchers.IO) {\n                insert(depictes)\n            }\n        }\n    }","prompt":""},{"id":4001,"identifierName":"fr.free.nrw.commons.upload.depicts.DepictsDao","requiredType":[],"content":"/**\n     *  get all Depicts item which need to delete\n     */\n    fun getItemTodelete(number: Int): List<Depicts> {\n        runBlocking {\n            launch(Dispatchers.IO) {\n                listOfDelete = getItemToDelete(number)\n            }\n        }\n        return listOfDelete\n    }","prompt":""},{"id":4002,"identifierName":"fr.free.nrw.commons.upload.depicts.DepictsDao","requiredType":[],"content":"/**\n     *  delete Depicts  in DepictsRoomDataBase\n     */\n    fun deleteDepicts(depictes: Depicts) {\n        runBlocking {\n            launch(Dispatchers.IO) {\n                delete(depictes)\n            }\n        }\n    }","prompt":""},{"id":4003,"identifierName":"fr.free.nrw.commons.upload.depicts.DepictsDao","requiredType":[],"content":"/**\n     *  save Depicts in DepictsRoomDataBase\n     */\n    fun savingDepictsInRoomDataBase(listDepictedItem: List<DepictedItem>) {\n        var numberofItemInRoomDataBase: Int\n        val maxNumberOfItemSaveInRoom = 10\n\n        for (depictsItem in listDepictedItem) {\n            depictsItem.isSelected = false\n            insertDepict(Depicts(depictsItem, Date()))\n        }\n\n        numberofItemInRoomDataBase = depictsList().size\n        // delete the depictItem from depictsroomdataBase when number of element in depictsroomdataBase is greater than 10\n        if (numberofItemInRoomDataBase > maxNumberOfItemSaveInRoom) {\n\n            val listOfDepictsToDelete: List<Depicts> =\n                getItemTodelete(numberofItemInRoomDataBase)\n            for (i in listOfDepictsToDelete) {\n                deleteDepicts(i)\n            }\n        }\n    }","prompt":""},{"id":4004,"identifierName":"com.stronganizer.android.data.source.local.db.dao.CompetitionDao","requiredType":["data class Competition( @PrimaryKey val id: Int, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"description\") val description: String, @ColumnInfo(name = \"dateTime\") val dateTime: Date, @Ignore val location: Location )"],"content":"@Insert fun insertAll(vararg competitions: Competition)","prompt":""},{"id":4005,"identifierName":"com.stronganizer.android.data.source.local.db.dao.CompetitionDao","requiredType":["data class Competition( @PrimaryKey val id: Int, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"description\") val description: String, @ColumnInfo(name = \"dateTime\") val dateTime: Date, @Ignore val location: Location )"],"content":"@Update fun update(competition: Competition)","prompt":""},{"id":4006,"identifierName":"com.stronganizer.android.data.source.local.db.dao.CompetitionDao","requiredType":["data class Competition( @PrimaryKey val id: Int, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"description\") val description: String, @ColumnInfo(name = \"dateTime\") val dateTime: Date, @Ignore val location: Location )"],"content":"@Delete fun delete(competition: Competition)","prompt":""},{"id":4007,"identifierName":"com.stronganizer.android.data.source.local.db.dao.CompetitionDao","requiredType":[],"content":"@Query(\"SELECT * FROM competition WHERE id = :id\") fun findById(id: Int)","prompt":""},{"id":4008,"identifierName":"com.stronganizer.android.data.source.local.db.dao.CompetitionDao","requiredType":[],"content":"@Query(\"SELECT * FROM competition\") fun findAll(): LiveData<List<Competition>>","prompt":""},{"id":4009,"identifierName":"io.github.rosariopfernandes.rollapass.dao.UserDao","requiredType":["data class User( @PrimaryKey(autoGenerate = true) var userId: Int?, var masterPassword: String )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun createUser(user: User)","prompt":""},{"id":4010,"identifierName":"io.github.rosariopfernandes.rollapass.dao.UserDao","requiredType":["data class User( @PrimaryKey(autoGenerate = true) var userId: Int?, var masterPassword: String )"],"content":"@Update\n    fun updateUser(user: User)","prompt":""},{"id":4011,"identifierName":"io.github.rosariopfernandes.rollapass.dao.UserDao","requiredType":["data class User( @PrimaryKey(autoGenerate = true) var userId: Int?, var masterPassword: String )"],"content":"@Query(\"SELECT * FROM User WHERE userId = 1\")\n    fun getUser(): LiveData<User>","prompt":""},{"id":4012,"identifierName":"tm.alashow.datmusic.data.db.daos.PlaylistsWithAudiosDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insert(entities: PlaylistAudio)","prompt":""},{"id":4013,"identifierName":"tm.alashow.datmusic.data.db.daos.PlaylistsWithAudiosDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insertAll(entities: List<PlaylistAudio>)","prompt":""},{"id":4014,"identifierName":"tm.alashow.datmusic.data.db.daos.PlaylistsWithAudiosDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM playlist_audios WHERE playlist_id = :id\")\n    abstract fun playlistAudios(id: PlaylistId): Flow<List<PlaylistAudio>>","prompt":""},{"id":4015,"identifierName":"tm.alashow.datmusic.data.db.daos.PlaylistsWithAudiosDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT distinct(audio_id) FROM playlist_audios ORDER BY `index` ASC\")\n    abstract fun distinctAudios(): Flow<List<String>>","prompt":""},{"id":4016,"identifierName":"tm.alashow.datmusic.data.db.daos.PlaylistsWithAudiosDao","requiredType":[],"content":"@Transaction\n    @Update\n    abstract fun updatePlaylistAudio(audioOfPlaylist: PlaylistAudio)","prompt":""},{"id":4017,"identifierName":"tm.alashow.datmusic.data.db.daos.PlaylistsWithAudiosDao","requiredType":[],"content":"@Query(\"SELECT MAX(`index`) FROM playlist_audios WHERE playlist_id = :id\")\n    abstract fun lastPlaylistAudioIndex(id: PlaylistId): Flow<Int>","prompt":""},{"id":4018,"identifierName":"tm.alashow.datmusic.data.db.daos.PlaylistsWithAudiosDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM playlists\")\n    abstract fun playlistsWithAudios(): Flow<List<PlaylistWithAudios>>","prompt":""},{"id":4019,"identifierName":"tm.alashow.datmusic.data.db.daos.PlaylistsWithAudiosDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM playlists WHERE _id = :id\")\n    abstract fun playlistWithAudios(id: PlaylistId): Flow<PlaylistWithAudios>","prompt":""},{"id":4020,"identifierName":"ru.ustimov.weather.content.impl.local.dao.CountriesDao","requiredType":[],"content":"@Query(\"select * from ${Database.Tables.COUNTRIES} where code in (:codes)\")\n    fun get(codes: List<String>): Flowable<List<RoomCountry>>","prompt":""},{"id":4021,"identifierName":"ru.ustimov.weather.content.impl.local.dao.CountriesDao","requiredType":["data class RoomCountry( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = BaseColumns._ID) private val id: Long? = null, @ColumnInfo(name = \"code\", collate = ColumnInfo.NOCASE) private val code: String, @ColumnInfo(name = \"name\", collate = ColumnInfo.NOCASE) private val name: String? )"],"content":"@Query(\"select * from ${Database.Tables.COUNTRIES} where code = :code\")\n    fun get(code: String): Flowable<RoomCountry>","prompt":""},{"id":4022,"identifierName":"ru.ustimov.weather.content.impl.local.dao.CountriesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(countries: List<RoomCountry>)","prompt":""},{"id":4023,"identifierName":"com.anothermovieapp.repository.DaoListFavorite","requiredType":[],"content":"@Query(\"SELECT * from favorite\")\n    fun get(): Flow<List<EntityDBFavoriteMovie>>","prompt":""},{"id":4024,"identifierName":"com.anothermovieapp.repository.DaoListFavorite","requiredType":[],"content":"@Delete\n    suspend fun remove(id: EntityDBFavoriteMovie)","prompt":""},{"id":4025,"identifierName":"com.anothermovieapp.repository.DaoListFavorite","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(item: EntityDBFavoriteMovie)","prompt":""},{"id":4026,"identifierName":"com.anothermovieapp.repository.DaoMovieReview","requiredType":[],"content":"@Query(\"SELECT * from reviews WHERE id = :idd\")\n    suspend fun get(idd : Long): List<EntityDBMovieReview>","prompt":""},{"id":4027,"identifierName":"com.anothermovieapp.repository.DaoMovieReview","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(item: EntityDBMovieReview)","prompt":""},{"id":4028,"identifierName":"com.anothermovieapp.repository.DaoMovieReview","requiredType":[],"content":"@Query(\"SELECT * from reviews_fetch_state WHERE id = :idd\")\n    suspend fun getFetchState(idd : Long) : EntityDBReviewsListFetchState?","prompt":""},{"id":4029,"identifierName":"com.anothermovieapp.repository.DaoMovieReview","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun setFetchState(state: EntityDBReviewsListFetchState)","prompt":""},{"id":4030,"identifierName":"com.buzbuz.dikkeneksoundboard.database.SoundDao","requiredType":[],"content":"/**\n     * Get all sounds in the database.\n     * <p>\n     * @return the [LiveData] on the list of sounds.\n     */\n    @Query(\"SELECT * from sound_table ORDER BY name ASC\")\n    fun getAllSounds(): LiveData<List<Sound>>","prompt":""},{"id":4031,"identifierName":"com.buzbuz.dikkeneksoundboard.database.SoundDao","requiredType":[],"content":"/**\n     * Get the list of sounds marked as favourites in the database.\n     * <p>\n     * @return the [LiveData] on the list of favourite sounds.\n     */\n    @Query(\"SELECT * from sound_table WHERE isFavourite = 1 ORDER BY name ASC\")\n    fun getFavouriteSounds(): LiveData<List<Sound>>","prompt":""},{"id":4032,"identifierName":"com.buzbuz.dikkeneksoundboard.database.SoundDao","requiredType":[],"content":"/**\n     * Get a list of sounds filtered on the name.\n     * <p>\n     * @param filter the filter to be applied.\n     * <p>\n     * @return the filtered list.\n     */\n    @Query(\"SELECT * FROM sound_table WHERE name LIKE '%' || :filter || '%' ORDER BY name ASC\")\n    fun getFilteredSounds(filter: String): LiveData<List<Sound>>","prompt":""},{"id":4033,"identifierName":"com.buzbuz.dikkeneksoundboard.database.SoundDao","requiredType":[],"content":"/**\n     * Insert a sound in the database.\n     * <p>\n     * @param sound the sound to be inserted.\n     */\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insert(sound: Sound)","prompt":""},{"id":4034,"identifierName":"com.buzbuz.dikkeneksoundboard.database.SoundDao","requiredType":[],"content":"/**\n     * Update a sound in the database. Used to change the favourite state of a sound.\n     * <p>\n     * @param sound the sound to be updated.\n     */\n    @Update\n    suspend fun update(sound: Sound)","prompt":""},{"id":4035,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"/* This is a transaction since GameWithPlayers pulls from multiple tables. */\n    @Transaction\n    @Query(\"SELECT * FROM games\")\n    abstract fun getGamesWithPlayers(): LiveData<List<GameWithPlayers>>","prompt":""},{"id":4036,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Query(\"SELECT * FROM players WHERE playerName = :playerName\")\n    abstract fun getPlayer(playerName: String): Player?","prompt":""},{"id":4037,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT *  FROM games ORDER BY startTime DESC LIMIT 1\")\n    abstract fun getCurrentGameWithPlayers(): LiveData<GameWithPlayers>","prompt":""},{"id":4038,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Transaction\n    @Query(\n        \"\"\"\n        SELECT * FROM game_statuses\n        WHERE gameId = (\n            SELECT gameId FROM games\n            ORDER BY startTime DESC\n            LIMIT 1)\n        ORDER BY gamePlayerNumber\n        \"\"\"\n    )\n    abstract fun getCurrentGameStatuses(): LiveData<List<GameStatus>>","prompt":""},{"id":4039,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Transaction\n    @Query(\n        \"\"\"\n        SELECT * FROM game_statuses gs\n        WHERE gs.gameId IN (\n            SELECT gameId FROM games\n            WHERE gameState = :finishedGameState\n        )\n        \"\"\"\n    )\n    abstract fun getCompletedGameStatusesWithPlayers(\n        finishedGameState: GameState = GameState.Finished\n    ): LiveData<List<GameStatusWithPlayer>>","prompt":""},{"id":4040,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertGame(game: Game): Long","prompt":""},{"id":4041,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertPlayer(player: Player): Long","prompt":""},{"id":4042,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertPlayers(players: List<Player>): List<Long>","prompt":""},{"id":4043,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertGameStatuses(gameStatuses: List<GameStatus>)","prompt":""},{"id":4044,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Update\n    abstract suspend fun updateGame(game: Game)","prompt":""},{"id":4045,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Update\n    abstract suspend fun updateGameStatuses(gameStatuses: List<GameStatus>)","prompt":""},{"id":4046,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Query(\"\"\"\n        UPDATE games\n        SET endTime = :endDate, gameState = :gameState\n        WHERE endTime IS NULL\"\"\")\n    abstract suspend fun closeOpenGames(\n        endDate: OffsetDateTime = OffsetDateTime.now(),\n        gameState: GameState = GameState.Cancelled\n    )","prompt":""},{"id":4047,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Transaction\n    open suspend fun startGame(players: List<Player>, pennyCount: Int? = null): Long {\n        this.closeOpenGames()\n\n        val gameId = this.insertGame(\n            Game(\n                gameState = GameState.Started,\n                currentTurnText = \"The game has begun!\\n\",\n                canRoll = true\n            )\n        )\n\n        val playerIds = players.map { player ->\n            getPlayer(player.playerName)?.playerId ?: insertPlayer(player)\n        }\n\n        this.insertGameStatuses(\n            playerIds.mapIndexed { index, playerId ->\n                GameStatus(\n                    gameId,\n                    playerId,\n                    index,\n                    index == 0,\n                    pennyCount ?: Player.defaultPennyCount\n                )\n            }\n        )\n\n        return gameId\n    }","prompt":""},{"id":4048,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Transaction\n    open suspend fun updateGameAndStatuses(game: Game, statuses: List<GameStatus>) {\n        this.updateGame(game)\n        this.updateGameStatuses(statuses)\n    }","prompt":""},{"id":4049,"identifierName":"com.android.samples.donuttracker.storage.DonutDao","requiredType":[],"content":"@Query(\"SELECT * FROM donut\")\n    fun getAll(): LiveData<List<Donut>>","prompt":""},{"id":4050,"identifierName":"com.android.samples.donuttracker.storage.DonutDao","requiredType":[],"content":"@Query(\"SELECT * FROM donut WHERE id = :id\")\n    suspend fun get(id: Long): Donut","prompt":""},{"id":4051,"identifierName":"com.android.samples.donuttracker.storage.DonutDao","requiredType":[],"content":"@Insert\n    suspend fun insert(donut: Donut): Long","prompt":""},{"id":4052,"identifierName":"com.android.samples.donuttracker.storage.DonutDao","requiredType":[],"content":"@Delete\n    suspend fun delete(donut: Donut)","prompt":""},{"id":4053,"identifierName":"com.android.samples.donuttracker.storage.DonutDao","requiredType":[],"content":"@Update\n    suspend fun update(donut: Donut)","prompt":""},{"id":4054,"identifierName":"com.openteam.application.repository.EventRepository","requiredType":["data class Event( var name: String = \"\", @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) var dateTime: LocalDateTime = LocalDateTime.MIN, @OneToMany(cascade = arrayOf(CascadeType.ALL)) @JoinTable(name = \"event_teams\", joinColumns = arrayOf(JoinColumn(name = \"key\")), inverseJoinColumns = arrayOf(JoinColumn(name = \"event_id\"))) var teams: MutableList<Team> = arrayListOf(Team(\"default\")), var creationTime : LocalDateTime = LocalDateTime.now(), var uuid : String = UUID.randomUUID().toString(), @Id @GeneratedValue(strategy= GenerationType.IDENTITY) private var id: Long = 0 )"],"content":"fun findByUuid(@Param(\"uuid\") uuid : String) : Event","prompt":""},{"id":4055,"identifierName":"com.openteam.application.repository.EventRepository","requiredType":["data class Event( var name: String = \"\", @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) var dateTime: LocalDateTime = LocalDateTime.MIN, @OneToMany(cascade = arrayOf(CascadeType.ALL)) @JoinTable(name = \"event_teams\", joinColumns = arrayOf(JoinColumn(name = \"key\")), inverseJoinColumns = arrayOf(JoinColumn(name = \"event_id\"))) var teams: MutableList<Team> = arrayListOf(Team(\"default\")), var creationTime : LocalDateTime = LocalDateTime.now(), var uuid : String = UUID.randomUUID().toString(), @Id @GeneratedValue(strategy= GenerationType.IDENTITY) private var id: Long = 0 )"],"content":"fun findByNameIgnoreCaseContainingOrderByDateTimeDesc(@Param(\"name\") name : String, @PageableDefault(10) pageable : Pageable) : Page<Event>","prompt":""},{"id":4056,"identifierName":"com.openteam.application.repository.PlayerRepository","requiredType":["data class Player( var name : String = \"\", var email: String = \"\", var guest: Boolean = false, var active: Boolean = true, var creationTime : LocalDateTime = LocalDateTime.now(), @Id @GeneratedValue(strategy= GenerationType.IDENTITY) var id : Long = 0 )"],"content":"@Query(\"select p from Player p where upper(p.name) like upper(concat('%', :name,'%')) and p.active = true\")\n    fun findByNameContaining(@Param(\"name\") name : String, @PageableDefault(30) pageable : Pageable): Page<Player>","prompt":""},{"id":4057,"identifierName":"fr.jeantuffier.reminder.free.common.dao.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM task\")\n    fun getAll(): Single<List<Task>>","prompt":""},{"id":4058,"identifierName":"fr.jeantuffier.reminder.free.common.dao.TaskDao","requiredType":["data class Task( @PrimaryKey(autoGenerate = true) val id: Int, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"priority\") val priority: Int, @ColumnInfo(name = \"delay\") val delay: Int, @ColumnInfo(name = \"frequency\") val frequency: String, @ColumnInfo(name = \"fromTime\") val fromTime: String, @ColumnInfo(name = \"toTime\") val toTime: String, @ColumnInfo(name = \"createdAtTime\") val createdAtTime: String )"],"content":"@Query(\"SELECT * FROM task WHERE id LIKE :id LIMIT 1\")\n    fun getById(id: Int): Single<Task>","prompt":""},{"id":4059,"identifierName":"fr.jeantuffier.reminder.free.common.dao.TaskDao","requiredType":[],"content":"@Query(\"DELETE FROM task WHERE id = :id\")\n    fun deleteById(id: Int)","prompt":""},{"id":4060,"identifierName":"fr.jeantuffier.reminder.free.common.dao.TaskDao","requiredType":["data class Task( @PrimaryKey(autoGenerate = true) val id: Int, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"priority\") val priority: Int, @ColumnInfo(name = \"delay\") val delay: Int, @ColumnInfo(name = \"frequency\") val frequency: String, @ColumnInfo(name = \"fromTime\") val fromTime: String, @ColumnInfo(name = \"toTime\") val toTime: String, @ColumnInfo(name = \"createdAtTime\") val createdAtTime: String )"],"content":"@Insert\n    fun insert(task: Task): Long","prompt":""},{"id":4061,"identifierName":"fr.jeantuffier.reminder.free.common.dao.TaskDao","requiredType":[],"content":"@Insert\n    fun insertAll(tasks: Array<Task>)","prompt":""},{"id":4062,"identifierName":"fr.jeantuffier.reminder.free.common.dao.TaskDao","requiredType":["data class Task( @PrimaryKey(autoGenerate = true) val id: Int, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"priority\") val priority: Int, @ColumnInfo(name = \"delay\") val delay: Int, @ColumnInfo(name = \"frequency\") val frequency: String, @ColumnInfo(name = \"fromTime\") val fromTime: String, @ColumnInfo(name = \"toTime\") val toTime: String, @ColumnInfo(name = \"createdAtTime\") val createdAtTime: String )"],"content":"@Delete\n    fun delete(task: Task)","prompt":""},{"id":4063,"identifierName":"fr.jeantuffier.reminder.free.common.dao.TaskDao","requiredType":["data class Task( @PrimaryKey(autoGenerate = true) val id: Int, @ColumnInfo(name = \"title\") val title: String, @ColumnInfo(name = \"priority\") val priority: Int, @ColumnInfo(name = \"delay\") val delay: Int, @ColumnInfo(name = \"frequency\") val frequency: String, @ColumnInfo(name = \"fromTime\") val fromTime: String, @ColumnInfo(name = \"toTime\") val toTime: String, @ColumnInfo(name = \"createdAtTime\") val createdAtTime: String )"],"content":"@Update\n    fun update(task: Task)","prompt":""},{"id":4064,"identifierName":"com.waz.zclient.storage.db.history.EditHistoryDao","requiredType":[],"content":"@Query(\"SELECT * FROM EditHistory\")\n    suspend fun allHistory(): List<EditHistoryEntity>","prompt":""},{"id":4065,"identifierName":"de.dreier.mytargets.base.db.dao.SignatureDAO","requiredType":["data class Signature( @PrimaryKey(autoGenerate = true) var id: Long = 0, var name: String = \"\", /** A bitmap of the signature or null if no signature has been set. */ @ColumnInfo(typeAffinity = ColumnInfo.BLOB) var bitmap: Bitmap? = null )"],"content":"@Query(\"SELECT * FROM `Signature` WHERE `id` = :id\")\n    fun loadSignature(id: Long): Signature","prompt":""},{"id":4066,"identifierName":"de.dreier.mytargets.base.db.dao.SignatureDAO","requiredType":[],"content":"@Query(\"SELECT * FROM `Signature` WHERE `id` = :id\")\n    fun loadSignatureOrNull(id: Long): Signature?","prompt":""},{"id":4067,"identifierName":"de.dreier.mytargets.base.db.dao.SignatureDAO","requiredType":["data class Signature( @PrimaryKey(autoGenerate = true) var id: Long = 0, var name: String = \"\", /** A bitmap of the signature or null if no signature has been set. */ @ColumnInfo(typeAffinity = ColumnInfo.BLOB) var bitmap: Bitmap? = null )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertSignature(signature: Signature): Long","prompt":""},{"id":4068,"identifierName":"de.dreier.mytargets.base.db.dao.SignatureDAO","requiredType":["data class Signature( @PrimaryKey(autoGenerate = true) var id: Long = 0, var name: String = \"\", /** A bitmap of the signature or null if no signature has been set. */ @ColumnInfo(typeAffinity = ColumnInfo.BLOB) var bitmap: Bitmap? = null )"],"content":"@Update\n    fun updateSignature(signature: Signature)","prompt":""},{"id":4069,"identifierName":"de.dreier.mytargets.base.db.dao.SignatureDAO","requiredType":["data class Signature( @PrimaryKey(autoGenerate = true) var id: Long = 0, var name: String = \"\", /** A bitmap of the signature or null if no signature has been set. */ @ColumnInfo(typeAffinity = ColumnInfo.BLOB) var bitmap: Bitmap? = null )"],"content":"@Delete\n    fun deleteSignature(signature: Signature)","prompt":""},{"id":4070,"identifierName":"org.anibyl.slounik.data.db.engbel.EngBelDao","requiredType":[],"content":"@Query(\"SELECT * FROM engbel WHERE title LIKE '% ' || :word || ' %' OR title LIKE :word || ' %' OR title LIKE '% ' || :word OR title LIKE :word\")\n\tfun findInTitle(word: String): List<EngBelEntity>","prompt":""},{"id":4071,"identifierName":"org.anibyl.slounik.data.db.engbel.EngBelDao","requiredType":[],"content":"@Query(\"SELECT * FROM engbel WHERE title LIKE '% ' || :word || ' %' OR title LIKE :word || ' %' OR title LIKE '% ' || :word OR title LIKE :word OR description LIKE '% ' || :word || ' %' OR description LIKE :word || ' %' OR description LIKE '% ' || :word OR description LIKE :word\")\n\tfun findInTitleOrDescription(word: String): List<EngBelEntity>","prompt":""},{"id":4072,"identifierName":"org.anibyl.slounik.data.db.engbel.EngBelDao","requiredType":[],"content":"@RawQuery\n\tfun query(query: SupportSQLiteQuery): Int","prompt":""},{"id":4073,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Query(\"SELECT * FROM spreadsheet ORDER BY modifiedTime DESC\")\n    abstract fun allSorted(): Flowable<List<Spreadsheet>>","prompt":""},{"id":4074,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Query(\"SELECT * FROM spreadsheet WHERE id = :spreadsheetId LIMIT 1\")\n    abstract fun getSpreadsheetBy(spreadsheetId: String): Flowable<Spreadsheet>","prompt":""},{"id":4075,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Query(\"SELECT locale FROM spreadsheet WHERE id = :spreadsheetId LIMIT 1\")\n    abstract fun getLocaleBy(spreadsheetId: String): Single<String>","prompt":""},{"id":4076,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    abstract fun insertAll(vararg spreadsheets: Spreadsheet)","prompt":""},{"id":4077,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Query(\"SELECT id FROM spreadsheet WHERE name NOT IN (:names) AND id IN (:ids)\")\n    abstract fun findRecordsForUpdate(ids: List<String>, names: List<String>): List<String>","prompt":""},{"id":4078,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Query(\"SELECT id FROM spreadsheet WHERE id NOT IN (:ids)\")\n    abstract fun findRecordsForDelete(ids: List<String>): List<String>","prompt":""},{"id":4079,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Update\n    abstract fun updateSpreadsheets(vararg spreadsheets: Spreadsheet)","prompt":""},{"id":4080,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Query(\"UPDATE spreadsheet SET locale = :locale WHERE id = :spreadsheetId\")\n    abstract fun updateLocale(locale: String, spreadsheetId: String): Int","prompt":""},{"id":4081,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Query(\"DELETE FROM spreadsheet WHERE id IN (:spreadsheetId)\")\n    abstract fun deleteByIds(spreadsheetId: List<String>)","prompt":""},{"id":4082,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Query(\"DELETE FROM spreadsheet WHERE id = :spreadsheetId\")\n    abstract fun delete(spreadsheetId: String)","prompt":""},{"id":4083,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Query(\"\"\"UPDATE spreadsheet SET currentBalance = :currentBalance,\n        plannedExpense = :plannedExpense, actualExpense = :actualExpense WHERE id = :spreadsheetId\"\"\")\n    abstract fun updateBalance(currentBalance: String, plannedExpense: String, actualExpense: String, spreadsheetId: String)","prompt":""},{"id":4084,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"@Transaction\n    open fun updateData(spreadsheetList: List<Spreadsheet>) {\n        val ids = spreadsheetList.map { spreadsheet -> spreadsheet.id }\n        val names = spreadsheetList.map { spreadsheet -> spreadsheet.name }\n\n        val idsToDelete = findRecordsForDelete(ids)\n        val idsToUpdate = findRecordsForUpdate(ids, names)\n\n        deleteByIds(idsToDelete)\n        updateByIds(idsToUpdate, spreadsheetList)\n        insertAll(*spreadsheetList.toTypedArray())\n    }","prompt":""},{"id":4085,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"private fun updateByIds(ids: List<String>, spreadsheets: List<Spreadsheet>) {\n        val spreadsheetsToUpdate = ids\n                .map { entry ->\n                    spreadsheets.first { spreadsheet ->\n                        entry == spreadsheet.id\n                    }\n                }\n        updateSpreadsheets(*spreadsheetsToUpdate.toTypedArray())\n    }","prompt":""},{"id":4086,"identifierName":"io.rg.mp.persistence.dao.SpreadsheetDao","requiredType":[],"content":"open fun updateFromBalance(balance: Balance, spreadsheetId: String) {\n        updateBalance(balance.current, balance.planned, balance.actual, spreadsheetId)\n    }","prompt":""},{"id":4087,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Insert\n    fun insert(vararg items: OfflineEvent)","prompt":""},{"id":4088,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM offline_event WHERE event_guid = :guid LIMIT 1\")\n    fun getByEventGuid(guid: String): LiveData<OfflineEvent?>","prompt":""},{"id":4089,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM offline_event WHERE event_guid = :guid LIMIT 1\")\n    suspend fun getByEventGuidSuspend(guid: String): OfflineEvent?","prompt":""},{"id":4090,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM offline_event WHERE download_reference = :ref LIMIT 1\")\n    fun getByDownloadReference(ref: Long): LiveData<OfflineEvent?>","prompt":""},{"id":4091,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM offline_event WHERE download_reference = :ref LIMIT 1\")\n    fun getByDownloadReferenceSync(ref: Long): OfflineEvent?","prompt":""},{"id":4092,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Query(\"DELETE FROM offline_event WHERE download_reference = :ref\")\n    suspend fun deleteByDownloadReference(ref: Long)","prompt":""},{"id":4093,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM offline_event\")\n    fun getAll(): LiveData<List<OfflineEvent>>","prompt":""},{"id":4094,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Query(\"SELECT * FROM offline_event\")\n    fun getAllSync(): List<OfflineEvent>","prompt":""},{"id":4095,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Query(\"SELECT download_reference FROM offline_event\")\n    suspend fun getAllDownloadReferences(): List<Long>","prompt":""},{"id":4096,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Query(\"DELETE FROM offline_event WHERE id=:id\")\n    fun deleteById(id: Long)","prompt":""},{"id":4097,"identifierName":"de.nicidienase.chaosflix.common.userdata.entities.download.OfflineEventDao","requiredType":[],"content":"@Query(\"SELECT o.event_guid,o.recording_id,o.download_reference,o.local_path,e.title,e.subtitle,e.length,e.thumbUrl FROM offline_event o JOIN event e WHERE o.event_guid = e.guid\")\n    fun getOfflineEventsDisplay(): LiveData<List<OfflineEventView>>","prompt":""},{"id":4098,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Query(\"SELECT filename, full_path, parent_path, last_modified, date_taken, size, type, video_duration, is_favorite, deleted_ts, media_store_id FROM media WHERE deleted_ts = 0 AND parent_path = :path COLLATE NOCASE\")\n    fun getMediaFromPath(path: String): List<Medium>","prompt":""},{"id":4099,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Query(\"SELECT filename, full_path, parent_path, last_modified, date_taken, size, type, video_duration, is_favorite, deleted_ts, media_store_id FROM media WHERE deleted_ts = 0 AND is_favorite = 1\")\n    fun getFavorites(): List<Medium>","prompt":""},{"id":4100,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"SELECT COUNT(filename) FROM media WHERE deleted_ts = 0 AND is_favorite = 1\")\n    fun getFavoritesCount(): Long","prompt":""},{"id":4101,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Query(\"SELECT filename, full_path, parent_path, last_modified, date_taken, size, type, video_duration, is_favorite, deleted_ts, media_store_id FROM media WHERE deleted_ts != 0\")\n    fun getDeletedMedia(): List<Medium>","prompt":""},{"id":4102,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"SELECT COUNT(filename) FROM media WHERE deleted_ts != 0\")\n    fun getDeletedMediaCount(): Long","prompt":""},{"id":4103,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Query(\"SELECT filename, full_path, parent_path, last_modified, date_taken, size, type, video_duration, is_favorite, deleted_ts, media_store_id FROM media WHERE deleted_ts < :timestmap AND deleted_ts != 0\")\n    fun getOldRecycleBinItems(timestmap: Long): List<Medium>","prompt":""},{"id":4104,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Insert(onConflict = REPLACE)\n    fun insert(medium: Medium)","prompt":""},{"id":4105,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertAll(media: List<Medium>)","prompt":""},{"id":4106,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Delete\n    fun deleteMedia(vararg medium: Medium)","prompt":""},{"id":4107,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"DELETE FROM media WHERE full_path = :path COLLATE NOCASE\")\n    fun deleteMediumPath(path: String)","prompt":""},{"id":4108,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"UPDATE OR REPLACE media SET filename = :newFilename, full_path = :newFullPath, parent_path = :newParentPath WHERE full_path = :oldPath COLLATE NOCASE\")\n    fun updateMedium(oldPath: String, newParentPath: String, newFilename: String, newFullPath: String)","prompt":""},{"id":4109,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"UPDATE OR REPLACE media SET full_path = :newPath, deleted_ts = :deletedTS WHERE full_path = :oldPath COLLATE NOCASE\")\n    fun updateDeleted(newPath: String, deletedTS: Long, oldPath: String)","prompt":""},{"id":4110,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"UPDATE media SET date_taken = :dateTaken WHERE full_path = :path COLLATE NOCASE\")\n    fun updateFavoriteDateTaken(path: String, dateTaken: Long)","prompt":""},{"id":4111,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"UPDATE media SET is_favorite = :isFavorite WHERE full_path = :path COLLATE NOCASE\")\n    fun updateFavorite(path: String, isFavorite: Boolean)","prompt":""},{"id":4112,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"UPDATE media SET is_favorite = 0\")\n    fun clearFavorites()","prompt":""},{"id":4113,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"DELETE FROM media WHERE deleted_ts != 0\")\n    fun clearRecycleBin()","prompt":""},{"id":4114,"identifierName":"com.waz.zclient.storage.db.assets.DownloadAssetsDao","requiredType":[],"content":"@Query(\"SELECT * FROM DownloadAssets\")\n    suspend fun allDownloadAssets(): List<DownloadAssetsEntity>","prompt":""},{"id":4115,"identifierName":"com.waz.zclient.storage.db.assets.DownloadAssetsDao","requiredType":[],"content":"@Insert\n    suspend fun insertDownloadAsset(downloadAsset: DownloadAssetsEntity)","prompt":""},{"id":4116,"identifierName":"com.codebutler.retrograde.metadata.ovgdb.db.dao.SystemDao","requiredType":[],"content":"@Query(\"SELECT * FROM systems WHERE systemID = :systemId\")\n    fun findById(systemId: Int): Maybe<OvgdbSystem>","prompt":""},{"id":4117,"identifierName":"androidx.paging.integration.testapp.room.RemoteKeyDao","requiredType":[],"content":"/**\n     * Insert a RemoteKey\n     *\n     * @param remoteKey\n     */\n    @Insert(onConflict = REPLACE)\n    suspend fun insert(remoteKey: RemoteKey)","prompt":""},{"id":4118,"identifierName":"androidx.paging.integration.testapp.room.RemoteKeyDao","requiredType":[],"content":"/**\n     * Clears the RemoteKey\n     */\n    @Query(\"DELETE FROM remote_key\")\n    fun delete()","prompt":""},{"id":4119,"identifierName":"androidx.paging.integration.testapp.room.RemoteKeyDao","requiredType":[],"content":"/**\n     * @return Latest persisted RemoteKey\n     */\n    @Query(\"SELECT * FROM remote_key LIMIT 1\")\n    suspend fun queryRemoteKey(): RemoteKey?","prompt":""},{"id":4120,"identifierName":"com.talentica.androidkotlin.db.dao.CommentDao","requiredType":[],"content":"@Query(\"SELECT * FROM comments where productId = :productId\")\n    fun loadComments(productId: Int): LiveData<List<CommentEntity?>?>?","prompt":""},{"id":4121,"identifierName":"com.talentica.androidkotlin.db.dao.CommentDao","requiredType":[],"content":"@Query(\"SELECT * FROM comments where productId = :productId\")\n    fun loadCommentsSync(productId: Int): List<CommentEntity?>?","prompt":""},{"id":4122,"identifierName":"com.talentica.androidkotlin.db.dao.CommentDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(products: List<CommentEntity>?)","prompt":""},{"id":4123,"identifierName":"us.mikeandwan.photos.database.ActiveIdDao","requiredType":[],"content":"@Query(\"SELECT id FROM active_id WHERE type = :type\")\n    fun getActiveId(type: ActiveIdType): Flow<Int>","prompt":""},{"id":4124,"identifierName":"us.mikeandwan.photos.database.ActiveIdDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun setActiveId(activeId: ActiveId)","prompt":""},{"id":4125,"identifierName":"us.mikeandwan.photos.database.ActiveIdDao","requiredType":[],"content":"@Query(\"DELETE FROM active_id WHERE type = :type\")\n    suspend fun deleteActiveId(type: ActiveIdType)","prompt":""},{"id":4126,"identifierName":"com.github.jrgonzalezg.openlibrary.features.books.data.database.BookDao","requiredType":[],"content":"@Query(\"SELECT * FROM books WHERE key = :key\")\n  fun getByKey(key: String): Book?","prompt":""},{"id":4127,"identifierName":"com.github.jrgonzalezg.openlibrary.features.books.data.database.BookDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertOrUpdate(book: BookEntity)","prompt":""},{"id":4128,"identifierName":"com.github.jrgonzalezg.openlibrary.features.books.data.database.BookDao","requiredType":["data class BookSummary(val key: String, val title: String, val covers: List<Int>?)"],"content":"@Query(\"SELECT * FROM book_summaries\")\n  fun getAll(): List<BookSummary>","prompt":""},{"id":4129,"identifierName":"com.github.jrgonzalezg.openlibrary.features.books.data.database.BookDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertOrUpdateAll(bookSummaries: List<BookSummaryEntity>)","prompt":""},{"id":4130,"identifierName":"org.jraf.android.cinetoday.database.MovieDao","requiredType":[],"content":"@Insert\n    fun insert(movies: List<Movie>)","prompt":""},{"id":4131,"identifierName":"org.jraf.android.cinetoday.database.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM Movie ORDER BY releaseDate DESC\")\n    fun allMoviesLive(): LiveData<Array<Movie>>","prompt":""},{"id":4132,"identifierName":"org.jraf.android.cinetoday.database.MovieDao","requiredType":["data class Movie( @PrimaryKey override var id: String, var originalTitle: String, var localTitle: String, var directors: String?, var actors: String?, @field:TypeConverters(Converters.DateConverter::class) var releaseDate: Date?, var durationSeconds: Int?, @field:TypeConverters(Converters.ListConverter::class) var genres: Array<String>, var posterUri: String?, var trailerUri: String?, @Deprecated(\"No longer used\") var webUri: String, var synopsis: String?, var isNew: Boolean, @field:ColumnInfo(name = \"color\") var colorDark: Int?, var colorLight: Int?, )"],"content":"@Query(\"SELECT * FROM Movie ORDER BY releaseDate DESC\")\n    fun allMovies(): Array<Movie>","prompt":""},{"id":4133,"identifierName":"org.jraf.android.cinetoday.database.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM Movie where id = :id\")\n    fun movieById(id: String): Movie?","prompt":""},{"id":4134,"identifierName":"org.jraf.android.cinetoday.database.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM Movie where id = :id\")\n    fun movieByIdLive(id: String): LiveData<Movie?>","prompt":""},{"id":4135,"identifierName":"org.jraf.android.cinetoday.database.MovieDao","requiredType":[],"content":"@Query(\"DELETE FROM Movie\")\n    fun deleteAll()","prompt":""},{"id":4136,"identifierName":"org.jraf.android.cinetoday.database.MovieDao","requiredType":[],"content":"@Query(\n        \"DELETE FROM Movie WHERE\"\n                + \" ( SELECT COUNT(*) FROM showtime WHERE showtime.movieId = movie.id ) \"\n                + \" = 0\"\n    )\n    fun deleteWithNoShowtimes()","prompt":""},{"id":4137,"identifierName":"org.jraf.android.cinetoday.database.MovieDao","requiredType":[],"content":"@Query(\"UPDATE Movie SET color = :colorDark, colorLight = :colorLight WHERE id = :id\")\n    fun updateColor(id: String, colorDark: Int, colorLight: Int)","prompt":""},{"id":4138,"identifierName":"com.nononsenseapps.feeder.db.room.SyncRemoteDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(syncRemote: SyncRemote): Long","prompt":""},{"id":4139,"identifierName":"com.nononsenseapps.feeder.db.room.SyncRemoteDao","requiredType":[],"content":"@Update\n    suspend fun update(syncRemote: SyncRemote): Int","prompt":""},{"id":4140,"identifierName":"com.nononsenseapps.feeder.db.room.SyncRemoteDao","requiredType":[],"content":"@Delete\n    suspend fun delete(syncRemote: SyncRemote): Int","prompt":""},{"id":4141,"identifierName":"com.nononsenseapps.feeder.db.room.SyncRemoteDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            SELECT *\n            FROM sync_remote\n            WHERE id IS 1\n        \"\"\"\n    )\n    suspend fun getSyncRemote(): SyncRemote?","prompt":""},{"id":4142,"identifierName":"com.nononsenseapps.feeder.db.room.SyncRemoteDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            SELECT *\n            FROM sync_remote\n            WHERE id IS 1\n        \"\"\"\n    )\n    fun getSyncRemoteFlow(): Flow<SyncRemote?>","prompt":""},{"id":4143,"identifierName":"com.nononsenseapps.feeder.db.room.SyncRemoteDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            UPDATE sync_remote\n            SET latest_message_timestamp = :timestamp\n            WHERE id IS 1 AND latest_message_timestamp < :timestamp\n        \"\"\"\n    )\n    suspend fun updateLastMessageTimestamp(timestamp: Instant): Int","prompt":""},{"id":4144,"identifierName":"com.nononsenseapps.feeder.db.room.SyncRemoteDao","requiredType":[],"content":"@Query(\n        \"\"\"\n            DELETE FROM sync_remote WHERE id IS 1\n        \"\"\"\n    )\n    suspend fun deleteSyncRemote(): Int","prompt":""},{"id":4145,"identifierName":"com.nononsenseapps.feeder.db.room.SyncRemoteDao","requiredType":[],"content":"@Transaction\n    suspend fun replaceWithDefaultSyncRemote() {\n        deleteSyncRemote()\n        insert(\n            SyncRemote(\n                id = 1L,\n                deviceName = Build.PRODUCT.ifBlank { Build.MODEL.ifBlank { Build.BRAND } },\n                secretKey = AesCbcWithIntegrity.generateKey().toString(),\n            )\n        )\n    }","prompt":""},{"id":4146,"identifierName":"com.puj.admincenter.repository.users.UserRepository","requiredType":[],"content":"@Query(\"\"\"\n        SELECT user\n        FROM User user\n        WHERE user.username = :username\n        AND user.password = :password\n    \"\"\")\n    fun findUserByUserAndPassword(username: String,\n                                  password: String): User?","prompt":""},{"id":4147,"identifierName":"com.puj.admincenter.repository.users.UserRepository","requiredType":[],"content":"@Query(\"\"\"\n        SELECT COUNT(user) > 0\n        FROM User user\n        WHERE user.email = :email\n    \"\"\")\n    fun existsByEmail(@Param(\"email\") email: String): Boolean","prompt":""},{"id":4148,"identifierName":"com.puj.admincenter.repository.users.UserRepository","requiredType":[],"content":"@Transactional\n    @Modifying\n    @Query(\"\"\"\n        DELETE\n        FROM User user\n        WHERE user.id = :id\n    \"\"\")\n    fun deleteUserById(@Param(\"id\") id: Int): Int","prompt":""},{"id":4149,"identifierName":"org.tvheadend.data.dao.TimerRecordingDao","requiredType":[],"content":"@Transaction\n    @Query(RECORDING_BASE_QUERY +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" ORDER BY rec.start, rec.title ASC\")\n    fun loadAllRecordings(): LiveData<List<TimerRecordingEntity>>","prompt":""},{"id":4150,"identifierName":"org.tvheadend.data.dao.TimerRecordingDao","requiredType":[],"content":"@Transaction\n    @Query(RECORDING_BASE_QUERY +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND rec.id = :id\")\n    fun loadRecordingById(id: String): LiveData<TimerRecordingEntity>","prompt":""},{"id":4151,"identifierName":"org.tvheadend.data.dao.TimerRecordingDao","requiredType":[],"content":"@Transaction\n    @Query(RECORDING_BASE_QUERY +\n            \" WHERE $CONNECTION_IS_ACTIVE\" +\n            \" AND rec.id = :id\")\n    fun loadRecordingByIdSync(id: String): TimerRecordingEntity?","prompt":""},{"id":4152,"identifierName":"org.tvheadend.data.dao.TimerRecordingDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(recording: TimerRecordingEntity)","prompt":""},{"id":4153,"identifierName":"org.tvheadend.data.dao.TimerRecordingDao","requiredType":[],"content":"@Update\n    fun update(recording: TimerRecordingEntity)","prompt":""},{"id":4154,"identifierName":"org.tvheadend.data.dao.TimerRecordingDao","requiredType":[],"content":"@Delete\n    fun delete(recording: TimerRecordingEntity)","prompt":""},{"id":4155,"identifierName":"org.tvheadend.data.dao.TimerRecordingDao","requiredType":[],"content":"@Query(\"DELETE FROM timer_recordings \" +\n            \" WHERE connection_id IN (SELECT id FROM connections WHERE active = 1) \" +\n            \" AND id = :id\")\n    fun deleteById(id: String)","prompt":""},{"id":4156,"identifierName":"org.tvheadend.data.dao.TimerRecordingDao","requiredType":[],"content":"@Query(\"DELETE FROM timer_recordings\")\n    fun deleteAll()","prompt":""},{"id":4157,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM transactions\")\n    fun getTransactions(): List<TransactionEntity>","prompt":""},{"id":4158,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM transactions\")\n    fun getTransactionsLive(): LiveData<List<TransactionEntity>>","prompt":""},{"id":4159,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT * FROM transactions WHERE (\\\"to\\\" = :address COLLATE NOCASE OR \\\"extraIncomingAffectedAddress\\\" = :address COLLATE NOCASE ) AND chain=:chain ORDER BY creationEpochSecond DESC\")\n    fun getIncomingTransactionsForAddressOnChainOrdered(address: Address, chain: BigInteger): LiveData<List<TransactionEntity>>","prompt":""},{"id":4160,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT * FROM transactions WHERE (\\\"to\\\" = :address COLLATE NOCASE OR \\\"extraIncomingAffectedAddress\\\" = :address COLLATE NOCASE )AND chain=:chain ORDER BY creationEpochSecond DESC\")\n    fun getIncomingPaged(address: Address, chain: BigInteger): DataSource.Factory<Int, TransactionEntity>","prompt":""},{"id":4161,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT * FROM transactions WHERE \\\"from\\\" = :address COLLATE NOCASE AND chain=:chain ORDER BY nonce DESC\")\n    fun getOutgoingPaged(address: Address, chain: BigInteger): DataSource.Factory<Int, TransactionEntity>","prompt":""},{"id":4162,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT * FROM transactions WHERE \\\"from\\\" = :address COLLATE NOCASE  AND chain=:chain ORDER BY nonce DESC\")\n    fun getOutgoingTransactionsForAddressOnChainOrdered(address: Address, chain: BigInteger): LiveData<List<TransactionEntity>>","prompt":""},{"id":4163,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM transactions WHERE \\\"to\\\" COLLATE NOCASE IN(:addresses) OR  \\\"from\\\" COLLATE NOCASE IN(:addresses)\")\n    fun getAllTransactionsForAddressLive(addresses: List<Address>): LiveData<List<TransactionEntity>>","prompt":""},{"id":4164,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM transactions WHERE \\\"to\\\" COLLATE NOCASE IN(:addresses) OR  \\\"from\\\" COLLATE NOCASE IN(:addresses)\")\n    fun getAllTransactionsForAddress(addresses: List<Address>): List<TransactionEntity>","prompt":""},{"id":4165,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT EXISTS(SELECT * FROM transactions WHERE (\\\"to\\\" = :address COLLATE NOCASE OR \\\"extraIncomingAffectedAddress\\\" = :address COLLATE NOCASE )AND chain=:chain)\")\n    fun isTransactionForAddressOnChainExisting(address: Address, chain: BigInteger) : Boolean","prompt":""},{"id":4166,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM transactions\")\n    fun getAll(): List<TransactionEntity>","prompt":""},{"id":4167,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun upsert(transactionEntity: TransactionEntity)","prompt":""},{"id":4168,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun upsert(transactionEntities: List<TransactionEntity>)","prompt":""},{"id":4169,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT nonce from transactions WHERE \\\"from\\\" = :address COLLATE NOCASE AND chain=:chain\")\n    fun getNonceForAddressLive(address: Address, chain: BigInteger): LiveData<List<BigInteger>>","prompt":""},{"id":4170,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT nonce from transactions WHERE \\\"from\\\" = :address COLLATE NOCASE AND chain=:chain\")\n    fun getNonceForAddress(address: Address, chain: BigInteger): List<BigInteger>","prompt":""},{"id":4171,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"SELECT * from transactions WHERE r IS NOT NULL AND relayed=\\\"\\\" AND isPending=1\")\n    fun getAllToRelayLive(): LiveData<List<TransactionEntity>>","prompt":""},{"id":4172,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"SELECT * from transactions WHERE isPending=1\")\n    suspend fun getAllPending(): List<TransactionEntity>","prompt":""},{"id":4173,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"SELECT * from transactions WHERE hash = :hash COLLATE NOCASE\")\n    fun getByHash(hash: String): TransactionEntity?","prompt":""},{"id":4174,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"SELECT * from transactions WHERE hash = :hash COLLATE NOCASE\")\n    fun getByHashLive(hash: String): LiveData<TransactionEntity>","prompt":""},{"id":4175,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"DELETE FROM transactions WHERE hash = :hash COLLATE NOCASE\")\n    fun deleteByHash(hash: String)","prompt":""},{"id":4176,"identifierName":"org.walleth.data.transactions.TransactionDAO","requiredType":[],"content":"@Query(\"DELETE FROM transactions\")\n    fun deleteAll()","prompt":""},{"id":4177,"identifierName":"org.fossasia.openevent.general.order.OrderDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertOrders(orders: List<Order>)","prompt":""},{"id":4178,"identifierName":"org.fossasia.openevent.general.order.OrderDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertOrder(order: Order)","prompt":""},{"id":4179,"identifierName":"org.fossasia.openevent.general.order.OrderDao","requiredType":[],"content":"@Query(\"SELECT * FROM `order`\")\n    fun getAllOrders(): Single<List<Order>>","prompt":""},{"id":4180,"identifierName":"org.fossasia.openevent.general.order.OrderDao","requiredType":[],"content":"@Query(\"DELETE FROM `order`\")\n    fun deleteAllOrders()","prompt":""},{"id":4181,"identifierName":"org.fossasia.openevent.general.order.OrderDao","requiredType":[],"content":"@Query(\"SELECT * FROM `order` WHERE id = :orderId\")\n    fun getOrderById(orderId: Long): Single<Order>","prompt":""},{"id":4182,"identifierName":"com.orgzly.android.db.dao.NoteViewDao","requiredType":["data class NoteView( @Embedded val note: Note, @ColumnInfo(name = \"inherited_tags\") val inheritedTags: String? = null, @ColumnInfo(name = \"scheduled_range_string\") val scheduledRangeString : String? = null, @ColumnInfo(name = \"scheduled_time_string\") val scheduledTimeString : String? = null, @ColumnInfo(name = \"scheduled_time_end_string\") val scheduledTimeEndString : String? = null, @ColumnInfo(name = \"scheduled_time_timestamp\") val scheduledTimeTimestamp : Long? = null, @ColumnInfo(name = \"scheduled_time_start_of_day\") val scheduledTimeStartOfDay : Long? = null, @ColumnInfo(name = \"scheduled_time_hour\") val scheduledTimeHour : Int? = null, @ColumnInfo(name = \"deadline_range_string\") val deadlineRangeString : String? = null, @ColumnInfo(name = \"deadline_time_string\") val deadlineTimeString : String? = null, @ColumnInfo(name = \"deadline_time_end_string\") val deadlineTimeEndString : String? = null, @ColumnInfo(name = \"deadline_time_timestamp\") val deadlineTimeTimestamp : Long? = null, @ColumnInfo(name = \"deadline_time_start_of_day\") val deadlineTimeStartOfDay : Long? = null, @ColumnInfo(name = \"deadline_time_hour\") val deadlineTimeHour : Int? = null, @ColumnInfo(name = \"closed_range_string\") val closedRangeString : String? = null, @ColumnInfo(name = \"closed_time_string\") val closedTimeString : String? = null, @ColumnInfo(name = \"closed_time_end_string\") val closedTimeEndString : String? = null, @ColumnInfo(name = \"closed_time_timestamp\") val closedTimeTimestamp : Long? = null, @ColumnInfo(name = \"closed_time_start_of_day\") val closedTimeStartOfDay : Long? = null, @ColumnInfo(name = \"closed_time_hour\") val closedTimeHour : Int? = null, @ColumnInfo(name = \"clock_range_string\") val clockRangeString : String? = null, @ColumnInfo(name = \"clock_time_string\") val clockTimeString : String? = null, @ColumnInfo(name = \"clock_time_end_string\") val clockTimeEndString : String? = null, @ColumnInfo(name = \"event_string\") val eventString : String? = null, @ColumnInfo(name = \"event_timestamp\") val eventTimestamp: Long? = null, @ColumnInfo(name = \"event_start_of_day\") val eventStartOfDay : Long? = null, @ColumnInfo(name = \"event_hour\") val eventHour : Int? = null, @ColumnInfo(name = \"book_name\") val bookName: String )"],"content":"@Query(\"$QUERY WHERE notes.level > 0 GROUP BY notes.id\")\n    abstract fun getAll(): List<NoteView>","prompt":""},{"id":4183,"identifierName":"com.orgzly.android.db.dao.NoteViewDao","requiredType":[],"content":"@Query(\"\"\"\n        $QUERY\n        WHERE notes.book_id = :bookId\n        AND notes.level > 0\n        AND notes.is_cut = 0\n        AND notes.folded_under_id = 0\n        GROUP BY notes.id\n        ORDER BY notes.lft\n    \"\"\")\n    abstract fun getVisibleLiveData(bookId: Long): LiveData<List<NoteView>>","prompt":""},{"id":4184,"identifierName":"com.orgzly.android.db.dao.NoteViewDao","requiredType":[],"content":"@Query(\"\"\"\n        $QUERY\n        WHERE notes.book_id = :bookId\n        AND notes.level > 0\n        AND notes.is_cut = 0\n        AND notes.folded_under_id = 0\n        AND :lft <= notes.lft\n        AND notes.rgt <= :rgt\n        GROUP BY notes.id\n        ORDER BY notes.lft\n    \"\"\")\n    abstract fun getVisibleLiveData(bookId: Long, lft: Long, rgt: Long): LiveData<List<NoteView>>","prompt":""},{"id":4185,"identifierName":"com.orgzly.android.db.dao.NoteViewDao","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery(observedEntities = [ Note::class, Book::class ])\n    abstract fun runQueryLiveData(query: SupportSQLiteQuery): LiveData<List<NoteView>>","prompt":""},{"id":4186,"identifierName":"com.orgzly.android.db.dao.NoteViewDao","requiredType":["data class SupportSQLiteQuerynull","data class NoteView( @Embedded val note: Note, @ColumnInfo(name = \"inherited_tags\") val inheritedTags: String? = null, @ColumnInfo(name = \"scheduled_range_string\") val scheduledRangeString : String? = null, @ColumnInfo(name = \"scheduled_time_string\") val scheduledTimeString : String? = null, @ColumnInfo(name = \"scheduled_time_end_string\") val scheduledTimeEndString : String? = null, @ColumnInfo(name = \"scheduled_time_timestamp\") val scheduledTimeTimestamp : Long? = null, @ColumnInfo(name = \"scheduled_time_start_of_day\") val scheduledTimeStartOfDay : Long? = null, @ColumnInfo(name = \"scheduled_time_hour\") val scheduledTimeHour : Int? = null, @ColumnInfo(name = \"deadline_range_string\") val deadlineRangeString : String? = null, @ColumnInfo(name = \"deadline_time_string\") val deadlineTimeString : String? = null, @ColumnInfo(name = \"deadline_time_end_string\") val deadlineTimeEndString : String? = null, @ColumnInfo(name = \"deadline_time_timestamp\") val deadlineTimeTimestamp : Long? = null, @ColumnInfo(name = \"deadline_time_start_of_day\") val deadlineTimeStartOfDay : Long? = null, @ColumnInfo(name = \"deadline_time_hour\") val deadlineTimeHour : Int? = null, @ColumnInfo(name = \"closed_range_string\") val closedRangeString : String? = null, @ColumnInfo(name = \"closed_time_string\") val closedTimeString : String? = null, @ColumnInfo(name = \"closed_time_end_string\") val closedTimeEndString : String? = null, @ColumnInfo(name = \"closed_time_timestamp\") val closedTimeTimestamp : Long? = null, @ColumnInfo(name = \"closed_time_start_of_day\") val closedTimeStartOfDay : Long? = null, @ColumnInfo(name = \"closed_time_hour\") val closedTimeHour : Int? = null, @ColumnInfo(name = \"clock_range_string\") val clockRangeString : String? = null, @ColumnInfo(name = \"clock_time_string\") val clockTimeString : String? = null, @ColumnInfo(name = \"clock_time_end_string\") val clockTimeEndString : String? = null, @ColumnInfo(name = \"event_string\") val eventString : String? = null, @ColumnInfo(name = \"event_timestamp\") val eventTimestamp: Long? = null, @ColumnInfo(name = \"event_start_of_day\") val eventStartOfDay : Long? = null, @ColumnInfo(name = \"event_hour\") val eventHour : Int? = null, @ColumnInfo(name = \"book_name\") val bookName: String )"],"content":"@RawQuery(observedEntities = [ Note::class, Book::class ])\n    abstract fun runQuery(query: SupportSQLiteQuery): List<NoteView>","prompt":""},{"id":4187,"identifierName":"com.orgzly.android.db.dao.NoteViewDao","requiredType":[],"content":"@Query(\"$QUERY WHERE notes.id = :id GROUP BY notes.id\")\n    abstract fun get(id: Long): NoteView?","prompt":""},{"id":4188,"identifierName":"com.orgzly.android.db.dao.NoteViewDao","requiredType":[],"content":"@Query(\"$QUERY WHERE notes.title = :title GROUP BY notes.id ORDER BY lft DESC LIMIT 1\")\n    abstract fun getLast(title: String): NoteView?","prompt":""},{"id":4189,"identifierName":"com.orgzly.android.db.dao.NoteViewDao","requiredType":["data class NoteView( @Embedded val note: Note, @ColumnInfo(name = \"inherited_tags\") val inheritedTags: String? = null, @ColumnInfo(name = \"scheduled_range_string\") val scheduledRangeString : String? = null, @ColumnInfo(name = \"scheduled_time_string\") val scheduledTimeString : String? = null, @ColumnInfo(name = \"scheduled_time_end_string\") val scheduledTimeEndString : String? = null, @ColumnInfo(name = \"scheduled_time_timestamp\") val scheduledTimeTimestamp : Long? = null, @ColumnInfo(name = \"scheduled_time_start_of_day\") val scheduledTimeStartOfDay : Long? = null, @ColumnInfo(name = \"scheduled_time_hour\") val scheduledTimeHour : Int? = null, @ColumnInfo(name = \"deadline_range_string\") val deadlineRangeString : String? = null, @ColumnInfo(name = \"deadline_time_string\") val deadlineTimeString : String? = null, @ColumnInfo(name = \"deadline_time_end_string\") val deadlineTimeEndString : String? = null, @ColumnInfo(name = \"deadline_time_timestamp\") val deadlineTimeTimestamp : Long? = null, @ColumnInfo(name = \"deadline_time_start_of_day\") val deadlineTimeStartOfDay : Long? = null, @ColumnInfo(name = \"deadline_time_hour\") val deadlineTimeHour : Int? = null, @ColumnInfo(name = \"closed_range_string\") val closedRangeString : String? = null, @ColumnInfo(name = \"closed_time_string\") val closedTimeString : String? = null, @ColumnInfo(name = \"closed_time_end_string\") val closedTimeEndString : String? = null, @ColumnInfo(name = \"closed_time_timestamp\") val closedTimeTimestamp : Long? = null, @ColumnInfo(name = \"closed_time_start_of_day\") val closedTimeStartOfDay : Long? = null, @ColumnInfo(name = \"closed_time_hour\") val closedTimeHour : Int? = null, @ColumnInfo(name = \"clock_range_string\") val clockRangeString : String? = null, @ColumnInfo(name = \"clock_time_string\") val clockTimeString : String? = null, @ColumnInfo(name = \"clock_time_end_string\") val clockTimeEndString : String? = null, @ColumnInfo(name = \"event_string\") val eventString : String? = null, @ColumnInfo(name = \"event_timestamp\") val eventTimestamp: Long? = null, @ColumnInfo(name = \"event_start_of_day\") val eventStartOfDay : Long? = null, @ColumnInfo(name = \"event_hour\") val eventHour : Int? = null, @ColumnInfo(name = \"book_name\") val bookName: String )"],"content":"@Query(\"$QUERY WHERE book_name = :bookName AND notes.level > 0 AND notes.is_cut = 0 GROUP BY notes.id ORDER BY notes.lft\")\n    abstract fun getBookNotes(bookName: String): List<NoteView>","prompt":""},{"id":4190,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@After\n    fun tearDown() {\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n        assertTrue(countingTaskExecutorRule.isIdle)\n    }","prompt":""},{"id":4191,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun initialLoad_empty() = setupAndRun { db ->\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.refresh()\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).isEmpty()\n    }","prompt":""},{"id":4192,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun initialLoad() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.refresh()\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n    }","prompt":""},{"id":4193,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun simpleAppend() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.append(key = 15)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(15, 20)\n        )\n    }","prompt":""},{"id":4194,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun simplePrepend() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.prepend(key = 20)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(15, 20)\n        )\n    }","prompt":""},{"id":4195,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun initialLoad_invalidationTracker_isRegistered() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.refresh()\n        // run loadSingle to register InvalidationTracker\n        single.await()\n\n        assertTrue(pagingSource.observer.privateRegisteredState().get())\n    }","prompt":""},{"id":4196,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun nonInitialLoad_invalidationTracker_isRegistered() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.prepend(key = 20)\n        // run loadSingle to register InvalidationTracker\n        single.await()\n\n        assertTrue(pagingSource.observer.privateRegisteredState().get())\n    }","prompt":""},{"id":4197,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun refresh_singleImmediatelyReturn() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.refresh()\n\n        var observer = single.test()\n        observer.assertNotComplete()\n\n        // let room complete its tasks\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n\n        val result = observer.values().first() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n        observer.assertComplete()\n        observer.assertNoErrors()\n        observer.dispose()\n    }","prompt":""},{"id":4198,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun append_singleImmediatelyReturn() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.append(key = 10)\n\n        var observer = single.test()\n        observer.assertNotComplete()\n\n        // let room complete its tasks\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n\n        val result = observer.values().first() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(10, 15)\n        )\n        observer.assertComplete()\n        observer.assertNoErrors()\n        observer.dispose()\n    }","prompt":""},{"id":4199,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun prepend_singleImmediatelyReturn() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.prepend(key = 15)\n\n        var observer = single.test()\n        observer.assertNotComplete()\n\n        // let room complete its tasks\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n\n        val result = observer.values().first() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(10, 15)\n        )\n        observer.assertComplete()\n        observer.assertNoErrors()\n        observer.dispose()\n    }","prompt":""},{"id":4200,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun dbUpdate_invalidatesPagingSource() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.append(key = 50)\n\n        // trigger load to register observer\n        single.await()\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n\n        // make sure observer is registered and pagingSource is still valid at this point\n        assertTrue(pagingSource.observer.privateRegisteredState().get())\n        assertFalse(pagingSource.invalid)\n\n        // this should cause refreshVersionsSync to invalidate pagingSource\n        db.dao.addItem(TestItem(113))\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n\n        assertTrue(pagingSource.invalid)\n\n        val single2 = pagingSource.append(key = 55)\n        val result = single2.await()\n        assertThat(result).isInstanceOf(LoadResult.Invalid::class.java)\n    }","prompt":""},{"id":4201,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun append_returnsInvalid() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.append(key = 50)\n\n        // this should cause load to return LoadResult.Invalid\n        pagingSource.invalidate()\n        assertTrue(pagingSource.invalid)\n\n        // trigger load\n        var result = single.await()\n\n        // let room complete its tasks\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n        assertThat(result).isInstanceOf(LoadResult.Invalid::class.java)\n    }","prompt":""},{"id":4202,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun prepend_returnsInvalid() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.prepend(key = 50)\n\n        // this should cause load to return LoadResult.Invalid\n        pagingSource.invalidate()\n        assertTrue(pagingSource.invalid)\n\n        // trigger load\n        var observer = single.test()\n\n        // let room complete its tasks\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n        val result = observer.values().first()\n        assertThat(result).isInstanceOf(LoadResult.Invalid::class.java)\n        observer.dispose()\n    }","prompt":""},{"id":4203,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun refresh_consecutively() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        val single = pagingSource.refresh()\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n\n        val pagingSource2 = LimitOffsetRxPagingSourceImpl(db)\n        val single2 = pagingSource2.refresh()\n        val result2 = single2.await() as LoadResult.Page\n        assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n    }","prompt":""},{"id":4204,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun append_consecutively() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n\n        val single = pagingSource.append(key = 15)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(15, 20)\n        )\n\n        val single2 = pagingSource.append(key = 40)\n        val result2 = single2.await() as LoadResult.Page\n        assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(40, 45)\n        )\n\n        val single3 = pagingSource.append(key = 45) // sequential append\n        val result3 = single3.await() as LoadResult.Page\n        assertThat(result3.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(45, 50)\n        )\n    }","prompt":""},{"id":4205,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun prepend_consecutively() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n\n        val single = pagingSource.prepend(key = 15)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(10, 15)\n        )\n\n        val single2 = pagingSource.prepend(key = 40)\n        val result2 = single2.await() as LoadResult.Page\n        assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(35, 40)\n        )\n\n        val single3 = pagingSource.prepend(key = 45) // sequential prepend\n        val result3 = single3.await() as LoadResult.Page\n        assertThat(result3.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(40, 45)\n        )\n    }","prompt":""},{"id":4206,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun refreshAgain_afterDispose() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n\n        var isDisposed = false\n        val single = pagingSource.refresh()\n            // dispose right after subscription\n            .doOnSubscribe { disposable -> disposable.dispose() }\n            .doOnDispose { isDisposed = true }\n            .doOnSuccess { assertWithMessage(\"The single should not succeed\").fail() }\n            .doOnError { assertWithMessage(\"The single should not error out\").fail() }\n\n        assertFailsWith<AssertionError> { withTestTimeout(2) { single.await() } }\n        assertTrue(isDisposed)\n        assertFalse(pagingSource.invalid)\n\n        // using same paging source\n        val single2 = pagingSource.refresh()\n        val result2 = single2.await() as LoadResult.Page\n        assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n    }","prompt":""},{"id":4207,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun appendAgain_afterDispose() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n\n        var isDisposed = false\n        val single = pagingSource.append(key = 15)\n            // dispose right after subscription\n            .doOnSubscribe { disposable -> disposable.dispose() }\n            .doOnDispose { isDisposed = true }\n            .doOnSuccess { assertWithMessage(\"The single should not succeed\").fail() }\n            .doOnError { assertWithMessage(\"The single should not error out\").fail() }\n\n        assertFailsWith<AssertionError> { withTestTimeout(2) { single.await() } }\n        assertTrue(isDisposed)\n        assertFalse(pagingSource.invalid)\n\n        // try with same key same paging source\n        val single2 = pagingSource.append(key = 15)\n        val result2 = single2.await() as LoadResult.Page\n        assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(15, 20)\n        )\n    }","prompt":""},{"id":4208,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun prependAgain_afterDispose() = setupAndRun { db ->\n        db.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n\n        var isDisposed = false\n        val single = pagingSource.prepend(key = 40)\n            // dispose right after subscription\n            .doOnSubscribe { disposable -> disposable.dispose() }\n            .doOnDispose { isDisposed = true }\n            .doOnSuccess { assertWithMessage(\"The single should not succeed\").fail() }\n            .doOnError { assertWithMessage(\"The single should not error out\").fail() }\n\n        assertFailsWith<AssertionError> { withTestTimeout(2) { single.await() } }\n        assertTrue(isDisposed)\n        assertFalse(pagingSource.invalid)\n\n        // try with same key same paging source\n        val single2 = pagingSource.prepend(key = 40)\n        val result2 = single2.await() as LoadResult.Page\n        assertThat(result2.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(35, 40)\n        )\n    }","prompt":""},{"id":4209,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun assert_usesQueryExecutor() {\n        val queryExecutor = TestExecutor()\n        val testDb = Room.inMemoryDatabaseBuilder(\n            ApplicationProvider.getApplicationContext(),\n            LimitOffsetTestDb::class.java\n        ).setQueryExecutor(queryExecutor)\n            .build()\n\n        testDb.dao.addAllItems(ITEMS_LIST)\n        queryExecutor.executeAll() // add items first\n\n        runTest {\n            assertFalse(queryExecutor.executeAll()) // make sure its idle now\n            val pagingSource = LimitOffsetRxPagingSourceImpl(testDb)\n            val single = pagingSource.append(key = 15)\n\n            var resultReceived = false\n            // subscribe to single\n            launch {\n                val result = single.await() as LoadResult.Page\n                assertThat(result.data).containsExactlyElementsIn(\n                    ITEMS_LIST.subList(15, 20)\n                )\n                resultReceived = true\n            }\n\n            advanceUntilIdle()\n\n            // execute Single's await()\n            assertTrue(queryExecutor.executeAll())\n\n            advanceUntilIdle()\n\n            assertTrue(resultReceived)\n            assertFalse(queryExecutor.executeAll())\n        }\n        testDb.close()\n    }","prompt":""},{"id":4210,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun cancelledCoroutine_disposesSingle() {\n        val testDb = Room.inMemoryDatabaseBuilder(\n            ApplicationProvider.getApplicationContext(),\n            LimitOffsetTestDb::class.java\n        ).build()\n\n        testDb.dao.addAllItems(ITEMS_LIST)\n        val pagingSource = LimitOffsetRxPagingSourceImpl(testDb)\n\n        runBlocking {\n            var isDisposed = false\n            val single = pagingSource.refresh()\n                .doOnSubscribe { Thread.sleep(300) } // subscribe but delay the load\n                .doOnSuccess { assertWithMessage(\"The single should not succeed\").fail() }\n                .doOnError { assertWithMessage(\"The single should not error out\").fail() }\n                .doOnDispose { isDisposed = true }\n\n            val job = launch { single.await() }\n            job.start()\n            delay(100) // start single.await() to subscribe but don't let it complete\n            job.cancelAndJoin()\n\n            assertTrue(job.isCancelled)\n            assertTrue(isDisposed)\n        }\n        // need to drain before closing testDb or else will throw SQLiteConnectionPool exception\n        countingTaskExecutorRule.drainTasks(500, TimeUnit.MILLISECONDS)\n        testDb.close()\n    }","prompt":""},{"id":4211,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun refresh_secondaryConstructor() = setupAndRun { db ->\n        val pagingSource = object : LimitOffsetRxPagingSource<TestItem>(\n            db = db,\n            supportSQLiteQuery = SimpleSQLiteQuery(\"SELECT * FROM $tableName ORDER BY id ASC\")\n        ) {\n            override fun convertRows(cursor: Cursor): List<TestItem> {\n                return convertRowsHelper(cursor)\n            }\n        }\n\n        db.dao.addAllItems(ITEMS_LIST)\n        val single = pagingSource.refresh()\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(0, 15)\n        )\n    }","prompt":""},{"id":4212,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun append_secondaryConstructor() = setupAndRun { db ->\n        val pagingSource = object : LimitOffsetRxPagingSource<TestItem>(\n            db = db,\n            supportSQLiteQuery = SimpleSQLiteQuery(\"SELECT * FROM $tableName ORDER BY id ASC\")\n        ) {\n            override fun convertRows(cursor: Cursor): List<TestItem> {\n                return convertRowsHelper(cursor)\n            }\n        }\n\n        db.dao.addAllItems(ITEMS_LIST)\n        val single = pagingSource.append(key = 15)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(15, 20)\n        )\n    }","prompt":""},{"id":4213,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun prepend_secondaryConstructor() = setupAndRun { db ->\n        val pagingSource = object : LimitOffsetRxPagingSource<TestItem>(\n            db = db,\n            supportSQLiteQuery = SimpleSQLiteQuery(\"SELECT * FROM $tableName ORDER BY id ASC\")\n        ) {\n            override fun convertRows(cursor: Cursor): List<TestItem> {\n                return convertRowsHelper(cursor)\n            }\n        }\n\n        db.dao.addAllItems(ITEMS_LIST)\n        val single = pagingSource.prepend(key = 15)\n        val result = single.await() as LoadResult.Page\n        assertThat(result.data).containsExactlyElementsIn(\n            ITEMS_LIST.subList(10, 15)\n        )\n    }","prompt":""},{"id":4214,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"@Test\n    fun jumping_enabled() = setupAndRun { db ->\n        val pagingSource = LimitOffsetRxPagingSourceImpl(db)\n        assertTrue(pagingSource.jumpingSupported)\n    }","prompt":""},{"id":4215,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceTest","requiredType":[],"content":"private fun setupAndRun(\n        test: suspend (LimitOffsetTestDb) -> Unit\n    ) {\n        val db = Room.inMemoryDatabaseBuilder(\n            ApplicationProvider.getApplicationContext(),\n            LimitOffsetTestDb::class.java\n        ).build()\n\n        runTest {\n            test(db)\n        }\n        db.close()\n    }","prompt":""},{"id":4216,"identifierName":"androidx.room.paging.rxjava3.LimitOffsetRxPagingSourceImpl","requiredType":[],"content":"override fun convertRows(cursor: Cursor): List<TestItem> = convertRowsHelper(cursor)","prompt":""},{"id":4217,"identifierName":"androidx.room.paging.rxjava3.TestItemDao","requiredType":[],"content":"@Insert\n    fun addAllItems(testItems: List<TestItem>)","prompt":""},{"id":4218,"identifierName":"androidx.room.paging.rxjava3.TestItemDao","requiredType":[],"content":"@Insert\n    fun addItem(testItem: TestItem)","prompt":""},{"id":4219,"identifierName":"androidx.room.paging.rxjava3.TestItemDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) from $tableName\")\n    fun itemCount(): Int","prompt":""},{"id":4220,"identifierName":"com.wackalooon.meter.data.storage.MeterDao","requiredType":["data class MeterDatabaseEntity( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val type: Type )"],"content":"@WorkerThread\n    @Query(\"SELECT * FROM meterdatabaseentity\")\n    fun getAll(): List<MeterDatabaseEntity>","prompt":""},{"id":4221,"identifierName":"com.wackalooon.meter.data.storage.MeterDao","requiredType":["data class MeterDatabaseEntity( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val type: Type )"],"content":"@WorkerThread\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(meter: MeterDatabaseEntity)","prompt":""},{"id":4222,"identifierName":"com.wackalooon.meter.data.storage.MeterDao","requiredType":[],"content":"@WorkerThread\n    @Query(\"DELETE FROM meterdatabaseentity WHERE id = :meterId\")\n    fun delete(meterId: Long)","prompt":""},{"id":4223,"identifierName":"com.wackalooon.meter.data.storage.MeterDao","requiredType":["data class MeterDatabaseEntity( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val type: Type )"],"content":"@WorkerThread\n    @Update\n    fun update(meter: MeterDatabaseEntity)","prompt":""},{"id":4224,"identifierName":"org.acme.GraphQLResource","requiredType":[],"content":"@Query\n    @NonNull\n    fun getBananas(): List<@NonNull Banana> {\n        return listOf(Banana(\"yellow\", 5), Banana(\"green\", 3))\n    }","prompt":""},{"id":4225,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Insert\n    fun addPublishers(vararg publishers: Publisher): List<Long>","prompt":""},{"id":4226,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Insert\n    fun addPublishersSingle(vararg publishers: Publisher): Single<List<Long>>","prompt":""},{"id":4227,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Insert\n    fun addPublishersCompletable(vararg publishers: Publisher): Completable","prompt":""},{"id":4228,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Insert\n    fun addPublishersMaybe(vararg publishers: Publisher): Maybe<List<Long>>","prompt":""},{"id":4229,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Insert\n    fun addPublisherSingle(publisher: Publisher): Single<Long>","prompt":""},{"id":4230,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Insert\n    fun addPublisherCompletable(publisher: Publisher): Completable","prompt":""},{"id":4231,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Insert\n    fun addPublisherMaybe(publisher: Publisher): Maybe<Long>","prompt":""},{"id":4232,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Insert\n    fun addPublisherSuspend(publisher: Publisher)","prompt":""},{"id":4233,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Delete\n    fun deletePublishers(vararg publishers: Publisher)","prompt":""},{"id":4234,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Delete\n    fun deletePublishersSingle(vararg publishers: Publisher): Single<Int>","prompt":""},{"id":4235,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Delete\n    fun deletePublishersCompletable(vararg publishers: Publisher): Completable","prompt":""},{"id":4236,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Delete\n    fun deletePublishersMaybe(vararg publishers: Publisher): Maybe<Int>","prompt":""},{"id":4237,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Delete\n    fun deletePublishersCount(vararg publishers: Publisher): Int","prompt":""},{"id":4238,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Update\n    fun updatePublishers(vararg publishers: Publisher)","prompt":""},{"id":4239,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Update\n    fun updatePublishersCompletable(vararg publishers: Publisher): Completable","prompt":""},{"id":4240,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Update\n    fun updatePublishersMaybe(vararg publishers: Publisher): Maybe<Int>","prompt":""},{"id":4241,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Update\n    fun updatePublishersSingle(vararg publishers: Publisher): Single<Int>","prompt":""},{"id":4242,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Update\n    fun updatePublishersCount(vararg publishers: Publisher): Int","prompt":""},{"id":4243,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Insert\n    fun addAuthors(vararg authors: Author)","prompt":""},{"id":4244,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Insert\n    suspend fun addAuthorsSuspend(vararg authors: Author)","prompt":""},{"id":4245,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Query(\"SELECT * FROM author WHERE authorId = :authorId\")\n    fun getAuthor(authorId: String): Author","prompt":""},{"id":4246,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Insert\n    fun addBooks(vararg books: Book)","prompt":""},{"id":4247,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Insert(entity = Book::class)\n    fun addMiniBook(miniBook: MiniBook)","prompt":""},{"id":4248,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookAuthor(val bookId: String, val authorId: String)"],"content":"@Insert\n    fun addBookAuthors(vararg bookAuthors: BookAuthor)","prompt":""},{"id":4249,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBook(bookId: String): Book","prompt":""},{"id":4250,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    suspend fun getBookSuspend(bookId: String): Book","prompt":""},{"id":4251,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book\")\n    suspend fun getBooksSuspend(): List<Book>","prompt":""},{"id":4252,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Query(\"SELECT * FROM publisher\")\n    suspend fun getPublishersSuspend(): List<Publisher>","prompt":""},{"id":4253,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"UPDATE book SET salesCnt = salesCnt + 1 WHERE bookId = :bookId\")\n    fun increaseBookSales(bookId: String)","prompt":""},{"id":4254,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"UPDATE book SET salesCnt = salesCnt + 1 WHERE bookId = :bookId\")\n    suspend fun increaseBookSalesSuspend(bookId: String)","prompt":""},{"id":4255,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"UPDATE book SET salesCnt = salesCnt + 1 WHERE bookId = :bookId\")\n    fun increaseBookSalesSingle(bookId: String): Single<Int>","prompt":""},{"id":4256,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"UPDATE book SET salesCnt = salesCnt + 1 WHERE bookId = :bookId\")\n    fun increaseBookSalesMaybe(bookId: String): Maybe<Int>","prompt":""},{"id":4257,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"UPDATE book SET salesCnt = salesCnt + 1 WHERE bookId = :bookId\")\n    fun increaseBookSalesCompletable(bookId: String): Completable","prompt":""},{"id":4258,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"UPDATE book SET salesCnt = salesCnt + 1 WHERE bookId = :bookId\")\n    fun increaseBookSalesFuture(bookId: String): ListenableFuture<Int>","prompt":""},{"id":4259,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"UPDATE book SET salesCnt = salesCnt + 1 WHERE bookId = :bookId\")\n    fun increaseBookSalesVoidFuture(bookId: String): ListenableFuture<Void>","prompt":""},{"id":4260,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE salesCnt = 0\")\n    fun deleteUnsoldBooks(): Int","prompt":""},{"id":4261,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE salesCnt = 0\")\n    suspend fun deleteUnsoldBooksSuspend(): Int","prompt":""},{"id":4262,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE salesCnt = 0\")\n    fun deleteUnsoldBooksSingle(): Single<Int>","prompt":""},{"id":4263,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE salesCnt = 0\")\n    fun deleteUnsoldBooksMaybe(): Maybe<Int>","prompt":""},{"id":4264,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE salesCnt = 0\")\n    fun deleteUnsoldBooksCompletable(): Completable","prompt":""},{"id":4265,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE salesCnt = 0\")\n    fun deleteUnsoldBooksFuture(): ListenableFuture<Int>","prompt":""},{"id":4266,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE salesCnt = 0\")\n    fun deleteUnsoldBooksVoidFuture(): ListenableFuture<Void>","prompt":""},{"id":4267,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE bookId IN (:bookIds)\")\n    fun deleteBookWithIds(vararg bookIds: String)","prompt":""},{"id":4268,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE bookId IN (:bookIds)\")\n    suspend fun deleteBookWithIdsSuspend(vararg bookIds: String)","prompt":""},{"id":4269,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE bookId IN (:bookIds)\")\n    fun deleteBookWithIdsSingle(vararg bookIds: String): Single<Int>","prompt":""},{"id":4270,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE bookId IN (:bookIds)\")\n    fun deleteBookWithIdsMaybe(vararg bookIds: String): Maybe<Int>","prompt":""},{"id":4271,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE bookId IN (:bookIds)\")\n    fun deleteBookWithIdsCompletable(vararg bookIds: String): Completable","prompt":""},{"id":4272,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"DELETE FROM book WHERE bookId IN (:bookIds)\")\n    fun deleteBookWithIdsFuture(vararg bookIds: String): ListenableFuture<Int>","prompt":""},{"id":4273,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"INSERT INTO publisher (publisherId, name) VALUES (:id, :name)\")\n    fun insertPublisherVoid(id: String, name: String)","prompt":""},{"id":4274,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"INSERT INTO publisher (publisherId, name) VALUES (:id, :name)\")\n    fun insertPublisher(id: String, name: String): Long","prompt":""},{"id":4275,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"INSERT INTO publisher (publisherId, name) VALUES (:id, :name)\")\n    suspend fun insertPublisherSuspend(id: String, name: String): Long","prompt":""},{"id":4276,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"INSERT INTO publisher (publisherId, name) VALUES (:id, :name)\")\n    fun insertPublisherSingle(id: String, name: String): Single<Long>","prompt":""},{"id":4277,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"INSERT INTO publisher (publisherId, name) VALUES (:id, :name)\")\n    fun insertPublisherMaybe(id: String, name: String): Maybe<Long>","prompt":""},{"id":4278,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"INSERT INTO publisher (publisherId, name) VALUES (:id, :name)\")\n    fun insertPublisherCompletable(id: String, name: String): Completable","prompt":""},{"id":4279,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"INSERT INTO publisher (publisherId, name) VALUES (:id, :name)\")\n    fun insertPublisherFuture(id: String, name: String): ListenableFuture<Long>","prompt":""},{"id":4280,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Transaction\n    @Query(\"SELECT * FROM book WHERE salesCnt > :count\")\n    suspend fun getBooksWithMinSalesCountSuspend(count: Int): List<Book>","prompt":""},{"id":4281,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class SupportSQLiteQuerynull","data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@RawQuery\n    suspend fun getBookWithRawQuerySuspend(query: SupportSQLiteQuery): Book","prompt":""},{"id":4282,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Insert\n    suspend fun insertBookSuspend(book: Book)","prompt":""},{"id":4283,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Insert\n    suspend fun insertBookWithResultSuspend(book: Book): Long","prompt":""},{"id":4284,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Insert\n    suspend fun insertBooksWithResultSuspend(vararg book: Book): List<Long>","prompt":""},{"id":4285,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Delete\n    suspend fun deleteBookSuspend(book: Book)","prompt":""},{"id":4286,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Delete\n    suspend fun deleteBookWithResultSuspend(book: Book): Int","prompt":""},{"id":4287,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Update\n    suspend fun updateBookSuspend(book: Book)","prompt":""},{"id":4288,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Update\n    suspend fun updateBookWithResultSuspend(book: Book): Int","prompt":""},{"id":4289,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\n        \"\"\"SELECT * FROM book WHERE\n            bookId IN(:bookIds)\n            order by bookId DESC\"\"\"\n    )\n    fun getBooksMultiLineQuery(bookIds: List<String>): List<Book>","prompt":""},{"id":4290,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookLiveData(bookId: String): LiveData<Book>","prompt":""},{"id":4291,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookFlowable(bookId: String): Flowable<Book>","prompt":""},{"id":4292,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookJavaOptional(bookId: String): java.util.Optional<Book>","prompt":""},{"id":4293,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookListenableFuture(bookId: String): ListenableFuture<Book>","prompt":""},{"id":4294,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookOptional(bookId: String): Optional<Book>","prompt":""},{"id":4295,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookOptionalFlowable(bookId: String): Flowable<Optional<Book>>","prompt":""},{"id":4296,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookOptionalListenableFuture(bookId: String): ListenableFuture<Optional<Book>>","prompt":""},{"id":4297,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookSingle(bookId: String): Single<Book>","prompt":""},{"id":4298,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getBookMaybe(bookId: String): Maybe<Book>","prompt":""},{"id":4299,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)\n    @Query(\n        \"SELECT * FROM book INNER JOIN publisher \" +\n            \"ON book.bookPublisherId = publisher.publisherId \"\n    )\n    fun getBooksWithPublisher(): List<BookWithPublisher>","prompt":""},{"id":4300,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)\n    @Query(\n        \"SELECT * FROM book INNER JOIN publisher \" +\n            \"ON book.bookPublisherId = publisher.publisherId \"\n    )\n    fun getBooksWithPublisherLiveData(): LiveData<List<BookWithPublisher>>","prompt":""},{"id":4301,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)\n    @Query(\n        \"SELECT * FROM book INNER JOIN publisher \" +\n            \"ON book.bookPublisherId = publisher.publisherId \"\n    )\n    fun getBooksWithPublisherFlowable(): Flowable<List<BookWithPublisher>>","prompt":""},{"id":4302,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@SuppressWarnings(RoomWarnings.CURSOR_MISMATCH)\n    @Query(\n        \"SELECT * FROM book INNER JOIN publisher \" +\n            \"ON book.bookPublisherId = publisher.publisherId \"\n    )\n    fun getBooksWithPublisherListenableFuture(): ListenableFuture<List<BookWithPublisher>>","prompt":""},{"id":4303,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class PublisherWithBooksnull"],"content":"@Transaction\n    @Query(\"SELECT * FROM publisher WHERE publisherId = :publisherId\")\n    fun getPublisherWithBooks(publisherId: String): PublisherWithBooks","prompt":""},{"id":4304,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM publisher WHERE publisherId = :publisherId\")\n    fun getPublisherWithBookSales(publisherId: String): PublisherWithBookSales","prompt":""},{"id":4305,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class PublisherWithBooksnull"],"content":"@Transaction\n    @Query(\"SELECT * FROM publisher WHERE publisherId = :publisherId\")\n    fun getPublisherWithBooksLiveData(publisherId: String): LiveData<PublisherWithBooks>","prompt":""},{"id":4306,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class PublisherWithBooksnull"],"content":"@Transaction\n    @Query(\"SELECT * FROM publisher WHERE publisherId = :publisherId\")\n    fun getPublisherWithBooksFlowable(publisherId: String): Flowable<PublisherWithBooks>","prompt":""},{"id":4307,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"UPDATE book SET title = :title WHERE bookId = :bookId\")\n    fun updateBookTitle(bookId: String, title: String?)","prompt":""},{"id":4308,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE languages & :langs != 0 ORDER BY bookId ASC\")\n    @TypeConverters(Lang::class)\n    fun findByLanguages(langs: Set<Lang>): List<Book>","prompt":""},{"id":4309,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithJavaEntitynull"],"content":"// see: b/78199923 just a compilation test to ensure we can generate proper code.\n    @Transaction\n    @Query(\"SELECT * FROM book WHERE bookId = :bookId\")\n    fun getWithJavaEntities(bookId: String): BookWithJavaEntity","prompt":""},{"id":4310,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Transaction\n    fun deleteAndAddPublisher(\n        oldPublisher: Publisher,\n        newPublisher: Publisher,\n        fail: Boolean = false\n    ) {\n        deletePublishers(oldPublisher)\n        if (fail) {\n            throw RuntimeException()\n        }\n        addPublishers(newPublisher)\n    }","prompt":""},{"id":4311,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Transaction\n    fun getDefaultBook() = getBook(\"DEFAULT_ID\")","prompt":""},{"id":4312,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Query(\"SELECT * FROM Publisher\")\n    fun getPublishers(): List<Publisher>","prompt":""},{"id":4313,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Query(\"SELECT * FROM Publisher WHERE publisherId = :publisherId\")\n    fun getPublisher(publisherId: String): Publisher","prompt":""},{"id":4314,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Query(\"SELECT * FROM Publisher WHERE _rowid_ = :rowid\")\n    fun getPublisher(rowid: Long): Publisher","prompt":""},{"id":4315,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT dateOfBirth FROM author\")\n    suspend fun getAllAuthorsDateOfBirth(): List<Date>","prompt":""},{"id":4316,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT dateOfBirth FROM author WHERE authorId = :authorId\")\n    suspend fun getAuthorDateOfBirths(authorId: String): Date","prompt":""},{"id":4317,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Query(\"SELECT * FROM author WHERE dateOfBirth IN (:dates)\")\n    fun getAuthorsWithBirthDatesList(dates: List<Date>): List<Author>","prompt":""},{"id":4318,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Query(\"SELECT * FROM author WHERE dateOfBirth IN (:dates)\")\n    fun getAuthorsWithBirthDatesVararg(vararg dates: Date): List<Author>","prompt":""},{"id":4319,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"// see: b/123767877, suspend function with inner class as parameter issues.\n    @Query(\"SELECT 0 FROM book WHERE bookId = :param\")\n    suspend fun getZero(param: AnswerConverter.Answer): Int","prompt":""},{"id":4320,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"// see: b/123767877, suspend function with inner class as parameter issues.\n    @Query(\"SELECT 'YES' FROM book\")\n    suspend fun getAnswer(): AnswerConverter.Answer","prompt":""},{"id":4321,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )","data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )"],"content":"@Transaction\n    suspend fun insertBookAndAuthorSuspend(book: Book, author: Author) {\n        addBooks(book)\n        addAuthors(author)\n    }","prompt":""},{"id":4322,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Query(\"SELECT * FROM book WHERE salesCnt = :count\")\n    suspend fun getBooksSalesCountSuspend(count: Int): List<Book>","prompt":""},{"id":4323,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Transaction\n    suspend fun deleteBooksWithZeroSales(): List<Book> {\n        val books = getBooksSalesCountSuspend(0)\n        deleteBookWithIds(*books.map { it.bookId }.toTypedArray())\n        return books\n    }","prompt":""},{"id":4324,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Author( @PrimaryKey val authorId: String, val name: String, val dateOfBirth: Date? = null, val aList: List<Int>? = null )","data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)","data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Transaction\n    suspend fun addAuthorPublisherBooks(author: Author, publisher: Publisher, vararg books: Book) {\n        addAuthorsSuspend(author)\n        addPublisherSuspend(publisher)\n        for (book in books) {\n            insertBookSuspend(book)\n        }\n    }","prompt":""},{"id":4325,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book\")\n    fun getBooksFlow(): Flow<List<Book>>","prompt":""},{"id":4326,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM book\")\n    fun getBooksFlowInTransaction(): Flow<List<Book>>","prompt":""},{"id":4327,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book WHERE bookId = :id\")\n    fun getOneBooksFlow(id: String): Flow<Book?>","prompt":""},{"id":4328,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"fun addAndRemovePublisher(thePublisher: Publisher) {\n        addPublishers(thePublisher)\n        deletePublishers(thePublisher)\n    }","prompt":""},{"id":4329,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"fun concreteFunction() = \"\"","prompt":""},{"id":4330,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"fun concreteVoidFunction() {\n    }","prompt":""},{"id":4331,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"fun concreteUnitFunction() {\n    }","prompt":""},{"id":4332,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"fun concreteFunctionWithParams(num: Int, text: String) = \"$num - $text\"","prompt":""},{"id":4333,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"suspend fun concreteSuspendFunction() = \"\"","prompt":""},{"id":4334,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"suspend fun concreteVoidSuspendFunction() {\n    }","prompt":""},{"id":4335,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"suspend fun concreteSuspendFunctionWithParams(num: Int, text: String) = \"$num - $text\"","prompt":""},{"id":4336,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Transaction\n    fun functionWithSuspendFunctionalParam(\n        input: Book,\n        action: suspend (input: Book) -> Book\n    ): Book = runBlocking { action(input) }","prompt":""},{"id":4337,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Transaction\n    suspend fun suspendFunctionWithSuspendFunctionalParam(\n        input: Book,\n        action: suspend (input: Book) -> Book\n    ): Book = action(input)","prompt":""},{"id":4338,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Query(\"SELECT * FROM Publisher JOIN Book ON (Publisher.publisherId == Book.bookPublisherId)\")\n    fun getBooksByPublisher(): Map<Publisher, List<Book>>","prompt":""},{"id":4339,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    fun upsertBooks(vararg books: Book)","prompt":""},{"id":4340,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    suspend fun upsertBooksSuspend(vararg books: Book)","prompt":""},{"id":4341,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)","data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    fun upsertBookPublisher(publisher: Publisher, book: Book)","prompt":""},{"id":4342,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Upsert(entity = Book::class)\n    fun upsertMiniBook(miniBook: MiniBook)","prompt":""},{"id":4343,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    fun upsertBookReturnLong(book: Book): Long","prompt":""},{"id":4344,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    fun upsertBooksReturnLongList(vararg books: Book): List<Long>","prompt":""},{"id":4345,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    fun upsertBooksReturnLongArray(vararg books: Book): Array<Long>","prompt":""},{"id":4346,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    fun upsertBooksReturnLongArrayPrimitive(vararg books: Book): LongArray","prompt":""},{"id":4347,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    fun upsertBooksReturnListenableFuture(vararg books: Book): ListenableFuture<List<Long>>","prompt":""},{"id":4348,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Upsert\n    fun upsertPublishers(vararg publishers: Publisher)","prompt":""},{"id":4349,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Upsert\n    fun upsertTwoPublishers(publisherOne: Publisher, publisherTwo: Publisher)","prompt":""},{"id":4350,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Upsert\n    fun upsertMultiple(publisher: Publisher, publishers: List<Publisher>)","prompt":""},{"id":4351,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class BookWithPublisher(val bookId: String, val title: String, @Embedded val publisher: Publisher)"],"content":"@Upsert\n    fun upsertPublisherSingle(publisher: Publisher): Single<Long>","prompt":""},{"id":4352,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    fun upsertBookSingle(book: Book): Single<Long>","prompt":""},{"id":4353,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    fun upsertBookMaybe(book: Book): Maybe<Long>","prompt":""},{"id":4354,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    fun upsertBookCompletable(book: Book): Completable","prompt":""},{"id":4355,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Upsert\n    fun upsertListOfBooksReturnLongArray(books: List<Book>): Array<Long>","prompt":""},{"id":4356,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book\")\n    fun getBooksFlowable(): Flowable<List<Book>>","prompt":""},{"id":4357,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Query(\"SELECT * FROM book\")\n    fun getBooksObservable(): Observable<List<Book>>","prompt":""},{"id":4358,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Insert\n    fun addPublisherReturnArray(publishers: List<Publisher>): Array<Long>","prompt":""},{"id":4359,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    suspend fun upsertBookSuspend(books: Book)","prompt":""},{"id":4360,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":["data class Book( @PrimaryKey val bookId: String, val title: String, val bookPublisherId: String, @ColumnInfo(defaultValue = \"0\") @field:TypeConverters(Lang::class) val languages: Set<Lang>, @ColumnInfo(defaultValue = \"0\") val salesCnt: Int )"],"content":"@Upsert\n    suspend fun upsertBookSuspendReturnId(book: Book): Long","prompt":""},{"id":4361,"identifierName":"androidx.room.integration.kotlintestapp.dao.BooksDao","requiredType":[],"content":"@Upsert\n    suspend fun upsertBooksSuspendReturnIds(books: List<Book>): List<Long>","prompt":""},{"id":4362,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"SELECT * FROM AugmentedSkuDetails WHERE type = '${BillingClient.SkuType.SUBS}'\")\n    fun getSubscriptionSkuDetails(): LiveData<List<AugmentedSkuDetails>>","prompt":""},{"id":4363,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"SELECT * FROM AugmentedSkuDetails WHERE type = '${BillingClient.SkuType.INAPP}'\")\n    fun getInappSkuDetails(): LiveData<List<AugmentedSkuDetails>>","prompt":""},{"id":4364,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Transaction\n    fun insertOrUpdate(skuDetails: SkuDetails) = skuDetails.apply {\n        val result = getById(sku)\n        val canPurchase = if (result == null) true else result.canPurchase\n        val originalJson = toString().substring(\"SkuDetails: \".length)\n        val skuDetails = AugmentedSkuDetails(canPurchase, sku, type, price, title, description, originalJson)\n        insert(skuDetails)\n    }","prompt":""},{"id":4365,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Transaction\n    fun insertOrUpdate(sku: String, canPurchase: Boolean) {\n        val result = getById(sku)\n        if (result != null) {\n            update(sku, canPurchase)\n        } else {\n            insert(AugmentedSkuDetails(canPurchase, sku, null, null, null, null, null))\n        }\n    }","prompt":""},{"id":4366,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"SELECT * FROM AugmentedSkuDetails WHERE sku = :sku\")\n    fun getById(sku: String): AugmentedSkuDetails","prompt":""},{"id":4367,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(augmentedSkuDetails: AugmentedSkuDetails)","prompt":""},{"id":4368,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.AugmentedSkuDetailsDao","requiredType":[],"content":"@Query(\"UPDATE AugmentedSkuDetails SET canPurchase = :canPurchase WHERE sku = :sku\")\n    fun update(sku: String, canPurchase: Boolean)","prompt":""},{"id":4369,"identifierName":"de.dreier.mytargets.base.db.dao.ImageDAO","requiredType":[],"content":"/**\n     * Returns a list of file names, which are implicitly placed in the ../files/ folder of the app.\n     */\n    @Query(\n        \"SELECT `fileName` FROM `BowImage` \" +\n                \"UNION SELECT `fileName` FROM `EndImage` \" +\n                \"UNION SELECT `fileName` FROM `ArrowImage`\"\n    )\n    fun loadAllFileNames(): List<String>","prompt":""},{"id":4370,"identifierName":"com.example.sqlbasics.CaliforniaParkDao","requiredType":[],"content":"@Insert\n    suspend fun insertAll(parks: List<CaliforniaPark>)","prompt":""},{"id":4371,"identifierName":"com.example.sqlbasics.CaliforniaParkDao","requiredType":[],"content":"@Query(\"SELECT * FROM park\")\n    suspend fun getAll(): List<CaliforniaPark>","prompt":""},{"id":4372,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/** Returns all cars currently associated with the current phone. */\n  @Query(\"SELECT * FROM associated_cars\")\n  suspend fun loadAllAssociatedCars(): List<AssociatedCarEntity>","prompt":""},{"id":4373,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/** Returns `true` if there are cars currently associated with this phone. */\n  @Query(\"SELECT EXISTS(SELECT * FROM associated_cars)\") suspend fun loadIsAssociated(): Boolean","prompt":""},{"id":4374,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/** Returns `true` if there is a car with the specified [carId] is associated with this phone. */\n  @Query(\"SELECT EXISTS(SELECT * FROM associated_cars WHERE id = :carId)\")\n  suspend fun loadIsAssociatedByCarId(carId: String): Boolean","prompt":""},{"id":4375,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/**\n   * Returns `true` if there is a car with the specified [macAddress] is associated with this phone.\n   */\n  @Query(\"SELECT EXISTS(SELECT * FROM associated_cars WHERE macAddress = :macAddress)\")\n  suspend fun loadIsAssociatedByMacAddress(macAddress: String): Boolean","prompt":""},{"id":4376,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/** Loads the key used for encrypting and decrypting data from the car with the given [carId]. */\n  @Query(\"SELECT id, encryptionKey FROM associated_cars WHERE id = :carId LIMIT 1\")\n  suspend fun loadEncryptionKey(carId: String): AssociatedCarKey?","prompt":""},{"id":4377,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/** Loads the mac address of the given [carId]. */\n  @Query(\"SELECT macAddress FROM associated_cars WHERE id = :carId LIMIT 1\")\n  suspend fun loadMacAddressByCarId(carId: String): String","prompt":""},{"id":4378,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/** Loads the name of the given [carId]. */\n  @Query(\"SELECT name FROM associated_cars WHERE id = :carId LIMIT 1\")\n  suspend fun loadNameByCarId(carId: String): String","prompt":""},{"id":4379,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/**\n   * Inserts a [car] into the database.\n   *\n   * This operation replaces if a car already exists with the same car id.\n   */\n  @Insert(onConflict = OnConflictStrategy.REPLACE)\n  suspend fun insertAssociatedCar(car: AssociatedCarEntity)","prompt":""},{"id":4380,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/**\n   * Updates the name of the car that matches the given [car] and returns the number of entries that\n   * were updated.\n   */\n  @Update(entity = AssociatedCarEntity::class) suspend fun updateName(car: AssociatedCarName): Int","prompt":""},{"id":4381,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/**\n   * Updates the encryption key that matches the given [car] and returns the number of entries that\n   * were updated.\n   */\n  @Update(entity = AssociatedCarEntity::class)\n  suspend fun updateEncryptionKey(car: AssociatedCarKey): Int","prompt":""},{"id":4382,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"@Query(\"SELECT id, identificationKey FROM associated_cars\")\n  suspend fun loadAllIdentificationKeys(): List<AssociatedCarIdentificationKey>","prompt":""},{"id":4383,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"@Query(\"SELECT identificationKey FROM associated_cars WHERE id = :carId\")\n  suspend fun loadIdentificationKey(carId: String): String","prompt":""},{"id":4384,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/**\n   * Deletes an associated car that has the given [carId] and returns the number of entries that\n   * were deleted.\n   */\n  @Query(\"DELETE FROM associated_cars WHERE id = :carId\")\n  suspend fun deleteAssociatedCar(carId: String): Int","prompt":""},{"id":4385,"identifierName":"com.google.android.libraries.car.trustagent.AssociatedCarDao","requiredType":[],"content":"/** Deletes all currently associated cars and returns the number of entries that were updated. */\n  @Query(\"DELETE FROM associated_cars\") suspend fun deleteAllAssociatedCars(): Int","prompt":""},{"id":4386,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\"DELETE FROM ${Sms.TABLE_NAME}\")\n    suspend fun deleteAll()","prompt":""},{"id":4387,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"DELETE FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DATABASE_ID} = :id\"\n    )\n    suspend fun deleteById(id: Long)","prompt":""},{"id":4388,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"DELETE FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact\"\n    )\n    suspend fun deleteConversation(did: String, contact: String)","prompt":""},{"id":4389,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"DELETE FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} NOT IN(:dids)\"\n    )\n    suspend fun deleteWithoutDids(dids: Set<String>)","prompt":""},{"id":4390,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":["data class Sms( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0, @ColumnInfo(name = COLUMN_VOIP_ID) val voipId: Long? = null, @ColumnInfo(name = COLUMN_DATE) val date: Long = Date().time / 1000L, @ColumnInfo(name = COLUMN_INCOMING) val incoming: Long = 0, @ColumnInfo(name = COLUMN_DID) val did: String = \"\", @ColumnInfo(name = COLUMN_CONTACT) val contact: String = \"\", @ColumnInfo(name = COLUMN_TEXT) val text: String = \"\", @ColumnInfo(name = COLUMN_UNREAD) val unread: Long = 0, @ColumnInfo(name = COLUMN_DELIVERED) val delivered: Long = 0, @ColumnInfo(name = COLUMN_DELIVERY_IN_PROGRESS) val deliveryInProgress: Long = 0 )"],"content":"@Query(\n        \"SELECT * FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} IN(:dids) ORDER BY ${Sms.COLUMN_VOIP_ID} DESC, ${Sms.COLUMN_DATABASE_ID} DESC\"\n    )\n    suspend fun getAll(dids: Set<String>): List<Sms>","prompt":""},{"id":4391,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"SELECT * FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DATABASE_ID} = :id\"\n    )\n    suspend fun getById(id: Long): Sms?","prompt":""},{"id":4392,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":["data class ConversationId( @ColumnInfo(name = Sms.COLUMN_DID) val did: String, @ColumnInfo(name = Sms.COLUMN_CONTACT) val contact: String )"],"content":"@Query(\n        \"SELECT DISTINCT ${Sms.COLUMN_CONTACT}, ${Sms.COLUMN_DID} FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} IN(:dids)\"\n    )\n    suspend fun getConversationIds(dids: Set<String>): List<ConversationId>","prompt":""},{"id":4393,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":["data class Sms( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0, @ColumnInfo(name = COLUMN_VOIP_ID) val voipId: Long? = null, @ColumnInfo(name = COLUMN_DATE) val date: Long = Date().time / 1000L, @ColumnInfo(name = COLUMN_INCOMING) val incoming: Long = 0, @ColumnInfo(name = COLUMN_DID) val did: String = \"\", @ColumnInfo(name = COLUMN_CONTACT) val contact: String = \"\", @ColumnInfo(name = COLUMN_TEXT) val text: String = \"\", @ColumnInfo(name = COLUMN_UNREAD) val unread: Long = 0, @ColumnInfo(name = COLUMN_DELIVERED) val delivered: Long = 0, @ColumnInfo(name = COLUMN_DELIVERY_IN_PROGRESS) val deliveryInProgress: Long = 0 )"],"content":"@Query(\n        \"SELECT * FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact AND ${Sms.COLUMN_TEXT} LIKE '%' || :filterConstraint || '%' ORDER BY ${Sms.COLUMN_DELIVERY_IN_PROGRESS} DESC, ${Sms.COLUMN_DATE} DESC, ${Sms.COLUMN_VOIP_ID} DESC, ${Sms.COLUMN_DATABASE_ID} DESC\"\n    )\n    suspend fun getConversationMessagesFiltered(\n        did: String, contact: String,\n        filterConstraint: String\n    ): List<Sms>","prompt":""},{"id":4394,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"SELECT COUNT(*) FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact AND ${Sms.COLUMN_TEXT} LIKE '%' || :filterConstraint || '%' ORDER BY ${Sms.COLUMN_DELIVERY_IN_PROGRESS} DESC, ${Sms.COLUMN_DATE} DESC, ${Sms.COLUMN_VOIP_ID} DESC, ${Sms.COLUMN_DATABASE_ID} DESC\"\n    )\n    suspend fun getConversationMessagesFilteredCount(\n        did: String,\n        contact: String,\n        filterConstraint: String\n    ): Long","prompt":""},{"id":4395,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":["data class Sms( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0, @ColumnInfo(name = COLUMN_VOIP_ID) val voipId: Long? = null, @ColumnInfo(name = COLUMN_DATE) val date: Long = Date().time / 1000L, @ColumnInfo(name = COLUMN_INCOMING) val incoming: Long = 0, @ColumnInfo(name = COLUMN_DID) val did: String = \"\", @ColumnInfo(name = COLUMN_CONTACT) val contact: String = \"\", @ColumnInfo(name = COLUMN_TEXT) val text: String = \"\", @ColumnInfo(name = COLUMN_UNREAD) val unread: Long = 0, @ColumnInfo(name = COLUMN_DELIVERED) val delivered: Long = 0, @ColumnInfo(name = COLUMN_DELIVERY_IN_PROGRESS) val deliveryInProgress: Long = 0 )"],"content":"@Query(\n        \"SELECT * FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact AND ${Sms.COLUMN_TEXT} LIKE '%' || :filterConstraint || '%' ORDER BY ${Sms.COLUMN_DELIVERY_IN_PROGRESS} DESC, ${Sms.COLUMN_DATE} DESC, ${Sms.COLUMN_VOIP_ID} DESC, ${Sms.COLUMN_DATABASE_ID} DESC LIMIT :itemLimit\"\n    )\n    suspend fun getConversationMessagesFilteredWithLimit(\n        did: String,\n        contact: String,\n        filterConstraint: String,\n        itemLimit: Long\n    ): List<Sms>","prompt":""},{"id":4396,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":["data class Sms( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0, @ColumnInfo(name = COLUMN_VOIP_ID) val voipId: Long? = null, @ColumnInfo(name = COLUMN_DATE) val date: Long = Date().time / 1000L, @ColumnInfo(name = COLUMN_INCOMING) val incoming: Long = 0, @ColumnInfo(name = COLUMN_DID) val did: String = \"\", @ColumnInfo(name = COLUMN_CONTACT) val contact: String = \"\", @ColumnInfo(name = COLUMN_TEXT) val text: String = \"\", @ColumnInfo(name = COLUMN_UNREAD) val unread: Long = 0, @ColumnInfo(name = COLUMN_DELIVERED) val delivered: Long = 0, @ColumnInfo(name = COLUMN_DELIVERY_IN_PROGRESS) val deliveryInProgress: Long = 0 )"],"content":"@Query(\n        \"SELECT * FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact AND ${Sms.COLUMN_INCOMING} = 1 AND ${Sms.COLUMN_DATE} >= :date AND ${Sms.COLUMN_UNREAD} = 1 ORDER BY ${Sms.COLUMN_DELIVERY_IN_PROGRESS} ASC, ${Sms.COLUMN_DATE} ASC, ${Sms.COLUMN_VOIP_ID} ASC, ${Sms.COLUMN_DATABASE_ID} ASC\"\n    )\n    suspend fun getConversationMessagesUnreadAfterDate(\n        did: String,\n        contact: String,\n        date: Long\n    ): List<Sms>","prompt":""},{"id":4397,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":["data class Sms( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0, @ColumnInfo(name = COLUMN_VOIP_ID) val voipId: Long? = null, @ColumnInfo(name = COLUMN_DATE) val date: Long = Date().time / 1000L, @ColumnInfo(name = COLUMN_INCOMING) val incoming: Long = 0, @ColumnInfo(name = COLUMN_DID) val did: String = \"\", @ColumnInfo(name = COLUMN_CONTACT) val contact: String = \"\", @ColumnInfo(name = COLUMN_TEXT) val text: String = \"\", @ColumnInfo(name = COLUMN_UNREAD) val unread: Long = 0, @ColumnInfo(name = COLUMN_DELIVERED) val delivered: Long = 0, @ColumnInfo(name = COLUMN_DELIVERY_IN_PROGRESS) val deliveryInProgress: Long = 0 )"],"content":"@Query(\n        \"SELECT * FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact\"\n    )\n    suspend fun getConversationMessagesUnsorted(\n        did: String,\n        contact: String\n    ): List<Sms>","prompt":""},{"id":4398,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"SELECT * FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact ORDER BY ${Sms.COLUMN_DELIVERY_IN_PROGRESS} DESC, ${Sms.COLUMN_DATE} DESC, ${Sms.COLUMN_VOIP_ID} DESC, ${Sms.COLUMN_DATABASE_ID} DESC LIMIT 1\"\n    )\n    suspend fun getConversationMessageMostRecent(\n        did: String,\n        contact: String\n    ): Sms?","prompt":""},{"id":4399,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"SELECT * FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact AND (${Sms.COLUMN_TEXT} LIKE '%' || :filterConstraint || '%' COLLATE NOCASE) ORDER BY ${Sms.COLUMN_DELIVERY_IN_PROGRESS} DESC, ${Sms.COLUMN_DATE} DESC, ${Sms.COLUMN_VOIP_ID} DESC, ${Sms.COLUMN_DATABASE_ID} DESC LIMIT 1\"\n    )\n    suspend fun getConversationMessageMostRecentFiltered(\n        did: String,\n        contact: String,\n        filterConstraint: String\n    ): Sms?","prompt":""},{"id":4400,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"SELECT * FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact AND (${Sms.COLUMN_TEXT} LIKE '%' || :filterConstraint || '%' COLLATE NOCASE OR ${Sms.COLUMN_CONTACT} LIKE '%' || :numericFilterConstraint || '%' OR ${Sms.COLUMN_DID} LIKE '%' || :numericFilterConstraint || '%')  ORDER BY ${Sms.COLUMN_DELIVERY_IN_PROGRESS} DESC, ${Sms.COLUMN_DATE} DESC, ${Sms.COLUMN_VOIP_ID} DESC, ${Sms.COLUMN_DATABASE_ID} DESC LIMIT 1\"\n    )\n    suspend fun getConversationMessageMostRecentFiltered(\n        did: String,\n        contact: String,\n        filterConstraint: String,\n        numericFilterConstraint: String\n    ): Sms?","prompt":""},{"id":4401,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"SELECT COALESCE(MAX(${Sms.COLUMN_DATE}), 0) AS ${Sms.COLUMN_DATE} FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact AND ${Sms.COLUMN_INCOMING} = 0\"\n    )\n    suspend fun getConversationMessageDateMostRecentOutgoing(\n        did: String,\n        contact: String\n    ): Long?","prompt":""},{"id":4402,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"SELECT ${Sms.COLUMN_DATABASE_ID} FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_VOIP_ID} = :voipId\"\n    )\n    suspend fun getIdByVoipId(did: String, voipId: Long): Long?","prompt":""},{"id":4403,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\"SELECT DISTINCT ${Sms.COLUMN_DID} FROM ${Sms.TABLE_NAME}\")\n    suspend fun getDids(): List<String>","prompt":""},{"id":4404,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"SELECT * FROM ${Sms.TABLE_NAME} WHERE ${Sms.COLUMN_DID} IN(:dids) ORDER BY ${Sms.COLUMN_DELIVERY_IN_PROGRESS} DESC, ${Sms.COLUMN_DATE} DESC, ${Sms.COLUMN_VOIP_ID} DESC, ${Sms.COLUMN_DATABASE_ID} DESC LIMIT 1\"\n    )\n    suspend fun getMostRecent(dids: Set<String>): Sms?","prompt":""},{"id":4405,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":["data class Sms( @PrimaryKey(autoGenerate = true) @ColumnInfo(name = COLUMN_DATABASE_ID) val databaseId: Long = 0, @ColumnInfo(name = COLUMN_VOIP_ID) val voipId: Long? = null, @ColumnInfo(name = COLUMN_DATE) val date: Long = Date().time / 1000L, @ColumnInfo(name = COLUMN_INCOMING) val incoming: Long = 0, @ColumnInfo(name = COLUMN_DID) val did: String = \"\", @ColumnInfo(name = COLUMN_CONTACT) val contact: String = \"\", @ColumnInfo(name = COLUMN_TEXT) val text: String = \"\", @ColumnInfo(name = COLUMN_UNREAD) val unread: Long = 0, @ColumnInfo(name = COLUMN_DELIVERED) val delivered: Long = 0, @ColumnInfo(name = COLUMN_DELIVERY_IN_PROGRESS) val deliveryInProgress: Long = 0 )"],"content":"@Insert\n    suspend fun insert(sms: Sms): Long","prompt":""},{"id":4406,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"UPDATE ${Sms.TABLE_NAME} SET ${Sms.COLUMN_UNREAD} = 0 WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact\"\n    )\n    suspend fun markConversationRead(did: String, contact: String)","prompt":""},{"id":4407,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"UPDATE ${Sms.TABLE_NAME} SET ${Sms.COLUMN_UNREAD} = 1 WHERE ${Sms.COLUMN_DID} = :did AND ${Sms.COLUMN_CONTACT} = :contact\"\n    )\n    suspend fun markConversationUnread(did: String, contact: String)","prompt":""},{"id":4408,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"UPDATE ${Sms.TABLE_NAME} SET ${Sms.COLUMN_DELIVERED} = 0, ${Sms.COLUMN_DELIVERY_IN_PROGRESS} = 1 WHERE ${Sms.COLUMN_DATABASE_ID} = :id\"\n    )\n    suspend fun markMessageDeliveryInProgress(id: Long)","prompt":""},{"id":4409,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"UPDATE ${Sms.TABLE_NAME} SET ${Sms.COLUMN_DELIVERED} = 0, ${Sms.COLUMN_DELIVERY_IN_PROGRESS} = 0 WHERE ${Sms.COLUMN_DATABASE_ID} = :id\"\n    )\n    suspend fun markMessageNotSent(id: Long)","prompt":""},{"id":4410,"identifierName":"net.kourlas.voipms_sms.database.daos.SmsDao","requiredType":[],"content":"@Query(\n        \"UPDATE ${Sms.TABLE_NAME} SET ${Sms.COLUMN_VOIP_ID} = :voipId, ${Sms.COLUMN_DELIVERED} = 1, ${Sms.COLUMN_DELIVERY_IN_PROGRESS} = 0, ${Sms.COLUMN_DATE} = :date WHERE ${Sms.COLUMN_DATABASE_ID} = :id\"\n    )\n    suspend fun markMessageSent(id: Long, voipId: Long, date: Long)","prompt":""},{"id":4411,"identifierName":"com.orgzly.android.db.dao.RepoDao","requiredType":[],"content":"@Query(\"SELECT * FROM repos WHERE url = :url\")\n    abstract fun get(url: String): Repo?","prompt":""},{"id":4412,"identifierName":"com.orgzly.android.db.dao.RepoDao","requiredType":[],"content":"@Query(\"SELECT * FROM repos WHERE id = :id\")\n    abstract fun get(id: Long): Repo?","prompt":""},{"id":4413,"identifierName":"com.orgzly.android.db.dao.RepoDao","requiredType":["data class Repo( @PrimaryKey(autoGenerate = true) val id: Long, val type: RepoType, val url: String )"],"content":"@Query(\"SELECT * FROM repos WHERE id = :id\")\n    abstract fun getLiveData(id: Long): LiveData<Repo>","prompt":""},{"id":4414,"identifierName":"com.orgzly.android.db.dao.RepoDao","requiredType":["data class Repo( @PrimaryKey(autoGenerate = true) val id: Long, val type: RepoType, val url: String )"],"content":"@Query(\"SELECT * FROM repos ORDER BY url\")\n    abstract fun getAll(): List<Repo>","prompt":""},{"id":4415,"identifierName":"com.orgzly.android.db.dao.RepoDao","requiredType":[],"content":"@Query(\"SELECT * FROM repos ORDER BY url\")\n    abstract fun getAllLiveData(): LiveData<List<Repo>>","prompt":""},{"id":4416,"identifierName":"com.orgzly.android.db.dao.RepoDao","requiredType":[],"content":"@Query(\"DELETE FROM repos WHERE id = :id\")\n    abstract fun delete(id: Long)","prompt":""},{"id":4417,"identifierName":"com.orgzly.android.db.dao.RepoDao","requiredType":["data class Repo( @PrimaryKey(autoGenerate = true) val id: Long, val type: RepoType, val url: String )"],"content":"@Transaction\n    open fun deleteAndInsert(repo: Repo): Long {\n        delete(repo.id)\n\n        return insert(Repo(0, repo.type, repo.url))\n    }","prompt":""},{"id":4418,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Observes list of tasks.\n     *\n     * @return all tasks.\n     */\n    @Query(\"SELECT * FROM Tasks\")\n    fun observeTasks(): LiveData<List<Task>>","prompt":""},{"id":4419,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Observes a single task.\n     *\n     * @param taskId the task id.\n     * @return the task with taskId.\n     */\n    @Query(\"SELECT * FROM Tasks WHERE entryid = :taskId\")\n    fun observeTaskById(taskId: String): LiveData<Task>","prompt":""},{"id":4420,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Select all tasks from the tasks table.\n     *\n     * @return all tasks.\n     */\n    @Query(\"SELECT * FROM Tasks\")\n    suspend fun getTasks(): List<Task>","prompt":""},{"id":4421,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Select a task by id.\n     *\n     * @param taskId the task id.\n     * @return the task with taskId.\n     */\n    @Query(\"SELECT * FROM Tasks WHERE entryid = :taskId\")\n    suspend fun getTaskById(taskId: String): Task?","prompt":""},{"id":4422,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Insert a task in the database. If the task already exists, replace it.\n     *\n     * @param task the task to be inserted.\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertTask(task: Task)","prompt":""},{"id":4423,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":["data class Task@JvmOverloads constructor(val title: String?, val description: String?, val id: String = UUID.randomUUID().toString(), val isCompleted: Boolean = false)"],"content":"/**\n     * Update a task.\n     *\n     * @param task task to be updated\n     * @return the number of tasks updated. This should always be 1.\n     */\n    @Update\n    suspend fun updateTask(task: Task): Int","prompt":""},{"id":4424,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Update the complete status of a task\n     *\n     * @param taskId id of the task\n     * @param completed status to be updated\n     */\n    @Query(\"UPDATE tasks SET completed = :completed WHERE entryid = :taskId\")\n    suspend fun updateCompleted(taskId: String, completed: Boolean)","prompt":""},{"id":4425,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Delete a task by id.\n     *\n     * @return the number of tasks deleted. This should always be 1.\n     */\n    @Query(\"DELETE FROM Tasks WHERE entryid = :taskId\")\n    suspend fun deleteTaskById(taskId: String): Int","prompt":""},{"id":4426,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Delete all tasks.\n     */\n    @Query(\"DELETE FROM Tasks\")\n    suspend fun deleteTasks()","prompt":""},{"id":4427,"identifierName":"com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao","requiredType":[],"content":"/**\n     * Delete all completed tasks from the table.\n     *\n     * @return the number of tasks deleted.\n     */\n    @Query(\"DELETE FROM Tasks WHERE completed = 1\")\n    suspend fun deleteCompletedTasks(): Int","prompt":""},{"id":4428,"identifierName":"lt.vilnius.tvarkau.repository.ReportTypeDao","requiredType":[],"content":"@Query(\"SELECT * FROM report_types where id = :reportTypeId\")\n    abstract fun getById(reportTypeId: Int): ReportType?","prompt":""},{"id":4429,"identifierName":"lt.vilnius.tvarkau.repository.ReportTypeDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insertAll(reportTypes: List<ReportType>)","prompt":""},{"id":4430,"identifierName":"lt.vilnius.tvarkau.repository.ReportTypeDao","requiredType":[],"content":"@Query(\"SELECT * FROM report_types\")\n    abstract fun getAll() : List<ReportType>","prompt":""},{"id":4431,"identifierName":"app.ss.storage.db.dao.PublishingInfoDao","requiredType":[],"content":"@Query(\"SELECT * FROM publishing_info WHERE country = :country AND language = :language LIMIT 1\")\n    fun get(country: String, language: String): PublishingInfoEntity?","prompt":""},{"id":4432,"identifierName":"data.tinder.recommendation.RecommendationUserSpotifyThemeTrackAlbumDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertAlbum(album: RecommendationUserSpotifyThemeTrackAlbumEntity)","prompt":""},{"id":4433,"identifierName":"data.tinder.recommendation.RecommendationUserSpotifyThemeTrackAlbumDao","requiredType":[],"content":"@Query(\"SELECT * from RecommendationUserSpotifyThemeTrackAlbumEntity WHERE id=:id\")\n  @Transaction\n  fun selectAlbumById(id: String)\n      : List<RecommendationUserSpotifyThemeTrackAlbumWithRelatives>","prompt":""},{"id":4434,"identifierName":"com.androidarchitecture.data.local.task.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM task\")\n    override fun getAllTask(): LiveData<List<Task>>","prompt":""},{"id":4435,"identifierName":"com.androidarchitecture.data.local.task.TaskDao","requiredType":[],"content":"@Insert\n    override fun saveTask(task: Task)","prompt":""},{"id":4436,"identifierName":"com.androidarchitecture.data.local.task.TaskDao","requiredType":[],"content":"@Delete\n    override fun removeTask(task: Task)","prompt":""},{"id":4437,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":[],"content":"@Query(\"SELECT * FROM TopPerformerProducts WHERE granularity = :granularity AND siteId = :siteId\")\n    fun observeTopPerformerProducts(\n        siteId: Long,\n        granularity: String\n    ): Flow<List<TopPerformerProductEntity>>","prompt":""},{"id":4438,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":["data class TopPerformerProductEntity( val siteId: Long, val datePeriod: String, val productId: Long, val name: String, val imageUrl: String?, val quantity: Int, val currency: String, val total: Double, val millisSinceLastUpdated: Long )"],"content":"@Query(\"SELECT * FROM TopPerformerProducts WHERE granularity = :granularity AND siteId = :siteId\")\n    suspend fun getTopPerformerProductsFor(\n        siteId: Long,\n        granularity: String\n    ): List<TopPerformerProductEntity>","prompt":""},{"id":4439,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":["data class TopPerformerProductEntity( val siteId: Long, val datePeriod: String, val productId: Long, val name: String, val imageUrl: String?, val quantity: Int, val currency: String, val total: Double, val millisSinceLastUpdated: Long )"],"content":"@Query(\"SELECT * FROM TopPerformerProducts WHERE siteId = :siteId\")\n    suspend fun getTopPerformerProductsForSite(\n        siteId: Long\n    ): List<TopPerformerProductEntity>","prompt":""},{"id":4440,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":["data class TopPerformerProductEntity( val siteId: Long, val datePeriod: String, val productId: Long, val name: String, val imageUrl: String?, val quantity: Int, val currency: String, val total: Double, val millisSinceLastUpdated: Long )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(entity: TopPerformerProductEntity)","prompt":""},{"id":4441,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":[],"content":"@Query(\"DELETE FROM TopPerformerProducts WHERE granularity = :granularity AND siteId = :siteId\")\n    suspend fun deleteAllFor(siteId: Long, granularity: String)","prompt":""},{"id":4442,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":[],"content":"@Transaction\n    suspend fun updateTopPerformerProductsFor(\n        siteId: Long,\n        granularity: String,\n        topPerformerProducts: List<TopPerformerProductEntity>\n    ) {\n        deleteAllFor(siteId, granularity)\n        topPerformerProducts.forEach { topPerformerProduct ->\n            insert(topPerformerProduct)\n        }\n    }","prompt":""},{"id":4443,"identifierName":"org.wordpress.android.fluxc.persistence.dao.TopPerformerProductsDao","requiredType":[],"content":"@Transaction\n    suspend fun updateTopPerformerProductsForSite(\n        siteId: Long,\n        topPerformerProducts: List<TopPerformerProductEntity>\n    ) {\n        topPerformerProducts.forEach { topPerformerProduct ->\n            insert(topPerformerProduct)\n        }\n    }","prompt":""},{"id":4444,"identifierName":"app.ss.storage.db.dao.VideoInfoDao","requiredType":["data class VideoInfoEntity( @PrimaryKey val id: String, val lessonIndex: String, val artist: String, val clips: List<SSVideo> )"],"content":"@Query(\"SELECT * FROM video_info WHERE lessonIndex = :lessonIndex\")\n    fun get(lessonIndex: String): List<VideoInfoEntity>","prompt":""},{"id":4445,"identifierName":"app.ss.storage.db.dao.VideoInfoDao","requiredType":[],"content":"@Query(\"DELETE FROM video_info WHERE lessonIndex = :index\")\n    suspend fun delete(index: String)","prompt":""},{"id":4446,"identifierName":"com.waz.zclient.storage.db.assets.AssetsDao","requiredType":[],"content":"@Query(\"SELECT * FROM Assets2\")\n    suspend fun allAssets(): List<AssetsEntity>","prompt":""},{"id":4447,"identifierName":"com.waz.zclient.storage.db.assets.AssetsDao","requiredType":[],"content":"@Query(\"SELECT * FROM Assets2 ORDER BY _id LIMIT :batchSize OFFSET :start\")\n    override suspend fun nextBatch(start: Int, batchSize: Int): List<AssetsEntity>?","prompt":""},{"id":4448,"identifierName":"com.waz.zclient.storage.db.assets.AssetsDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM Assets2\")\n    override suspend fun count(): Int","prompt":""},{"id":4449,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE id = :id\")\n    override fun findById(id: Long): Bolus?","prompt":""},{"id":4450,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"DELETE FROM $TABLE_BOLUSES\")\n    override fun deleteAllEntries()","prompt":""},{"id":4451,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT id FROM $TABLE_BOLUSES ORDER BY id DESC limit 1\")\n    fun getLastId(): Maybe<Long>","prompt":""},{"id":4452,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE timestamp = :timestamp AND referenceId IS NULL\")\n    fun findByTimestamp(timestamp: Long): Bolus?","prompt":""},{"id":4453,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE nightscoutId = :nsId AND referenceId IS NULL\")\n    fun findByNSId(nsId: String): Bolus?","prompt":""},{"id":4454,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE pumpId = :pumpId AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL\")\n    fun findByPumpIds(pumpId: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): Bolus?","prompt":""},{"id":4455,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE temporaryId = :temporaryId AND pumpType = :pumpType AND pumpSerial = :pumpSerial AND referenceId IS NULL\")\n    fun findByPumpTempIds(temporaryId: Long, pumpType: InterfaceIDs.PumpType, pumpSerial: String): Bolus?","prompt":""},{"id":4456,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE isValid = 1 AND type <> :exclude AND referenceId IS NULL ORDER BY timestamp DESC LIMIT 1\")\n    fun getLastBolusRecord(exclude: Bolus.Type = Bolus.Type.PRIMING): Bolus?","prompt":""},{"id":4457,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE isValid = 1 AND type <> :exclude AND referenceId IS NULL ORDER BY timestamp DESC LIMIT 1\")\n    fun getLastBolusRecordMaybe(exclude: Bolus.Type = Bolus.Type.PRIMING): Maybe<Bolus>","prompt":""},{"id":4458,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE isValid = 1 AND type == :only AND referenceId IS NULL ORDER BY timestamp DESC LIMIT 1\")\n    fun getLastBolusRecordOfType(only: Bolus.Type): Maybe<Bolus>","prompt":""},{"id":4459,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE isValid = 1 AND type <> :exclude AND referenceId IS NULL ORDER BY timestamp ASC LIMIT 1\")\n    fun getOldestBolusRecord(exclude: Bolus.Type = Bolus.Type.PRIMING): Bolus?","prompt":""},{"id":4460,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE isValid = 1 AND timestamp >= :timestamp AND referenceId IS NULL ORDER BY id DESC\")\n    fun getBolusesFromTime(timestamp: Long): Single<List<Bolus>>","prompt":""},{"id":4461,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE isValid = 1 AND timestamp >= :start AND timestamp <= :end AND referenceId IS NULL ORDER BY id DESC\")\n    fun getBolusesFromTime(start: Long, end: Long): Single<List<Bolus>>","prompt":""},{"id":4462,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE timestamp >= :timestamp AND referenceId IS NULL ORDER BY id DESC\")\n    fun getBolusesIncludingInvalidFromTime(timestamp: Long): Single<List<Bolus>>","prompt":""},{"id":4463,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE timestamp >= :from AND timestamp <= :to AND referenceId IS NULL ORDER BY id DESC\")\n    fun getBolusesIncludingInvalidFromTimeToTime(from: Long, to: Long): Single<List<Bolus>>","prompt":""},{"id":4464,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"// This query will be used with v3 to get all changed records\n    @Query(\"SELECT * FROM $TABLE_BOLUSES WHERE id > :id AND type <> :exclude AND referenceId IS NULL OR id IN (SELECT DISTINCT referenceId FROM $TABLE_BOLUSES WHERE id > :id) ORDER BY id ASC\")\n    fun getModifiedFrom(id: Long, exclude: Bolus.Type = Bolus.Type.PRIMING): Single<List<Bolus>>","prompt":""},{"id":4465,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"// for WS we need 1 record only\n    @Query(\"SELECT * FROM $TABLE_BOLUSES WHERE id > :id AND type <> :exclude ORDER BY id ASC limit 1\")\n    fun getNextModifiedOrNewAfterExclude(id: Long, exclude: Bolus.Type = Bolus.Type.PRIMING): Maybe<Bolus>","prompt":""},{"id":4466,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE id = :referenceId\")\n    fun getCurrentFromHistoric(referenceId: Long): Maybe<Bolus>","prompt":""},{"id":4467,"identifierName":"info.nightscout.androidaps.database.daos.BolusDao","requiredType":[],"content":"@Query(\"SELECT * FROM $TABLE_BOLUSES WHERE dateCreated > :since AND dateCreated <= :until LIMIT :limit OFFSET :offset\")\n    suspend fun getNewEntriesSince(since: Long, until: Long, limit: Int, offset: Int): List<Bolus>","prompt":""},{"id":4468,"identifierName":"com.orgzly.android.db.dao.OrgTimestampDao","requiredType":["data class OrgTimestamp( @PrimaryKey(autoGenerate = true) val id: Long, val string: String, @ColumnInfo(name = \"is_active\") val isActive: Boolean, val year: Int, val month: Int, val day: Int, val hour: Int?, val minute: Int?, val second: Int?, @ColumnInfo(name = \"end_hour\") val endHour: Int?, @ColumnInfo(name = \"end_minute\") val endMinute: Int?, @ColumnInfo(name = \"end_second\") val endSecond: Int?, @ColumnInfo(name = \"repeater_type\") val repeaterType: Int?, @ColumnInfo(name = \"repeater_value\") val repeaterValue: Int?, @ColumnInfo(name = \"repeater_unit\") val repeaterUnit: Int?, @ColumnInfo(name = \"habit_deadline_value\") val habitDeadlineValue: Int?, @ColumnInfo(name = \"habit_deadline_unit\") val habitDeadlineUnit: Int?, @ColumnInfo(name = \"delay_type\") val delayType: Int?, @ColumnInfo(name = \"delay_value\") val delayValue: Int?, @ColumnInfo(name = \"delay_unit\") val delayUnit: Int?, val timestamp: Long, @ColumnInfo(name = \"end_timestamp\") val endTimestamp: Long? )"],"content":"@Query(\"SELECT * FROM org_timestamps\")\n    fun getAll(): List<OrgTimestamp>","prompt":""},{"id":4469,"identifierName":"com.orgzly.android.db.dao.OrgTimestampDao","requiredType":[],"content":"@Query(\"SELECT * FROM org_timestamps WHERE string = :str\")\n    fun getByString(str: String): OrgTimestamp?","prompt":""},{"id":4470,"identifierName":"com.emaginalabs.haveaniceday.core.dao.NotificationDAO","requiredType":[],"content":"@Query(\"SELECT * FROM notification order by id desc\")\n    fun findAll(): List<Notification>","prompt":""},{"id":4471,"identifierName":"com.emaginalabs.haveaniceday.core.dao.NotificationDAO","requiredType":[],"content":"@Insert\n    fun insert(notification: Notification): Long","prompt":""},{"id":4472,"identifierName":"com.emaginalabs.haveaniceday.core.dao.NotificationDAO","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun update(notification: Notification)","prompt":""},{"id":4473,"identifierName":"com.emaginalabs.haveaniceday.core.dao.NotificationDAO","requiredType":[],"content":"@Query(\"SELECT count(*) FROM notification where read=0 order by id desc\")\n    fun countUnread(): Int","prompt":""},{"id":4474,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"SELECT * FROM urlcheck ORDER BY id DESC\")\n    fun all(): List<URLCheck>","prompt":""},{"id":4475,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"SELECT * FROM urlcheck ORDER BY id DESC\")\n    fun allObservable(): Flowable<List<URLCheck>>","prompt":""},{"id":4476,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"SELECT * FROM urlcheck WHERE enableNotifications > 0 and updateShown < 1 ORDER BY id DESC\")\n    fun allEnabledAndNotUpdateShown(): List<URLCheck>","prompt":""},{"id":4477,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"SELECT * FROM urlcheck WHERE enableNotifications > 0 ORDER BY id DESC\")\n    fun allEnabled(): List<URLCheck>","prompt":""},{"id":4478,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"SELECT * FROM pwnlog ORDER BY id ASC LIMIT 500\")\n    fun logs(): List<PWNLog>","prompt":""},{"id":4479,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"SELECT * FROM pwnlog ORDER BY id DESC LIMIT 500\")\n    fun logsDescending(): List<PWNLog>","prompt":""},{"id":4480,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"SELECT * FROM pwntask ORDER BY id DESC\")\n    fun tasks(): List<PWNTask>","prompt":""},{"id":4481,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"SELECT * FROM urlcheck WHERE id = :id\")\n    operator fun get(id: Int): URLCheck","prompt":""},{"id":4482,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(vararg urlChecks: URLCheck): List<Long>","prompt":""},{"id":4483,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertCheck(urlCheck: URLCheck): Long?","prompt":""},{"id":4484,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Insert\n    fun insertTask(pwntask: PWNTask): Long?","prompt":""},{"id":4485,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Insert\n    fun insertLog(log: PWNLog): Long?","prompt":""},{"id":4486,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"DELETE FROM pwntask\\n\" +\n            \"WHERE id NOT IN (\\n\" +\n            \"  SELECT id\\n\" +\n            \"  FROM (\\n\" +\n            \"    SELECT id\\n\" +\n            \"    FROM pwntask\\n\" +\n            \"    ORDER BY id DESC\\n\" +\n            \"    LIMIT 20 -- keep this many records\\n\" +\n            \"  ) foo\\n\" +\n            \");\")\n    fun reduceTasks()","prompt":""},{"id":4487,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"SELECT * FROM pwntask WHERE id = :id\")\n    fun getTask(id: Int): PWNTask","prompt":""},{"id":4488,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Update\n    fun updateTask(pwnTask: PWNTask)","prompt":""},{"id":4489,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Delete\n    fun delete(urlCheck: URLCheck)","prompt":""},{"id":4490,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Update\n    fun update(urlCheck: List<URLCheck>)","prompt":""},{"id":4491,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Update\n    fun update(urlCheck: URLCheck)","prompt":""},{"id":4492,"identifierName":"com.rhm.pwn.model.URLCheckDao","requiredType":[],"content":"@Query(\"DELETE FROM urlcheck\")\n    fun wipeTable()","prompt":""},{"id":4493,"identifierName":"com.restfeel.service.BlogService","requiredType":["data class Blognull"],"content":"//    @Query(value = \"{ 'title' : ?0}\")\n    @Query(value = \"{ 'title' : {\\$regex: ?0, \\$options: 'i'}}\") //我们这里设置 $options 为 $i，意思是检索不区分大小写。\n    fun findByTitle(@Param(\"title\") title: String): Iterable<Blog>","prompt":""},{"id":4494,"identifierName":"org.monora.uprotocol.client.android.database.ClientDao","requiredType":[],"content":"@Delete\n    suspend fun delete(client: UClient)","prompt":""},{"id":4495,"identifierName":"org.monora.uprotocol.client.android.database.ClientDao","requiredType":[],"content":"@Query(\"SELECT * FROM client WHERE uid = :uid LIMIT 1\")\n    suspend fun getSingle(uid: String): UClient?","prompt":""},{"id":4496,"identifierName":"org.monora.uprotocol.client.android.database.ClientDao","requiredType":[],"content":"@Query(\"SELECT * FROM client WHERE uid = :uid LIMIT 1\")\n    fun get(uid: String): LiveData<UClient>","prompt":""},{"id":4497,"identifierName":"org.monora.uprotocol.client.android.database.ClientDao","requiredType":[],"content":"@Query(\"SELECT * FROM client ORDER BY lastUsageTime DESC\")\n    fun getAll(): LiveData<List<UClient>>","prompt":""},{"id":4498,"identifierName":"org.monora.uprotocol.client.android.database.ClientDao","requiredType":[],"content":"@Insert\n    suspend fun insert(client: UClient)","prompt":""},{"id":4499,"identifierName":"org.monora.uprotocol.client.android.database.ClientDao","requiredType":[],"content":"@Update\n    suspend fun update(client: UClient)","prompt":""},{"id":4500,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertAll(movies: List<Movie>)","prompt":""},{"id":4501,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDao","requiredType":[],"content":"@Delete\n    fun delete(movie: Movie)","prompt":""},{"id":4502,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM movies\")\n    fun getAll(): List<Movie>","prompt":""},{"id":4503,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM movies WHERE type = :type\")\n    fun getAllTrending(type: Int = 0): List<Movie>","prompt":""},{"id":4504,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM movies WHERE type = :type\")\n    fun getAllUpcoming(type: Int = 1): List<Movie>","prompt":""},{"id":4505,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDao","requiredType":[],"content":"@Query(\"SELECT * FROM movies WHERE type = :type\")\n    fun getAllInTheaters(type: Int = 2): List<Movie>","prompt":""},{"id":4506,"identifierName":"tech.salroid.filmy.data.local.db.dao.MovieDao","requiredType":[],"content":"@Update\n    fun updateMovie(movie: Movie): Int","prompt":""},{"id":4507,"identifierName":"com.owncloud.android.data.folderbackup.db.FolderBackupDao","requiredType":[],"content":"@Query(\n        \"SELECT * from \" + ProviderMeta.ProviderTableMeta.FOLDER_BACKUP_TABLE_NAME + \" WHERE \" +\n                FolderBackUpEntity.folderBackUpEntityNameField + \" = :name\"\n    )\n    abstract fun getFolderBackUpConfigurationByName(\n        name: String\n    ): FolderBackUpEntity?","prompt":""},{"id":4508,"identifierName":"com.owncloud.android.data.folderbackup.db.FolderBackupDao","requiredType":[],"content":"@Query(\n        \"SELECT * from \" + ProviderMeta.ProviderTableMeta.FOLDER_BACKUP_TABLE_NAME + \" WHERE \" +\n                FolderBackUpEntity.folderBackUpEntityNameField + \" = :name\"\n    )\n    abstract fun getFolderBackUpConfigurationByNameStream(\n        name: String\n    ): Flow<FolderBackUpEntity?>","prompt":""},{"id":4509,"identifierName":"com.owncloud.android.data.folderbackup.db.FolderBackupDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract fun insert(folderBackUpEntity: FolderBackUpEntity): Long","prompt":""},{"id":4510,"identifierName":"com.owncloud.android.data.folderbackup.db.FolderBackupDao","requiredType":[],"content":"@Transaction\n    open fun update(folderBackUpEntity: FolderBackUpEntity): Long {\n        delete(folderBackUpEntity.name)\n        return insert(folderBackUpEntity)\n    }","prompt":""},{"id":4511,"identifierName":"com.owncloud.android.data.folderbackup.db.FolderBackupDao","requiredType":[],"content":"@Query(\n        \"DELETE from \" + ProviderMeta.ProviderTableMeta.FOLDER_BACKUP_TABLE_NAME + \" WHERE \" +\n                FolderBackUpEntity.folderBackUpEntityNameField + \" = :name\"\n    )\n    abstract fun delete(name: String): Int","prompt":""},{"id":4512,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.ExerciseDao","requiredType":[],"content":"@Query(\"select * from exercise\")\n    fun getAllExercises(): Flowable<List<ExerciseObject>>","prompt":""},{"id":4513,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.ExerciseDao","requiredType":[],"content":"@Query(\"select * from exercise where id = :id\")\n    fun findExerciseById(id: Long): ExerciseObject","prompt":""},{"id":4514,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.ExerciseDao","requiredType":[],"content":"@Query(\"select * from exercise where id in (:userIds)\")\n    fun findExercisesByIds(userIds: Array<Long>): Flowable<List<ExerciseObject>>","prompt":""},{"id":4515,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.ExerciseDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertExercise(exerciseObject: ExerciseObject)","prompt":""},{"id":4516,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.ExerciseDao","requiredType":[],"content":"@Update(onConflict = REPLACE)\n    fun updateExercise(exerciseObject: ExerciseObject)","prompt":""},{"id":4517,"identifierName":"com.sonnyrodriguez.fittrainer.fittrainerbasic.database.ExerciseDao","requiredType":[],"content":"@Delete\n    fun deleteExercise(exerciseObject: ExerciseObject)","prompt":""},{"id":4518,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Query(\"SELECT * FROM emoji\")\n    fun loadAllEmojis(): List<Emoji>","prompt":""},{"id":4519,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Query(\"SELECT * FROM emoji WHERE url IS NULL\")\n    fun loadSimpleEmojis(): List<Emoji>","prompt":""},{"id":4520,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Query(\"SELECT * FROM emoji WHERE url IS NOT NULL\")\n    fun loadAllCustomEmojis(): List<Emoji>","prompt":""},{"id":4521,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Query(\"SELECT * FROM emoji WHERE shortname=:shortname\")\n    fun loadEmojiByShortname(shortname: String): List<Emoji>","prompt":""},{"id":4522,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Query(\"SELECT * FROM emoji WHERE UPPER(category)=UPPER(:category)\")\n    fun loadEmojisByCategory(category: String): List<Emoji>","prompt":""},{"id":4523,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Query(\"SELECT * FROM emoji WHERE UPPER(category)=UPPER(:category) AND url LIKE :url\")\n    fun loadEmojisByCategoryAndUrl(category: String, url: String): List<Emoji>","prompt":""},{"id":4524,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Insert(onConflict = IGNORE)\n    fun insertEmoji(emoji: Emoji)","prompt":""},{"id":4525,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Insert(onConflict = IGNORE)\n    fun insertAllEmojis(vararg emojis: Emoji)","prompt":""},{"id":4526,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Update\n    fun updateEmoji(emoji: Emoji)","prompt":""},{"id":4527,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Delete\n    fun deleteEmoji(emoji: Emoji)","prompt":""},{"id":4528,"identifierName":"chat.rocket.android.emoji.EmojiDao","requiredType":[],"content":"@Query(\"DELETE FROM emoji\")\n    fun deleteAll()","prompt":""},{"id":4529,"identifierName":"org.fossasia.openevent.general.speakers.SpeakerWithEventDao","requiredType":[],"content":"@Query(\"\"\"\n        SELECT speaker.* FROM speaker\n        INNER JOIN speakerwithevent ON\n        speaker.id = speakerwithevent.speaker_id\n        WHERE speakerwithevent.event_id = :eventID\n        \"\"\")\n    fun getSpeakerWithEventId(eventID: Long): LiveData<List<Speaker>>","prompt":""},{"id":4530,"identifierName":"org.fossasia.openevent.general.speakers.SpeakerWithEventDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insert(join: SpeakerWithEvent)","prompt":""},{"id":4531,"identifierName":"be.florien.anyflow.data.local.dao.QueueOrderDao","requiredType":[],"content":"@Query(\"SELECT count(*) FROM queueorder\")\n    protected abstract suspend fun getCount(): Int","prompt":""},{"id":4532,"identifierName":"be.florien.anyflow.data.local.dao.QueueOrderDao","requiredType":[],"content":"@Query(\"DELETE FROM queueorder\")\n    abstract suspend fun deleteAll()","prompt":""},{"id":4533,"identifierName":"be.florien.anyflow.data.local.dao.QueueOrderDao","requiredType":[],"content":"@Transaction\n    open suspend fun setOrder(orderList: List<DbQueueOrder>) {\n        deleteAll()\n        insert(orderList)\n    }","prompt":""},{"id":4534,"identifierName":"com.google.samples.apps.sunflower.data.GardenPlantingDao","requiredType":[],"content":"@Query(\"SELECT * FROM garden_plantings\")\n    fun getGardenPlantings(): LiveData<List<GardenPlanting>>","prompt":""},{"id":4535,"identifierName":"com.google.samples.apps.sunflower.data.GardenPlantingDao","requiredType":[],"content":"@Query(\"SELECT EXISTS(SELECT 1 FROM garden_plantings WHERE plant_id = :plantId LIMIT 1)\")\n    fun isPlanted(plantId: String): LiveData<Boolean>","prompt":""},{"id":4536,"identifierName":"com.google.samples.apps.sunflower.data.GardenPlantingDao","requiredType":[],"content":"/**\n     * This query will tell Room to query both the [Plant] and [GardenPlanting] tables and handle\n     * the object mapping.\n     */\n    @Transaction\n    @Query(\"SELECT * FROM plants WHERE id IN (SELECT DISTINCT(plant_id) FROM garden_plantings)\")\n    fun getPlantedGardens(): LiveData<List<PlantAndGardenPlantings>>","prompt":""},{"id":4537,"identifierName":"com.google.samples.apps.sunflower.data.GardenPlantingDao","requiredType":[],"content":"@Insert\n    suspend fun insertGardenPlanting(gardenPlanting: GardenPlanting): Long","prompt":""},{"id":4538,"identifierName":"com.google.samples.apps.sunflower.data.GardenPlantingDao","requiredType":[],"content":"@Delete\n    suspend fun deleteGardenPlanting(gardenPlanting: GardenPlanting)","prompt":""},{"id":4539,"identifierName":"org.videolan.moviepedia.database.MediaPersonJoinDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertPerson(person: MediaPersonJoin)","prompt":""},{"id":4540,"identifierName":"org.videolan.moviepedia.database.MediaPersonJoinDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertPersons(persons: List<MediaPersonJoin>)","prompt":""},{"id":4541,"identifierName":"org.videolan.moviepedia.database.MediaPersonJoinDao","requiredType":[],"content":"@Query(\"DELETE FROM media_person_join WHERE mediaId = :moviepediaId\")\n    fun removeAllFor(moviepediaId: String)","prompt":""},{"id":4542,"identifierName":"org.videolan.moviepedia.database.MediaPersonJoinDao","requiredType":[],"content":"@Query(\"SELECT * FROM media_person_join\")\n    fun getAll(): List<MediaPersonJoin>","prompt":""},{"id":4543,"identifierName":"org.videolan.moviepedia.database.MediaPersonJoinDao","requiredType":[],"content":"@Query(\"\"\"\n           SELECT * FROM media_metadata_person\n           INNER JOIN media_person_join\n           ON media_metadata_person.moviepedia_id=media_person_join.personId\n           WHERE media_person_join.mediaId=:moviepediaId AND media_person_join.type=:type\n           \"\"\")\n    fun getActorsForMediaLive(moviepediaId: String, type: PersonType): LiveData<List<Person>>","prompt":""},{"id":4544,"identifierName":"org.videolan.moviepedia.database.MediaPersonJoinDao","requiredType":[],"content":"@Query(\"\"\"\n           SELECT * FROM media_metadata_person\n           INNER JOIN media_person_join\n           ON media_metadata_person.moviepedia_id=media_person_join.personId\n           WHERE media_person_join.mediaId=:moviepediaId AND media_person_join.type=:type\n           \"\"\")\n    fun getActorsForMedia(moviepediaId: String, type: PersonType): List<Person>","prompt":""},{"id":4545,"identifierName":"br.com.bookmark.movie.data.local.dao.MovieBookmarksDao","requiredType":["data class MovieBookmark( @PrimaryKey(autoGenerate = false) val id: Int )"],"content":"@Query(\"SELECT * FROM movie_bookmark\")\n    suspend fun getAll(): List<MovieBookmark>","prompt":""},{"id":4546,"identifierName":"br.com.bookmark.movie.data.local.dao.MovieBookmarksDao","requiredType":[],"content":"@Query(\"SELECT * FROM movie_bookmark WHERE id == :movieId\")\n    suspend fun get(movieId: Int): MovieBookmark?","prompt":""},{"id":4547,"identifierName":"br.com.bookmark.movie.data.local.dao.MovieBookmarksDao","requiredType":["data class MovieBookmark( @PrimaryKey(autoGenerate = false) val id: Int )"],"content":"@Query(\"SELECT * FROM movie_bookmark WHERE id IN (:movieIds)\")\n    suspend fun loadAllByIds(movieIds: IntArray): List<MovieBookmark>","prompt":""},{"id":4548,"identifierName":"br.com.bookmark.movie.data.local.dao.MovieBookmarksDao","requiredType":["data class MovieBookmark( @PrimaryKey(autoGenerate = false) val id: Int )"],"content":"@Insert\n    suspend fun insert(movie: MovieBookmark): Long","prompt":""},{"id":4549,"identifierName":"br.com.bookmark.movie.data.local.dao.MovieBookmarksDao","requiredType":[],"content":"@Query(\"DELETE FROM movie_bookmark WHERE id = :movieId\")\n    suspend fun delete(movieId: Int): Int","prompt":""},{"id":4550,"identifierName":"com.guerinet.mymartlet.util.room.daos.StatementDao","requiredType":[],"content":"/**\n     * Returns all of the [Statement]s in an observable format\n     */\n    @Query(\"SELECT * FROM Statement\")\n    abstract fun getAll(): LiveData<List<Statement>>","prompt":""},{"id":4551,"identifierName":"com.guerinet.mymartlet.util.room.daos.StatementDao","requiredType":[],"content":"/**\n     * Deletes all of the stored [Statement]s\n     */\n    @Query(\"DELETE FROM Statement\")\n    abstract fun deleteAll()","prompt":""},{"id":4552,"identifierName":"com.guerinet.mymartlet.util.room.daos.StatementDao","requiredType":[],"content":"/**\n     * Updates the list of [statements] locally stored\n     */\n    @Transaction\n    open fun update(statements: List<Statement>) = update(statements, this::deleteAll)","prompt":""},{"id":4553,"identifierName":"com.android.samples.donuttracker.storage.CoffeeDao","requiredType":[],"content":"@Query(\"SELECT * FROM coffee\")\n    fun getAll(): LiveData<List<Coffee>>","prompt":""},{"id":4554,"identifierName":"com.android.samples.donuttracker.storage.CoffeeDao","requiredType":["data class Coffee( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val description: String = \"\", val rating: Int )"],"content":"@Query(\"SELECT * FROM coffee WHERE id = :id\")\n    suspend fun get(id: Long): Coffee","prompt":""},{"id":4555,"identifierName":"com.android.samples.donuttracker.storage.CoffeeDao","requiredType":["data class Coffee( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val description: String = \"\", val rating: Int )"],"content":"@Insert\n    suspend fun insert(coffee: Coffee): Long","prompt":""},{"id":4556,"identifierName":"com.android.samples.donuttracker.storage.CoffeeDao","requiredType":["data class Coffee( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val description: String = \"\", val rating: Int )"],"content":"@Delete\n    suspend fun delete(coffee: Coffee)","prompt":""},{"id":4557,"identifierName":"com.android.samples.donuttracker.storage.CoffeeDao","requiredType":["data class Coffee( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val description: String = \"\", val rating: Int )"],"content":"@Update\n    suspend fun update(coffee: Coffee)","prompt":""},{"id":4558,"identifierName":"com.phapps.elitedangerous.companion.data.doa.StarSystemDao","requiredType":["data class Stationnull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg stations: Station)","prompt":""},{"id":4559,"identifierName":"com.phapps.elitedangerous.companion.data.doa.StarSystemDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg systems: StarSystem)","prompt":""},{"id":4560,"identifierName":"com.phapps.elitedangerous.companion.data.doa.StarSystemDao","requiredType":["data class Starportnull"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg starports: Starport)","prompt":""},{"id":4561,"identifierName":"com.phapps.elitedangerous.companion.data.doa.StarSystemDao","requiredType":[],"content":"@Query(\"SELECT * FROM star_systems WHERE id = :id\")\n    fun getStarSystem(id: Long): LiveData<StarSystem>","prompt":""},{"id":4562,"identifierName":"com.phapps.elitedangerous.companion.data.doa.StarSystemDao","requiredType":["data class Stationnull"],"content":"@Query(\"SELECT * FROM stations WHERE id = :id\")\n    fun getStation(id: Long): LiveData<Station>","prompt":""},{"id":4563,"identifierName":"com.phapps.elitedangerous.companion.data.doa.StarSystemDao","requiredType":[],"content":"@Query(\"SELECT * FROM starports WHERE star_system_id = :starSystemId\")\n    fun getStarports(starSystemId: Long): LiveData<List<Starport>>","prompt":""},{"id":4564,"identifierName":"com.phapps.elitedangerous.companion.data.doa.StarSystemDao","requiredType":["data class Starportnull"],"content":"@Query(\"SELECT * FROM starports WHERE id = :id\")\n    fun getStarport(id: Long): LiveData<Starport>","prompt":""},{"id":4565,"identifierName":"com.eje_c.multilink.controller.db.DeviceDao","requiredType":[],"content":"/**\n     * Create device entity.\n     */\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun create(deviceEntity: DeviceEntity)","prompt":""},{"id":4566,"identifierName":"com.eje_c.multilink.controller.db.DeviceDao","requiredType":[],"content":"/**\n     * Get devices which are recently updated.\n     */\n    @Query(\"SELECT * FROM DeviceEntity\")\n    fun query(): LiveData<List<DeviceEntity>>","prompt":""},{"id":4567,"identifierName":"com.eje_c.multilink.controller.db.DeviceDao","requiredType":[],"content":"/**\n     * Delete devices which are not recently updated.\n     */\n    @Query(\"DELETE FROM DeviceEntity WHERE updated_at < :updateTimeThreshold\")\n    fun clear(updateTimeThreshold: Long = SystemClock.uptimeMillis() - UPDATE_TIME_THRESHOLD_FOR_CLEAR)","prompt":""},{"id":4568,"identifierName":"com.android.samples.donuttracker.core.storage.DonutDao","requiredType":[],"content":"@Query(\"SELECT * FROM donut\")\n    fun getAll(): LiveData<List<Donut>>","prompt":""},{"id":4569,"identifierName":"com.android.samples.donuttracker.core.storage.DonutDao","requiredType":["data class Donut( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val description: String = \"\", val rating: Int )"],"content":"@Query(\"SELECT * FROM donut WHERE id = :id\")\n    suspend fun get(id: Long): Donut","prompt":""},{"id":4570,"identifierName":"com.android.samples.donuttracker.core.storage.DonutDao","requiredType":["data class Donut( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val description: String = \"\", val rating: Int )"],"content":"@Insert\n    suspend fun insert(donut: Donut): Long","prompt":""},{"id":4571,"identifierName":"com.android.samples.donuttracker.core.storage.DonutDao","requiredType":["data class Donut( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val description: String = \"\", val rating: Int )"],"content":"@Delete\n    suspend fun delete(donut: Donut)","prompt":""},{"id":4572,"identifierName":"com.android.samples.donuttracker.core.storage.DonutDao","requiredType":["data class Donut( @PrimaryKey(autoGenerate = true) val id: Long, val name: String, val description: String = \"\", val rating: Int )"],"content":"@Update\n    suspend fun update(donut: Donut)","prompt":""},{"id":4573,"identifierName":"biz.eventually.atpl.data.dao.QuestionDao","requiredType":[],"content":"@Query(\"SELECT * FROM question\")\n    abstract fun getAll(): LiveData<List<Question>>","prompt":""},{"id":4574,"identifierName":"biz.eventually.atpl.data.dao.QuestionDao","requiredType":["data class QuestionView( @Embedded var question: Question = Question(-1, -1, \"\", \"\"), @Relation(parentColumn = \"idWeb\", entityColumn = \"question_id\", entity = Answer::class) var answers: List<Answer>? = null )"],"content":"@Transaction // good practice with POJO w/ @Relation Object to ensure consistency\n    @Query(\"SELECT * FROM question WHERE topic_id = :topicId\")\n    abstract fun findByTopicId(topicId: Long): List<QuestionView>","prompt":""},{"id":4575,"identifierName":"biz.eventually.atpl.data.dao.QuestionDao","requiredType":[],"content":"@Query(\"SELECT idWeb FROM question\")\n    abstract fun getIds(): List<Long>","prompt":""},{"id":4576,"identifierName":"biz.eventually.atpl.data.dao.QuestionDao","requiredType":[],"content":"@Query(\"SELECT * FROM question WHERE topic_id = :topicId AND (img is not null OR img <> '')\")\n    abstract fun getQuestionWithImage(topicId: Long): List<Question>","prompt":""},{"id":4577,"identifierName":"biz.eventually.atpl.data.dao.QuestionDao","requiredType":[],"content":"@Query(\"SELECT * FROM question WHERE idWeb = :idWeb\")\n    abstract fun findById(idWeb: Long): Question?","prompt":""},{"id":4578,"identifierName":"biz.eventually.atpl.data.dao.QuestionDao","requiredType":[],"content":"@Insert\n    internal abstract fun insertAnswers(answers: List<Answer>)","prompt":""},{"id":4579,"identifierName":"biz.eventually.atpl.data.dao.QuestionDao","requiredType":[],"content":"@Update\n    internal abstract fun updateAnswers(answer: List<Answer>)","prompt":""},{"id":4580,"identifierName":"biz.eventually.atpl.data.dao.QuestionDao","requiredType":[],"content":"fun insertQuestionAndAnswers(question: Question): Long {\n        val id = insert(question)\n        question.answers.forEach { it.questionId = id }\n        insertAnswers(question.answers)\n\n        return id\n    }","prompt":""},{"id":4581,"identifierName":"biz.eventually.atpl.data.dao.QuestionDao","requiredType":[],"content":"fun updateQuestionAndAnswers(question: Question) {\n        update(question)\n        updateAnswers(question.answers)\n    }","prompt":""},{"id":4582,"identifierName":"de.tum.`in`.tumcampusapp.component.notifications.persistence.ScheduledNotificationsDao","requiredType":[],"content":"@Query(\"SELECT * FROM scheduled_notifications WHERE type_id = :typeId AND content_id = :contentId LIMIT 1\")\n    fun find(typeId: Int, contentId: Int): ScheduledNotification?","prompt":""},{"id":4583,"identifierName":"de.tum.`in`.tumcampusapp.component.notifications.persistence.ScheduledNotificationsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(notification: ScheduledNotification): Long","prompt":""},{"id":4584,"identifierName":"de.tum.`in`.tumcampusapp.component.notifications.persistence.ScheduledNotificationsDao","requiredType":[],"content":"@Query(\"DELETE FROM scheduled_notifications WHERE type_id = :typeId AND content_id = :contentId\")\n    fun delete(typeId: Int, contentId: Int)","prompt":""},{"id":4585,"identifierName":"com.robyn.dayplus2.data.source.local.EventsDao","requiredType":["data class MyEventnull"],"content":"@Query(\"select * from myevent\")\n    fun all(): List<MyEvent>","prompt":""},{"id":4586,"identifierName":"com.robyn.dayplus2.data.source.local.EventsDao","requiredType":["data class MyEventnull"],"content":"@Query(\"select * from myevent where uuid = :id\")\n    fun getEventById(id: String): MyEvent","prompt":""},{"id":4587,"identifierName":"com.robyn.dayplus2.data.source.local.EventsDao","requiredType":["data class MyEventnull"],"content":"@Insert(onConflict = REPLACE)\n    fun insertEvent(event: MyEvent)  // insert and replace","prompt":""},{"id":4588,"identifierName":"com.robyn.dayplus2.data.source.local.EventsDao","requiredType":["data class MyEventnull"],"content":"@Delete\n    fun deleteEvent(event: MyEvent)","prompt":""},{"id":4589,"identifierName":"com.robyn.dayplus2.data.source.local.EventsDao","requiredType":[],"content":"@Delete\n    fun deleteAllEvents(events: List<MyEvent>)","prompt":""},{"id":4590,"identifierName":"com.robyn.dayplus2.data.source.local.EventsDao","requiredType":[],"content":"@Query(\"delete from myevent where uuid = :eventId\")\n    fun deleteEventById(eventId: String)","prompt":""},{"id":4591,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Query(\"SELECT * FROM Bookmark\")\n    fun all(): List<Bookmark>","prompt":""},{"id":4592,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Query(\"SELECT title FROM Bookmark WHERE folder <> 0\")\n    fun folders(): List<String>","prompt":""},{"id":4593,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Query(\"SELECT * FROM Bookmark WHERE parent = :folderName\")\n    fun findByParent(folderName: String): List<Bookmark>","prompt":""},{"id":4594,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Query(\"SELECT * FROM Bookmark WHERE title LIKE :query AND folder = 0 LIMIT :limit\")\n    fun search(query: String, limit: Int): List<Bookmark>","prompt":""},{"id":4595,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun add(bookmark: Bookmark)","prompt":""},{"id":4596,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Delete\n    fun delete(bookmark: Bookmark)","prompt":""},{"id":4597,"identifierName":"jp.toastkid.yobidashi.browser.bookmark.model.BookmarkRepository","requiredType":[],"content":"@Query(\"DELETE FROM Bookmark\")\n    fun clear()","prompt":""},{"id":4598,"identifierName":"org.fossasia.openevent.general.feedback.FeedbackDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertFeedback(feedbacks: List<Feedback>)","prompt":""},{"id":4599,"identifierName":"org.fossasia.openevent.general.feedback.FeedbackDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertSingleFeedback(feedback: Feedback)","prompt":""},{"id":4600,"identifierName":"org.fossasia.openevent.general.feedback.FeedbackDao","requiredType":[],"content":"@Query(\"SELECT * FROM feedback WHERE event = :eventId\")\n    fun getAllFeedbackUnderEvent(eventId: Long): Single<List<Feedback>>","prompt":""},{"id":4601,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"/* This is a transaction since GameWithPlayers pulls from multiple tables. */\n    @Transaction\n    @Query(\"SELECT * FROM games\")\n    abstract fun getGamesWithPlayers(): LiveData<List<GameWithPlayers>>","prompt":""},{"id":4602,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Query(\"SELECT * FROM players WHERE playerName = :playerName\")\n    abstract fun getPlayer(playerName: String): Player?","prompt":""},{"id":4603,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT *  FROM games ORDER BY startTime DESC LIMIT 1\")\n    abstract fun getCurrentGameWithPlayers(): LiveData<GameWithPlayers>","prompt":""},{"id":4604,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Transaction\n    @Query(\n        \"\"\"\n        SELECT * FROM game_statuses\n        WHERE gameId = (\n            SELECT gameId FROM games\n            ORDER BY startTime DESC\n            LIMIT 1)\n        ORDER BY gamePlayerNumber\n        \"\"\"\n    )\n    abstract fun getCurrentGameStatuses(): LiveData<List<GameStatus>>","prompt":""},{"id":4605,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Transaction\n    @Query(\n        \"\"\"\n        SELECT * FROM game_statuses gs\n        WHERE gs.gameId IN (\n            SELECT gameId FROM games\n            WHERE gameState = :finishedGameState\n        )\n        \"\"\"\n    )\n    abstract fun getCompletedGameStatusesWithPlayers(\n        finishedGameState: GameState = GameState.Finished\n    ): LiveData<List<GameStatusWithPlayer>>","prompt":""},{"id":4606,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertGame(game: Game): Long","prompt":""},{"id":4607,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertPlayer(player: Player): Long","prompt":""},{"id":4608,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertPlayers(players: List<Player>): List<Long>","prompt":""},{"id":4609,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Insert\n    abstract suspend fun insertGameStatuses(gameStatuses: List<GameStatus>)","prompt":""},{"id":4610,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Update\n    abstract suspend fun updateGame(game: Game)","prompt":""},{"id":4611,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Update\n    abstract suspend fun updateGameStatuses(gameStatuses: List<GameStatus>)","prompt":""},{"id":4612,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Query(\"\"\"\n        UPDATE games\n        SET endTime = :endDate, gameState = :gameState\n        WHERE endTime IS NULL\"\"\")\n    abstract suspend fun closeOpenGames(\n        endDate: OffsetDateTime = OffsetDateTime.now(),\n        gameState: GameState = GameState.Cancelled\n    )","prompt":""},{"id":4613,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Transaction\n    open suspend fun startGame(players: List<Player>): Long {\n        this.closeOpenGames()\n\n        val gameId = this.insertGame(\n            Game(\n                gameState = GameState.Started,\n                currentTurnText = \"The game has begun!\\n\",\n                canRoll = true\n            )\n        )\n\n        val playerIds = players.map { player ->\n            getPlayer(player.playerName)?.playerId ?: insertPlayer(player)\n        }\n\n        this.insertGameStatuses(\n            playerIds.mapIndexed { index, playerId ->\n                GameStatus(\n                    gameId,\n                    playerId,\n                    index,\n                    index == 0\n                )\n            }\n        )\n\n        return gameId\n    }","prompt":""},{"id":4614,"identifierName":"dev.mfazio.pennydrop.data.PennyDropDao","requiredType":[],"content":"@Transaction\n    open suspend fun updateGameAndStatuses(game: Game, statuses: List<GameStatus>) {\n        this.updateGame(game)\n        this.updateGameStatuses(statuses)\n    }","prompt":""},{"id":4615,"identifierName":"com.kamer.orny.data.room.AuthorDao","requiredType":[],"content":"@Query(\"DELETE FROM authors\")\n    fun deleteAllAuthors()","prompt":""},{"id":4616,"identifierName":"com.kamer.orny.data.room.AuthorDao","requiredType":[],"content":"@Query(\"SELECT * FROM authors\")\n    fun getAllAuthors(): Flowable<List<AuthorEntity>>","prompt":""},{"id":4617,"identifierName":"com.kamer.orny.data.room.AuthorDao","requiredType":[],"content":"@Insert\n    fun insertAll(expenses: List<AuthorEntity>)","prompt":""},{"id":4618,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RecordingDao","requiredType":[],"content":"@Query(\"SELECT * FROM recording\")\n    abstract fun getAllRecordings(): LiveData<List<Recording>>","prompt":""},{"id":4619,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RecordingDao","requiredType":[],"content":"@Query(\"SELECT * FROM recording WHERE id = :id LIMIT 1\")\n    abstract fun findRecordingById(id: Long): LiveData<Recording>","prompt":""},{"id":4620,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RecordingDao","requiredType":[],"content":"@Query(\"SELECT * FROM recording WHERE id = :id LIMIT 1\")\n    abstract fun findRecordingByIdSync(id: Long): Recording","prompt":""},{"id":4621,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RecordingDao","requiredType":[],"content":"@Query(\"SELECT * FROM recording WHERE eventId = :id\")\n    abstract fun findRecordingByEvent(id: Long): LiveData<List<Recording>>","prompt":""},{"id":4622,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RecordingDao","requiredType":[],"content":"@Query(\"SELECT * FROM recording WHERE eventId = :id\")\n    abstract suspend fun findRecordingByEventSync(id: Long): List<Recording>","prompt":""},{"id":4623,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RecordingDao","requiredType":[],"content":"@Query(\"SELECT * FROM recording WHERE backendId = :backendId\")\n    abstract fun findRecordingByBackendId(backendId: Long): Recording?","prompt":""},{"id":4624,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RecordingDao","requiredType":[],"content":"@Query(\"DELETE FROM recording WHERE eventId = :eventId\")\n    abstract fun deleteRecordingsForEvent(eventId: Long)","prompt":""},{"id":4625,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RecordingDao","requiredType":[],"content":"@Query(\"DElETE FROM recording\")\n    abstract fun delete()","prompt":""},{"id":4626,"identifierName":"de.nicidienase.chaosflix.common.mediadata.entities.recording.persistence.RecordingDao","requiredType":[],"content":"override suspend fun updateOrInsertInternal(item: Recording): Long {\n        if (item.id != 0L) {\n            update(item)\n        } else {\n            val existingRecording = findRecordingByBackendId(item.backendId)\n            if (existingRecording != null) {\n                item.id = existingRecording.id\n                update(item)\n            } else {\n                item.id = insert(item)\n            }\n        }\n        return item.id\n    }","prompt":""},{"id":4627,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\"SELECT * FROM episode_watch_entries WHERE episode_id = :episodeId\")\n    abstract suspend fun watchesForEpisode(episodeId: Long): List<EpisodeWatchEntry>","prompt":""},{"id":4628,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\"SELECT COUNT(id) FROM episode_watch_entries WHERE episode_id = :episodeId\")\n    abstract suspend fun watchCountForEpisode(episodeId: Long): Int","prompt":""},{"id":4629,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\"SELECT * FROM episode_watch_entries WHERE episode_id = :episodeId\")\n    abstract fun watchesForEpisodeObservable(episodeId: Long): Flow<List<EpisodeWatchEntry>>","prompt":""},{"id":4630,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\"SELECT * FROM episode_watch_entries WHERE id = :id\")\n    abstract suspend fun entryWithId(id: Long): EpisodeWatchEntry?","prompt":""},{"id":4631,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\"SELECT * FROM episode_watch_entries WHERE trakt_id = :traktId\")\n    abstract suspend fun entryWithTraktId(traktId: Long): EpisodeWatchEntry?","prompt":""},{"id":4632,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\"SELECT id FROM episode_watch_entries WHERE trakt_id = :traktId\")\n    abstract suspend fun entryIdWithTraktId(traktId: Long): Long?","prompt":""},{"id":4633,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"suspend fun entriesForShowIdWithNoPendingAction(showId: Long): List<EpisodeWatchEntry> {\n        return entriesForShowIdWithPendingAction(showId, PendingAction.NOTHING.value)\n    }","prompt":""},{"id":4634,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"suspend fun entriesForShowIdWithSendPendingActions(showId: Long): List<EpisodeWatchEntry> {\n        return entriesForShowIdWithPendingAction(showId, PendingAction.UPLOAD.value)\n    }","prompt":""},{"id":4635,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"suspend fun entriesForShowIdWithDeletePendingActions(showId: Long): List<EpisodeWatchEntry> {\n        return entriesForShowIdWithPendingAction(showId, PendingAction.DELETE.value)\n    }","prompt":""},{"id":4636,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT ew.* FROM episode_watch_entries AS ew\n        INNER JOIN episodes AS eps ON ew.episode_id = eps.id\n        INNER JOIN seasons AS s ON eps.season_id = s.id\n        INNER JOIN shows ON s.show_id = shows.id\n        WHERE shows.id = :showId AND ew.pending_action = :pendingAction\n    \"\"\"\n    )\n    internal abstract suspend fun entriesForShowIdWithPendingAction(\n        showId: Long,\n        pendingAction: String\n    ): List<EpisodeWatchEntry>","prompt":""},{"id":4637,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT ew.* FROM episode_watch_entries AS ew\n        INNER JOIN episodes AS eps ON ew.episode_id = eps.id\n        INNER JOIN seasons AS s ON eps.season_id = s.id\n        INNER JOIN shows ON s.show_id = shows.id\n        WHERE shows.id = :showId\n    \"\"\"\n    )\n    abstract suspend fun entriesForShowId(showId: Long): List<EpisodeWatchEntry>","prompt":""},{"id":4638,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\"UPDATE episode_watch_entries SET pending_action = :pendingAction WHERE id IN (:ids)\")\n    abstract suspend fun updateEntriesToPendingAction(ids: List<Long>, pendingAction: String): Int","prompt":""},{"id":4639,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\"DELETE FROM episode_watch_entries WHERE id = :id\")\n    abstract suspend fun deleteWithId(id: Long): Int","prompt":""},{"id":4640,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\"DELETE FROM episode_watch_entries WHERE id IN (:ids)\")\n    abstract suspend fun deleteWithIds(ids: List<Long>): Int","prompt":""},{"id":4641,"identifierName":"app.tivi.data.daos.EpisodeWatchEntryDao","requiredType":[],"content":"@Query(\"DELETE FROM episode_watch_entries WHERE trakt_id = :traktId\")\n    abstract suspend fun deleteWithTraktId(traktId: Long): Int","prompt":""},{"id":4642,"identifierName":"com.sinyuk.fanfou.domain.db.dao.TrendDao","requiredType":[],"content":"@Insert\n    fun save(items: MutableList<Trend>)","prompt":""},{"id":4643,"identifierName":"com.sinyuk.fanfou.domain.db.dao.TrendDao","requiredType":[],"content":"@Query(\"SELECT * FROM trends\")\n    fun list(): LiveData<MutableList<Trend>?>","prompt":""},{"id":4644,"identifierName":"com.orgzly.android.db.dao.NoteEventDao","requiredType":["data class NoteEvent( @ColumnInfo(name = \"note_id\") val noteId: Long, @ColumnInfo(name = \"org_range_id\") val orgRangeId: Long )"],"content":"@Query(\"SELECT * FROM note_events WHERE note_id = :noteId\")\n    abstract fun get(noteId: Long): List<NoteEvent>","prompt":""},{"id":4645,"identifierName":"com.orgzly.android.db.dao.NoteEventDao","requiredType":[],"content":"@Query(\"DELETE FROM note_events WHERE note_id = :noteId\")\n    abstract fun deleteForNote(noteId: Long)","prompt":""},{"id":4646,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.CarDao","requiredType":[],"content":"@Insert\n    fun insertCar(car: Car)","prompt":""},{"id":4647,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.CarDao","requiredType":[],"content":"@Query(\"SELECT * FROM car\")\n    fun getAllData(): List<Car>","prompt":""},{"id":4648,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.CarDao","requiredType":[],"content":"@Query(\"DELETE FROM car\")\n    fun deleteAll()","prompt":""},{"id":4649,"identifierName":"com.esafirm.androidplayground.androidarch.room.database.CarDao","requiredType":[],"content":"@Query(\"SELECT COUNT(carId) FROM car\")\n    fun getCarCount(): Int","prompt":""},{"id":4650,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":["data class RoomAccess( @Id var roomId: String? = \"\", @Id var userId: String? = \"\", val rev: String = \"\", var role: String? = \"\", @Temporal(TemporalType.TIMESTAMP) var creationTimestamp: Date? = null, @Temporal(TemporalType.TIMESTAMP) var lastAccess: Date? = null )"],"content":"fun findByRoomId(roomId: String): Iterable<RoomAccess>","prompt":""},{"id":4651,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":["data class RoomAccess( @Id var roomId: String? = \"\", @Id var userId: String? = \"\", val rev: String = \"\", var role: String? = \"\", @Temporal(TemporalType.TIMESTAMP) var creationTimestamp: Date? = null, @Temporal(TemporalType.TIMESTAMP) var lastAccess: Date? = null )"],"content":"fun findByRoomIdAndRole(roomId: String, role: String): Iterable<RoomAccess>","prompt":""},{"id":4652,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":["data class RoomAccess( @Id var roomId: String? = \"\", @Id var userId: String? = \"\", val rev: String = \"\", var role: String? = \"\", @Temporal(TemporalType.TIMESTAMP) var creationTimestamp: Date? = null, @Temporal(TemporalType.TIMESTAMP) var lastAccess: Date? = null )"],"content":"fun findByRoomIdAndRoleNot(roomId: String, role: String): Iterable<RoomAccess>","prompt":""},{"id":4653,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":["data class RoomAccess( @Id var roomId: String? = \"\", @Id var userId: String? = \"\", val rev: String = \"\", var role: String? = \"\", @Temporal(TemporalType.TIMESTAMP) var creationTimestamp: Date? = null, @Temporal(TemporalType.TIMESTAMP) var lastAccess: Date? = null )"],"content":"fun findByUserId(userId: String): Iterable<RoomAccess>","prompt":""},{"id":4654,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":["data class RoomAccess( @Id var roomId: String? = \"\", @Id var userId: String? = \"\", val rev: String = \"\", var role: String? = \"\", @Temporal(TemporalType.TIMESTAMP) var creationTimestamp: Date? = null, @Temporal(TemporalType.TIMESTAMP) var lastAccess: Date? = null )"],"content":"@Query(\n    \"\"\"\n    UPDATE room_access\n      SET last_access = :lastAccess\n      WHERE room_id = :roomId\n      AND user_id = :userId\n      RETURNING *;\n    \"\"\",\n    nativeQuery = true\n  )\n  fun updateLastAccessAndGetByRoomIdAndUserId(roomId: String, userId: String, lastAccess: Date): Optional<RoomAccess>","prompt":""},{"id":4655,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":["data class RoomAccess( @Id var roomId: String? = \"\", @Id var userId: String? = \"\", val rev: String = \"\", var role: String? = \"\", @Temporal(TemporalType.TIMESTAMP) var creationTimestamp: Date? = null, @Temporal(TemporalType.TIMESTAMP) var lastAccess: Date? = null )"],"content":"// This is needed to not have hibernate check if any rows should be deleted\n  @Query(\"DELETE FROM room_access WHERE room_id = :roomId RETURNING *;\", nativeQuery = true)\n  fun deleteByRoomIdWithoutChecking(@Param(\"roomId\") roomId: String): Iterable<RoomAccess>","prompt":""},{"id":4656,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":["data class RoomAccess( @Id var roomId: String? = \"\", @Id var userId: String? = \"\", val rev: String = \"\", var role: String? = \"\", @Temporal(TemporalType.TIMESTAMP) var creationTimestamp: Date? = null, @Temporal(TemporalType.TIMESTAMP) var lastAccess: Date? = null )"],"content":"// This is needed to not have hibernate check if any rows should be deleted\n  @Query(\"DELETE FROM room_access WHERE room_id = :roomId and user_id = :userId RETURNING *;\", nativeQuery = true)\n  fun deleteByRoomIdAndUserIdWithoutChecking(\n    @Param(\"roomId\") roomId: String,\n    @Param(\"userId\") userId: String\n  ): Iterable<RoomAccess>","prompt":""},{"id":4657,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":["data class RoomAccess( @Id var roomId: String? = \"\", @Id var userId: String? = \"\", val rev: String = \"\", var role: String? = \"\", @Temporal(TemporalType.TIMESTAMP) var creationTimestamp: Date? = null, @Temporal(TemporalType.TIMESTAMP) var lastAccess: Date? = null )"],"content":"// This sets the role to owner even if the entry was already present\n  // It also checks to not override a creator role that's maybe present\n  // The two role params are needed because otherwise Hibernate can't find the second usage\n  @Query(\n    \"\"\"\n    INSERT INTO room_access \n      (room_id, user_id, rev, role) \n      VALUES (:roomId, :userId, :rev, :role)\n      ON CONFLICT ON CONSTRAINT room_access_pkey DO UPDATE SET role = :updateRole WHERE room_access.role != 'CREATOR'\n      RETURNING *;\n    \"\"\",\n    nativeQuery = true\n  )\n  fun createOrUpdateAccess(\n    @Param(\"roomId\") roomId: String,\n    @Param(\"userId\") userId: String,\n    @Param(\"rev\") rev: String,\n    @Param(\"role\") role: String,\n    @Param(\"updateRole\") updateRole: String\n  ): RoomAccess","prompt":""},{"id":4658,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":["data class RoomAccess( @Id var roomId: String? = \"\", @Id var userId: String? = \"\", val rev: String = \"\", var role: String? = \"\", @Temporal(TemporalType.TIMESTAMP) var creationTimestamp: Date? = null, @Temporal(TemporalType.TIMESTAMP) var lastAccess: Date? = null )"],"content":"// This query should not be needed, but since the PK is composed, hibernate tries to update instead of inserting\n  @Query(\n    \"\"\"\n    INSERT INTO room_access\n      (room_id, user_id, rev, role)\n      VALUES (:roomId, :userId, :rev, :role)\n      RETURNING *;\n    \"\"\",\n    nativeQuery = true\n  )\n  fun createAccess(\n    @Param(\"roomId\") roomId: String,\n    @Param(\"userId\") userId: String,\n    @Param(\"rev\") rev: String,\n    @Param(\"role\") role: String\n  ): RoomAccess","prompt":""},{"id":4659,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":["data class RoomAccess( @Id var roomId: String? = \"\", @Id var userId: String? = \"\", val rev: String = \"\", var role: String? = \"\", @Temporal(TemporalType.TIMESTAMP) var creationTimestamp: Date? = null, @Temporal(TemporalType.TIMESTAMP) var lastAccess: Date? = null )"],"content":"// This query is for creating participants and checks for duplicate key,\n  // does a fake update to prevent exceptions but still returns the row\n  @Query(\n    \"\"\"\n    INSERT INTO room_access\n      (room_id, user_id, rev, role)\n      VALUES (:roomId, :userId, :rev, 'PARTICIPANT')\n      ON CONFLICT (room_id, user_id) DO UPDATE SET room_id = :roomId\n      RETURNING *;\n    \"\"\",\n    nativeQuery = true\n  )\n  fun createParticipantAccess(\n    @Param(\"roomId\") roomId: String,\n    @Param(\"userId\") userId: String,\n    @Param(\"rev\") rev: String\n  ): RoomAccess","prompt":""},{"id":4660,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":[],"content":"@Query(\n    \"\"\"\n    SELECT COUNT(*)\n    FROM room_access\n    WHERE last_access > :lastAccess\n    GROUP BY room_id;\n    \"\"\",\n    nativeQuery = true\n  )\n  fun countByLastAccessAfterAndGroupByRoomId(lastAccess: Date): List<Int>","prompt":""},{"id":4661,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":[],"content":"fun countByRoomIdAndRole(roomId: String, role: String): Long","prompt":""},{"id":4662,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":[],"content":"fun countDistinctUserIdByLastAccessAfter(lastAccess: Date): Long","prompt":""},{"id":4663,"identifierName":"de.thm.arsnova.service.authservice.persistence.RoomAccessRepository","requiredType":[],"content":"fun countDistinctUserIdByRoleAndLastAccessAfter(role: String, lastAccess: Date): Long","prompt":""},{"id":4664,"identifierName":"com.pixplicity.cryptogram.db.PuzzleStateDao","requiredType":[],"content":"@Query(\"SELECT * FROM PuzzleState\")\n    fun getAll(): LiveData<List<PuzzleState>>","prompt":""},{"id":4665,"identifierName":"com.pixplicity.cryptogram.db.PuzzleStateDao","requiredType":[],"content":"@Query(\"SELECT * FROM PuzzleState WHERE id = :id LIMIT 1\")\n    fun get(id: Long): LiveData<List<PuzzleState>>","prompt":""},{"id":4666,"identifierName":"com.pixplicity.cryptogram.db.PuzzleStateDao","requiredType":["data class PuzzleState( @PrimaryKey val id: Long, @ColumnInfo var starred: Boolean )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun set(puzzleState: PuzzleState)","prompt":""},{"id":4667,"identifierName":"com.android.tv.classics.models.TvMediaBackgroundDAO","requiredType":[],"content":"@Query(\"SELECT * FROM tvmediabackground\")\n    fun findAll(): List<TvMediaBackground>","prompt":""},{"id":4668,"identifierName":"com.android.tv.classics.models.TvMediaBackgroundDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(vararg item: TvMediaBackground)","prompt":""},{"id":4669,"identifierName":"com.android.tv.classics.models.TvMediaBackgroundDAO","requiredType":[],"content":"@Update\n    fun update(item: TvMediaBackground)","prompt":""},{"id":4670,"identifierName":"com.android.tv.classics.models.TvMediaBackgroundDAO","requiredType":[],"content":"@Delete\n    fun delete(item: TvMediaBackground)","prompt":""},{"id":4671,"identifierName":"com.android.tv.classics.models.TvMediaBackgroundDAO","requiredType":[],"content":"@Query(\"DELETE FROM tvmediabackground\")\n    fun truncate()","prompt":""},{"id":4672,"identifierName":"com.sbgapps.scoreit.cache.db.UniversalLapDao","requiredType":[],"content":"@Query(\"SELECT * FROM laps WHERE gameId = :gameId\")\n    fun getLaps(gameId: Long): List<UniversalLapData>","prompt":""},{"id":4673,"identifierName":"com.sbgapps.scoreit.cache.db.UniversalLapDao","requiredType":[],"content":"@Query(\"DELETE FROM laps WHERE gameId = :gameId\")\n    fun clearLaps(gameId: Long)","prompt":""},{"id":4674,"identifierName":"com.sbgapps.scoreit.cache.db.UniversalLapDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun saveLap(lap: UniversalLapData): Long","prompt":""},{"id":4675,"identifierName":"com.sbgapps.scoreit.cache.db.UniversalLapDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updateLap(lap: UniversalLapData)","prompt":""},{"id":4676,"identifierName":"com.sbgapps.scoreit.cache.db.UniversalLapDao","requiredType":[],"content":"@Query(\"DELETE FROM laps WHERE id = :id AND gameId = :gameId\")\n    fun deleteLap(gameId: Long, id: Long)","prompt":""},{"id":4677,"identifierName":"ru.fantlab.android.data.db.response.ResponseDao","requiredType":[],"content":"@Query(\"SELECT * FROM response WHERE url = :url AND userId = :userId AND api_version = '${BuildConfig.API_VERSION}' LIMIT 1\")\n\tabstract fun getSync(url: String, userId: Int): Response?","prompt":""},{"id":4678,"identifierName":"ru.fantlab.android.data.db.response.ResponseDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n\tabstract fun save(response: Response)","prompt":""},{"id":4679,"identifierName":"ru.fantlab.android.data.db.response.ResponseDao","requiredType":[],"content":"fun get(url: String): Single<Response> {\n\t\tval userId = PrefGetter.getSessionUserId()\n\t\tval response = getSync(url, userId)\n\t\treturn if (response != null) {\n\t\t\tif (System.currentTimeMillis() - response.timeStamp < month) {\n\t\t\t\tSingle.just(response)\n\t\t\t} else {\n\t\t\t\treturn Single.error(OutdatedCacheException(url))\n\t\t\t}\n\t\t} else {\n\t\t\treturn Single.error(MissingCacheException(url))\n\t\t}\n\t}","prompt":""},{"id":4680,"identifierName":"org.stepik.android.cache.exam_session.dao.ExamSessionDao","requiredType":[],"content":"@Query(\"SELECT * FROM ExamSession WHERE id IN (:ids)\")\n    fun getExamSessions(ids: List<Long>): Single<List<ExamSession>>","prompt":""},{"id":4681,"identifierName":"org.stepik.android.cache.exam_session.dao.ExamSessionDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun saveExamSessions(items: List<ExamSession>): Completable","prompt":""},{"id":4682,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"/**\n   * for private use only\n   * must be marked public for Room\n   * so we use the underscore to discourage use\n   */\n  @Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract fun _insertAsset(asset: AssetEntity): Long","prompt":""},{"id":4683,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class UpdateAssetEntity( @field:ColumnInfo(name = \"update_id\") var updateId: UUID, @field:ColumnInfo(name = \"asset_id\") var assetId: Long )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  abstract fun _insertUpdateAsset(updateAsset: UpdateAssetEntity)","prompt":""},{"id":4684,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":[],"content":"@Query(\"UPDATE updates SET launch_asset_id = :assetId WHERE id = :updateId;\")\n  abstract fun _setUpdateLaunchAsset(assetId: Long, updateId: UUID)","prompt":""},{"id":4685,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":[],"content":"@Query(\"UPDATE assets SET marked_for_deletion = 1;\")\n  abstract fun _markAllAssetsForDeletion()","prompt":""},{"id":4686,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":[],"content":"@Query(\n    \"UPDATE assets SET marked_for_deletion = 0 WHERE id IN (\" +\n      \" SELECT asset_id\" +\n      \" FROM updates_assets\" +\n      \" INNER JOIN updates ON updates_assets.update_id = updates.id\" +\n      \" WHERE updates.keep);\"\n  )\n  abstract fun _unmarkUsedAssetsFromDeletion()","prompt":""},{"id":4687,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":[],"content":"@Query(\n    \"UPDATE assets SET marked_for_deletion = 0 WHERE relative_path IN (\" +\n      \" SELECT relative_path\" +\n      \" FROM assets\" +\n      \" WHERE marked_for_deletion = 0);\"\n  )\n  abstract fun _unmarkDuplicateUsedAssetsFromDeletion()","prompt":""},{"id":4688,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"@Query(\"SELECT * FROM assets WHERE marked_for_deletion = 1;\")\n  abstract fun _loadAssetsMarkedForDeletion(): List<AssetEntity>","prompt":""},{"id":4689,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":[],"content":"@Query(\"DELETE FROM assets WHERE marked_for_deletion = 1;\")\n  abstract fun _deleteAssetsMarkedForDeletion()","prompt":""},{"id":4690,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"@Query(\"SELECT * FROM assets WHERE `key` = :key LIMIT 1;\")\n  abstract fun _loadAssetWithKey(key: String?): List<AssetEntity>","prompt":""},{"id":4691,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"/**\n   * for public use\n   */\n  @Query(\"SELECT * FROM assets;\")\n  abstract fun loadAllAssets(): List<AssetEntity>","prompt":""},{"id":4692,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"@Query(\n    \"SELECT assets.*\" +\n      \" FROM assets\" +\n      \" INNER JOIN updates_assets ON updates_assets.asset_id = assets.id\" +\n      \" INNER JOIN updates ON updates_assets.update_id = updates.id\" +\n      \" WHERE updates.id = :id;\"\n  )\n  abstract fun loadAssetsForUpdate(id: UUID): List<AssetEntity>","prompt":""},{"id":4693,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"@Update\n  abstract fun updateAsset(assetEntity: AssetEntity)","prompt":""},{"id":4694,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )"],"content":"@Transaction\n  open fun insertAssets(assets: List<AssetEntity>, update: UpdateEntity) {\n    for (asset in assets) {\n      val assetId = _insertAsset(asset)\n      _insertUpdateAsset(UpdateAssetEntity(update.id, assetId))\n      if (asset.isLaunchAsset) {\n        _setUpdateLaunchAsset(assetId, update.id)\n      }\n    }\n  }","prompt":""},{"id":4695,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":[],"content":"fun loadAssetWithKey(key: String?): AssetEntity? {\n    val assets = _loadAssetWithKey(key)\n    return if (assets.isNotEmpty()) {\n      assets[0]\n    } else null\n  }","prompt":""},{"id":4696,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"fun mergeAndUpdateAsset(existingEntity: AssetEntity, newEntity: AssetEntity) {\n    // if the existing entry came from an embedded manifest, it may not have a URL in the database\n    var shouldUpdate = false\n    if (newEntity.url != null && (existingEntity.url == null || newEntity.url != existingEntity.url)) {\n      existingEntity.url = newEntity.url\n      shouldUpdate = true\n    }\n\n    val newEntityExtraRequestHeaders = newEntity.extraRequestHeaders\n    if (newEntityExtraRequestHeaders != null &&\n      (existingEntity.extraRequestHeaders == null || newEntityExtraRequestHeaders != existingEntity.extraRequestHeaders)\n    ) {\n      existingEntity.extraRequestHeaders = newEntity.extraRequestHeaders\n      shouldUpdate = true\n    }\n\n    if (shouldUpdate) {\n      updateAsset(existingEntity)\n    }\n\n    // we need to keep track of whether the calling class expects this asset to be the launch asset\n    existingEntity.isLaunchAsset = newEntity.isLaunchAsset\n    // some fields on the asset entity are not stored in the database but might still be used by application code\n    existingEntity.embeddedAssetFilename = newEntity.embeddedAssetFilename\n    existingEntity.resourcesFilename = newEntity.resourcesFilename\n    existingEntity.resourcesFolder = newEntity.resourcesFolder\n    existingEntity.scale = newEntity.scale\n    existingEntity.scales = newEntity.scales\n  }","prompt":""},{"id":4697,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class UpdateEntity( @field:ColumnInfo(typeAffinity = ColumnInfo.BLOB) @field:PrimaryKey var id: UUID, @field:ColumnInfo(name = \"commit_time\") var commitTime: Date, @field:ColumnInfo(name = \"runtime_version\") var runtimeVersion: String, @field:ColumnInfo(name = \"scope_key\") var scopeKey: String )","data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"@Transaction\n  open fun addExistingAssetToUpdate(\n    update: UpdateEntity,\n    asset: AssetEntity,\n    isLaunchAsset: Boolean\n  ): Boolean {\n    val existingAssetEntry = loadAssetWithKey(asset.key) ?: return false\n    val assetId = existingAssetEntry.id\n    _insertUpdateAsset(UpdateAssetEntity(update.id, assetId))\n    if (isLaunchAsset) {\n      _setUpdateLaunchAsset(assetId, update.id)\n    }\n    return true\n  }","prompt":""},{"id":4698,"identifierName":"expo.modules.updates.db.dao.AssetDao","requiredType":["data class AssetEntity(@field:ColumnInfo(name = \"key\") var key: String?, var type: String?)"],"content":"@Transaction\n  open fun deleteUnusedAssets(): List<AssetEntity> {\n    // the simplest way to mark the assets we want to delete\n    // is to mark all assets for deletion, then go back and unmark\n    // those assets in updates we want to keep\n    // this is safe since this is a transaction and will be rolled back upon failure\n    _markAllAssetsForDeletion()\n    _unmarkUsedAssetsFromDeletion()\n    // check for duplicate rows representing a single file on disk\n    _unmarkDuplicateUsedAssetsFromDeletion()\n    val deletedAssets = _loadAssetsMarkedForDeletion()\n    _deleteAssetsMarkedForDeletion()\n    return deletedAssets\n  }","prompt":""},{"id":4699,"identifierName":"com.emogoth.android.phone.mimi.db.dao.CatalogAccess","requiredType":[],"content":"@Query(\"SELECT * FROM ${MimiDatabase.CATALOG_TABLE}\")\n    abstract fun getAll(): Flowable<List<CatalogPost>>","prompt":""},{"id":4700,"identifierName":"com.emogoth.android.phone.mimi.db.dao.CatalogAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.CATALOG_TABLE} WHERE ${CatalogPost.POST_ID} = :threadId\")\n    abstract fun removeThread(threadId: Long): Int","prompt":""},{"id":4701,"identifierName":"com.emogoth.android.phone.mimi.db.dao.CatalogAccess","requiredType":[],"content":"@Query(\"DELETE FROM ${MimiDatabase.CATALOG_TABLE}\")\n    abstract fun clear()","prompt":""},{"id":4702,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"// TODO :consider creating UserDao and moving some of the logic in this Dao there\n    @Insert\n    suspend fun insertUsers(users: List<User>)","prompt":""},{"id":4703,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Insert\n    suspend fun insertTags(tags: List<Tag>)","prompt":""},{"id":4704,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Insert\n    suspend fun insertTasks(tasks: List<Task>)","prompt":""},{"id":4705,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Insert\n    suspend fun insertTaskTags(taskTags: List<TaskTag>)","prompt":""},{"id":4706,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Insert\n    suspend fun insertUserTasks(userTasks: List<UserTask>)","prompt":""},{"id":4707,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Delete\n    suspend fun deleteUserTasks(userTasks: List<UserTask>)","prompt":""},{"id":4708,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM tasks\")\n    fun getTasks(): Flow<List<Task>>","prompt":""},{"id":4709,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM USERS WHERE id = :id\")\n    fun getUserById(id: Long): Flow<User?>","prompt":""},{"id":4710,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM TaskDetail WHERE id = :id\")\n    fun findTaskDetailById(id: Long): Flow<TaskDetail?>","prompt":""},{"id":4711,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM TaskDetail WHERE id = :id\")\n    suspend fun loadTaskDetailById(id: Long): TaskDetail?","prompt":""},{"id":4712,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"\n        SELECT s.*,\n            EXISTS(\n                SELECT id\n                FROM user_tasks AS t\n                WHERE t.taskId = s.id AND t.userId = :userId\n            ) AS starred\n        FROM TaskSummary AS s WHERE s.isArchived = 0\n        ORDER BY s.status, s.orderInCategory\n    \"\"\")\n    fun getOngoingTaskSummaries(userId: Long): Flow<List<TaskSummary>>","prompt":""},{"id":4713,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Transaction\n    @Query(\"\"\"\n        SELECT s.*,\n            EXISTS(\n                SELECT id\n                FROM user_tasks AS t\n                WHERE t.taskId = s.id AND t.userId = :userId\n            ) AS starred\n        FROM TaskSummary AS s WHERE s.isArchived <> 0\n        ORDER BY s.orderInCategory\n    \"\"\")\n    fun getArchivedTaskSummaries(userId: Long): Flow<List<TaskSummary>>","prompt":""},{"id":4714,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"UPDATE tasks SET status = :status WHERE id = :id\")\n    suspend fun updateTaskStatus(id: Long, status: TaskStatus)","prompt":""},{"id":4715,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"UPDATE tasks SET status = :status WHERE id IN (:ids)\")\n    suspend fun updateTaskStatus(ids: List<Long>, status: TaskStatus)","prompt":""},{"id":4716,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"UPDATE tasks SET orderInCategory = :orderInCategory WHERE id = :id\")\n    suspend fun updateOrderInCategory(id: Long, orderInCategory: Int)","prompt":""},{"id":4717,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"UPDATE tasks SET isArchived = :isArchived WHERE id IN (:ids)\")\n    suspend fun setIsArchived(ids: List<Long>, isArchived: Boolean)","prompt":""},{"id":4718,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM user_tasks WHERE taskId = :taskId AND userId = :userId\")\n    suspend fun getUserTask(taskId: Long, userId: Long): UserTask?","prompt":""},{"id":4719,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM users\")\n    suspend fun loadUsers(): List<User>","prompt":""},{"id":4720,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"SELECT * FROM tags\")\n    suspend fun loadTags(): List<Tag>","prompt":""},{"id":4721,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertTask(task: Task): Long","prompt":""},{"id":4722,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"SELECT tagId FROM task_tags WHERE taskId = :taskId\")\n    suspend fun loadTaskTagIds(taskId: Long): List<Long>","prompt":""},{"id":4723,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\"DELETE FROM task_tags WHERE taskId = :taskId AND tagId IN(:tagIds)\")\n    suspend fun deleteTaskTags(taskId: Long, tagIds: List<Long>)","prompt":""},{"id":4724,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        SELECT MIN(orderInCategory) FROM tasks\n        WHERE\n            status = :status\n            AND id <> :excludeTaskId\n        \"\"\"\n    )\n    suspend fun loadMinOrderInCategory(status: TaskStatus, excludeTaskId: Long): Int?","prompt":""},{"id":4725,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Transaction\n    suspend fun saveTaskDetail(detail: TaskDetail, topOrderInCategory: Boolean) {\n        if (detail.title.isEmpty()) {\n            throw IllegalArgumentException(\"Task must include non-empty title.\")\n        }\n        val task = Task(\n            id = detail.id,\n            title = detail.title,\n            description = detail.description,\n            status = detail.status,\n            creatorId = detail.creator.id,\n            ownerId = detail.owner.id,\n            createdAt = detail.createdAt,\n            dueAt = detail.dueAt,\n            isArchived = detail.isArchived,\n            orderInCategory = if (topOrderInCategory) {\n                val min = loadMinOrderInCategory(detail.status, detail.id)\n                if (min == null) 1 else min - 1\n            } else {\n                detail.orderInCategory\n            }\n        )\n        val taskId = insertTask(task)\n        val updatedTagIds = detail.tags.map { tag -> tag.id }\n        val currentTagIds = loadTaskTagIds(taskId)\n        val removedTagIds = currentTagIds.filter { id -> id !in updatedTagIds }\n        deleteTaskTags(taskId, removedTagIds)\n        val newTagIds = updatedTagIds.filter { id -> id !in currentTagIds }\n        insertTaskTags(newTagIds.map { id -> TaskTag(taskId = taskId, tagId = id) })\n    }","prompt":""},{"id":4726,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Query(\n        \"\"\"\n        UPDATE tasks\n        SET orderInCategory = orderInCategory + :delta\n        WHERE\n            status = :status\n            AND orderInCategory BETWEEN :minOrderInCategory AND :maxOrderInCategory\n        \"\"\"\n    )\n    suspend fun shiftTasks(\n        status: TaskStatus,\n        minOrderInCategory: Int,\n        maxOrderInCategory: Int,\n        delta: Int\n    )","prompt":""},{"id":4727,"identifierName":"com.example.android.trackr.db.dao.TaskDao","requiredType":[],"content":"@Transaction\n    suspend fun reorderTasks(\n        taskId: Long,\n        status: TaskStatus,\n        currentOrderInCategory: Int,\n        targetOrderInCategory: Int\n    ) {\n        if (currentOrderInCategory < targetOrderInCategory) {\n            shiftTasks(status, currentOrderInCategory + 1, targetOrderInCategory, -1)\n        } else {\n            shiftTasks(status, targetOrderInCategory, currentOrderInCategory - 1, 1)\n        }\n        updateOrderInCategory(taskId, targetOrderInCategory)\n    }","prompt":""},{"id":4728,"identifierName":"net.pensato.data.cassandra.sample.repository.CollegeRepository","requiredType":["data class College( @PrimaryKeyColumn(name = \"name\", ordinal = 1, type = PrimaryKeyType.PARTITIONED) var name: String, var city: String = \"\", var disciplines: Set<String> )"],"content":"@Query(value=\"SELECT * FROM college WHERE city=?0\")\n    fun findByCity(city: String): List<College>;","prompt":""},{"id":4729,"identifierName":"net.pensato.data.cassandra.sample.repository.CollegeRepository","requiredType":["data class College( @PrimaryKeyColumn(name = \"name\", ordinal = 1, type = PrimaryKeyType.PARTITIONED) var name: String, var city: String = \"\", var disciplines: Set<String> )"],"content":"@Query(\"SELECT * FROM college WHERE disciplines CONTAINS ?0 ALLOW FILTERING\")\n    fun findByDiscipline(discipline: String): List<College>;","prompt":""},{"id":4730,"identifierName":"fr.marcsworld.repository.DocumentRepository","requiredType":[],"content":"/**\n     * Find all the [Document]s that have been provided by the given [fr.marcsworld.model.entity.Agency].\n     *\n     * @param agencyId ID of the [fr.marcsworld.model.entity.Agency] that provides the [Document]s.\n     * @return Found [Document]s.\n     */\n    fun findAllByProvidedByAgencyId(agencyId: Long): List<Document>","prompt":""},{"id":4731,"identifierName":"fr.marcsworld.repository.DocumentRepository","requiredType":["data class DocumentUrlAndType( val url: String, val type: DocumentType )"],"content":"/**\n     * Find all uniques pairs of [Document.url] and [Document.type] for [Document]s that have\n     * their property [Document.isStillProvidedByAgency] equal to true.\n     *\n     * @return Found distinct [DocumentUrlAndType]s.\n     */\n    @Query(\"SELECT NEW fr.marcsworld.model.dto.DocumentUrlAndType(document.url, document.type) \" +\n            \"FROM Document document \" +\n            \"WHERE document.isStillProvidedByAgency = true \" +\n            \"GROUP BY document.url, document.type\")\n    fun findAllStillProvidedDocumentUrlAndTypes(): List<DocumentUrlAndType>","prompt":""},{"id":4732,"identifierName":"fr.marcsworld.repository.DocumentRepository","requiredType":[],"content":"/**\n     * Find all the [Document]s of the given [documentType] that have been provided by the given [agencyId].\n     * Note that the results only contains documents with their property [Document.isStillProvidedByAgency] equals to true.\n     *\n     * @param agencyId ID of the [fr.marcsworld.model.entity.Agency] that provided the [Document]s.\n     * @return Found [Document]s.\n     */\n    @Query(\"SELECT document FROM Document document WHERE document.isStillProvidedByAgency = true AND document.providedByAgency.id = ?1 AND document.type = ?2\")\n    fun findAllStillProvidedDocumentsByAgencyIdAndByType(agencyId: Long, documentType: DocumentType): List<Document>","prompt":""},{"id":4733,"identifierName":"com.github.vhromada.catalog.repository.EpisodeRepository","requiredType":[],"content":"/**\n     * Returns episodes by season's ID.\n     *\n     * @param id       season's ID\n     * @param pageable paging information\n     * @return episodes\n     */\n    fun findAllBySeasonId(id: Int, pageable: Pageable): Page<Episode>","prompt":""},{"id":4734,"identifierName":"com.github.vhromada.catalog.repository.EpisodeRepository","requiredType":[],"content":"/**\n     * Finds episode by UUID.\n     *\n     * @param uuid UUID\n     * @return episode\n     */\n    fun findByUuid(uuid: String): Optional<Episode>","prompt":""},{"id":4735,"identifierName":"com.github.vhromada.catalog.repository.EpisodeRepository","requiredType":["data class EpisodeStatistics( /** * Count of episodes */ val count: Long, /** * Length */ val length: Long? )"],"content":"/**\n     * Returns statistics.\n     *\n     * @return statistics\n     */\n    @Query(\"SELECT new com.github.vhromada.catalog.domain.io.EpisodeStatistics(COUNT(e.id), SUM(e.length)) FROM Episode e\")\n    fun getStatistics(): EpisodeStatistics","prompt":""},{"id":4736,"identifierName":"name.gyger.jmoney.session.SessionRepository","requiredType":[],"content":"@Query(\"SELECT s FROM Session s LEFT JOIN FETCH s.rootCategory \" +\n            \"LEFT JOIN FETCH s.splitCategory LEFT JOIN FETCH s.transferCategory\")\n    fun getSession(): Session","prompt":""},{"id":4737,"identifierName":"name.gyger.jmoney.session.SessionRepository","requiredType":[],"content":"@Query(\"SELECT count(s) = 1 FROM Session s\")\n    fun isSessionAvailable(): Boolean","prompt":""},{"id":4738,"identifierName":"com.androidessence.cashcaretaker.database.TransactionDAO","requiredType":[],"content":"@Query(\"SELECT * FROM transactionTable WHERE accountName = :accountName ORDER BY date DESC\")\n    fun fetchTransactionsForAccount(accountName: String): Flow<List<PersistableTransaction>>","prompt":""},{"id":4739,"identifierName":"com.androidessence.cashcaretaker.database.TransactionDAO","requiredType":[],"content":"@Insert\n    suspend fun insert(transaction: PersistableTransaction): Long","prompt":""},{"id":4740,"identifierName":"com.androidessence.cashcaretaker.database.TransactionDAO","requiredType":[],"content":"@Update\n    suspend fun update(transaction: PersistableTransaction): Int","prompt":""},{"id":4741,"identifierName":"com.androidessence.cashcaretaker.database.TransactionDAO","requiredType":[],"content":"@Delete\n    suspend fun delete(transaction: PersistableTransaction): Int","prompt":""},{"id":4742,"identifierName":"com.androidessence.cashcaretaker.database.TransactionDAO","requiredType":[],"content":"@androidx.room.Transaction\n    suspend fun transfer(withdrawal: PersistableTransaction, deposit: PersistableTransaction) {\n        insert(withdrawal)\n        insert(deposit)\n    }","prompt":""},{"id":4743,"identifierName":"sst.com.anouncements.feed.data.database.room.FeedDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun saveFeed(feed: FeedEntity)","prompt":""},{"id":4744,"identifierName":"sst.com.anouncements.feed.data.database.room.FeedDao","requiredType":[],"content":"@Query(\"SELECT COUNT(*) FROM feedentity WHERE url = :feedUrl \")\n    fun countFeed(feedUrl: String): Int","prompt":""},{"id":4745,"identifierName":"sst.com.anouncements.feed.data.database.room.FeedDao","requiredType":[],"content":"@Query(\"SELECT * FROM feedentity WHERE url = :feedUrl \")\n    fun getFeed(feedUrl: String): FeedEntity","prompt":""},{"id":4746,"identifierName":"sst.com.anouncements.feed.data.database.room.FeedDao","requiredType":[],"content":"@Query(\"SELECT lastUpdated FROM feedentity WHERE url = :feedUrl\")\n    fun getFeedLastUpdated(feedUrl: String): Date","prompt":""},{"id":4747,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertOfflineObject(obj: OfflineObject)","prompt":""},{"id":4748,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updateOfflineObject(obj: OfflineObject)","prompt":""},{"id":4749,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"@Query(\"SELECT * FROM OfflineObject WHERE url = :url AND lang = :lang LIMIT 1\")\n    fun getOfflineObject(url: String, lang: String): OfflineObject?","prompt":""},{"id":4750,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"@Query(\"SELECT * FROM OfflineObject WHERE url = :url LIMIT 1\")\n    fun getOfflineObject(url: String): OfflineObject?","prompt":""},{"id":4751,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"@Query(\"SELECT * FROM OfflineObject WHERE url LIKE '%/' || :urlFragment || '/%' LIMIT 1\")\n    fun searchForOfflineObject(urlFragment: String): OfflineObject?","prompt":""},{"id":4752,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"@Query(\"SELECT * FROM OfflineObject WHERE usedByStr LIKE '%|' || :id || '|%'\")\n    fun getFromUsedById(id: Long): List<OfflineObject>","prompt":""},{"id":4753,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"@Delete\n    fun deleteOfflineObject(obj: OfflineObject)","prompt":""},{"id":4754,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"@Query(\"DELETE FROM OfflineObject\")\n    fun deleteAll()","prompt":""},{"id":4755,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"fun findObject(url: String, lang: String?): OfflineObject? {\n        var obj = if (lang.isNullOrEmpty()) getOfflineObject(url) else getOfflineObject(url, lang)\n\n        // Couldn't find an exact match, so...\n        // If we're trying to load an image from Commons, try to look for any other resolution.\n        if (obj == null && url.contains(\"/commons/thumb/\")) {\n            val parts = url.split(\"/\").toTypedArray()\n            if (parts.size > 2) {\n                val fileName = parts[parts.size - 2].replace(\"'\".toRegex(), \"%27\")\n                obj = searchForOfflineObject(fileName)\n            }\n        }\n        return obj\n    }","prompt":""},{"id":4756,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"fun addObject(url: String, lang: String, path: String, pageTitle: String) {\n        // first find this item if it already exists in the db\n        var obj = getOfflineObject(url, lang)\n\n        var doInsert = false\n        if (obj == null) {\n            obj = OfflineObject(url = url, lang = lang, path = path, status = 0)\n            doInsert = true\n        }\n\n        // try to find the associated title in a reading list, and add its id to the usedBy list.\n        val page = AppDatabase.instance.readingListPageDao().findPageInAnyList(\n            PageTitle(pageTitle, WikiSite.forLanguageCode(lang))\n        )\n        if (page != null && !obj.usedBy.contains(page.id)) {\n            obj.addUsedBy(page.id)\n        }\n        if (doInsert) {\n            insertOfflineObject(obj)\n        } else {\n            if (path != obj.path) {\n                L.w(\"Existing offline object path is inconsistent.\")\n            }\n            updateOfflineObject(obj)\n        }\n    }","prompt":""},{"id":4757,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"fun deleteObjectsForPageId(id: Long) {\n        val objects = mutableListOf<OfflineObject>()\n        val objUsedBy = getFromUsedById(id)\n\n        objUsedBy.forEach {\n            if (it.usedBy.contains(id)) {\n                it.removeUsedBy(id)\n                objects.add(it)\n            }\n        }\n\n        for (obj in objects) {\n            if (obj.usedBy.isEmpty()) {\n                // the object is now an orphan, so remove it!\n                deleteOfflineObject(obj)\n                deleteFilesForObject(obj)\n            } else {\n                updateOfflineObject(obj)\n            }\n        }\n    }","prompt":""},{"id":4758,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"fun getTotalBytesForPageId(id: Long): Long {\n        var totalBytes: Long = 0\n        try {\n            totalBytes = getFromUsedById(id).sumOf { File(\"${it.path}.1\").length() }\n        } catch (e: Exception) {\n            L.w(e)\n        }\n        return totalBytes\n    }","prompt":""},{"id":4759,"identifierName":"org.wikipedia.offline.db.OfflineObjectDao","requiredType":[],"content":"fun deleteFilesForObject(obj: OfflineObject) {\n        try {\n            val metadataFile = File(obj.path + \".0\")\n            val contentsFile = File(obj.path + \".1\")\n            metadataFile.delete()\n            contentsFile.delete()\n        } catch (e: Exception) {\n            // ignore\n        }\n    }","prompt":""},{"id":4760,"identifierName":"xyz.sachil.essence.model.cache.dao.WeeklyPopularDataDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Insert\n    fun insertWeeklyPopularData(list: List<WeeklyPopularData>)","prompt":""},{"id":4761,"identifierName":"xyz.sachil.essence.model.cache.dao.WeeklyPopularDataDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Update\n    fun updateWeeklyPopularData(vararg data: WeeklyPopularData)","prompt":""},{"id":4762,"identifierName":"xyz.sachil.essence.model.cache.dao.WeeklyPopularDataDao","requiredType":[],"content":"@Query(\"SELECT * FROM weekly_popular_table WHERE category=:category AND popular_type=:popularType ORDER BY views DESC\")\n    fun getWeeklyPopularByViews(\n        category: String,\n        popularType: String\n    ): DataSource.Factory<Int, TypeData>","prompt":""},{"id":4763,"identifierName":"xyz.sachil.essence.model.cache.dao.WeeklyPopularDataDao","requiredType":[],"content":"@Query(\"SELECT * FROM weekly_popular_table WHERE category=:category AND popular_type=:popularType ORDER BY like_counts DESC\")\n    fun getWeeklyPopularByLikes(\n        category: String,\n        popularType: String\n    ): DataSource.Factory<Int, TypeData>","prompt":""},{"id":4764,"identifierName":"xyz.sachil.essence.model.cache.dao.WeeklyPopularDataDao","requiredType":[],"content":"@Query(\"SELECT COUNT(id) FROM WEEKLY_POPULAR_TABLE WHERE category=:category AND popular_type=:popularType \")\n    fun getCount(category: String, popularType: String): Int","prompt":""},{"id":4765,"identifierName":"xyz.sachil.essence.model.cache.dao.WeeklyPopularDataDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Delete\n    fun deleteWeeklyPopularData(vararg data: WeeklyPopularData)","prompt":""},{"id":4766,"identifierName":"xyz.sachil.essence.model.cache.dao.WeeklyPopularDataDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"//用于删除weeklyPopular\n    @Query(\"DELETE FROM weekly_popular_table WHERE category=:category AND popular_type=:popularType\")\n    fun deleteWeeklyPopularData(category: String,popularType: String)","prompt":""},{"id":4767,"identifierName":"xyz.sachil.essence.model.cache.dao.WeeklyPopularDataDao","requiredType":["data class DataSourceinternal constructor(internal val type: KeyType)"],"content":"@Query(\"DELETE FROM weekly_popular_table\")\n    fun deleteAllData()","prompt":""},{"id":4768,"identifierName":"backend.model.event.EventRepository","requiredType":[],"content":"fun findById(id: Long): Event?","prompt":""},{"id":4769,"identifierName":"backend.model.event.EventRepository","requiredType":[],"content":"@Query(\"Select p.id from Posting p inner join p.user u inner join u.userRoles r inner join r.currentTeam t where t.event.id = :id order by p.date asc\")\n    fun findPostingsById(@Param(\"id\") id: Long): List<Long>","prompt":""},{"id":4770,"identifierName":"backend.model.event.EventRepository","requiredType":["data class Locationnull"],"content":"@Query(\"Select l from Location l inner join l.team t where t.event.id = :id order by l.date asc\")\n    fun findLocationPostingsById(@Param(\"id\") id: Long): List<Location>","prompt":""},{"id":4771,"identifierName":"backend.model.event.EventRepository","requiredType":["data class Locationnull"],"content":"@Query(\"SELECT loc FROM Location loc WHERE (loc.distance, loc.team.id) IN (Select max(l.distance), l.team.id from Location l inner join l.team t where t.event.id = :id group by l.team.id)\")\n    fun getLocationMaxDistanceByIdEachTeam(@Param(\"id\") id: Long): List<Location>","prompt":""},{"id":4772,"identifierName":"backend.model.event.EventRepository","requiredType":[],"content":"@Query(\"select t.members from Team t where t.event.id = :eventId \")\n    fun listTeamMembersOfEvent(@Param(\"eventId\") EventId: Long): List<Participant>","prompt":""},{"id":4773,"identifierName":"backend.model.event.WhitelistEmailRepository","requiredType":[],"content":"@Query(\"Select e from WhitelistEmailEntry e where e.invitee.value = :email\")\n    fun findWhitelistEmailEntriesByEmail(@Param(\"email\") email: String): List<WhitelistEmailEntry>","prompt":""},{"id":4774,"identifierName":"backend.model.event.WhitelistDomainRepository","requiredType":[],"content":"@Query(\"Select e from WhitelistDomainEntry e where e.domain = :domain\")\n    fun findWhitelistDomainsEntriesByDomain(@Param(\"domain\") domain: String): List<WhitelistDomainEntry>","prompt":""},{"id":4775,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.relation.RoomRelationService","requiredType":[],"content":"@Query(\"select * from game_relation where gameId = :gameId AND platformId = :platformId\")\n    fun findForGameAndPlatform(gameId: Int, platformId: Int): Flowable<List<RoomGameRelation>>","prompt":""},{"id":4776,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.relation.RoomRelationService","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(data: RoomGameRelation): Long","prompt":""},{"id":4777,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Query(\"SELECT * FROM lists WHERE id=:key\")\n    abstract suspend fun get(key: String): IdListEntity?","prompt":""},{"id":4778,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Transaction\n    open suspend fun get(keys: List<String>): List<IdListEntity> {\n        return getBatch(keys, ::getList)\n    }","prompt":""},{"id":4779,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Query(\"SELECT * FROM lists WHERE id IN (:keys)\")\n    abstract suspend fun getList(keys: List<String>): List<IdListEntity>","prompt":""},{"id":4780,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Query(\"SELECT * FROM lists WHERE id=:key\")\n    abstract fun getStream(key: String): Flow<IdListEntity?>","prompt":""},{"id":4781,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Query(\"SELECT * FROM lists\")\n    abstract suspend fun getAll(): List<IdListEntity>","prompt":""},{"id":4782,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Query(\"SELECT * FROM lists\")\n    abstract fun getAllStream(): Flow<List<IdListEntity>>","prompt":""},{"id":4783,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Query(\"SELECT id FROM lists\")\n    abstract fun getKeys(): List<String>","prompt":""},{"id":4784,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Query(\"SELECT id FROM lists\")\n    abstract fun getKeysStream(): Flow<List<String>>","prompt":""},{"id":4785,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Transaction\n    open suspend fun put(value: IdListEntity): IdListEntity? {\n        return putMerged(value, ::get)\n    }","prompt":""},{"id":4786,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Transaction\n    open suspend fun put(values: List<IdListEntity>): List<IdListEntity> {\n        return putBatch(values, ::getList)\n    }","prompt":""},{"id":4787,"identifierName":"quickbeer.android.domain.idlist.store.IdListDao","requiredType":[],"content":"@Query(\"DELETE FROM lists WHERE id=:key\")\n    abstract suspend fun delete(key: String): Int","prompt":""},{"id":4788,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(goldStatus: GoldStatus)","prompt":""},{"id":4789,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Update\n    fun update(goldStatus: GoldStatus)","prompt":""},{"id":4790,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Query(\"SELECT * FROM gold_status LIMIT 1\")\n    fun getGoldStatus(): LiveData<GoldStatus>","prompt":""},{"id":4791,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Delete\n    fun delete(goldStatus: GoldStatus)","prompt":""},{"id":4792,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(premium: PremiumCar)","prompt":""},{"id":4793,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Update\n    fun update(premium: PremiumCar)","prompt":""},{"id":4794,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Query(\"SELECT * FROM premium_car LIMIT 1\")\n    fun getPremiumCar(): LiveData<PremiumCar>","prompt":""},{"id":4795,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Delete\n    fun delete(premium: PremiumCar)","prompt":""},{"id":4796,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(gasLevel: GasTank)","prompt":""},{"id":4797,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Update\n    fun update(gasLevel: GasTank)","prompt":""},{"id":4798,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Query(\"SELECT * FROM gas_tank LIMIT 1\")\n    fun getGasTank(): LiveData<GasTank>","prompt":""},{"id":4799,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Delete\n    fun delete(gasLevel: GasTank)","prompt":""},{"id":4800,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"/**\n     * This is purely for convenience. The clients of this DAO don't have to discriminate among\n     * [GasTank] vs [PremiumCar] vs [GoldStatus] but can simply send in a list of\n     * [entitlements][Entitlement].\n     */\n    @Transaction\n    fun insert(vararg entitlements: Entitlement) {\n        entitlements.forEach {\n            when (it) {\n                is GasTank -> insert(it)\n                is PremiumCar -> insert(it)\n                is GoldStatus -> insert(it)\n            }\n        }\n    }","prompt":""},{"id":4801,"identifierName":"com.example.playbilling.trivialdrive.kotlin.billingrepo.localdb.EntitlementsDao","requiredType":[],"content":"@Transaction\n    fun update(vararg entitlements: Entitlement) {\n        entitlements.forEach {\n            when (it) {\n                is GasTank -> update(it)\n                is PremiumCar -> update(it)\n                is GoldStatus -> update(it)\n            }\n        }\n    }","prompt":""},{"id":4802,"identifierName":"com.petrulak.cleankotlin.data.source.local.dao.WeatherDao","requiredType":[],"content":"@Query(\"SELECT * FROM WeatherEntity\")\n    fun getAll(): Flowable<List<WeatherEntity>>","prompt":""},{"id":4803,"identifierName":"com.petrulak.cleankotlin.data.source.local.dao.WeatherDao","requiredType":["data class WeatherEntity( @PrimaryKey() val uid: Long, val name: String, val visibility: Int )"],"content":"@Query(\"SELECT * FROM WeatherEntity where name = :name\")\n    fun getByName(name: String): Flowable<WeatherEntity>","prompt":""},{"id":4804,"identifierName":"com.petrulak.cleankotlin.data.source.local.dao.WeatherDao","requiredType":[],"content":"@Query(\"DELETE from WeatherEntity where uid =:id\")\n    fun deleteWeatherById(id: Long): Int","prompt":""},{"id":4805,"identifierName":"org.walleth.data.balances.BalanceDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT * FROM balances WHERE address = :address AND tokenAddress = :tokenAddress AND chain = :chain\")\n    fun getBalance(address: Address, tokenAddress: Address?, chain: BigInteger): Balance?","prompt":""},{"id":4806,"identifierName":"org.walleth.data.balances.BalanceDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT * FROM balances WHERE address = :address AND tokenAddress = :tokenAddress AND chain = :chain\")\n    fun getBalanceLive(address: Address, tokenAddress: Address?, chain: BigInteger?): Flow<Balance>","prompt":""},{"id":4807,"identifierName":"org.walleth.data.balances.BalanceDAO","requiredType":[],"content":"@Query(\"SELECT * FROM balances\")\n    fun getAllBalances(): List<Balance>","prompt":""},{"id":4808,"identifierName":"org.walleth.data.balances.BalanceDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun upsert(entry: Balance)","prompt":""},{"id":4809,"identifierName":"org.walleth.data.balances.BalanceDAO","requiredType":[],"content":"@Query(\"DELETE FROM balances\")\n    fun deleteAll()","prompt":""},{"id":4810,"identifierName":"com.edreams.android.workshops.kotlin.data.venues.cache.dao.VenuesDao","requiredType":["data class VenueEntity(@PrimaryKey val id: String, val name: String, val rating: Float, val photo: String, val formattedPhone: String?, val distance: Int, val formattedAddress: String?, val checkinsCount: Int, val tips: String?, @ColumnInfo(index = true) val query: String? = null)"],"content":"@Query(\"SELECT * FROM venue where `query` = :query\")\n  abstract fun findByQuery(query: String): List<VenueEntity>","prompt":""},{"id":4811,"identifierName":"com.edreams.android.workshops.kotlin.data.venues.cache.dao.VenuesDao","requiredType":[],"content":"@Query(\"DELETE from venue where `query` = :query\")\n  abstract fun truncateByQuery(query: String)","prompt":""},{"id":4812,"identifierName":"com.edreams.android.workshops.kotlin.data.venues.cache.dao.VenuesDao","requiredType":[],"content":"@Transaction\n  open fun clearAndInsert(query: String, items: Array<VenueEntity>): Array<Long> {\n    truncateByQuery(query)\n    return insert(items)\n  }","prompt":""},{"id":4813,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Query(\"SELECT filename, full_path, parent_path, last_modified, date_taken, size, type, video_duration, is_favorite, deleted_ts FROM media WHERE deleted_ts = 0 AND parent_path = :path COLLATE NOCASE\")\n    fun getMediaFromPath(path: String): List<Medium>","prompt":""},{"id":4814,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Query(\"SELECT filename, full_path, parent_path, last_modified, date_taken, size, type, video_duration, is_favorite, deleted_ts FROM media WHERE deleted_ts = 0 AND is_favorite = 1\")\n    fun getFavorites(): List<Medium>","prompt":""},{"id":4815,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"SELECT COUNT(filename) FROM media WHERE deleted_ts = 0 AND is_favorite = 1\")\n    fun getFavoritesCount(): Long","prompt":""},{"id":4816,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Query(\"SELECT filename, full_path, parent_path, last_modified, date_taken, size, type, video_duration, is_favorite, deleted_ts FROM media WHERE deleted_ts != 0\")\n    fun getDeletedMedia(): List<Medium>","prompt":""},{"id":4817,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"SELECT COUNT(filename) FROM media WHERE deleted_ts != 0\")\n    fun getDeletedMediaCount(): Long","prompt":""},{"id":4818,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Insert(onConflict = REPLACE)\n    fun insert(medium: Medium)","prompt":""},{"id":4819,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Insert(onConflict = REPLACE)\n    fun insertAll(media: List<Medium>)","prompt":""},{"id":4820,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":["data class Medium( @PrimaryKey(autoGenerate = true) var id: Long?, @ColumnInfo(name = \"filename\") var name: String, @ColumnInfo(name = \"full_path\") var path: String, @ColumnInfo(name = \"parent_path\") var parentPath: String, @ColumnInfo(name = \"last_modified\") var modified: Long, @ColumnInfo(name = \"date_taken\") var taken: Long, @ColumnInfo(name = \"size\") var size: Long, @ColumnInfo(name = \"type\") var type: Int, @ColumnInfo(name = \"video_duration\") var videoDuration: Int, @ColumnInfo(name = \"is_favorite\") var isFavorite: Boolean, @ColumnInfo(name = \"deleted_ts\") var deletedTS: Long, @Ignore var gridPosition: Int = 0 // used at grid view decoration at Grouping enabled )"],"content":"@Delete\n    fun deleteMedia(vararg medium: Medium)","prompt":""},{"id":4821,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"DELETE FROM media WHERE full_path = :path COLLATE NOCASE\")\n    fun deleteMediumPath(path: String)","prompt":""},{"id":4822,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"DELETE FROM media WHERE deleted_ts < :timestmap AND deleted_ts != 0\")\n    fun deleteOldRecycleBinItems(timestmap: Long)","prompt":""},{"id":4823,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"UPDATE OR REPLACE media SET filename = :newFilename, full_path = :newFullPath, parent_path = :newParentPath WHERE full_path = :oldPath COLLATE NOCASE\")\n    fun updateMedium(newFilename: String, newFullPath: String, newParentPath: String, oldPath: String)","prompt":""},{"id":4824,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"UPDATE OR REPLACE media SET full_path = :newPath, deleted_ts = :deletedTS WHERE full_path = :oldPath COLLATE NOCASE\")\n    fun updateDeleted(newPath: String, deletedTS: Long, oldPath: String)","prompt":""},{"id":4825,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"UPDATE media SET date_taken = :dateTaken WHERE full_path = :path COLLATE NOCASE\")\n    fun updateFavoriteDateTaken(path: String, dateTaken: Long)","prompt":""},{"id":4826,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"UPDATE media SET is_favorite = :isFavorite WHERE full_path = :path COLLATE NOCASE\")\n    fun updateFavorite(path: String, isFavorite: Boolean)","prompt":""},{"id":4827,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"UPDATE media SET is_favorite = 0\")\n    fun clearFavorites()","prompt":""},{"id":4828,"identifierName":"com.simplemobiletools.gallery.pro.interfaces.MediumDao","requiredType":[],"content":"@Query(\"DELETE FROM media WHERE deleted_ts != 0\")\n    fun clearRecycleBin()","prompt":""},{"id":4829,"identifierName":"org.gittner.osmbugs.osmnotes.OsmNoteDao","requiredType":[],"content":"@Query(\"SELECT * FROM OsmNote\")\n    fun getAll(): Observable<List<OsmNote>>","prompt":""},{"id":4830,"identifierName":"org.gittner.osmbugs.osmnotes.OsmNoteDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(error: OsmNote)","prompt":""},{"id":4831,"identifierName":"org.gittner.osmbugs.osmnotes.OsmNoteDao","requiredType":[],"content":"@Insert\n    suspend fun insertAll(error: ArrayList<OsmNote>)","prompt":""},{"id":4832,"identifierName":"org.gittner.osmbugs.osmnotes.OsmNoteDao","requiredType":[],"content":"@Transaction\n    suspend fun replaceAll(error: ArrayList<OsmNote>) {\n        clear()\n        insertAll(error)\n    }","prompt":""},{"id":4833,"identifierName":"org.gittner.osmbugs.osmnotes.OsmNoteDao","requiredType":[],"content":"@Delete\n    suspend fun delete(error: OsmNote)","prompt":""},{"id":4834,"identifierName":"org.gittner.osmbugs.osmnotes.OsmNoteDao","requiredType":[],"content":"@Query(\"DELETE FROM OsmNote\")\n    suspend fun clear()","prompt":""},{"id":4835,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":[],"content":"@Query(\"SELECT * FROM addressbook ORDER BY name COLLATE NOCASE\")\n    suspend fun all(): List<AddressBookEntry>","prompt":""},{"id":4836,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":[],"content":"@Query(\"SELECT * FROM addressbook WHERE deleted = 1\")\n    fun allDeleted(): List<AddressBookEntry>","prompt":""},{"id":4837,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":[],"content":"@Query(\"UPDATE addressbook SET deleted=0\")\n    suspend fun unDeleteAll()","prompt":""},{"id":4838,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":[],"content":"@Query(\"SELECT * FROM addressbook WHERE is_notification_wanted\")\n    fun allThatWantNotifications(): List<AddressBookEntry>","prompt":""},{"id":4839,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":[],"content":"@Query(\"SELECT * FROM addressbook WHERE is_notification_wanted\")\n    fun allThatWantNotificationsLive(): LiveData<List<AddressBookEntry>>","prompt":""},{"id":4840,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT * FROM addressbook where address = :address COLLATE NOCASE\")\n    fun byAddressLiveData(address: Address): LiveData<AddressBookEntry?>","prompt":""},{"id":4841,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT * FROM addressbook where address = :address COLLATE NOCASE\")\n    fun byAddressFlow(address: Address): Flow<AddressBookEntry?>","prompt":""},{"id":4842,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":["data class Address(private val input: String)"],"content":"@Query(\"SELECT * FROM addressbook where address = :address COLLATE NOCASE\")\n    suspend fun byAddress(address: Address): AddressBookEntry?","prompt":""},{"id":4843,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":[],"content":"@Query(\"DELETE FROM addressbook\")\n    fun deleteAll()","prompt":""},{"id":4844,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":[],"content":"@Query(\"DELETE FROM addressbook where deleted = 1\")\n    suspend fun deleteAllSoftDeleted()","prompt":""},{"id":4845,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun upsert(entry: AddressBookEntry)","prompt":""},{"id":4846,"identifierName":"org.walleth.data.addresses.AddressBookDAO","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun upsert(entries: List<AddressBookEntry>)","prompt":""},{"id":4847,"identifierName":"com.prof.rssparser.caching.CachedFeedDao","requiredType":[],"content":"@Query(CacheConstants.QUERY_GET_CACHED_FEED)\n    suspend fun getCachedFeed(urlHash: Int, charset: String): CachedFeed?","prompt":""},{"id":4848,"identifierName":"com.prof.rssparser.caching.CachedFeedDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertFeed(cachedFeed: CachedFeed)","prompt":""},{"id":4849,"identifierName":"com.prof.rssparser.caching.CachedFeedDao","requiredType":[],"content":"@Query(CacheConstants.DELETE_ALL_QUERY)\n    suspend fun deleteAllFeed()","prompt":""},{"id":4850,"identifierName":"com.prof.rssparser.caching.CachedFeedDao","requiredType":[],"content":"@Query(CacheConstants.DELETE_CACHED_FEED)\n    suspend fun deleteFeed(urlHash: Int)","prompt":""},{"id":4851,"identifierName":"com.stronganizer.android.data.source.local.db.dao.MeetingDao","requiredType":["data class Meeting( @PrimaryKey val id: Int, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"description\") val description: String, @ColumnInfo(name = \"dateTime\") val dateTime: Date, @Ignore val location: Location )"],"content":"@Insert fun insertAll(vararg meetings: Meeting)","prompt":""},{"id":4852,"identifierName":"com.stronganizer.android.data.source.local.db.dao.MeetingDao","requiredType":["data class Meeting( @PrimaryKey val id: Int, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"description\") val description: String, @ColumnInfo(name = \"dateTime\") val dateTime: Date, @Ignore val location: Location )"],"content":"@Update fun update(meeting: Meeting)","prompt":""},{"id":4853,"identifierName":"com.stronganizer.android.data.source.local.db.dao.MeetingDao","requiredType":["data class Meeting( @PrimaryKey val id: Int, @ColumnInfo(name = \"name\") val name: String, @ColumnInfo(name = \"description\") val description: String, @ColumnInfo(name = \"dateTime\") val dateTime: Date, @Ignore val location: Location )"],"content":"@Delete fun delete(meeting: Meeting)","prompt":""},{"id":4854,"identifierName":"com.stronganizer.android.data.source.local.db.dao.MeetingDao","requiredType":[],"content":"@Query(\"SELECT * FROM meeting WHERE id = :id\") fun findById(id: Int)","prompt":""},{"id":4855,"identifierName":"com.stronganizer.android.data.source.local.db.dao.MeetingDao","requiredType":[],"content":"@Query(\"SELECT * FROM meeting\") fun findAll(): LiveData<List<Meeting>>","prompt":""},{"id":4856,"identifierName":"app.lawnchair.data.iconoverride.IconOverrideDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(item: IconOverride)","prompt":""},{"id":4857,"identifierName":"app.lawnchair.data.iconoverride.IconOverrideDao","requiredType":[],"content":"@Query(\"DELETE FROM iconoverride WHERE target = :target\")\n    suspend fun delete(target: ComponentKey)","prompt":""},{"id":4858,"identifierName":"app.lawnchair.data.iconoverride.IconOverrideDao","requiredType":[],"content":"@Query(\"SELECT * FROM iconoverride\")\n    fun observeAll(): Flow<List<IconOverride>>","prompt":""},{"id":4859,"identifierName":"app.lawnchair.data.iconoverride.IconOverrideDao","requiredType":[],"content":"@Query(\"SELECT * FROM iconoverride WHERE target = :target\")\n    fun observeTarget(target: ComponentKey): Flow<IconOverride?>","prompt":""},{"id":4860,"identifierName":"app.lawnchair.data.iconoverride.IconOverrideDao","requiredType":[],"content":"@Query(\"SELECT COUNT(target) FROM iconoverride\")\n    fun observeCount(): Flow<Int>","prompt":""},{"id":4861,"identifierName":"app.lawnchair.data.iconoverride.IconOverrideDao","requiredType":[],"content":"@Query(\"DELETE FROM iconoverride\")\n    suspend fun deleteAll()","prompt":""},{"id":4862,"identifierName":"app.lawnchair.data.iconoverride.IconOverrideDao","requiredType":["data class SupportSQLiteQuerynull"],"content":"@RawQuery\n    suspend fun checkpoint(supportSQLiteQuery: SupportSQLiteQuery): Int","prompt":""},{"id":4863,"identifierName":"com.google.android.horologist.media.data.database.dao.MediaDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    public suspend fun upsert(mediaList: List<MediaEntity>)","prompt":""},{"id":4864,"identifierName":"com.google.android.horologist.media.data.database.dao.MediaDao","requiredType":[],"content":"@Query(\n        value = \"\"\"\n        DELETE FROM MediaEntity\n        WHERE mediaId in (:mediaIds)\n    \"\"\"\n    )\n    public suspend fun delete(mediaIds: List<String>)","prompt":""},{"id":4865,"identifierName":"org.wordpress.android.fluxc.persistence.dao.InboxNotesDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM InboxNotes WHERE siteId = :siteId ORDER BY dateCreated DESC, remoteId DESC\")\n    abstract fun observeInboxNotes(siteId: Long): Flow<List<InboxNoteWithActions>>","prompt":""},{"id":4866,"identifierName":"org.wordpress.android.fluxc.persistence.dao.InboxNotesDao","requiredType":[],"content":"@Transaction\n    @Query(\"SELECT * FROM InboxNotes WHERE siteId = :siteId\")\n    abstract fun getInboxNotesForSite(siteId: Long): List<InboxNoteEntity>","prompt":""},{"id":4867,"identifierName":"org.wordpress.android.fluxc.persistence.dao.InboxNotesDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insertOrUpdateInboxNote(entity: InboxNoteEntity): Long","prompt":""},{"id":4868,"identifierName":"org.wordpress.android.fluxc.persistence.dao.InboxNotesDao","requiredType":["data class InboxNoteActionEntity( val remoteId: Long, val inboxNoteLocalId: Long, val siteId: Long, val name: String, val label: String, val url: String, val query: String? = null, val status: String? = null, val primary: Boolean = false, val actionedText: String? = null )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    abstract suspend fun insertOrUpdateInboxNoteAction(entity: InboxNoteActionEntity)","prompt":""},{"id":4869,"identifierName":"org.wordpress.android.fluxc.persistence.dao.InboxNotesDao","requiredType":[],"content":"@Transaction\n    @Query(\"DELETE FROM InboxNotes WHERE siteId = :siteId\")\n    abstract fun deleteInboxNotesForSite(siteId: Long)","prompt":""},{"id":4870,"identifierName":"org.wordpress.android.fluxc.persistence.dao.InboxNotesDao","requiredType":[],"content":"@Query(\"DELETE FROM InboxNotes WHERE remoteId = :remoteNoteId AND siteId = :siteId\")\n    abstract suspend fun deleteInboxNote(remoteNoteId: Long, siteId: Long)","prompt":""},{"id":4871,"identifierName":"org.wordpress.android.fluxc.persistence.dao.InboxNotesDao","requiredType":["data class InboxNoteWithActions( @Embedded val inboxNote: InboxNoteEntity, @Relation( parentColumn = \"localId\", entityColumn = \"inboxNoteLocalId\" ) val noteActions: List<InboxNoteActionEntity> )"],"content":"@Transaction\n    open suspend fun deleteAllAndInsertInboxNotes(\n        siteId: Long,\n        vararg notes: InboxNoteWithActions\n    ) {\n        deleteInboxNotesForSite(siteId)\n        notes.forEach { noteWithActions ->\n            val localNoteId = insertOrUpdateInboxNote(noteWithActions.inboxNote)\n            noteWithActions.noteActions.forEach {\n                insertOrUpdateInboxNoteAction(it.copy(inboxNoteLocalId = localNoteId))\n            }\n        }\n    }","prompt":""},{"id":4872,"identifierName":"org.wordpress.android.fluxc.persistence.dao.InboxNotesDao","requiredType":["data class InboxNoteWithActions( @Embedded val inboxNote: InboxNoteEntity, @Relation( parentColumn = \"localId\", entityColumn = \"inboxNoteLocalId\" ) val noteActions: List<InboxNoteActionEntity> )"],"content":"@Transaction\n    open suspend fun updateNote(siteId: Long, noteWithActions: InboxNoteWithActions) {\n        deleteInboxNote(siteId, noteWithActions.inboxNote.remoteId)\n        val localNoteId = insertOrUpdateInboxNote(noteWithActions.inboxNote)\n        noteWithActions.noteActions.forEach {\n            insertOrUpdateInboxNoteAction(it.copy(inboxNoteLocalId = localNoteId))\n        }\n    }","prompt":""},{"id":4873,"identifierName":"de.tum.`in`.tumcampusapp.component.notifications.persistence.ScheduledNotificationsDao","requiredType":[],"content":"@Query(\"SELECT * FROM scheduled_notifications WHERE type_id = :typeId AND content_id = :contentId LIMIT 1\")\n    fun find(typeId: Int, contentId: Int): ScheduledNotification?","prompt":""},{"id":4874,"identifierName":"de.tum.`in`.tumcampusapp.component.notifications.persistence.ScheduledNotificationsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(notification: ScheduledNotification): Long","prompt":""},{"id":4875,"identifierName":"de.tum.`in`.tumcampusapp.component.notifications.persistence.ScheduledNotificationsDao","requiredType":[],"content":"@Query(\"DELETE FROM scheduled_notifications WHERE type_id = :typeId AND content_id = :contentId\")\n    fun delete(typeId: Int, contentId: Int)","prompt":""},{"id":4876,"identifierName":"app.tivi.data.daos.ShowFtsDao","requiredType":["data class ShowDetailednull"],"content":"@Transaction\n    @Query(\n        \"\"\"\n        SELECT s.* FROM shows as s\n        INNER JOIN shows_fts AS fts ON s.id = fts.docid\n        WHERE fts.title MATCH :filter\n        \"\"\"\n    )\n    abstract suspend fun search(filter: String): List<ShowDetailed>","prompt":""},{"id":4877,"identifierName":"fi.lasicaine.nutritionalvalue.data.db.DetailsDao","requiredType":[],"content":"@Query(\"SELECT * FROM details WHERE id = :ndbno\")\n    fun loadById(ndbno: String): FoodDetails?","prompt":""},{"id":4878,"identifierName":"fi.lasicaine.nutritionalvalue.data.db.DetailsDao","requiredType":["data class FoodDetails( @PrimaryKey val id: String, val name: String, val nutrients: List<Nutrient> )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insert(food: FoodDetails)","prompt":""},{"id":4879,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertTypes(types: List<Type>)","prompt":""},{"id":4880,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDao","requiredType":[],"content":"@Query(\"SELECT * FROM type_table WHERE category=:category\")\n    fun getTypes(category: String): List<Type>","prompt":""},{"id":4881,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDao","requiredType":[],"content":"@Update(onConflict = OnConflictStrategy.REPLACE)\n    fun updateTypes(vararg type: Type)","prompt":""},{"id":4882,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDao","requiredType":[],"content":"@Query(\"DELETE FROM type_table\")\n    fun deleteAllData()","prompt":""},{"id":4883,"identifierName":"xyz.sachil.essence.model.cache.dao.TypeDao","requiredType":[],"content":"@Delete\n    fun deleteTypes(vararg type: Type)","prompt":""},{"id":4884,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.Chapter2Dao","requiredType":[],"content":"@Query(\"SELECT * FROM chapters2 WHERE id = :id\")\n  suspend fun chapter(id: Chapter2.Id): Chapter2?","prompt":""},{"id":4885,"identifierName":"de.ph1b.audiobook.data.repo.internals.dao.Chapter2Dao","requiredType":["data class Chapter2( @PrimaryKey val id: Id, val name: String, val duration: Long, val fileLastModified: Instant, val markData: List<MarkData>, )"],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  suspend fun insert(chapter2: Chapter2)","prompt":""},{"id":4886,"identifierName":"im.fdx.v2ex.ui.node.NodeDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insertNode(vararg nodes: Node)","prompt":""},{"id":4887,"identifierName":"im.fdx.v2ex.ui.node.NodeDao","requiredType":[],"content":"@Query(\"select * from node \")\n  fun getNodes(): List<Node>","prompt":""},{"id":4888,"identifierName":"com.waz.zclient.storage.db.phone.PhoneNumbersDao","requiredType":[],"content":"@Query(\"SELECT * FROM PhoneNumbers\")\n    suspend fun allPhoneNumbers(): List<PhoneNumbersEntity>","prompt":""},{"id":4889,"identifierName":"com.marktony.zhihudaily.database.dao.GuokrHandpickNewsDao","requiredType":["data class GuokrHandpickNewsResult( @ColumnInfo(name = \"image\") @Expose @SerializedName(\"image\") val image: String, @ColumnInfo(name = \"is_replyable\") @Expose @SerializedName(\"is_replyable\") val isReplyable: Boolean, @ColumnInfo(name = \"channels\") @Expose @SerializedName(\"channels\") val channels: List<GuokrHandpickContentChannel>?, @ColumnInfo(name = \"channel_keys\") @Expose @SerializedName(\"channel_keys\") val channelKeys: List<String>?, @ColumnInfo(name = \"preface\") @Expose @SerializedName(\"preface\") val preface: String, @PrimaryKey @ColumnInfo(name = \"id\") @Expose @SerializedName(\"id\") val id: Int = 0, @Embedded @Expose @SerializedName(\"subject\") val subject: GuokrHandpickContentChannel, @ColumnInfo(name = \"copyright\") @Expose @SerializedName(\"copyright\") val copyright: String, @Embedded @Expose @SerializedName(\"author\") val author: GuokrHandpickNewsAuthor, @ColumnInfo(name = \"image_description\") @Expose @SerializedName(\"image_description\") val imageDescription: String, @ColumnInfo(name = \"is_show_summary\") @Expose @SerializedName(\"is_show_summary\") val isShowSummary: Boolean, @ColumnInfo(name = \"minisite_key\") @Expose @SerializedName(\"minisite_key\") val minisiteKey: String, @Embedded @Expose @SerializedName(\"image_info\") val imageInfo: GuokrHandpickContentImageInfo, @ColumnInfo(name = \"subject_key\") @Expose @SerializedName(\"subject_key\") val subjectKey: String, @Embedded @Expose @SerializedName(\"minisite\") val minisite: GuokrHandpickContentMinisite, @ColumnInfo(name = \"tags\") @Expose @SerializedName(\"tags\") val tags: List<String>?, @ColumnInfo(name = \"date_published\") @Expose @SerializedName(\"date_published\") val datePublished: String, @ColumnInfo(name = \"avatar\") @Expose @SerializedName(\"avatar\") val authors: List<GuokrHandpickNewsAuthor>?, @ColumnInfo(name = \"replies_count\") @Expose @SerializedName(\"replies_count\") val repliesCount: Int, @ColumnInfo(name = \"is_author_external\") @Expose @SerializedName(\"is_author_external\") val isAuthorExternal: Boolean, @ColumnInfo(name = \"recommends_count\") @Expose @SerializedName(\"recommends_count\") val recommendsCount: Int, @ColumnInfo(name = \"title_hide\") @Expose @SerializedName(\"title_hide\") val titleHide: String, @ColumnInfo(name = \"date_modified\") @Expose @SerializedName(\"date_modified\") val dateModified: String, @ColumnInfo(name = \"url\") @Expose @SerializedName(\"url\") val url: String, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String, @ColumnInfo(name = \"small_image\") @Expose @SerializedName(\"small_image\") val smallImage: String, @ColumnInfo(name = \"summary\") @Expose @SerializedName(\"summary\") val summary: String, @ColumnInfo(name = \"ukey_author\") @Expose @SerializedName(\"ukey_author\") val ukeyAuthor: String, @ColumnInfo(name = \"date_created\") @Expose @SerializedName(\"date_created\") val dateCreated: String, @ColumnInfo(name = \"resource_url\") @Expose @SerializedName(\"resource_url\") val resourceUrl: String, @ColumnInfo(name = \"favorite\") @Expose var isFavorite: Boolean = false, @ColumnInfo(name = \"timestamp\") @Expose var timestamp: Long )"],"content":"@Query(\"SELECT * FROM guokr_handpick_news LIMIT :limit OFFSET :offset\")\n    fun queryAllByOffsetAndLimit(offset: Int, limit: Int): List<GuokrHandpickNewsResult>","prompt":""},{"id":4890,"identifierName":"com.marktony.zhihudaily.database.dao.GuokrHandpickNewsDao","requiredType":[],"content":"@Query(\"SELECT * FROM guokr_handpick_news WHERE id = :id\")\n    fun queryItemById(id: Int): GuokrHandpickNewsResult?","prompt":""},{"id":4891,"identifierName":"com.marktony.zhihudaily.database.dao.GuokrHandpickNewsDao","requiredType":["data class GuokrHandpickNewsResult( @ColumnInfo(name = \"image\") @Expose @SerializedName(\"image\") val image: String, @ColumnInfo(name = \"is_replyable\") @Expose @SerializedName(\"is_replyable\") val isReplyable: Boolean, @ColumnInfo(name = \"channels\") @Expose @SerializedName(\"channels\") val channels: List<GuokrHandpickContentChannel>?, @ColumnInfo(name = \"channel_keys\") @Expose @SerializedName(\"channel_keys\") val channelKeys: List<String>?, @ColumnInfo(name = \"preface\") @Expose @SerializedName(\"preface\") val preface: String, @PrimaryKey @ColumnInfo(name = \"id\") @Expose @SerializedName(\"id\") val id: Int = 0, @Embedded @Expose @SerializedName(\"subject\") val subject: GuokrHandpickContentChannel, @ColumnInfo(name = \"copyright\") @Expose @SerializedName(\"copyright\") val copyright: String, @Embedded @Expose @SerializedName(\"author\") val author: GuokrHandpickNewsAuthor, @ColumnInfo(name = \"image_description\") @Expose @SerializedName(\"image_description\") val imageDescription: String, @ColumnInfo(name = \"is_show_summary\") @Expose @SerializedName(\"is_show_summary\") val isShowSummary: Boolean, @ColumnInfo(name = \"minisite_key\") @Expose @SerializedName(\"minisite_key\") val minisiteKey: String, @Embedded @Expose @SerializedName(\"image_info\") val imageInfo: GuokrHandpickContentImageInfo, @ColumnInfo(name = \"subject_key\") @Expose @SerializedName(\"subject_key\") val subjectKey: String, @Embedded @Expose @SerializedName(\"minisite\") val minisite: GuokrHandpickContentMinisite, @ColumnInfo(name = \"tags\") @Expose @SerializedName(\"tags\") val tags: List<String>?, @ColumnInfo(name = \"date_published\") @Expose @SerializedName(\"date_published\") val datePublished: String, @ColumnInfo(name = \"avatar\") @Expose @SerializedName(\"avatar\") val authors: List<GuokrHandpickNewsAuthor>?, @ColumnInfo(name = \"replies_count\") @Expose @SerializedName(\"replies_count\") val repliesCount: Int, @ColumnInfo(name = \"is_author_external\") @Expose @SerializedName(\"is_author_external\") val isAuthorExternal: Boolean, @ColumnInfo(name = \"recommends_count\") @Expose @SerializedName(\"recommends_count\") val recommendsCount: Int, @ColumnInfo(name = \"title_hide\") @Expose @SerializedName(\"title_hide\") val titleHide: String, @ColumnInfo(name = \"date_modified\") @Expose @SerializedName(\"date_modified\") val dateModified: String, @ColumnInfo(name = \"url\") @Expose @SerializedName(\"url\") val url: String, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String, @ColumnInfo(name = \"small_image\") @Expose @SerializedName(\"small_image\") val smallImage: String, @ColumnInfo(name = \"summary\") @Expose @SerializedName(\"summary\") val summary: String, @ColumnInfo(name = \"ukey_author\") @Expose @SerializedName(\"ukey_author\") val ukeyAuthor: String, @ColumnInfo(name = \"date_created\") @Expose @SerializedName(\"date_created\") val dateCreated: String, @ColumnInfo(name = \"resource_url\") @Expose @SerializedName(\"resource_url\") val resourceUrl: String, @ColumnInfo(name = \"favorite\") @Expose var isFavorite: Boolean = false, @ColumnInfo(name = \"timestamp\") @Expose var timestamp: Long )"],"content":"@Query(\"SELECT * FROM guokr_handpick_news WHERE favorite = 1\")\n    fun queryAllFavorites(): List<GuokrHandpickNewsResult>","prompt":""},{"id":4892,"identifierName":"com.marktony.zhihudaily.database.dao.GuokrHandpickNewsDao","requiredType":["data class GuokrHandpickNewsResult( @ColumnInfo(name = \"image\") @Expose @SerializedName(\"image\") val image: String, @ColumnInfo(name = \"is_replyable\") @Expose @SerializedName(\"is_replyable\") val isReplyable: Boolean, @ColumnInfo(name = \"channels\") @Expose @SerializedName(\"channels\") val channels: List<GuokrHandpickContentChannel>?, @ColumnInfo(name = \"channel_keys\") @Expose @SerializedName(\"channel_keys\") val channelKeys: List<String>?, @ColumnInfo(name = \"preface\") @Expose @SerializedName(\"preface\") val preface: String, @PrimaryKey @ColumnInfo(name = \"id\") @Expose @SerializedName(\"id\") val id: Int = 0, @Embedded @Expose @SerializedName(\"subject\") val subject: GuokrHandpickContentChannel, @ColumnInfo(name = \"copyright\") @Expose @SerializedName(\"copyright\") val copyright: String, @Embedded @Expose @SerializedName(\"author\") val author: GuokrHandpickNewsAuthor, @ColumnInfo(name = \"image_description\") @Expose @SerializedName(\"image_description\") val imageDescription: String, @ColumnInfo(name = \"is_show_summary\") @Expose @SerializedName(\"is_show_summary\") val isShowSummary: Boolean, @ColumnInfo(name = \"minisite_key\") @Expose @SerializedName(\"minisite_key\") val minisiteKey: String, @Embedded @Expose @SerializedName(\"image_info\") val imageInfo: GuokrHandpickContentImageInfo, @ColumnInfo(name = \"subject_key\") @Expose @SerializedName(\"subject_key\") val subjectKey: String, @Embedded @Expose @SerializedName(\"minisite\") val minisite: GuokrHandpickContentMinisite, @ColumnInfo(name = \"tags\") @Expose @SerializedName(\"tags\") val tags: List<String>?, @ColumnInfo(name = \"date_published\") @Expose @SerializedName(\"date_published\") val datePublished: String, @ColumnInfo(name = \"avatar\") @Expose @SerializedName(\"avatar\") val authors: List<GuokrHandpickNewsAuthor>?, @ColumnInfo(name = \"replies_count\") @Expose @SerializedName(\"replies_count\") val repliesCount: Int, @ColumnInfo(name = \"is_author_external\") @Expose @SerializedName(\"is_author_external\") val isAuthorExternal: Boolean, @ColumnInfo(name = \"recommends_count\") @Expose @SerializedName(\"recommends_count\") val recommendsCount: Int, @ColumnInfo(name = \"title_hide\") @Expose @SerializedName(\"title_hide\") val titleHide: String, @ColumnInfo(name = \"date_modified\") @Expose @SerializedName(\"date_modified\") val dateModified: String, @ColumnInfo(name = \"url\") @Expose @SerializedName(\"url\") val url: String, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String, @ColumnInfo(name = \"small_image\") @Expose @SerializedName(\"small_image\") val smallImage: String, @ColumnInfo(name = \"summary\") @Expose @SerializedName(\"summary\") val summary: String, @ColumnInfo(name = \"ukey_author\") @Expose @SerializedName(\"ukey_author\") val ukeyAuthor: String, @ColumnInfo(name = \"date_created\") @Expose @SerializedName(\"date_created\") val dateCreated: String, @ColumnInfo(name = \"resource_url\") @Expose @SerializedName(\"resource_url\") val resourceUrl: String, @ColumnInfo(name = \"favorite\") @Expose var isFavorite: Boolean = false, @ColumnInfo(name = \"timestamp\") @Expose var timestamp: Long )"],"content":"@Query(\"SELECT * FROM guokr_handpick_news WHERE (timestamp < :timestamp) AND (favorite = 0)\")\n    fun queryAllTimeoutItems(timestamp: Long): List<GuokrHandpickNewsResult>","prompt":""},{"id":4893,"identifierName":"com.marktony.zhihudaily.database.dao.GuokrHandpickNewsDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insertAll(items: List<GuokrHandpickNewsResult>)","prompt":""},{"id":4894,"identifierName":"com.marktony.zhihudaily.database.dao.GuokrHandpickNewsDao","requiredType":["data class GuokrHandpickNewsResult( @ColumnInfo(name = \"image\") @Expose @SerializedName(\"image\") val image: String, @ColumnInfo(name = \"is_replyable\") @Expose @SerializedName(\"is_replyable\") val isReplyable: Boolean, @ColumnInfo(name = \"channels\") @Expose @SerializedName(\"channels\") val channels: List<GuokrHandpickContentChannel>?, @ColumnInfo(name = \"channel_keys\") @Expose @SerializedName(\"channel_keys\") val channelKeys: List<String>?, @ColumnInfo(name = \"preface\") @Expose @SerializedName(\"preface\") val preface: String, @PrimaryKey @ColumnInfo(name = \"id\") @Expose @SerializedName(\"id\") val id: Int = 0, @Embedded @Expose @SerializedName(\"subject\") val subject: GuokrHandpickContentChannel, @ColumnInfo(name = \"copyright\") @Expose @SerializedName(\"copyright\") val copyright: String, @Embedded @Expose @SerializedName(\"author\") val author: GuokrHandpickNewsAuthor, @ColumnInfo(name = \"image_description\") @Expose @SerializedName(\"image_description\") val imageDescription: String, @ColumnInfo(name = \"is_show_summary\") @Expose @SerializedName(\"is_show_summary\") val isShowSummary: Boolean, @ColumnInfo(name = \"minisite_key\") @Expose @SerializedName(\"minisite_key\") val minisiteKey: String, @Embedded @Expose @SerializedName(\"image_info\") val imageInfo: GuokrHandpickContentImageInfo, @ColumnInfo(name = \"subject_key\") @Expose @SerializedName(\"subject_key\") val subjectKey: String, @Embedded @Expose @SerializedName(\"minisite\") val minisite: GuokrHandpickContentMinisite, @ColumnInfo(name = \"tags\") @Expose @SerializedName(\"tags\") val tags: List<String>?, @ColumnInfo(name = \"date_published\") @Expose @SerializedName(\"date_published\") val datePublished: String, @ColumnInfo(name = \"avatar\") @Expose @SerializedName(\"avatar\") val authors: List<GuokrHandpickNewsAuthor>?, @ColumnInfo(name = \"replies_count\") @Expose @SerializedName(\"replies_count\") val repliesCount: Int, @ColumnInfo(name = \"is_author_external\") @Expose @SerializedName(\"is_author_external\") val isAuthorExternal: Boolean, @ColumnInfo(name = \"recommends_count\") @Expose @SerializedName(\"recommends_count\") val recommendsCount: Int, @ColumnInfo(name = \"title_hide\") @Expose @SerializedName(\"title_hide\") val titleHide: String, @ColumnInfo(name = \"date_modified\") @Expose @SerializedName(\"date_modified\") val dateModified: String, @ColumnInfo(name = \"url\") @Expose @SerializedName(\"url\") val url: String, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String, @ColumnInfo(name = \"small_image\") @Expose @SerializedName(\"small_image\") val smallImage: String, @ColumnInfo(name = \"summary\") @Expose @SerializedName(\"summary\") val summary: String, @ColumnInfo(name = \"ukey_author\") @Expose @SerializedName(\"ukey_author\") val ukeyAuthor: String, @ColumnInfo(name = \"date_created\") @Expose @SerializedName(\"date_created\") val dateCreated: String, @ColumnInfo(name = \"resource_url\") @Expose @SerializedName(\"resource_url\") val resourceUrl: String, @ColumnInfo(name = \"favorite\") @Expose var isFavorite: Boolean = false, @ColumnInfo(name = \"timestamp\") @Expose var timestamp: Long )"],"content":"@Update\n    fun update(item: GuokrHandpickNewsResult)","prompt":""},{"id":4895,"identifierName":"com.marktony.zhihudaily.database.dao.GuokrHandpickNewsDao","requiredType":["data class GuokrHandpickNewsResult( @ColumnInfo(name = \"image\") @Expose @SerializedName(\"image\") val image: String, @ColumnInfo(name = \"is_replyable\") @Expose @SerializedName(\"is_replyable\") val isReplyable: Boolean, @ColumnInfo(name = \"channels\") @Expose @SerializedName(\"channels\") val channels: List<GuokrHandpickContentChannel>?, @ColumnInfo(name = \"channel_keys\") @Expose @SerializedName(\"channel_keys\") val channelKeys: List<String>?, @ColumnInfo(name = \"preface\") @Expose @SerializedName(\"preface\") val preface: String, @PrimaryKey @ColumnInfo(name = \"id\") @Expose @SerializedName(\"id\") val id: Int = 0, @Embedded @Expose @SerializedName(\"subject\") val subject: GuokrHandpickContentChannel, @ColumnInfo(name = \"copyright\") @Expose @SerializedName(\"copyright\") val copyright: String, @Embedded @Expose @SerializedName(\"author\") val author: GuokrHandpickNewsAuthor, @ColumnInfo(name = \"image_description\") @Expose @SerializedName(\"image_description\") val imageDescription: String, @ColumnInfo(name = \"is_show_summary\") @Expose @SerializedName(\"is_show_summary\") val isShowSummary: Boolean, @ColumnInfo(name = \"minisite_key\") @Expose @SerializedName(\"minisite_key\") val minisiteKey: String, @Embedded @Expose @SerializedName(\"image_info\") val imageInfo: GuokrHandpickContentImageInfo, @ColumnInfo(name = \"subject_key\") @Expose @SerializedName(\"subject_key\") val subjectKey: String, @Embedded @Expose @SerializedName(\"minisite\") val minisite: GuokrHandpickContentMinisite, @ColumnInfo(name = \"tags\") @Expose @SerializedName(\"tags\") val tags: List<String>?, @ColumnInfo(name = \"date_published\") @Expose @SerializedName(\"date_published\") val datePublished: String, @ColumnInfo(name = \"avatar\") @Expose @SerializedName(\"avatar\") val authors: List<GuokrHandpickNewsAuthor>?, @ColumnInfo(name = \"replies_count\") @Expose @SerializedName(\"replies_count\") val repliesCount: Int, @ColumnInfo(name = \"is_author_external\") @Expose @SerializedName(\"is_author_external\") val isAuthorExternal: Boolean, @ColumnInfo(name = \"recommends_count\") @Expose @SerializedName(\"recommends_count\") val recommendsCount: Int, @ColumnInfo(name = \"title_hide\") @Expose @SerializedName(\"title_hide\") val titleHide: String, @ColumnInfo(name = \"date_modified\") @Expose @SerializedName(\"date_modified\") val dateModified: String, @ColumnInfo(name = \"url\") @Expose @SerializedName(\"url\") val url: String, @ColumnInfo(name = \"title\") @Expose @SerializedName(\"title\") val title: String, @ColumnInfo(name = \"small_image\") @Expose @SerializedName(\"small_image\") val smallImage: String, @ColumnInfo(name = \"summary\") @Expose @SerializedName(\"summary\") val summary: String, @ColumnInfo(name = \"ukey_author\") @Expose @SerializedName(\"ukey_author\") val ukeyAuthor: String, @ColumnInfo(name = \"date_created\") @Expose @SerializedName(\"date_created\") val dateCreated: String, @ColumnInfo(name = \"resource_url\") @Expose @SerializedName(\"resource_url\") val resourceUrl: String, @ColumnInfo(name = \"favorite\") @Expose var isFavorite: Boolean = false, @ColumnInfo(name = \"timestamp\") @Expose var timestamp: Long )"],"content":"@Delete\n    fun delete(item: GuokrHandpickNewsResult)","prompt":""},{"id":4896,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Query(\n        \"\"\"SELECT * FROM brewers\n        WHERE instr(normalized_name, :q1) > 0\n        AND (:q2 IS NULL OR instr(normalized_name, :q2) > 0)\n        AND (:q3 IS NULL OR instr(normalized_name, :q3) > 0)\"\"\"\n    )\n    abstract fun search(\n        q1: String,\n        q2: String? = null,\n        q3: String? = null\n    ): Flow<List<BrewerEntity>>","prompt":""},{"id":4897,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Query(\"SELECT id FROM brewers WHERE accessed IS NOT NULL ORDER BY accessed DESC\")\n    abstract fun lastAccessed(): Flow<List<Int>>","prompt":""},{"id":4898,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Query(\"SELECT * FROM brewers WHERE id=:key\")\n    abstract suspend fun get(key: Int): BrewerEntity?","prompt":""},{"id":4899,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Transaction\n    open suspend fun get(keys: List<Int>): List<BrewerEntity> {\n        return getBatch(keys, ::getList)\n    }","prompt":""},{"id":4900,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Query(\"SELECT * FROM brewers WHERE id IN (:keys)\")\n    abstract suspend fun getList(keys: List<Int>): List<BrewerEntity>","prompt":""},{"id":4901,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Query(\"SELECT * FROM brewers WHERE id=:key\")\n    abstract fun getStream(key: Int): Flow<BrewerEntity?>","prompt":""},{"id":4902,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Query(\"SELECT * FROM brewers\")\n    abstract suspend fun getAll(): List<BrewerEntity>","prompt":""},{"id":4903,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Query(\"SELECT * FROM brewers\")\n    abstract fun getAllStream(): Flow<List<BrewerEntity>>","prompt":""},{"id":4904,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Query(\"SELECT id FROM brewers\")\n    abstract fun getKeys(): List<Int>","prompt":""},{"id":4905,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Query(\"SELECT id FROM brewers\")\n    abstract fun getKeysStream(): Flow<List<Int>>","prompt":""},{"id":4906,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Transaction\n    open suspend fun put(value: BrewerEntity): BrewerEntity? {\n        return putMerged(value, ::get)\n    }","prompt":""},{"id":4907,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Transaction\n    open suspend fun put(values: List<BrewerEntity>): List<BrewerEntity> {\n        return putBatch(values, ::get)\n    }","prompt":""},{"id":4908,"identifierName":"quickbeer.android.domain.brewer.store.BrewerDao","requiredType":[],"content":"@Query(\"DELETE FROM brewers WHERE id=:key\")\n    abstract suspend fun delete(key: Int): Int","prompt":""},{"id":4909,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.NewsResourceDao","requiredType":[],"content":"@Transaction\n    @Query(\n        value = \"\"\"\n            SELECT * FROM news_resources\n            ORDER BY publish_date DESC\n    \"\"\"\n    )\n    fun getNewsResourcesStream(): Flow<List<PopulatedNewsResource>>","prompt":""},{"id":4910,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.NewsResourceDao","requiredType":[],"content":"@Transaction\n    @Query(\n        value = \"\"\"\n            SELECT * FROM news_resources\n            WHERE id in\n            (\n                SELECT news_resource_id FROM news_resources_topics\n                WHERE topic_id IN (:filterTopicIds)\n            )\n            OR id in\n            (\n                SELECT news_resource_id FROM news_resources_authors\n                WHERE author_id  IN (:filterAuthorIds)\n            )\n            ORDER BY publish_date DESC\n    \"\"\"\n    )\n    fun getNewsResourcesStream(\n        filterAuthorIds: Set<String> = emptySet(),\n        filterTopicIds: Set<String> = emptySet(),\n    ): Flow<List<PopulatedNewsResource>>","prompt":""},{"id":4911,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.NewsResourceDao","requiredType":[],"content":"/**\n     * Inserts [entities] into the db if they don't exist, and ignores those that do\n     */\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insertOrIgnoreNewsResources(entities: List<NewsResourceEntity>): List<Long>","prompt":""},{"id":4912,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.NewsResourceDao","requiredType":[],"content":"/**\n     * Updates [entities] in the db that match the primary key, and no-ops if they don't\n     */\n    @Update\n    suspend fun updateNewsResources(entities: List<NewsResourceEntity>)","prompt":""},{"id":4913,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.NewsResourceDao","requiredType":[],"content":"/**\n     * Inserts or updates [newsResourceEntities] in the db under the specified primary keys\n     */\n    @Upsert\n    suspend fun upsertNewsResources(newsResourceEntities: List<NewsResourceEntity>)","prompt":""},{"id":4914,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.NewsResourceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insertOrIgnoreTopicCrossRefEntities(\n        newsResourceTopicCrossReferences: List<NewsResourceTopicCrossRef>\n    )","prompt":""},{"id":4915,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.NewsResourceDao","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.IGNORE)\n    suspend fun insertOrIgnoreAuthorCrossRefEntities(\n        newsResourceAuthorCrossReferences: List<NewsResourceAuthorCrossRef>\n    )","prompt":""},{"id":4916,"identifierName":"com.google.samples.apps.nowinandroid.core.database.dao.NewsResourceDao","requiredType":[],"content":"/**\n     * Deletes rows in the db matching the specified [ids]\n     */\n    @Query(\n        value = \"\"\"\n            DELETE FROM news_resources\n            WHERE id in (:ids)\n        \"\"\"\n    )\n    suspend fun deleteNewsResources(ids: List<String>)","prompt":""},{"id":4917,"identifierName":"com.guerinet.mymartlet.util.room.daos.SemesterDao","requiredType":[],"content":"/**\n     * Returns the [Semester] with the [semesterId]\n     */\n    @Query(\"SELECT * FROM Semester WHERE id = :semesterId\")\n    abstract fun get(semesterId: Int): LiveData<Semester>","prompt":""},{"id":4918,"identifierName":"com.guerinet.mymartlet.util.room.daos.SemesterDao","requiredType":[],"content":"/**\n     * Returns the list of all [Semester]s\n     */\n    @Query(\"SELECT * FROM Semester\")\n    abstract fun getAll(): LiveData<List<Semester>>","prompt":""},{"id":4919,"identifierName":"com.guerinet.mymartlet.util.room.daos.SemesterDao","requiredType":[],"content":"/**\n     * Returns the list of all [Semester]s\n     */\n    @Query(\"SELECT * FROM Semester\")\n    abstract fun getSemesters(): List<Semester>","prompt":""},{"id":4920,"identifierName":"com.guerinet.mymartlet.util.room.daos.SemesterDao","requiredType":[],"content":"/**\n     * Deletes all of the stored [Semester]s\n     */\n    @Query(\"DELETE FROM Semester\")\n    abstract fun deleteAll()","prompt":""},{"id":4921,"identifierName":"com.guerinet.mymartlet.util.room.daos.SemesterDao","requiredType":[],"content":"/**\n     * Updates the stored [semesters]\n     */\n    @Transaction\n    open fun update(semesters: List<Semester>) = update(semesters, this::deleteAll)","prompt":""},{"id":4922,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.game.RoomGameService","requiredType":[],"content":"@Query(\"select * from game\")\n    fun findAll(): Flowable<List<RoomGame>>","prompt":""},{"id":4923,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.game.RoomGameService","requiredType":[],"content":"@Query(\"select * from game where id = :id\")\n    fun findById(id: Long): Flowable<List<RoomGame>>","prompt":""},{"id":4924,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.game.RoomGameService","requiredType":[],"content":"@Insert(onConflict = OnConflictStrategy.ABORT)\n    fun insert(game: RoomGame): Long","prompt":""},{"id":4925,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.game.RoomGameService","requiredType":[],"content":"@Update\n    fun update(game: RoomGame): Int","prompt":""},{"id":4926,"identifierName":"com.piticlistudio.playednext.data.repository.datasource.room.game.RoomGameService","requiredType":[],"content":"@Query(\"select * from game where name LIKE :name\")\n    fun findByName(name: String): Flowable<List<RoomGame>>","prompt":""}]